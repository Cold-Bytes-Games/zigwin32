//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (59)
//--------------------------------------------------------------------------------
const CLSID_RDPViewer_Value = @import("../zig.zig").Guid.initString("32BE5ED2-5C86-480F-A914-0FF8885A1B3F");
pub const CLSID_RDPViewer = &CLSID_RDPViewer_Value;

const CLSID_RDPSRAPISessionProperties_Value = @import("../zig.zig").Guid.initString("DD7594FF-EA2A-4C06-8FDF-132DE48B6510");
pub const CLSID_RDPSRAPISessionProperties = &CLSID_RDPSRAPISessionProperties_Value;

const CLSID_RDPSRAPIInvitationManager_Value = @import("../zig.zig").Guid.initString("53D9C9DB-75AB-4271-948A-4C4EB36A8F2B");
pub const CLSID_RDPSRAPIInvitationManager = &CLSID_RDPSRAPIInvitationManager_Value;

const CLSID_RDPSRAPIInvitation_Value = @import("../zig.zig").Guid.initString("49174DC6-0731-4B5E-8EE1-83A63D3868FA");
pub const CLSID_RDPSRAPIInvitation = &CLSID_RDPSRAPIInvitation_Value;

const CLSID_RDPSRAPIAttendeeManager_Value = @import("../zig.zig").Guid.initString("D7B13A01-F7D4-42A6-8595-12FC8C24E851");
pub const CLSID_RDPSRAPIAttendeeManager = &CLSID_RDPSRAPIAttendeeManager_Value;

const CLSID_RDPSRAPIAttendee_Value = @import("../zig.zig").Guid.initString("74F93BB5-755F-488E-8A29-2390108AEF55");
pub const CLSID_RDPSRAPIAttendee = &CLSID_RDPSRAPIAttendee_Value;

const CLSID_RDPSRAPIAttendeeDisconnectInfo_Value = @import("../zig.zig").Guid.initString("B47D7250-5BDB-405D-B487-CAAD9C56F4F8");
pub const CLSID_RDPSRAPIAttendeeDisconnectInfo = &CLSID_RDPSRAPIAttendeeDisconnectInfo_Value;

const CLSID_RDPSRAPIApplicationFilter_Value = @import("../zig.zig").Guid.initString("E35ACE89-C7E8-427E-A4F9-B9DA072826BD");
pub const CLSID_RDPSRAPIApplicationFilter = &CLSID_RDPSRAPIApplicationFilter_Value;

const CLSID_RDPSRAPIApplicationList_Value = @import("../zig.zig").Guid.initString("9E31C815-7433-4876-97FB-ED59FE2BAA22");
pub const CLSID_RDPSRAPIApplicationList = &CLSID_RDPSRAPIApplicationList_Value;

const CLSID_RDPSRAPIApplication_Value = @import("../zig.zig").Guid.initString("C116A484-4B25-4B9F-8A54-B934B06E57FA");
pub const CLSID_RDPSRAPIApplication = &CLSID_RDPSRAPIApplication_Value;

const CLSID_RDPSRAPIWindowList_Value = @import("../zig.zig").Guid.initString("9C21E2B8-5DD4-42CC-81BA-1C099852E6FA");
pub const CLSID_RDPSRAPIWindowList = &CLSID_RDPSRAPIWindowList_Value;

const CLSID_RDPSRAPIWindow_Value = @import("../zig.zig").Guid.initString("03CF46DB-CE45-4D36-86ED-ED28B74398BF");
pub const CLSID_RDPSRAPIWindow = &CLSID_RDPSRAPIWindow_Value;

const CLSID_RDPSRAPITcpConnectionInfo_Value = @import("../zig.zig").Guid.initString("BE49DB3F-EBB6-4278-8CE0-D5455833EAEE");
pub const CLSID_RDPSRAPITcpConnectionInfo = &CLSID_RDPSRAPITcpConnectionInfo_Value;

const CLSID_RDPSession_Value = @import("../zig.zig").Guid.initString("9B78F0E6-3E05-4A5B-B2E8-E743A8956B65");
pub const CLSID_RDPSession = &CLSID_RDPSession_Value;

const CLSID_RDPSRAPIFrameBuffer_Value = @import("../zig.zig").Guid.initString("A4F66BCC-538E-4101-951D-30847ADB5101");
pub const CLSID_RDPSRAPIFrameBuffer = &CLSID_RDPSRAPIFrameBuffer_Value;

const CLSID_RDPTransportStreamBuffer_Value = @import("../zig.zig").Guid.initString("8D4A1C69-F17F-4549-A699-761C6E6B5C0A");
pub const CLSID_RDPTransportStreamBuffer = &CLSID_RDPTransportStreamBuffer_Value;

const CLSID_RDPTransportStreamEvents_Value = @import("../zig.zig").Guid.initString("31E3AB20-5350-483F-9DC6-6748665EFDEB");
pub const CLSID_RDPTransportStreamEvents = &CLSID_RDPTransportStreamEvents_Value;

pub const CTRL_LEVEL = extern enum(i32) {
    MIN = 0,
    INVALID = 0,
    NONE = 1,
    VIEW = 2,
    INTERACTIVE = 3,
    REQCTRL_VIEW = 4,
    REQCTRL_INTERACTIVE = 5,
    MAX = 5,
};
pub const CTRL_LEVEL_MIN = CTRL_LEVEL.MIN;
pub const CTRL_LEVEL_INVALID = CTRL_LEVEL.INVALID;
pub const CTRL_LEVEL_NONE = CTRL_LEVEL.NONE;
pub const CTRL_LEVEL_VIEW = CTRL_LEVEL.VIEW;
pub const CTRL_LEVEL_INTERACTIVE = CTRL_LEVEL.INTERACTIVE;
pub const CTRL_LEVEL_REQCTRL_VIEW = CTRL_LEVEL.REQCTRL_VIEW;
pub const CTRL_LEVEL_REQCTRL_INTERACTIVE = CTRL_LEVEL.REQCTRL_INTERACTIVE;
pub const CTRL_LEVEL_MAX = CTRL_LEVEL.MAX;

pub const ATTENDEE_DISCONNECT_REASON = extern enum(i32) {
    MIN = 0,
    APP = 0,
    ERR = 1,
    CLI = 2,
    MAX = 2,
};
pub const ATTENDEE_DISCONNECT_REASON_MIN = ATTENDEE_DISCONNECT_REASON.MIN;
pub const ATTENDEE_DISCONNECT_REASON_APP = ATTENDEE_DISCONNECT_REASON.APP;
pub const ATTENDEE_DISCONNECT_REASON_ERR = ATTENDEE_DISCONNECT_REASON.ERR;
pub const ATTENDEE_DISCONNECT_REASON_CLI = ATTENDEE_DISCONNECT_REASON.CLI;
pub const ATTENDEE_DISCONNECT_REASON_MAX = ATTENDEE_DISCONNECT_REASON.MAX;

pub const CHANNEL_PRIORITY = extern enum(i32) {
    LO = 0,
    MED = 1,
    HI = 2,
};
pub const CHANNEL_PRIORITY_LO = CHANNEL_PRIORITY.LO;
pub const CHANNEL_PRIORITY_MED = CHANNEL_PRIORITY.MED;
pub const CHANNEL_PRIORITY_HI = CHANNEL_PRIORITY.HI;

pub const CHANNEL_FLAGS = extern enum(i32) {
    LEGACY = 1,
    UNCOMPRESSED = 2,
    DYNAMIC = 4,
};
pub const CHANNEL_FLAGS_LEGACY = CHANNEL_FLAGS.LEGACY;
pub const CHANNEL_FLAGS_UNCOMPRESSED = CHANNEL_FLAGS.UNCOMPRESSED;
pub const CHANNEL_FLAGS_DYNAMIC = CHANNEL_FLAGS.DYNAMIC;

pub const CHANNEL_ACCESS_ENUM = extern enum(i32) {
    NONE = 0,
    SENDRECEIVE = 1,
};
pub const CHANNEL_ACCESS_ENUM_NONE = CHANNEL_ACCESS_ENUM.NONE;
pub const CHANNEL_ACCESS_ENUM_SENDRECEIVE = CHANNEL_ACCESS_ENUM.SENDRECEIVE;

pub const RDPENCOMAPI_ATTENDEE_FLAGS = extern enum(i32) {
    ATTENDEE_FLAGS_LOCAL = 1,
};
pub const ATTENDEE_FLAGS_LOCAL = RDPENCOMAPI_ATTENDEE_FLAGS.ATTENDEE_FLAGS_LOCAL;

pub const RDPSRAPI_WND_FLAGS = extern enum(i32) {
    WND_FLAG_PRIVILEGED = 1,
};
pub const WND_FLAG_PRIVILEGED = RDPSRAPI_WND_FLAGS.WND_FLAG_PRIVILEGED;

pub const RDPSRAPI_APP_FLAGS = extern enum(i32) {
    APP_FLAG_PRIVILEGED = 1,
};
pub const APP_FLAG_PRIVILEGED = RDPSRAPI_APP_FLAGS.APP_FLAG_PRIVILEGED;

pub const RDPSRAPI_MOUSE_BUTTON_TYPE = extern enum(i32) {
    RDPSRAPI_MOUSE_BUTTON_BUTTON1 = 0,
    RDPSRAPI_MOUSE_BUTTON_BUTTON2 = 1,
    RDPSRAPI_MOUSE_BUTTON_BUTTON3 = 2,
    RDPSRAPI_MOUSE_BUTTON_XBUTTON1 = 3,
    RDPSRAPI_MOUSE_BUTTON_XBUTTON2 = 4,
    RDPSRAPI_MOUSE_BUTTON_XBUTTON3 = 5,
};
pub const RDPSRAPI_MOUSE_BUTTON_BUTTON1 = RDPSRAPI_MOUSE_BUTTON_TYPE.RDPSRAPI_MOUSE_BUTTON_BUTTON1;
pub const RDPSRAPI_MOUSE_BUTTON_BUTTON2 = RDPSRAPI_MOUSE_BUTTON_TYPE.RDPSRAPI_MOUSE_BUTTON_BUTTON2;
pub const RDPSRAPI_MOUSE_BUTTON_BUTTON3 = RDPSRAPI_MOUSE_BUTTON_TYPE.RDPSRAPI_MOUSE_BUTTON_BUTTON3;
pub const RDPSRAPI_MOUSE_BUTTON_XBUTTON1 = RDPSRAPI_MOUSE_BUTTON_TYPE.RDPSRAPI_MOUSE_BUTTON_XBUTTON1;
pub const RDPSRAPI_MOUSE_BUTTON_XBUTTON2 = RDPSRAPI_MOUSE_BUTTON_TYPE.RDPSRAPI_MOUSE_BUTTON_XBUTTON2;
pub const RDPSRAPI_MOUSE_BUTTON_XBUTTON3 = RDPSRAPI_MOUSE_BUTTON_TYPE.RDPSRAPI_MOUSE_BUTTON_XBUTTON3;

pub const RDPSRAPI_KBD_CODE_TYPE = extern enum(i32) {
    RDPSRAPI_KBD_CODE_SCANCODE = 0,
    RDPSRAPI_KBD_CODE_UNICODE = 1,
};
pub const RDPSRAPI_KBD_CODE_SCANCODE = RDPSRAPI_KBD_CODE_TYPE.RDPSRAPI_KBD_CODE_SCANCODE;
pub const RDPSRAPI_KBD_CODE_UNICODE = RDPSRAPI_KBD_CODE_TYPE.RDPSRAPI_KBD_CODE_UNICODE;

pub const RDPSRAPI_KBD_SYNC_FLAG = extern enum(i32) {
    SCROLL_LOCK = 1,
    NUM_LOCK = 2,
    CAPS_LOCK = 4,
    KANA_LOCK = 8,
};
pub const RDPSRAPI_KBD_SYNC_FLAG_SCROLL_LOCK = RDPSRAPI_KBD_SYNC_FLAG.SCROLL_LOCK;
pub const RDPSRAPI_KBD_SYNC_FLAG_NUM_LOCK = RDPSRAPI_KBD_SYNC_FLAG.NUM_LOCK;
pub const RDPSRAPI_KBD_SYNC_FLAG_CAPS_LOCK = RDPSRAPI_KBD_SYNC_FLAG.CAPS_LOCK;
pub const RDPSRAPI_KBD_SYNC_FLAG_KANA_LOCK = RDPSRAPI_KBD_SYNC_FLAG.KANA_LOCK;

const IID_IRDPSRAPIDebug_Value = @import("../zig.zig").Guid.initString("AA1E42B5-496D-4CA4-A690-348DCB2EC4AD");
pub const IID_IRDPSRAPIDebug = &IID_IRDPSRAPIDebug_Value;
pub const IRDPSRAPIDebug = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        put_CLXCmdLine: fn(
            self: *const IRDPSRAPIDebug,
            CLXCmdLine: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CLXCmdLine: fn(
            self: *const IRDPSRAPIDebug,
            pCLXCmdLine: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIDebug_put_CLXCmdLine(self: *const T, CLXCmdLine: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIDebug.VTable, self.vtable).put_CLXCmdLine(@ptrCast(*const IRDPSRAPIDebug, self), CLXCmdLine);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIDebug_get_CLXCmdLine(self: *const T, pCLXCmdLine: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIDebug.VTable, self.vtable).get_CLXCmdLine(@ptrCast(*const IRDPSRAPIDebug, self), pCLXCmdLine);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIPerfCounterLogger_Value = @import("../zig.zig").Guid.initString("071C2533-0FA4-4E8F-AE83-9C10B4305AB5");
pub const IID_IRDPSRAPIPerfCounterLogger = &IID_IRDPSRAPIPerfCounterLogger_Value;
pub const IRDPSRAPIPerfCounterLogger = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LogValue: fn(
            self: *const IRDPSRAPIPerfCounterLogger,
            lValue: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIPerfCounterLogger_LogValue(self: *const T, lValue: i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIPerfCounterLogger.VTable, self.vtable).LogValue(@ptrCast(*const IRDPSRAPIPerfCounterLogger, self), lValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIPerfCounterLoggingManager_Value = @import("../zig.zig").Guid.initString("9A512C86-AC6E-4A8E-B1A4-FCEF363F6E64");
pub const IID_IRDPSRAPIPerfCounterLoggingManager = &IID_IRDPSRAPIPerfCounterLoggingManager_Value;
pub const IRDPSRAPIPerfCounterLoggingManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateLogger: fn(
            self: *const IRDPSRAPIPerfCounterLoggingManager,
            bstrCounterName: BSTR,
            ppLogger: **IRDPSRAPIPerfCounterLogger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIPerfCounterLoggingManager_CreateLogger(self: *const T, bstrCounterName: BSTR, ppLogger: **IRDPSRAPIPerfCounterLogger) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIPerfCounterLoggingManager.VTable, self.vtable).CreateLogger(@ptrCast(*const IRDPSRAPIPerfCounterLoggingManager, self), bstrCounterName, ppLogger);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIAudioStream_Value = @import("../zig.zig").Guid.initString("E3E30EF9-89C6-4541-BA3B-19336AC6D31C");
pub const IID_IRDPSRAPIAudioStream = &IID_IRDPSRAPIAudioStream_Value;
pub const IRDPSRAPIAudioStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IRDPSRAPIAudioStream,
            pnPeriodInHundredNsIntervals: *i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: fn(
            self: *const IRDPSRAPIAudioStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: fn(
            self: *const IRDPSRAPIAudioStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBuffer: fn(
            self: *const IRDPSRAPIAudioStream,
            ppbData: [*]*u8,
            pcbData: *u32,
            pTimestamp: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeBuffer: fn(
            self: *const IRDPSRAPIAudioStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAudioStream_Initialize(self: *const T, pnPeriodInHundredNsIntervals: *i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAudioStream.VTable, self.vtable).Initialize(@ptrCast(*const IRDPSRAPIAudioStream, self), pnPeriodInHundredNsIntervals);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAudioStream_Start(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAudioStream.VTable, self.vtable).Start(@ptrCast(*const IRDPSRAPIAudioStream, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAudioStream_Stop(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAudioStream.VTable, self.vtable).Stop(@ptrCast(*const IRDPSRAPIAudioStream, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAudioStream_GetBuffer(self: *const T, ppbData: [*]*u8, pcbData: *u32, pTimestamp: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAudioStream.VTable, self.vtable).GetBuffer(@ptrCast(*const IRDPSRAPIAudioStream, self), ppbData, pcbData, pTimestamp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAudioStream_FreeBuffer(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAudioStream.VTable, self.vtable).FreeBuffer(@ptrCast(*const IRDPSRAPIAudioStream, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIClipboardUseEvents_Value = @import("../zig.zig").Guid.initString("D559F59A-7A27-4138-8763-247CE5F659A8");
pub const IID_IRDPSRAPIClipboardUseEvents = &IID_IRDPSRAPIClipboardUseEvents_Value;
pub const IRDPSRAPIClipboardUseEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnPasteFromClipboard: fn(
            self: *const IRDPSRAPIClipboardUseEvents,
            clipboardFormat: u32,
            pAttendee: *IDispatch,
            pRetVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIClipboardUseEvents_OnPasteFromClipboard(self: *const T, clipboardFormat: u32, pAttendee: *IDispatch, pRetVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIClipboardUseEvents.VTable, self.vtable).OnPasteFromClipboard(@ptrCast(*const IRDPSRAPIClipboardUseEvents, self), clipboardFormat, pAttendee, pRetVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIWindow_Value = @import("../zig.zig").Guid.initString("BEAFE0F9-C77B-4933-BA9F-A24CDDCC27CF");
pub const IID_IRDPSRAPIWindow = &IID_IRDPSRAPIWindow_Value;
pub const IRDPSRAPIWindow = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Id: fn(
            self: *const IRDPSRAPIWindow,
            pRetVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Application: fn(
            self: *const IRDPSRAPIWindow,
            pApplication: **IRDPSRAPIApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Shared: fn(
            self: *const IRDPSRAPIWindow,
            pRetVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Shared: fn(
            self: *const IRDPSRAPIWindow,
            NewVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const IRDPSRAPIWindow,
            pRetVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: fn(
            self: *const IRDPSRAPIWindow,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Flags: fn(
            self: *const IRDPSRAPIWindow,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIWindow_get_Id(self: *const T, pRetVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIWindow.VTable, self.vtable).get_Id(@ptrCast(*const IRDPSRAPIWindow, self), pRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIWindow_get_Application(self: *const T, pApplication: **IRDPSRAPIApplication) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIWindow.VTable, self.vtable).get_Application(@ptrCast(*const IRDPSRAPIWindow, self), pApplication);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIWindow_get_Shared(self: *const T, pRetVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIWindow.VTable, self.vtable).get_Shared(@ptrCast(*const IRDPSRAPIWindow, self), pRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIWindow_put_Shared(self: *const T, NewVal: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIWindow.VTable, self.vtable).put_Shared(@ptrCast(*const IRDPSRAPIWindow, self), NewVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIWindow_get_Name(self: *const T, pRetVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIWindow.VTable, self.vtable).get_Name(@ptrCast(*const IRDPSRAPIWindow, self), pRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIWindow_Show(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIWindow.VTable, self.vtable).Show(@ptrCast(*const IRDPSRAPIWindow, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIWindow_get_Flags(self: *const T, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIWindow.VTable, self.vtable).get_Flags(@ptrCast(*const IRDPSRAPIWindow, self), pdwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIWindowList_Value = @import("../zig.zig").Guid.initString("8A05CE44-715A-4116-A189-A118F30A07BD");
pub const IID_IRDPSRAPIWindowList = &IID_IRDPSRAPIWindowList_Value;
pub const IRDPSRAPIWindowList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const IRDPSRAPIWindowList,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const IRDPSRAPIWindowList,
            item: i32,
            pWindow: **IRDPSRAPIWindow,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIWindowList_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIWindowList.VTable, self.vtable).get__NewEnum(@ptrCast(*const IRDPSRAPIWindowList, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIWindowList_get_Item(self: *const T, item: i32, pWindow: **IRDPSRAPIWindow) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIWindowList.VTable, self.vtable).get_Item(@ptrCast(*const IRDPSRAPIWindowList, self), item, pWindow);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIApplication_Value = @import("../zig.zig").Guid.initString("41E7A09D-EB7A-436E-935D-780CA2628324");
pub const IID_IRDPSRAPIApplication = &IID_IRDPSRAPIApplication_Value;
pub const IRDPSRAPIApplication = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Windows: fn(
            self: *const IRDPSRAPIApplication,
            pWindowList: **IRDPSRAPIWindowList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Id: fn(
            self: *const IRDPSRAPIApplication,
            pRetVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Shared: fn(
            self: *const IRDPSRAPIApplication,
            pRetVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Shared: fn(
            self: *const IRDPSRAPIApplication,
            NewVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const IRDPSRAPIApplication,
            pRetVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Flags: fn(
            self: *const IRDPSRAPIApplication,
            pdwFlags: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIApplication_get_Windows(self: *const T, pWindowList: **IRDPSRAPIWindowList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIApplication.VTable, self.vtable).get_Windows(@ptrCast(*const IRDPSRAPIApplication, self), pWindowList);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIApplication_get_Id(self: *const T, pRetVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIApplication.VTable, self.vtable).get_Id(@ptrCast(*const IRDPSRAPIApplication, self), pRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIApplication_get_Shared(self: *const T, pRetVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIApplication.VTable, self.vtable).get_Shared(@ptrCast(*const IRDPSRAPIApplication, self), pRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIApplication_put_Shared(self: *const T, NewVal: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIApplication.VTable, self.vtable).put_Shared(@ptrCast(*const IRDPSRAPIApplication, self), NewVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIApplication_get_Name(self: *const T, pRetVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIApplication.VTable, self.vtable).get_Name(@ptrCast(*const IRDPSRAPIApplication, self), pRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIApplication_get_Flags(self: *const T, pdwFlags: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIApplication.VTable, self.vtable).get_Flags(@ptrCast(*const IRDPSRAPIApplication, self), pdwFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIApplicationList_Value = @import("../zig.zig").Guid.initString("D4B4AEB3-22DC-4837-B3B6-42EA2517849A");
pub const IID_IRDPSRAPIApplicationList = &IID_IRDPSRAPIApplicationList_Value;
pub const IRDPSRAPIApplicationList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const IRDPSRAPIApplicationList,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const IRDPSRAPIApplicationList,
            item: i32,
            pApplication: **IRDPSRAPIApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIApplicationList_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIApplicationList.VTable, self.vtable).get__NewEnum(@ptrCast(*const IRDPSRAPIApplicationList, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIApplicationList_get_Item(self: *const T, item: i32, pApplication: **IRDPSRAPIApplication) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIApplicationList.VTable, self.vtable).get_Item(@ptrCast(*const IRDPSRAPIApplicationList, self), item, pApplication);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIApplicationFilter_Value = @import("../zig.zig").Guid.initString("D20F10CA-6637-4F06-B1D5-277EA7E5160D");
pub const IID_IRDPSRAPIApplicationFilter = &IID_IRDPSRAPIApplicationFilter_Value;
pub const IRDPSRAPIApplicationFilter = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Applications: fn(
            self: *const IRDPSRAPIApplicationFilter,
            pApplications: **IRDPSRAPIApplicationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Windows: fn(
            self: *const IRDPSRAPIApplicationFilter,
            pWindows: **IRDPSRAPIWindowList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Enabled: fn(
            self: *const IRDPSRAPIApplicationFilter,
            pRetVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Enabled: fn(
            self: *const IRDPSRAPIApplicationFilter,
            NewVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIApplicationFilter_get_Applications(self: *const T, pApplications: **IRDPSRAPIApplicationList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIApplicationFilter.VTable, self.vtable).get_Applications(@ptrCast(*const IRDPSRAPIApplicationFilter, self), pApplications);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIApplicationFilter_get_Windows(self: *const T, pWindows: **IRDPSRAPIWindowList) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIApplicationFilter.VTable, self.vtable).get_Windows(@ptrCast(*const IRDPSRAPIApplicationFilter, self), pWindows);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIApplicationFilter_get_Enabled(self: *const T, pRetVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIApplicationFilter.VTable, self.vtable).get_Enabled(@ptrCast(*const IRDPSRAPIApplicationFilter, self), pRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIApplicationFilter_put_Enabled(self: *const T, NewVal: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIApplicationFilter.VTable, self.vtable).put_Enabled(@ptrCast(*const IRDPSRAPIApplicationFilter, self), NewVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPISessionProperties_Value = @import("../zig.zig").Guid.initString("339B24F2-9BC0-4F16-9AAC-F165433D13D4");
pub const IID_IRDPSRAPISessionProperties = &IID_IRDPSRAPISessionProperties_Value;
pub const IRDPSRAPISessionProperties = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Property: fn(
            self: *const IRDPSRAPISessionProperties,
            PropertyName: BSTR,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Property: fn(
            self: *const IRDPSRAPISessionProperties,
            PropertyName: BSTR,
            newVal: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISessionProperties_get_Property(self: *const T, PropertyName: BSTR, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISessionProperties.VTable, self.vtable).get_Property(@ptrCast(*const IRDPSRAPISessionProperties, self), PropertyName, pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISessionProperties_put_Property(self: *const T, PropertyName: BSTR, newVal: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISessionProperties.VTable, self.vtable).put_Property(@ptrCast(*const IRDPSRAPISessionProperties, self), PropertyName, newVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIInvitation_Value = @import("../zig.zig").Guid.initString("4FAC1D43-FC51-45BB-B1B4-2B53AA562FA3");
pub const IID_IRDPSRAPIInvitation = &IID_IRDPSRAPIInvitation_Value;
pub const IRDPSRAPIInvitation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ConnectionString: fn(
            self: *const IRDPSRAPIInvitation,
            pbstrVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_GroupName: fn(
            self: *const IRDPSRAPIInvitation,
            pbstrVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Password: fn(
            self: *const IRDPSRAPIInvitation,
            pbstrVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AttendeeLimit: fn(
            self: *const IRDPSRAPIInvitation,
            pRetVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AttendeeLimit: fn(
            self: *const IRDPSRAPIInvitation,
            NewVal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Revoked: fn(
            self: *const IRDPSRAPIInvitation,
            pRetVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Revoked: fn(
            self: *const IRDPSRAPIInvitation,
            NewVal: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIInvitation_get_ConnectionString(self: *const T, pbstrVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIInvitation.VTable, self.vtable).get_ConnectionString(@ptrCast(*const IRDPSRAPIInvitation, self), pbstrVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIInvitation_get_GroupName(self: *const T, pbstrVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIInvitation.VTable, self.vtable).get_GroupName(@ptrCast(*const IRDPSRAPIInvitation, self), pbstrVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIInvitation_get_Password(self: *const T, pbstrVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIInvitation.VTable, self.vtable).get_Password(@ptrCast(*const IRDPSRAPIInvitation, self), pbstrVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIInvitation_get_AttendeeLimit(self: *const T, pRetVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIInvitation.VTable, self.vtable).get_AttendeeLimit(@ptrCast(*const IRDPSRAPIInvitation, self), pRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIInvitation_put_AttendeeLimit(self: *const T, NewVal: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIInvitation.VTable, self.vtable).put_AttendeeLimit(@ptrCast(*const IRDPSRAPIInvitation, self), NewVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIInvitation_get_Revoked(self: *const T, pRetVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIInvitation.VTable, self.vtable).get_Revoked(@ptrCast(*const IRDPSRAPIInvitation, self), pRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIInvitation_put_Revoked(self: *const T, NewVal: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIInvitation.VTable, self.vtable).put_Revoked(@ptrCast(*const IRDPSRAPIInvitation, self), NewVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIInvitationManager_Value = @import("../zig.zig").Guid.initString("4722B049-92C3-4C2D-8A65-F7348F644DCF");
pub const IID_IRDPSRAPIInvitationManager = &IID_IRDPSRAPIInvitationManager_Value;
pub const IRDPSRAPIInvitationManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const IRDPSRAPIInvitationManager,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const IRDPSRAPIInvitationManager,
            item: VARIANT,
            ppInvitation: **IRDPSRAPIInvitation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IRDPSRAPIInvitationManager,
            pRetVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInvitation: fn(
            self: *const IRDPSRAPIInvitationManager,
            bstrAuthString: BSTR,
            bstrGroupName: BSTR,
            bstrPassword: BSTR,
            AttendeeLimit: i32,
            ppInvitation: **IRDPSRAPIInvitation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIInvitationManager_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIInvitationManager.VTable, self.vtable).get__NewEnum(@ptrCast(*const IRDPSRAPIInvitationManager, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIInvitationManager_get_Item(self: *const T, item: VARIANT, ppInvitation: **IRDPSRAPIInvitation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIInvitationManager.VTable, self.vtable).get_Item(@ptrCast(*const IRDPSRAPIInvitationManager, self), item, ppInvitation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIInvitationManager_get_Count(self: *const T, pRetVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIInvitationManager.VTable, self.vtable).get_Count(@ptrCast(*const IRDPSRAPIInvitationManager, self), pRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIInvitationManager_CreateInvitation(self: *const T, bstrAuthString: BSTR, bstrGroupName: BSTR, bstrPassword: BSTR, AttendeeLimit: i32, ppInvitation: **IRDPSRAPIInvitation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIInvitationManager.VTable, self.vtable).CreateInvitation(@ptrCast(*const IRDPSRAPIInvitationManager, self), bstrAuthString, bstrGroupName, bstrPassword, AttendeeLimit, ppInvitation);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPITcpConnectionInfo_Value = @import("../zig.zig").Guid.initString("F74049A4-3D06-4028-8193-0A8C29BC2452");
pub const IID_IRDPSRAPITcpConnectionInfo = &IID_IRDPSRAPITcpConnectionInfo_Value;
pub const IRDPSRAPITcpConnectionInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Protocol: fn(
            self: *const IRDPSRAPITcpConnectionInfo,
            plProtocol: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LocalPort: fn(
            self: *const IRDPSRAPITcpConnectionInfo,
            plPort: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_LocalIP: fn(
            self: *const IRDPSRAPITcpConnectionInfo,
            pbsrLocalIP: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PeerPort: fn(
            self: *const IRDPSRAPITcpConnectionInfo,
            plPort: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PeerIP: fn(
            self: *const IRDPSRAPITcpConnectionInfo,
            pbstrIP: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITcpConnectionInfo_get_Protocol(self: *const T, plProtocol: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITcpConnectionInfo.VTable, self.vtable).get_Protocol(@ptrCast(*const IRDPSRAPITcpConnectionInfo, self), plProtocol);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITcpConnectionInfo_get_LocalPort(self: *const T, plPort: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITcpConnectionInfo.VTable, self.vtable).get_LocalPort(@ptrCast(*const IRDPSRAPITcpConnectionInfo, self), plPort);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITcpConnectionInfo_get_LocalIP(self: *const T, pbsrLocalIP: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITcpConnectionInfo.VTable, self.vtable).get_LocalIP(@ptrCast(*const IRDPSRAPITcpConnectionInfo, self), pbsrLocalIP);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITcpConnectionInfo_get_PeerPort(self: *const T, plPort: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITcpConnectionInfo.VTable, self.vtable).get_PeerPort(@ptrCast(*const IRDPSRAPITcpConnectionInfo, self), plPort);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITcpConnectionInfo_get_PeerIP(self: *const T, pbstrIP: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITcpConnectionInfo.VTable, self.vtable).get_PeerIP(@ptrCast(*const IRDPSRAPITcpConnectionInfo, self), pbstrIP);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIAttendee_Value = @import("../zig.zig").Guid.initString("EC0671B3-1B78-4B80-A464-9132247543E3");
pub const IID_IRDPSRAPIAttendee = &IID_IRDPSRAPIAttendee_Value;
pub const IRDPSRAPIAttendee = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Id: fn(
            self: *const IRDPSRAPIAttendee,
            pId: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RemoteName: fn(
            self: *const IRDPSRAPIAttendee,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ControlLevel: fn(
            self: *const IRDPSRAPIAttendee,
            pVal: *CTRL_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ControlLevel: fn(
            self: *const IRDPSRAPIAttendee,
            pNewVal: CTRL_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Invitation: fn(
            self: *const IRDPSRAPIAttendee,
            ppVal: **IRDPSRAPIInvitation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TerminateConnection: fn(
            self: *const IRDPSRAPIAttendee,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Flags: fn(
            self: *const IRDPSRAPIAttendee,
            plFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ConnectivityInfo: fn(
            self: *const IRDPSRAPIAttendee,
            ppVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendee_get_Id(self: *const T, pId: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendee.VTable, self.vtable).get_Id(@ptrCast(*const IRDPSRAPIAttendee, self), pId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendee_get_RemoteName(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendee.VTable, self.vtable).get_RemoteName(@ptrCast(*const IRDPSRAPIAttendee, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendee_get_ControlLevel(self: *const T, pVal: *CTRL_LEVEL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendee.VTable, self.vtable).get_ControlLevel(@ptrCast(*const IRDPSRAPIAttendee, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendee_put_ControlLevel(self: *const T, pNewVal: CTRL_LEVEL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendee.VTable, self.vtable).put_ControlLevel(@ptrCast(*const IRDPSRAPIAttendee, self), pNewVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendee_get_Invitation(self: *const T, ppVal: **IRDPSRAPIInvitation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendee.VTable, self.vtable).get_Invitation(@ptrCast(*const IRDPSRAPIAttendee, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendee_TerminateConnection(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendee.VTable, self.vtable).TerminateConnection(@ptrCast(*const IRDPSRAPIAttendee, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendee_get_Flags(self: *const T, plFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendee.VTable, self.vtable).get_Flags(@ptrCast(*const IRDPSRAPIAttendee, self), plFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendee_get_ConnectivityInfo(self: *const T, ppVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendee.VTable, self.vtable).get_ConnectivityInfo(@ptrCast(*const IRDPSRAPIAttendee, self), ppVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIAttendeeManager_Value = @import("../zig.zig").Guid.initString("BA3A37E8-33DA-4749-8DA0-07FA34DA7944");
pub const IID_IRDPSRAPIAttendeeManager = &IID_IRDPSRAPIAttendeeManager_Value;
pub const IRDPSRAPIAttendeeManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const IRDPSRAPIAttendeeManager,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const IRDPSRAPIAttendeeManager,
            id: i32,
            ppItem: **IRDPSRAPIAttendee,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendeeManager_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendeeManager.VTable, self.vtable).get__NewEnum(@ptrCast(*const IRDPSRAPIAttendeeManager, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendeeManager_get_Item(self: *const T, id: i32, ppItem: **IRDPSRAPIAttendee) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendeeManager.VTable, self.vtable).get_Item(@ptrCast(*const IRDPSRAPIAttendeeManager, self), id, ppItem);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIAttendeeDisconnectInfo_Value = @import("../zig.zig").Guid.initString("C187689F-447C-44A1-9C14-FFFBB3B7EC17");
pub const IID_IRDPSRAPIAttendeeDisconnectInfo = &IID_IRDPSRAPIAttendeeDisconnectInfo_Value;
pub const IRDPSRAPIAttendeeDisconnectInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Attendee: fn(
            self: *const IRDPSRAPIAttendeeDisconnectInfo,
            retval: **IRDPSRAPIAttendee,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Reason: fn(
            self: *const IRDPSRAPIAttendeeDisconnectInfo,
            pReason: *ATTENDEE_DISCONNECT_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Code: fn(
            self: *const IRDPSRAPIAttendeeDisconnectInfo,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendeeDisconnectInfo_get_Attendee(self: *const T, retval: **IRDPSRAPIAttendee) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendeeDisconnectInfo.VTable, self.vtable).get_Attendee(@ptrCast(*const IRDPSRAPIAttendeeDisconnectInfo, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendeeDisconnectInfo_get_Reason(self: *const T, pReason: *ATTENDEE_DISCONNECT_REASON) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendeeDisconnectInfo.VTable, self.vtable).get_Reason(@ptrCast(*const IRDPSRAPIAttendeeDisconnectInfo, self), pReason);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIAttendeeDisconnectInfo_get_Code(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIAttendeeDisconnectInfo.VTable, self.vtable).get_Code(@ptrCast(*const IRDPSRAPIAttendeeDisconnectInfo, self), pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIVirtualChannel_Value = @import("../zig.zig").Guid.initString("05E12F95-28B3-4C9A-8780-D0248574A1E0");
pub const IID_IRDPSRAPIVirtualChannel = &IID_IRDPSRAPIVirtualChannel_Value;
pub const IRDPSRAPIVirtualChannel = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SendData: fn(
            self: *const IRDPSRAPIVirtualChannel,
            bstrData: BSTR,
            lAttendeeId: i32,
            ChannelSendFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccess: fn(
            self: *const IRDPSRAPIVirtualChannel,
            lAttendeeId: i32,
            AccessType: CHANNEL_ACCESS_ENUM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const IRDPSRAPIVirtualChannel,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Flags: fn(
            self: *const IRDPSRAPIVirtualChannel,
            plFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Priority: fn(
            self: *const IRDPSRAPIVirtualChannel,
            pPriority: *CHANNEL_PRIORITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIVirtualChannel_SendData(self: *const T, bstrData: BSTR, lAttendeeId: i32, ChannelSendFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIVirtualChannel.VTable, self.vtable).SendData(@ptrCast(*const IRDPSRAPIVirtualChannel, self), bstrData, lAttendeeId, ChannelSendFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIVirtualChannel_SetAccess(self: *const T, lAttendeeId: i32, AccessType: CHANNEL_ACCESS_ENUM) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIVirtualChannel.VTable, self.vtable).SetAccess(@ptrCast(*const IRDPSRAPIVirtualChannel, self), lAttendeeId, AccessType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIVirtualChannel_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIVirtualChannel.VTable, self.vtable).get_Name(@ptrCast(*const IRDPSRAPIVirtualChannel, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIVirtualChannel_get_Flags(self: *const T, plFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIVirtualChannel.VTable, self.vtable).get_Flags(@ptrCast(*const IRDPSRAPIVirtualChannel, self), plFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIVirtualChannel_get_Priority(self: *const T, pPriority: *CHANNEL_PRIORITY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIVirtualChannel.VTable, self.vtable).get_Priority(@ptrCast(*const IRDPSRAPIVirtualChannel, self), pPriority);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIVirtualChannelManager_Value = @import("../zig.zig").Guid.initString("0D11C661-5D0D-4EE4-89DF-2166AE1FDFED");
pub const IID_IRDPSRAPIVirtualChannelManager = &IID_IRDPSRAPIVirtualChannelManager_Value;
pub const IRDPSRAPIVirtualChannelManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const IRDPSRAPIVirtualChannelManager,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const IRDPSRAPIVirtualChannelManager,
            item: VARIANT,
            pChannel: **IRDPSRAPIVirtualChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVirtualChannel: fn(
            self: *const IRDPSRAPIVirtualChannelManager,
            bstrChannelName: BSTR,
            Priority: CHANNEL_PRIORITY,
            ChannelFlags: u32,
            ppChannel: **IRDPSRAPIVirtualChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIVirtualChannelManager_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIVirtualChannelManager.VTable, self.vtable).get__NewEnum(@ptrCast(*const IRDPSRAPIVirtualChannelManager, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIVirtualChannelManager_get_Item(self: *const T, item: VARIANT, pChannel: **IRDPSRAPIVirtualChannel) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIVirtualChannelManager.VTable, self.vtable).get_Item(@ptrCast(*const IRDPSRAPIVirtualChannelManager, self), item, pChannel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIVirtualChannelManager_CreateVirtualChannel(self: *const T, bstrChannelName: BSTR, Priority: CHANNEL_PRIORITY, ChannelFlags: u32, ppChannel: **IRDPSRAPIVirtualChannel) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIVirtualChannelManager.VTable, self.vtable).CreateVirtualChannel(@ptrCast(*const IRDPSRAPIVirtualChannelManager, self), bstrChannelName, Priority, ChannelFlags, ppChannel);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIViewer_Value = @import("../zig.zig").Guid.initString("C6BFCD38-8CE9-404D-8AE8-F31D00C65CB5");
pub const IID_IRDPSRAPIViewer = &IID_IRDPSRAPIViewer_Value;
pub const IRDPSRAPIViewer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Connect: fn(
            self: *const IRDPSRAPIViewer,
            bstrConnectionString: BSTR,
            bstrName: BSTR,
            bstrPassword: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: fn(
            self: *const IRDPSRAPIViewer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Attendees: fn(
            self: *const IRDPSRAPIViewer,
            ppVal: **IRDPSRAPIAttendeeManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Invitations: fn(
            self: *const IRDPSRAPIViewer,
            ppVal: **IRDPSRAPIInvitationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplicationFilter: fn(
            self: *const IRDPSRAPIViewer,
            ppVal: **IRDPSRAPIApplicationFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_VirtualChannelManager: fn(
            self: *const IRDPSRAPIViewer,
            ppVal: **IRDPSRAPIVirtualChannelManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SmartSizing: fn(
            self: *const IRDPSRAPIViewer,
            vbSmartSizing: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SmartSizing: fn(
            self: *const IRDPSRAPIViewer,
            pvbSmartSizing: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestControl: fn(
            self: *const IRDPSRAPIViewer,
            CtrlLevel: CTRL_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DisconnectedText: fn(
            self: *const IRDPSRAPIViewer,
            bstrDisconnectedText: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DisconnectedText: fn(
            self: *const IRDPSRAPIViewer,
            pbstrDisconnectedText: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestColorDepthChange: fn(
            self: *const IRDPSRAPIViewer,
            Bpp: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Properties: fn(
            self: *const IRDPSRAPIViewer,
            ppVal: **IRDPSRAPISessionProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartReverseConnectListener: fn(
            self: *const IRDPSRAPIViewer,
            bstrConnectionString: BSTR,
            bstrUserName: BSTR,
            bstrPassword: BSTR,
            pbstrReverseConnectString: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_Connect(self: *const T, bstrConnectionString: BSTR, bstrName: BSTR, bstrPassword: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).Connect(@ptrCast(*const IRDPSRAPIViewer, self), bstrConnectionString, bstrName, bstrPassword);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_Disconnect(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).Disconnect(@ptrCast(*const IRDPSRAPIViewer, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_get_Attendees(self: *const T, ppVal: **IRDPSRAPIAttendeeManager) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).get_Attendees(@ptrCast(*const IRDPSRAPIViewer, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_get_Invitations(self: *const T, ppVal: **IRDPSRAPIInvitationManager) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).get_Invitations(@ptrCast(*const IRDPSRAPIViewer, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_get_ApplicationFilter(self: *const T, ppVal: **IRDPSRAPIApplicationFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).get_ApplicationFilter(@ptrCast(*const IRDPSRAPIViewer, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_get_VirtualChannelManager(self: *const T, ppVal: **IRDPSRAPIVirtualChannelManager) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).get_VirtualChannelManager(@ptrCast(*const IRDPSRAPIViewer, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_put_SmartSizing(self: *const T, vbSmartSizing: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).put_SmartSizing(@ptrCast(*const IRDPSRAPIViewer, self), vbSmartSizing);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_get_SmartSizing(self: *const T, pvbSmartSizing: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).get_SmartSizing(@ptrCast(*const IRDPSRAPIViewer, self), pvbSmartSizing);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_RequestControl(self: *const T, CtrlLevel: CTRL_LEVEL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).RequestControl(@ptrCast(*const IRDPSRAPIViewer, self), CtrlLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_put_DisconnectedText(self: *const T, bstrDisconnectedText: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).put_DisconnectedText(@ptrCast(*const IRDPSRAPIViewer, self), bstrDisconnectedText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_get_DisconnectedText(self: *const T, pbstrDisconnectedText: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).get_DisconnectedText(@ptrCast(*const IRDPSRAPIViewer, self), pbstrDisconnectedText);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_RequestColorDepthChange(self: *const T, Bpp: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).RequestColorDepthChange(@ptrCast(*const IRDPSRAPIViewer, self), Bpp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_get_Properties(self: *const T, ppVal: **IRDPSRAPISessionProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).get_Properties(@ptrCast(*const IRDPSRAPIViewer, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIViewer_StartReverseConnectListener(self: *const T, bstrConnectionString: BSTR, bstrUserName: BSTR, bstrPassword: BSTR, pbstrReverseConnectString: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIViewer.VTable, self.vtable).StartReverseConnectListener(@ptrCast(*const IRDPSRAPIViewer, self), bstrConnectionString, bstrUserName, bstrPassword, pbstrReverseConnectString);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPViewerRenderingSurface_Value = @import("../zig.zig").Guid.initString("56BFCE32-83E9-414D-82E8-F31D01C62CB5");
pub const IID_IRDPViewerRenderingSurface = &IID_IRDPViewerRenderingSurface_Value;
pub const IRDPViewerRenderingSurface = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetRenderingSurface: fn(
            self: *const IRDPViewerRenderingSurface,
            pRenderingSurface: *IUnknown,
            surfaceWidth: i32,
            surfaceHeight: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPViewerRenderingSurface_SetRenderingSurface(self: *const T, pRenderingSurface: *IUnknown, surfaceWidth: i32, surfaceHeight: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPViewerRenderingSurface.VTable, self.vtable).SetRenderingSurface(@ptrCast(*const IRDPViewerRenderingSurface, self), pRenderingSurface, surfaceWidth, surfaceHeight);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPViewerInputSink_Value = @import("../zig.zig").Guid.initString("BB590853-A6C5-4A7B-8DD4-76B69EEA12D5");
pub const IID_IRDPViewerInputSink = &IID_IRDPViewerInputSink_Value;
pub const IRDPViewerInputSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SendMouseButtonEvent: fn(
            self: *const IRDPViewerInputSink,
            buttonType: RDPSRAPI_MOUSE_BUTTON_TYPE,
            vbButtonDown: i16,
            xPos: u32,
            yPos: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendMouseMoveEvent: fn(
            self: *const IRDPViewerInputSink,
            xPos: u32,
            yPos: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendMouseWheelEvent: fn(
            self: *const IRDPViewerInputSink,
            wheelRotation: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendKeyboardEvent: fn(
            self: *const IRDPViewerInputSink,
            codeType: RDPSRAPI_KBD_CODE_TYPE,
            keycode: u16,
            vbKeyUp: i16,
            vbRepeat: i16,
            vbExtended: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendSyncEvent: fn(
            self: *const IRDPViewerInputSink,
            syncFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginTouchFrame: fn(
            self: *const IRDPViewerInputSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTouchInput: fn(
            self: *const IRDPViewerInputSink,
            contactId: u32,
            event: u32,
            x: i32,
            y: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndTouchFrame: fn(
            self: *const IRDPViewerInputSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPViewerInputSink_SendMouseButtonEvent(self: *const T, buttonType: RDPSRAPI_MOUSE_BUTTON_TYPE, vbButtonDown: i16, xPos: u32, yPos: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPViewerInputSink.VTable, self.vtable).SendMouseButtonEvent(@ptrCast(*const IRDPViewerInputSink, self), buttonType, vbButtonDown, xPos, yPos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPViewerInputSink_SendMouseMoveEvent(self: *const T, xPos: u32, yPos: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPViewerInputSink.VTable, self.vtable).SendMouseMoveEvent(@ptrCast(*const IRDPViewerInputSink, self), xPos, yPos);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPViewerInputSink_SendMouseWheelEvent(self: *const T, wheelRotation: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPViewerInputSink.VTable, self.vtable).SendMouseWheelEvent(@ptrCast(*const IRDPViewerInputSink, self), wheelRotation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPViewerInputSink_SendKeyboardEvent(self: *const T, codeType: RDPSRAPI_KBD_CODE_TYPE, keycode: u16, vbKeyUp: i16, vbRepeat: i16, vbExtended: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPViewerInputSink.VTable, self.vtable).SendKeyboardEvent(@ptrCast(*const IRDPViewerInputSink, self), codeType, keycode, vbKeyUp, vbRepeat, vbExtended);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPViewerInputSink_SendSyncEvent(self: *const T, syncFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPViewerInputSink.VTable, self.vtable).SendSyncEvent(@ptrCast(*const IRDPViewerInputSink, self), syncFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPViewerInputSink_BeginTouchFrame(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPViewerInputSink.VTable, self.vtable).BeginTouchFrame(@ptrCast(*const IRDPViewerInputSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPViewerInputSink_AddTouchInput(self: *const T, contactId: u32, event: u32, x: i32, y: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPViewerInputSink.VTable, self.vtable).AddTouchInput(@ptrCast(*const IRDPViewerInputSink, self), contactId, event, x, y);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPViewerInputSink_EndTouchFrame(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPViewerInputSink.VTable, self.vtable).EndTouchFrame(@ptrCast(*const IRDPViewerInputSink, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPIFrameBuffer_Value = @import("../zig.zig").Guid.initString("3D67E7D2-B27B-448E-81B3-C6110ED8B4BE");
pub const IID_IRDPSRAPIFrameBuffer = &IID_IRDPSRAPIFrameBuffer_Value;
pub const IRDPSRAPIFrameBuffer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Width: fn(
            self: *const IRDPSRAPIFrameBuffer,
            plWidth: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Height: fn(
            self: *const IRDPSRAPIFrameBuffer,
            plHeight: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Bpp: fn(
            self: *const IRDPSRAPIFrameBuffer,
            plBpp: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrameBufferBits: fn(
            self: *const IRDPSRAPIFrameBuffer,
            x: i32,
            y: i32,
            Width: i32,
            Heigth: i32,
            ppBits: **SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIFrameBuffer_get_Width(self: *const T, plWidth: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIFrameBuffer.VTable, self.vtable).get_Width(@ptrCast(*const IRDPSRAPIFrameBuffer, self), plWidth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIFrameBuffer_get_Height(self: *const T, plHeight: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIFrameBuffer.VTable, self.vtable).get_Height(@ptrCast(*const IRDPSRAPIFrameBuffer, self), plHeight);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIFrameBuffer_get_Bpp(self: *const T, plBpp: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIFrameBuffer.VTable, self.vtable).get_Bpp(@ptrCast(*const IRDPSRAPIFrameBuffer, self), plBpp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPIFrameBuffer_GetFrameBufferBits(self: *const T, x: i32, y: i32, Width: i32, Heigth: i32, ppBits: **SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPIFrameBuffer.VTable, self.vtable).GetFrameBufferBits(@ptrCast(*const IRDPSRAPIFrameBuffer, self), x, y, Width, Heigth, ppBits);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPITransportStreamBuffer_Value = @import("../zig.zig").Guid.initString("81C80290-5085-44B0-B460-F865C39CB4A9");
pub const IID_IRDPSRAPITransportStreamBuffer = &IID_IRDPSRAPITransportStreamBuffer_Value;
pub const IRDPSRAPITransportStreamBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_Storage: fn(
            self: *const IRDPSRAPITransportStreamBuffer,
            ppbStorage: **u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_StorageSize: fn(
            self: *const IRDPSRAPITransportStreamBuffer,
            plMaxStore: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PayloadSize: fn(
            self: *const IRDPSRAPITransportStreamBuffer,
            plRetVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PayloadSize: fn(
            self: *const IRDPSRAPITransportStreamBuffer,
            lVal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PayloadOffset: fn(
            self: *const IRDPSRAPITransportStreamBuffer,
            plRetVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PayloadOffset: fn(
            self: *const IRDPSRAPITransportStreamBuffer,
            lRetVal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Flags: fn(
            self: *const IRDPSRAPITransportStreamBuffer,
            plFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Flags: fn(
            self: *const IRDPSRAPITransportStreamBuffer,
            lFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Context: fn(
            self: *const IRDPSRAPITransportStreamBuffer,
            ppContext: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Context: fn(
            self: *const IRDPSRAPITransportStreamBuffer,
            pContext: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamBuffer_get_Storage(self: *const T, ppbStorage: **u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStreamBuffer.VTable, self.vtable).get_Storage(@ptrCast(*const IRDPSRAPITransportStreamBuffer, self), ppbStorage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamBuffer_get_StorageSize(self: *const T, plMaxStore: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStreamBuffer.VTable, self.vtable).get_StorageSize(@ptrCast(*const IRDPSRAPITransportStreamBuffer, self), plMaxStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamBuffer_get_PayloadSize(self: *const T, plRetVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStreamBuffer.VTable, self.vtable).get_PayloadSize(@ptrCast(*const IRDPSRAPITransportStreamBuffer, self), plRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamBuffer_put_PayloadSize(self: *const T, lVal: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStreamBuffer.VTable, self.vtable).put_PayloadSize(@ptrCast(*const IRDPSRAPITransportStreamBuffer, self), lVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamBuffer_get_PayloadOffset(self: *const T, plRetVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStreamBuffer.VTable, self.vtable).get_PayloadOffset(@ptrCast(*const IRDPSRAPITransportStreamBuffer, self), plRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamBuffer_put_PayloadOffset(self: *const T, lRetVal: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStreamBuffer.VTable, self.vtable).put_PayloadOffset(@ptrCast(*const IRDPSRAPITransportStreamBuffer, self), lRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamBuffer_get_Flags(self: *const T, plFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStreamBuffer.VTable, self.vtable).get_Flags(@ptrCast(*const IRDPSRAPITransportStreamBuffer, self), plFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamBuffer_put_Flags(self: *const T, lFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStreamBuffer.VTable, self.vtable).put_Flags(@ptrCast(*const IRDPSRAPITransportStreamBuffer, self), lFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamBuffer_get_Context(self: *const T, ppContext: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStreamBuffer.VTable, self.vtable).get_Context(@ptrCast(*const IRDPSRAPITransportStreamBuffer, self), ppContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamBuffer_put_Context(self: *const T, pContext: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStreamBuffer.VTable, self.vtable).put_Context(@ptrCast(*const IRDPSRAPITransportStreamBuffer, self), pContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPITransportStreamEvents_Value = @import("../zig.zig").Guid.initString("EA81C254-F5AF-4E40-982E-3E63BB595276");
pub const IID_IRDPSRAPITransportStreamEvents = &IID_IRDPSRAPITransportStreamEvents_Value;
pub const IRDPSRAPITransportStreamEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnWriteCompleted: fn(
            self: *const IRDPSRAPITransportStreamEvents,
            pBuffer: *IRDPSRAPITransportStreamBuffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnReadCompleted: fn(
            self: *const IRDPSRAPITransportStreamEvents,
            pBuffer: *IRDPSRAPITransportStreamBuffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OnStreamClosed: fn(
            self: *const IRDPSRAPITransportStreamEvents,
            hrReason: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamEvents_OnWriteCompleted(self: *const T, pBuffer: *IRDPSRAPITransportStreamBuffer) callconv(.Inline) void {
            return @ptrCast(*const IRDPSRAPITransportStreamEvents.VTable, self.vtable).OnWriteCompleted(@ptrCast(*const IRDPSRAPITransportStreamEvents, self), pBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamEvents_OnReadCompleted(self: *const T, pBuffer: *IRDPSRAPITransportStreamBuffer) callconv(.Inline) void {
            return @ptrCast(*const IRDPSRAPITransportStreamEvents.VTable, self.vtable).OnReadCompleted(@ptrCast(*const IRDPSRAPITransportStreamEvents, self), pBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStreamEvents_OnStreamClosed(self: *const T, hrReason: HRESULT) callconv(.Inline) void {
            return @ptrCast(*const IRDPSRAPITransportStreamEvents.VTable, self.vtable).OnStreamClosed(@ptrCast(*const IRDPSRAPITransportStreamEvents, self), hrReason);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPITransportStream_Value = @import("../zig.zig").Guid.initString("36CFA065-43BB-4EF7-AED7-9B88A5053036");
pub const IID_IRDPSRAPITransportStream = &IID_IRDPSRAPITransportStream_Value;
pub const IRDPSRAPITransportStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AllocBuffer: fn(
            self: *const IRDPSRAPITransportStream,
            maxPayload: i32,
            ppBuffer: **IRDPSRAPITransportStreamBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeBuffer: fn(
            self: *const IRDPSRAPITransportStream,
            pBuffer: *IRDPSRAPITransportStreamBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteBuffer: fn(
            self: *const IRDPSRAPITransportStream,
            pBuffer: *IRDPSRAPITransportStreamBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadBuffer: fn(
            self: *const IRDPSRAPITransportStream,
            pBuffer: *IRDPSRAPITransportStreamBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: fn(
            self: *const IRDPSRAPITransportStream,
            pCallbacks: *IRDPSRAPITransportStreamEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IRDPSRAPITransportStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStream_AllocBuffer(self: *const T, maxPayload: i32, ppBuffer: **IRDPSRAPITransportStreamBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStream.VTable, self.vtable).AllocBuffer(@ptrCast(*const IRDPSRAPITransportStream, self), maxPayload, ppBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStream_FreeBuffer(self: *const T, pBuffer: *IRDPSRAPITransportStreamBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStream.VTable, self.vtable).FreeBuffer(@ptrCast(*const IRDPSRAPITransportStream, self), pBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStream_WriteBuffer(self: *const T, pBuffer: *IRDPSRAPITransportStreamBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStream.VTable, self.vtable).WriteBuffer(@ptrCast(*const IRDPSRAPITransportStream, self), pBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStream_ReadBuffer(self: *const T, pBuffer: *IRDPSRAPITransportStreamBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStream.VTable, self.vtable).ReadBuffer(@ptrCast(*const IRDPSRAPITransportStream, self), pBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStream_Open(self: *const T, pCallbacks: *IRDPSRAPITransportStreamEvents) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStream.VTable, self.vtable).Open(@ptrCast(*const IRDPSRAPITransportStream, self), pCallbacks);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPITransportStream_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPITransportStream.VTable, self.vtable).Close(@ptrCast(*const IRDPSRAPITransportStream, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPISharingSession_Value = @import("../zig.zig").Guid.initString("EEB20886-E470-4CF6-842B-2739C0EC5CFB");
pub const IID_IRDPSRAPISharingSession = &IID_IRDPSRAPISharingSession_Value;
pub const IRDPSRAPISharingSession = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Open: fn(
            self: *const IRDPSRAPISharingSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IRDPSRAPISharingSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ColorDepth: fn(
            self: *const IRDPSRAPISharingSession,
            colorDepth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ColorDepth: fn(
            self: *const IRDPSRAPISharingSession,
            pColorDepth: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Properties: fn(
            self: *const IRDPSRAPISharingSession,
            ppVal: **IRDPSRAPISessionProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Attendees: fn(
            self: *const IRDPSRAPISharingSession,
            ppVal: **IRDPSRAPIAttendeeManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Invitations: fn(
            self: *const IRDPSRAPISharingSession,
            ppVal: **IRDPSRAPIInvitationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ApplicationFilter: fn(
            self: *const IRDPSRAPISharingSession,
            ppVal: **IRDPSRAPIApplicationFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_VirtualChannelManager: fn(
            self: *const IRDPSRAPISharingSession,
            ppVal: **IRDPSRAPIVirtualChannelManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: fn(
            self: *const IRDPSRAPISharingSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: fn(
            self: *const IRDPSRAPISharingSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConnectToClient: fn(
            self: *const IRDPSRAPISharingSession,
            bstrConnectionString: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDesktopSharedRect: fn(
            self: *const IRDPSRAPISharingSession,
            left: i32,
            top: i32,
            right: i32,
            bottom: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesktopSharedRect: fn(
            self: *const IRDPSRAPISharingSession,
            pleft: *i32,
            ptop: *i32,
            pright: *i32,
            pbottom: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_Open(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).Open(@ptrCast(*const IRDPSRAPISharingSession, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).Close(@ptrCast(*const IRDPSRAPISharingSession, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_put_ColorDepth(self: *const T, colorDepth: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).put_ColorDepth(@ptrCast(*const IRDPSRAPISharingSession, self), colorDepth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_get_ColorDepth(self: *const T, pColorDepth: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).get_ColorDepth(@ptrCast(*const IRDPSRAPISharingSession, self), pColorDepth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_get_Properties(self: *const T, ppVal: **IRDPSRAPISessionProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).get_Properties(@ptrCast(*const IRDPSRAPISharingSession, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_get_Attendees(self: *const T, ppVal: **IRDPSRAPIAttendeeManager) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).get_Attendees(@ptrCast(*const IRDPSRAPISharingSession, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_get_Invitations(self: *const T, ppVal: **IRDPSRAPIInvitationManager) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).get_Invitations(@ptrCast(*const IRDPSRAPISharingSession, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_get_ApplicationFilter(self: *const T, ppVal: **IRDPSRAPIApplicationFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).get_ApplicationFilter(@ptrCast(*const IRDPSRAPISharingSession, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_get_VirtualChannelManager(self: *const T, ppVal: **IRDPSRAPIVirtualChannelManager) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).get_VirtualChannelManager(@ptrCast(*const IRDPSRAPISharingSession, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_Pause(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).Pause(@ptrCast(*const IRDPSRAPISharingSession, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_Resume(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).Resume(@ptrCast(*const IRDPSRAPISharingSession, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_ConnectToClient(self: *const T, bstrConnectionString: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).ConnectToClient(@ptrCast(*const IRDPSRAPISharingSession, self), bstrConnectionString);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_SetDesktopSharedRect(self: *const T, left: i32, top: i32, right: i32, bottom: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).SetDesktopSharedRect(@ptrCast(*const IRDPSRAPISharingSession, self), left, top, right, bottom);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession_GetDesktopSharedRect(self: *const T, pleft: *i32, ptop: *i32, pright: *i32, pbottom: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession.VTable, self.vtable).GetDesktopSharedRect(@ptrCast(*const IRDPSRAPISharingSession, self), pleft, ptop, pright, pbottom);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRDPSRAPISharingSession2_Value = @import("../zig.zig").Guid.initString("FEE4EE57-E3E8-4205-8FB0-8FD1D0675C21");
pub const IID_IRDPSRAPISharingSession2 = &IID_IRDPSRAPISharingSession2_Value;
pub const IRDPSRAPISharingSession2 = extern struct {
    pub const VTable = extern struct {
        base: IRDPSRAPISharingSession.VTable,
        ConnectUsingTransportStream: fn(
            self: *const IRDPSRAPISharingSession2,
            pStream: *IRDPSRAPITransportStream,
            bstrGroup: BSTR,
            bstrAuthenticatedAttendeeName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FrameBuffer: fn(
            self: *const IRDPSRAPISharingSession2,
            ppVal: **IRDPSRAPIFrameBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendControlLevelChangeResponse: fn(
            self: *const IRDPSRAPISharingSession2,
            pAttendee: *IRDPSRAPIAttendee,
            RequestedLevel: CTRL_LEVEL,
            ReasonCode: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IRDPSRAPISharingSession.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession2_ConnectUsingTransportStream(self: *const T, pStream: *IRDPSRAPITransportStream, bstrGroup: BSTR, bstrAuthenticatedAttendeeName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession2.VTable, self.vtable).ConnectUsingTransportStream(@ptrCast(*const IRDPSRAPISharingSession2, self), pStream, bstrGroup, bstrAuthenticatedAttendeeName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession2_get_FrameBuffer(self: *const T, ppVal: **IRDPSRAPIFrameBuffer) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession2.VTable, self.vtable).get_FrameBuffer(@ptrCast(*const IRDPSRAPISharingSession2, self), ppVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRDPSRAPISharingSession2_SendControlLevelChangeResponse(self: *const T, pAttendee: *IRDPSRAPIAttendee, RequestedLevel: CTRL_LEVEL, ReasonCode: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRDPSRAPISharingSession2.VTable, self.vtable).SendControlLevelChangeResponse(@ptrCast(*const IRDPSRAPISharingSession2, self), pAttendee, RequestedLevel, ReasonCode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const RDPENCOMAPI_CONSTANTS = extern enum(i32) {
    CONST_MAX_CHANNEL_MESSAGE_SIZE = 1024,
    CONST_MAX_CHANNEL_NAME_LEN = 8,
    CONST_MAX_LEGACY_CHANNEL_MESSAGE_SIZE = 409600,
    CONST_ATTENDEE_ID_EVERYONE = -1,
    CONST_ATTENDEE_ID_HOST = 0,
    CONST_CONN_INTERVAL = 50,
    CONST_ATTENDEE_ID_DEFAULT = -1,
};
pub const CONST_MAX_CHANNEL_MESSAGE_SIZE = RDPENCOMAPI_CONSTANTS.CONST_MAX_CHANNEL_MESSAGE_SIZE;
pub const CONST_MAX_CHANNEL_NAME_LEN = RDPENCOMAPI_CONSTANTS.CONST_MAX_CHANNEL_NAME_LEN;
pub const CONST_MAX_LEGACY_CHANNEL_MESSAGE_SIZE = RDPENCOMAPI_CONSTANTS.CONST_MAX_LEGACY_CHANNEL_MESSAGE_SIZE;
pub const CONST_ATTENDEE_ID_EVERYONE = RDPENCOMAPI_CONSTANTS.CONST_ATTENDEE_ID_EVERYONE;
pub const CONST_ATTENDEE_ID_HOST = RDPENCOMAPI_CONSTANTS.CONST_ATTENDEE_ID_HOST;
pub const CONST_CONN_INTERVAL = RDPENCOMAPI_CONSTANTS.CONST_CONN_INTERVAL;
pub const CONST_ATTENDEE_ID_DEFAULT = RDPENCOMAPI_CONSTANTS.CONST_ATTENDEE_ID_DEFAULT;

pub const __ReferenceRemainingTypes__ = extern struct {
    __ctrlLevel__: CTRL_LEVEL,
    __attendeeDisconnectReason__: ATTENDEE_DISCONNECT_REASON,
    __channelPriority__: CHANNEL_PRIORITY,
    __channelFlags__: CHANNEL_FLAGS,
    __channelAccessEnum__: CHANNEL_ACCESS_ENUM,
    __rdpencomapiAttendeeFlags__: RDPENCOMAPI_ATTENDEE_FLAGS,
    __rdpsrapiWndFlags__: RDPSRAPI_WND_FLAGS,
    __rdpsrapiAppFlags__: RDPSRAPI_APP_FLAGS,
};

const IID__IRDPSessionEvents_Value = @import("../zig.zig").Guid.initString("98A97042-6698-40E9-8EFD-B3200990004B");
pub const IID__IRDPSessionEvents = &IID__IRDPSessionEvents_Value;
pub const _IRDPSessionEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const IDispatch = @import("automation.zig").IDispatch;
const SAFEARRAY = @import("automation.zig").SAFEARRAY;
const BSTR = @import("automation.zig").BSTR;
const VARIANT = @import("automation.zig").VARIANT;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;

test {
    const constant_export_count = 0;
    const type_export_count = 42;
    const enum_value_export_count = 43;
    const com_iface_id_export_count = 29;
    const com_class_id_export_count = 17;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 6;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (24)
//--------------------------------------------------------------------------------
pub const DDEACK = extern struct {
    _bitfield: u16,
};

pub const DDEADVISE = extern struct {
    _bitfield: u16,
    cfFormat: i16,
};

pub const DDEDATA = extern struct {
    _bitfield: u16,
    cfFormat: i16,
    Value: [1]u8,
};

pub const DDEPOKE = extern struct {
    _bitfield: u16,
    cfFormat: i16,
    Value: [1]u8,
};

pub const DDELN = extern struct {
    _bitfield: u16,
    cfFormat: i16,
};

pub const DDEUP = extern struct {
    _bitfield: u16,
    cfFormat: i16,
    rgb: [1]u8,
};

pub const HSZPAIR = extern struct {
    hszSvc: HSZ,
    hszTopic: HSZ,
};

pub const CONVCONTEXT = extern struct {
    cb: u32,
    wFlags: u32,
    wCountryID: u32,
    iCodePage: i32,
    dwLangID: u32,
    dwSecurity: u32,
    qos: SECURITY_QUALITY_OF_SERVICE,
};

pub const CONVINFO = extern struct {
    cb: u32,
    hUser: ?*c_void,
    hConvPartner: HCONV,
    hszSvcPartner: HSZ,
    hszServiceReq: HSZ,
    hszTopic: HSZ,
    hszItem: HSZ,
    wFmt: u32,
    wType: u32,
    wStatus: u32,
    wConvst: u32,
    wLastError: u32,
    hConvList: HCONVLIST,
    ConvCtxt: CONVCONTEXT,
    hwnd: HWND,
    hwndPartner: HWND,
};

pub const PFNCALLBACK = fn(
    wType: u32,
    wFmt: u32,
    hConv: HCONV,
    hsz1: HSZ,
    hsz2: HSZ,
    hData: HDDEDATA,
    dwData1: ?*c_void,
    dwData2: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) HDDEDATA;

pub const DDEML_MSG_HOOK_DATA = extern struct {
    uiLo: ?*c_void,
    uiHi: ?*c_void,
    cbData: u32,
    Data: [8]u32,
};

pub const MONMSGSTRUCT = extern struct {
    cb: u32,
    hwndTo: HWND,
    dwTime: u32,
    hTask: HANDLE,
    wMsg: u32,
    wParam: WPARAM,
    lParam: LPARAM,
    dmhd: DDEML_MSG_HOOK_DATA,
};

pub const MONCBSTRUCT = extern struct {
    cb: u32,
    dwTime: u32,
    hTask: HANDLE,
    dwRet: u32,
    wType: u32,
    wFmt: u32,
    hConv: HCONV,
    hsz1: HSZ,
    hsz2: HSZ,
    hData: HDDEDATA,
    dwData1: ?*c_void,
    dwData2: ?*c_void,
    cc: CONVCONTEXT,
    cbData: u32,
    Data: [8]u32,
};

pub const MONHSZSTRUCTA = extern struct {
    cb: u32,
    fsAction: BOOL,
    dwTime: u32,
    hsz: HSZ,
    hTask: HANDLE,
    str: [1]i8,
};

pub const MONHSZSTRUCTW = extern struct {
    cb: u32,
    fsAction: BOOL,
    dwTime: u32,
    hsz: HSZ,
    hTask: HANDLE,
    str: [1]u16,
};

pub const MONERRSTRUCT = extern struct {
    cb: u32,
    wLastError: u32,
    dwTime: u32,
    hTask: HANDLE,
};

pub const MONLINKSTRUCT = extern struct {
    cb: u32,
    dwTime: u32,
    hTask: HANDLE,
    fEstablished: BOOL,
    fNoData: BOOL,
    hszSvc: HSZ,
    hszTopic: HSZ,
    hszItem: HSZ,
    wFmt: u32,
    fServer: BOOL,
    hConvServer: HCONV,
    hConvClient: HCONV,
};

pub const MONCONVSTRUCT = extern struct {
    cb: u32,
    fConnect: BOOL,
    dwTime: u32,
    hTask: HANDLE,
    hszSvc: HSZ,
    hszTopic: HSZ,
    hConvClient: HCONV,
    hConvServer: HCONV,
};

pub const COPYDATASTRUCT = extern struct {
    dwData: ?*c_void,
    cbData: u32,
    lpData: *c_void,
};

pub const HCONV = ?*c_void;

pub const HCONVLIST = ?*c_void;

pub const HDDEDATA = ?*c_void;

pub const HSZ = ?*c_void;

pub const METAFILEPICT = extern struct {
    mm: i32,
    xExt: i32,
    yExt: i32,
    hMF: HMETAFILE,
};


//--------------------------------------------------------------------------------
// Section: Functions (76)
//--------------------------------------------------------------------------------
pub extern "USER32" fn DdeSetQualityOfService(
    hwndClient: HWND,
    pqosNew: *const SECURITY_QUALITY_OF_SERVICE,
    pqosPrev: *SECURITY_QUALITY_OF_SERVICE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ImpersonateDdeClientWindow(
    hWndClient: HWND,
    hWndServer: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn PackDDElParam(
    msg: u32,
    uiLo: ?*c_void,
    uiHi: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) LPARAM;

pub extern "USER32" fn UnpackDDElParam(
    msg: u32,
    lParam: LPARAM,
    puiLo: *u32,
    puiHi: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn FreeDDElParam(
    msg: u32,
    lParam: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn ReuseDDElParam(
    lParam: LPARAM,
    msgIn: u32,
    msgOut: u32,
    uiLo: ?*c_void,
    uiHi: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) LPARAM;

pub extern "USER32" fn DdeInitializeA(
    pidInst: *u32,
    pfnCallback: PFNCALLBACK,
    afCmd: u32,
    ulRes: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn DdeInitializeW(
    pidInst: *u32,
    pfnCallback: PFNCALLBACK,
    afCmd: u32,
    ulRes: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn DdeUninitialize(
    idInst: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DdeConnectList(
    idInst: u32,
    hszService: HSZ,
    hszTopic: HSZ,
    hConvList: HCONVLIST,
    pCC: ?*CONVCONTEXT,
) callconv(@import("std").os.windows.WINAPI) HCONVLIST;

pub extern "USER32" fn DdeQueryNextServer(
    hConvList: HCONVLIST,
    hConvPrev: HCONV,
) callconv(@import("std").os.windows.WINAPI) HCONV;

pub extern "USER32" fn DdeDisconnectList(
    hConvList: HCONVLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DdeConnect(
    idInst: u32,
    hszService: HSZ,
    hszTopic: HSZ,
    pCC: ?*CONVCONTEXT,
) callconv(@import("std").os.windows.WINAPI) HCONV;

pub extern "USER32" fn DdeDisconnect(
    hConv: HCONV,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DdeReconnect(
    hConv: HCONV,
) callconv(@import("std").os.windows.WINAPI) HCONV;

pub extern "USER32" fn DdeQueryConvInfo(
    hConv: HCONV,
    idTransaction: u32,
    pConvInfo: *CONVINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn DdeSetUserHandle(
    hConv: HCONV,
    id: u32,
    hUser: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DdeAbandonTransaction(
    idInst: u32,
    hConv: HCONV,
    idTransaction: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DdePostAdvise(
    idInst: u32,
    hszTopic: HSZ,
    hszItem: HSZ,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DdeEnableCallback(
    idInst: u32,
    hConv: HCONV,
    wCmd: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DdeImpersonateClient(
    hConv: HCONV,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DdeNameService(
    idInst: u32,
    hsz1: HSZ,
    hsz2: HSZ,
    afCmd: u32,
) callconv(@import("std").os.windows.WINAPI) HDDEDATA;

pub extern "USER32" fn DdeClientTransaction(
    pData: ?*u8,
    cbData: u32,
    hConv: HCONV,
    hszItem: HSZ,
    wFmt: u32,
    wType: u32,
    dwTimeout: u32,
    pdwResult: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HDDEDATA;

pub extern "USER32" fn DdeCreateDataHandle(
    idInst: u32,
    pSrc: ?[*:0]u8,
    cb: u32,
    cbOff: u32,
    hszItem: HSZ,
    wFmt: u32,
    afCmd: u32,
) callconv(@import("std").os.windows.WINAPI) HDDEDATA;

pub extern "USER32" fn DdeAddData(
    hData: HDDEDATA,
    pSrc: [*:0]u8,
    cb: u32,
    cbOff: u32,
) callconv(@import("std").os.windows.WINAPI) HDDEDATA;

pub extern "USER32" fn DdeGetData(
    hData: HDDEDATA,
    pDst: ?[*:0]u8,
    cbMax: u32,
    cbOff: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn DdeAccessData(
    hData: HDDEDATA,
    pcbDataSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *u8;

pub extern "USER32" fn DdeUnaccessData(
    hData: HDDEDATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DdeFreeDataHandle(
    hData: HDDEDATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DdeGetLastError(
    idInst: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn DdeCreateStringHandleA(
    idInst: u32,
    psz: [*:0]const u8,
    iCodePage: i32,
) callconv(@import("std").os.windows.WINAPI) HSZ;

pub extern "USER32" fn DdeCreateStringHandleW(
    idInst: u32,
    psz: [*:0]const u16,
    iCodePage: i32,
) callconv(@import("std").os.windows.WINAPI) HSZ;

pub extern "USER32" fn DdeQueryStringA(
    idInst: u32,
    hsz: HSZ,
    psz: ?[*:0]u8,
    cchMax: u32,
    iCodePage: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn DdeQueryStringW(
    idInst: u32,
    hsz: HSZ,
    psz: ?[*:0]u16,
    cchMax: u32,
    iCodePage: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn DdeFreeStringHandle(
    idInst: u32,
    hsz: HSZ,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DdeKeepStringHandle(
    idInst: u32,
    hsz: HSZ,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn DdeCmpStringHandles(
    hsz1: HSZ,
    hsz2: HSZ,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn OpenClipboard(
    hWndNewOwner: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn CloseClipboard(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetClipboardSequenceNumber(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetClipboardOwner(
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn SetClipboardViewer(
    hWndNewViewer: HWND,
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn GetClipboardViewer(
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn ChangeClipboardChain(
    hWndRemove: HWND,
    hWndNewNext: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn SetClipboardData(
    uFormat: u32,
    hMem: HANDLE,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn GetClipboardData(
    uFormat: u32,
) callconv(@import("std").os.windows.WINAPI) HANDLE;

pub extern "USER32" fn RegisterClipboardFormatA(
    lpszFormat: [*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn RegisterClipboardFormatW(
    lpszFormat: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn CountClipboardFormats(
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn EnumClipboardFormats(
    format: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "USER32" fn GetClipboardFormatNameA(
    format: u32,
    lpszFormatName: [*:0]u8,
    cchMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetClipboardFormatNameW(
    format: u32,
    lpszFormatName: [*:0]u16,
    cchMaxCount: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn EmptyClipboard(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn IsClipboardFormatAvailable(
    format: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetPriorityClipboardFormat(
    paFormatPriorityList: [*]u32,
    cFormats: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "USER32" fn GetOpenClipboardWindow(
) callconv(@import("std").os.windows.WINAPI) HWND;

pub extern "USER32" fn AddClipboardFormatListener(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn RemoveClipboardFormatListener(
    hwnd: HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "USER32" fn GetUpdatedClipboardFormats(
    lpuiFormats: [*]u32,
    cFormats: u32,
    pcFormatsOut: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn GlobalDeleteAtom(
    nAtom: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn InitAtomTable(
    nSize: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "KERNEL32" fn DeleteAtom(
    nAtom: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GlobalAddAtomA(
    lpString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GlobalAddAtomW(
    lpString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GlobalAddAtomExA(
    lpString: ?[*:0]const u8,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GlobalAddAtomExW(
    lpString: ?[*:0]const u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GlobalFindAtomA(
    lpString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GlobalFindAtomW(
    lpString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GlobalGetAtomNameA(
    nAtom: u16,
    lpBuffer: [*:0]u8,
    nSize: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn GlobalGetAtomNameW(
    nAtom: u16,
    lpBuffer: [*:0]u16,
    nSize: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn AddAtomA(
    lpString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn AddAtomW(
    lpString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn FindAtomA(
    lpString: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn FindAtomW(
    lpString: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u16;

pub extern "KERNEL32" fn GetAtomNameA(
    nAtom: u16,
    lpBuffer: [*:0]u8,
    nSize: i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "KERNEL32" fn GetAtomNameW(
    nAtom: u16,
    lpBuffer: [*:0]u16,
    nSize: i32,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (13)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const MONHSZSTRUCT = MONHSZSTRUCTA;
        pub const DdeInitialize = DdeInitializeA;
        pub const DdeCreateStringHandle = DdeCreateStringHandleA;
        pub const DdeQueryString = DdeQueryStringA;
        pub const RegisterClipboardFormat = RegisterClipboardFormatA;
        pub const GetClipboardFormatName = GetClipboardFormatNameA;
        pub const GlobalAddAtom = GlobalAddAtomA;
        pub const GlobalAddAtomEx = GlobalAddAtomExA;
        pub const GlobalFindAtom = GlobalFindAtomA;
        pub const GlobalGetAtomName = GlobalGetAtomNameA;
        pub const AddAtom = AddAtomA;
        pub const FindAtom = FindAtomA;
        pub const GetAtomName = GetAtomNameA;
    },
    .wide => struct {
        pub const MONHSZSTRUCT = MONHSZSTRUCTW;
        pub const DdeInitialize = DdeInitializeW;
        pub const DdeCreateStringHandle = DdeCreateStringHandleW;
        pub const DdeQueryString = DdeQueryStringW;
        pub const RegisterClipboardFormat = RegisterClipboardFormatW;
        pub const GetClipboardFormatName = GetClipboardFormatNameW;
        pub const GlobalAddAtom = GlobalAddAtomW;
        pub const GlobalAddAtomEx = GlobalAddAtomExW;
        pub const GlobalFindAtom = GlobalFindAtomW;
        pub const GlobalGetAtomName = GlobalGetAtomNameW;
        pub const AddAtom = AddAtomW;
        pub const FindAtom = FindAtomW;
        pub const GetAtomName = GetAtomNameW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const MONHSZSTRUCT = *opaque{};
        pub const DdeInitialize = *opaque{};
        pub const DdeCreateStringHandle = *opaque{};
        pub const DdeQueryString = *opaque{};
        pub const RegisterClipboardFormat = *opaque{};
        pub const GetClipboardFormatName = *opaque{};
        pub const GlobalAddAtom = *opaque{};
        pub const GlobalAddAtomEx = *opaque{};
        pub const GlobalFindAtom = *opaque{};
        pub const GlobalGetAtomName = *opaque{};
        pub const AddAtom = *opaque{};
        pub const FindAtom = *opaque{};
        pub const GetAtomName = *opaque{};
    } else struct {
        pub const MONHSZSTRUCT = @compileError("'MONHSZSTRUCT' requires that UNICODE be set to true or false in the root module");
        pub const DdeInitialize = @compileError("'DdeInitialize' requires that UNICODE be set to true or false in the root module");
        pub const DdeCreateStringHandle = @compileError("'DdeCreateStringHandle' requires that UNICODE be set to true or false in the root module");
        pub const DdeQueryString = @compileError("'DdeQueryString' requires that UNICODE be set to true or false in the root module");
        pub const RegisterClipboardFormat = @compileError("'RegisterClipboardFormat' requires that UNICODE be set to true or false in the root module");
        pub const GetClipboardFormatName = @compileError("'GetClipboardFormatName' requires that UNICODE be set to true or false in the root module");
        pub const GlobalAddAtom = @compileError("'GlobalAddAtom' requires that UNICODE be set to true or false in the root module");
        pub const GlobalAddAtomEx = @compileError("'GlobalAddAtomEx' requires that UNICODE be set to true or false in the root module");
        pub const GlobalFindAtom = @compileError("'GlobalFindAtom' requires that UNICODE be set to true or false in the root module");
        pub const GlobalGetAtomName = @compileError("'GlobalGetAtomName' requires that UNICODE be set to true or false in the root module");
        pub const AddAtom = @compileError("'AddAtom' requires that UNICODE be set to true or false in the root module");
        pub const FindAtom = @compileError("'FindAtom' requires that UNICODE be set to true or false in the root module");
        pub const GetAtomName = @compileError("'GetAtomName' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const LPARAM = @import("windows_and_messaging.zig").LPARAM;
const WPARAM = @import("windows_and_messaging.zig").WPARAM;
const PWSTR = @import("system_services.zig").PWSTR;
const HMETAFILE = @import("gdi.zig").HMETAFILE;
const SECURITY_QUALITY_OF_SERVICE = @import("security.zig").SECURITY_QUALITY_OF_SERVICE;
const HANDLE = @import("system_services.zig").HANDLE;
const PSTR = @import("system_services.zig").PSTR;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PFNCALLBACK;

    const constant_export_count = 0;
    const type_export_count = 24;
    const enum_value_export_count = 0;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 76;
    const unicode_alias_count = 13;
    const import_count = 9;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (39)
//--------------------------------------------------------------------------------
const CLSID_DirectManipulationViewport_Value = @import("../zig.zig").Guid.initString("34E211B6-3650-4F75-8334-FA359598E1C5");
pub const CLSID_DirectManipulationViewport = &CLSID_DirectManipulationViewport_Value;

const CLSID_DirectManipulationUpdateManager_Value = @import("../zig.zig").Guid.initString("9FC1BFD5-1835-441A-B3B1-B6CC74B727D0");
pub const CLSID_DirectManipulationUpdateManager = &CLSID_DirectManipulationUpdateManager_Value;

const CLSID_DirectManipulationPrimaryContent_Value = @import("../zig.zig").Guid.initString("CAA02661-D59E-41C7-8393-3BA3BACB6B57");
pub const CLSID_DirectManipulationPrimaryContent = &CLSID_DirectManipulationPrimaryContent_Value;

const CLSID_DirectManipulationManager_Value = @import("../zig.zig").Guid.initString("54E211B6-3650-4F75-8334-FA359598E1C5");
pub const CLSID_DirectManipulationManager = &CLSID_DirectManipulationManager_Value;

const CLSID_DirectManipulationSharedManager_Value = @import("../zig.zig").Guid.initString("99793286-77CC-4B57-96DB-3B354F6F9FB5");
pub const CLSID_DirectManipulationSharedManager = &CLSID_DirectManipulationSharedManager_Value;

const CLSID_DCompManipulationCompositor_Value = @import("../zig.zig").Guid.initString("79DEA627-A08A-43AC-8EF5-6900B9299126");
pub const CLSID_DCompManipulationCompositor = &CLSID_DCompManipulationCompositor_Value;

pub const DIRECTMANIPULATION_STATUS = extern enum(i32) {
    DIRECTMANIPULATION_BUILDING = 0,
    DIRECTMANIPULATION_ENABLED = 1,
    DIRECTMANIPULATION_DISABLED = 2,
    DIRECTMANIPULATION_RUNNING = 3,
    DIRECTMANIPULATION_INERTIA = 4,
    DIRECTMANIPULATION_READY = 5,
    DIRECTMANIPULATION_SUSPENDED = 6,
};
pub const DIRECTMANIPULATION_BUILDING = DIRECTMANIPULATION_STATUS.DIRECTMANIPULATION_BUILDING;
pub const DIRECTMANIPULATION_ENABLED = DIRECTMANIPULATION_STATUS.DIRECTMANIPULATION_ENABLED;
pub const DIRECTMANIPULATION_DISABLED = DIRECTMANIPULATION_STATUS.DIRECTMANIPULATION_DISABLED;
pub const DIRECTMANIPULATION_RUNNING = DIRECTMANIPULATION_STATUS.DIRECTMANIPULATION_RUNNING;
pub const DIRECTMANIPULATION_INERTIA = DIRECTMANIPULATION_STATUS.DIRECTMANIPULATION_INERTIA;
pub const DIRECTMANIPULATION_READY = DIRECTMANIPULATION_STATUS.DIRECTMANIPULATION_READY;
pub const DIRECTMANIPULATION_SUSPENDED = DIRECTMANIPULATION_STATUS.DIRECTMANIPULATION_SUSPENDED;

pub const DIRECTMANIPULATION_HITTEST_TYPE = extern enum(i32) {
    ASYNCHRONOUS = 0,
    SYNCHRONOUS = 1,
    AUTO_SYNCHRONOUS = 2,
};
pub const DIRECTMANIPULATION_HITTEST_TYPE_ASYNCHRONOUS = DIRECTMANIPULATION_HITTEST_TYPE.ASYNCHRONOUS;
pub const DIRECTMANIPULATION_HITTEST_TYPE_SYNCHRONOUS = DIRECTMANIPULATION_HITTEST_TYPE.SYNCHRONOUS;
pub const DIRECTMANIPULATION_HITTEST_TYPE_AUTO_SYNCHRONOUS = DIRECTMANIPULATION_HITTEST_TYPE.AUTO_SYNCHRONOUS;

pub const DIRECTMANIPULATION_CONFIGURATION = extern enum(i32) {
    NONE = 0,
    INTERACTION = 1,
    TRANSLATION_X = 2,
    TRANSLATION_Y = 4,
    SCALING = 16,
    TRANSLATION_INERTIA = 32,
    SCALING_INERTIA = 128,
    RAILS_X = 256,
    RAILS_Y = 512,
};
pub const DIRECTMANIPULATION_CONFIGURATION_NONE = DIRECTMANIPULATION_CONFIGURATION.NONE;
pub const DIRECTMANIPULATION_CONFIGURATION_INTERACTION = DIRECTMANIPULATION_CONFIGURATION.INTERACTION;
pub const DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_X = DIRECTMANIPULATION_CONFIGURATION.TRANSLATION_X;
pub const DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_Y = DIRECTMANIPULATION_CONFIGURATION.TRANSLATION_Y;
pub const DIRECTMANIPULATION_CONFIGURATION_SCALING = DIRECTMANIPULATION_CONFIGURATION.SCALING;
pub const DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_INERTIA = DIRECTMANIPULATION_CONFIGURATION.TRANSLATION_INERTIA;
pub const DIRECTMANIPULATION_CONFIGURATION_SCALING_INERTIA = DIRECTMANIPULATION_CONFIGURATION.SCALING_INERTIA;
pub const DIRECTMANIPULATION_CONFIGURATION_RAILS_X = DIRECTMANIPULATION_CONFIGURATION.RAILS_X;
pub const DIRECTMANIPULATION_CONFIGURATION_RAILS_Y = DIRECTMANIPULATION_CONFIGURATION.RAILS_Y;

pub const DIRECTMANIPULATION_GESTURE_CONFIGURATION = extern enum(i32) {
    DIRECTMANIPULATION_GESTURE_NONE = 0,
    DIRECTMANIPULATION_GESTURE_DEFAULT = 0,
    DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_VERTICAL = 8,
    DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_HORIZONTAL = 16,
    DIRECTMANIPULATION_GESTURE_PINCH_ZOOM = 32,
};
pub const DIRECTMANIPULATION_GESTURE_NONE = DIRECTMANIPULATION_GESTURE_CONFIGURATION.DIRECTMANIPULATION_GESTURE_NONE;
pub const DIRECTMANIPULATION_GESTURE_DEFAULT = DIRECTMANIPULATION_GESTURE_CONFIGURATION.DIRECTMANIPULATION_GESTURE_DEFAULT;
pub const DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_VERTICAL = DIRECTMANIPULATION_GESTURE_CONFIGURATION.DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_VERTICAL;
pub const DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_HORIZONTAL = DIRECTMANIPULATION_GESTURE_CONFIGURATION.DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_HORIZONTAL;
pub const DIRECTMANIPULATION_GESTURE_PINCH_ZOOM = DIRECTMANIPULATION_GESTURE_CONFIGURATION.DIRECTMANIPULATION_GESTURE_PINCH_ZOOM;

pub const DIRECTMANIPULATION_MOTION_TYPES = extern enum(i32) {
    DIRECTMANIPULATION_MOTION_NONE = 0,
    DIRECTMANIPULATION_MOTION_TRANSLATEX = 1,
    DIRECTMANIPULATION_MOTION_TRANSLATEY = 2,
    DIRECTMANIPULATION_MOTION_ZOOM = 4,
    DIRECTMANIPULATION_MOTION_CENTERX = 16,
    DIRECTMANIPULATION_MOTION_CENTERY = 32,
    DIRECTMANIPULATION_MOTION_ALL = 55,
};
pub const DIRECTMANIPULATION_MOTION_NONE = DIRECTMANIPULATION_MOTION_TYPES.DIRECTMANIPULATION_MOTION_NONE;
pub const DIRECTMANIPULATION_MOTION_TRANSLATEX = DIRECTMANIPULATION_MOTION_TYPES.DIRECTMANIPULATION_MOTION_TRANSLATEX;
pub const DIRECTMANIPULATION_MOTION_TRANSLATEY = DIRECTMANIPULATION_MOTION_TYPES.DIRECTMANIPULATION_MOTION_TRANSLATEY;
pub const DIRECTMANIPULATION_MOTION_ZOOM = DIRECTMANIPULATION_MOTION_TYPES.DIRECTMANIPULATION_MOTION_ZOOM;
pub const DIRECTMANIPULATION_MOTION_CENTERX = DIRECTMANIPULATION_MOTION_TYPES.DIRECTMANIPULATION_MOTION_CENTERX;
pub const DIRECTMANIPULATION_MOTION_CENTERY = DIRECTMANIPULATION_MOTION_TYPES.DIRECTMANIPULATION_MOTION_CENTERY;
pub const DIRECTMANIPULATION_MOTION_ALL = DIRECTMANIPULATION_MOTION_TYPES.DIRECTMANIPULATION_MOTION_ALL;

pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS = extern enum(i32) {
    DEFAULT = 0,
    AUTODISABLE = 1,
    MANUALUPDATE = 2,
    INPUT = 4,
    EXPLICITHITTEST = 8,
    DISABLEPIXELSNAPPING = 16,
};
pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS_DEFAULT = DIRECTMANIPULATION_VIEWPORT_OPTIONS.DEFAULT;
pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS_AUTODISABLE = DIRECTMANIPULATION_VIEWPORT_OPTIONS.AUTODISABLE;
pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS_MANUALUPDATE = DIRECTMANIPULATION_VIEWPORT_OPTIONS.MANUALUPDATE;
pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS_INPUT = DIRECTMANIPULATION_VIEWPORT_OPTIONS.INPUT;
pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS_EXPLICITHITTEST = DIRECTMANIPULATION_VIEWPORT_OPTIONS.EXPLICITHITTEST;
pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS_DISABLEPIXELSNAPPING = DIRECTMANIPULATION_VIEWPORT_OPTIONS.DISABLEPIXELSNAPPING;

pub const DIRECTMANIPULATION_SNAPPOINT_TYPE = extern enum(i32) {
    DIRECTMANIPULATION_SNAPPOINT_MANDATORY = 0,
    DIRECTMANIPULATION_SNAPPOINT_OPTIONAL = 1,
    DIRECTMANIPULATION_SNAPPOINT_MANDATORY_SINGLE = 2,
    DIRECTMANIPULATION_SNAPPOINT_OPTIONAL_SINGLE = 3,
};
pub const DIRECTMANIPULATION_SNAPPOINT_MANDATORY = DIRECTMANIPULATION_SNAPPOINT_TYPE.DIRECTMANIPULATION_SNAPPOINT_MANDATORY;
pub const DIRECTMANIPULATION_SNAPPOINT_OPTIONAL = DIRECTMANIPULATION_SNAPPOINT_TYPE.DIRECTMANIPULATION_SNAPPOINT_OPTIONAL;
pub const DIRECTMANIPULATION_SNAPPOINT_MANDATORY_SINGLE = DIRECTMANIPULATION_SNAPPOINT_TYPE.DIRECTMANIPULATION_SNAPPOINT_MANDATORY_SINGLE;
pub const DIRECTMANIPULATION_SNAPPOINT_OPTIONAL_SINGLE = DIRECTMANIPULATION_SNAPPOINT_TYPE.DIRECTMANIPULATION_SNAPPOINT_OPTIONAL_SINGLE;

pub const DIRECTMANIPULATION_SNAPPOINT_COORDINATE = extern enum(i32) {
    DIRECTMANIPULATION_COORDINATE_BOUNDARY = 0,
    DIRECTMANIPULATION_COORDINATE_ORIGIN = 1,
    DIRECTMANIPULATION_COORDINATE_MIRRORED = 16,
};
pub const DIRECTMANIPULATION_COORDINATE_BOUNDARY = DIRECTMANIPULATION_SNAPPOINT_COORDINATE.DIRECTMANIPULATION_COORDINATE_BOUNDARY;
pub const DIRECTMANIPULATION_COORDINATE_ORIGIN = DIRECTMANIPULATION_SNAPPOINT_COORDINATE.DIRECTMANIPULATION_COORDINATE_ORIGIN;
pub const DIRECTMANIPULATION_COORDINATE_MIRRORED = DIRECTMANIPULATION_SNAPPOINT_COORDINATE.DIRECTMANIPULATION_COORDINATE_MIRRORED;

pub const DIRECTMANIPULATION_HORIZONTALALIGNMENT = extern enum(i32) {
    NONE = 0,
    LEFT = 1,
    CENTER = 2,
    RIGHT = 4,
    UNLOCKCENTER = 8,
};
pub const DIRECTMANIPULATION_HORIZONTALALIGNMENT_NONE = DIRECTMANIPULATION_HORIZONTALALIGNMENT.NONE;
pub const DIRECTMANIPULATION_HORIZONTALALIGNMENT_LEFT = DIRECTMANIPULATION_HORIZONTALALIGNMENT.LEFT;
pub const DIRECTMANIPULATION_HORIZONTALALIGNMENT_CENTER = DIRECTMANIPULATION_HORIZONTALALIGNMENT.CENTER;
pub const DIRECTMANIPULATION_HORIZONTALALIGNMENT_RIGHT = DIRECTMANIPULATION_HORIZONTALALIGNMENT.RIGHT;
pub const DIRECTMANIPULATION_HORIZONTALALIGNMENT_UNLOCKCENTER = DIRECTMANIPULATION_HORIZONTALALIGNMENT.UNLOCKCENTER;

pub const DIRECTMANIPULATION_VERTICALALIGNMENT = extern enum(i32) {
    NONE = 0,
    TOP = 1,
    CENTER = 2,
    BOTTOM = 4,
    UNLOCKCENTER = 8,
};
pub const DIRECTMANIPULATION_VERTICALALIGNMENT_NONE = DIRECTMANIPULATION_VERTICALALIGNMENT.NONE;
pub const DIRECTMANIPULATION_VERTICALALIGNMENT_TOP = DIRECTMANIPULATION_VERTICALALIGNMENT.TOP;
pub const DIRECTMANIPULATION_VERTICALALIGNMENT_CENTER = DIRECTMANIPULATION_VERTICALALIGNMENT.CENTER;
pub const DIRECTMANIPULATION_VERTICALALIGNMENT_BOTTOM = DIRECTMANIPULATION_VERTICALALIGNMENT.BOTTOM;
pub const DIRECTMANIPULATION_VERTICALALIGNMENT_UNLOCKCENTER = DIRECTMANIPULATION_VERTICALALIGNMENT.UNLOCKCENTER;

pub const DIRECTMANIPULATION_INPUT_MODE = extern enum(i32) {
    AUTOMATIC = 0,
    MANUAL = 1,
};
pub const DIRECTMANIPULATION_INPUT_MODE_AUTOMATIC = DIRECTMANIPULATION_INPUT_MODE.AUTOMATIC;
pub const DIRECTMANIPULATION_INPUT_MODE_MANUAL = DIRECTMANIPULATION_INPUT_MODE.MANUAL;

const IID_IDirectManipulationManager_Value = @import("../zig.zig").Guid.initString("FBF5D3B4-70C7-4163-9322-5A6F660D6FBC");
pub const IID_IDirectManipulationManager = &IID_IDirectManipulationManager_Value;
pub const IDirectManipulationManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Activate: fn(
            self: *const IDirectManipulationManager,
            window: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deactivate: fn(
            self: *const IDirectManipulationManager,
            window: HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterHitTestTarget: fn(
            self: *const IDirectManipulationManager,
            window: HWND,
            hitTestWindow: HWND,
            type: DIRECTMANIPULATION_HITTEST_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessInput: fn(
            self: *const IDirectManipulationManager,
            message: *const MSG,
            handled: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUpdateManager: fn(
            self: *const IDirectManipulationManager,
            riid: *const Guid,
            object: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewport: fn(
            self: *const IDirectManipulationManager,
            frameInfo: ?*IDirectManipulationFrameInfoProvider,
            window: HWND,
            riid: *const Guid,
            object: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateContent: fn(
            self: *const IDirectManipulationManager,
            frameInfo: ?*IDirectManipulationFrameInfoProvider,
            clsid: *const Guid,
            riid: *const Guid,
            object: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationManager_Activate(self: *const T, window: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationManager.VTable, self.vtable).Activate(@ptrCast(*const IDirectManipulationManager, self), window);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationManager_Deactivate(self: *const T, window: HWND) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationManager.VTable, self.vtable).Deactivate(@ptrCast(*const IDirectManipulationManager, self), window);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationManager_RegisterHitTestTarget(self: *const T, window: HWND, hitTestWindow: HWND, type: DIRECTMANIPULATION_HITTEST_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationManager.VTable, self.vtable).RegisterHitTestTarget(@ptrCast(*const IDirectManipulationManager, self), window, hitTestWindow, type);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationManager_ProcessInput(self: *const T, message: *const MSG, handled: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationManager.VTable, self.vtable).ProcessInput(@ptrCast(*const IDirectManipulationManager, self), message, handled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationManager_GetUpdateManager(self: *const T, riid: *const Guid, object: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationManager.VTable, self.vtable).GetUpdateManager(@ptrCast(*const IDirectManipulationManager, self), riid, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationManager_CreateViewport(self: *const T, frameInfo: ?*IDirectManipulationFrameInfoProvider, window: HWND, riid: *const Guid, object: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationManager.VTable, self.vtable).CreateViewport(@ptrCast(*const IDirectManipulationManager, self), frameInfo, window, riid, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationManager_CreateContent(self: *const T, frameInfo: ?*IDirectManipulationFrameInfoProvider, clsid: *const Guid, riid: *const Guid, object: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationManager.VTable, self.vtable).CreateContent(@ptrCast(*const IDirectManipulationManager, self), frameInfo, clsid, riid, object);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationManager2_Value = @import("../zig.zig").Guid.initString("FA1005E9-3D16-484C-BFC9-62B61E56EC4E");
pub const IID_IDirectManipulationManager2 = &IID_IDirectManipulationManager2_Value;
pub const IDirectManipulationManager2 = extern struct {
    pub const VTable = extern struct {
        base: IDirectManipulationManager.VTable,
        CreateBehavior: fn(
            self: *const IDirectManipulationManager2,
            clsid: *const Guid,
            riid: *const Guid,
            object: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectManipulationManager.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationManager2_CreateBehavior(self: *const T, clsid: *const Guid, riid: *const Guid, object: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationManager2.VTable, self.vtable).CreateBehavior(@ptrCast(*const IDirectManipulationManager2, self), clsid, riid, object);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationManager3_Value = @import("../zig.zig").Guid.initString("2CB6B33D-FFE8-488C-B750-FBDFE88DCA8C");
pub const IID_IDirectManipulationManager3 = &IID_IDirectManipulationManager3_Value;
pub const IDirectManipulationManager3 = extern struct {
    pub const VTable = extern struct {
        base: IDirectManipulationManager2.VTable,
        GetService: fn(
            self: *const IDirectManipulationManager3,
            clsid: *const Guid,
            riid: *const Guid,
            object: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectManipulationManager2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationManager3_GetService(self: *const T, clsid: *const Guid, riid: *const Guid, object: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationManager3.VTable, self.vtable).GetService(@ptrCast(*const IDirectManipulationManager3, self), clsid, riid, object);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationViewport_Value = @import("../zig.zig").Guid.initString("28B85A3D-60A0-48BD-9BA1-5CE8D9EA3A6D");
pub const IID_IDirectManipulationViewport = &IID_IDirectManipulationViewport_Value;
pub const IDirectManipulationViewport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Enable: fn(
            self: *const IDirectManipulationViewport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disable: fn(
            self: *const IDirectManipulationViewport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContact: fn(
            self: *const IDirectManipulationViewport,
            pointerId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseContact: fn(
            self: *const IDirectManipulationViewport,
            pointerId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseAllContacts: fn(
            self: *const IDirectManipulationViewport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: fn(
            self: *const IDirectManipulationViewport,
            status: *DIRECTMANIPULATION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTag: fn(
            self: *const IDirectManipulationViewport,
            riid: *const Guid,
            object: ?*?*c_void,
            id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTag: fn(
            self: *const IDirectManipulationViewport,
            object: ?*IUnknown,
            id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewportRect: fn(
            self: *const IDirectManipulationViewport,
            viewport: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewportRect: fn(
            self: *const IDirectManipulationViewport,
            viewport: *const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ZoomToRect: fn(
            self: *const IDirectManipulationViewport,
            left: f32,
            top: f32,
            right: f32,
            bottom: f32,
            animate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewportTransform: fn(
            self: *const IDirectManipulationViewport,
            matrix: [*]const f32,
            pointCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncDisplayTransform: fn(
            self: *const IDirectManipulationViewport,
            matrix: [*]const f32,
            pointCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrimaryContent: fn(
            self: *const IDirectManipulationViewport,
            riid: *const Guid,
            object: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddContent: fn(
            self: *const IDirectManipulationViewport,
            content: *IDirectManipulationContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveContent: fn(
            self: *const IDirectManipulationViewport,
            content: *IDirectManipulationContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewportOptions: fn(
            self: *const IDirectManipulationViewport,
            options: DIRECTMANIPULATION_VIEWPORT_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddConfiguration: fn(
            self: *const IDirectManipulationViewport,
            configuration: DIRECTMANIPULATION_CONFIGURATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveConfiguration: fn(
            self: *const IDirectManipulationViewport,
            configuration: DIRECTMANIPULATION_CONFIGURATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateConfiguration: fn(
            self: *const IDirectManipulationViewport,
            configuration: DIRECTMANIPULATION_CONFIGURATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetManualGesture: fn(
            self: *const IDirectManipulationViewport,
            configuration: DIRECTMANIPULATION_GESTURE_CONFIGURATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetChaining: fn(
            self: *const IDirectManipulationViewport,
            enabledTypes: DIRECTMANIPULATION_MOTION_TYPES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEventHandler: fn(
            self: *const IDirectManipulationViewport,
            window: HWND,
            eventHandler: *IDirectManipulationViewportEventHandler,
            cookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveEventHandler: fn(
            self: *const IDirectManipulationViewport,
            cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInputMode: fn(
            self: *const IDirectManipulationViewport,
            mode: DIRECTMANIPULATION_INPUT_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUpdateMode: fn(
            self: *const IDirectManipulationViewport,
            mode: DIRECTMANIPULATION_INPUT_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: fn(
            self: *const IDirectManipulationViewport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abandon: fn(
            self: *const IDirectManipulationViewport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_Enable(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).Enable(@ptrCast(*const IDirectManipulationViewport, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_Disable(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).Disable(@ptrCast(*const IDirectManipulationViewport, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_SetContact(self: *const T, pointerId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).SetContact(@ptrCast(*const IDirectManipulationViewport, self), pointerId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_ReleaseContact(self: *const T, pointerId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).ReleaseContact(@ptrCast(*const IDirectManipulationViewport, self), pointerId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_ReleaseAllContacts(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).ReleaseAllContacts(@ptrCast(*const IDirectManipulationViewport, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_GetStatus(self: *const T, status: *DIRECTMANIPULATION_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).GetStatus(@ptrCast(*const IDirectManipulationViewport, self), status);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_GetTag(self: *const T, riid: *const Guid, object: ?*?*c_void, id: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).GetTag(@ptrCast(*const IDirectManipulationViewport, self), riid, object, id);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_SetTag(self: *const T, object: ?*IUnknown, id: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).SetTag(@ptrCast(*const IDirectManipulationViewport, self), object, id);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_GetViewportRect(self: *const T, viewport: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).GetViewportRect(@ptrCast(*const IDirectManipulationViewport, self), viewport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_SetViewportRect(self: *const T, viewport: *const RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).SetViewportRect(@ptrCast(*const IDirectManipulationViewport, self), viewport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_ZoomToRect(self: *const T, left: f32, top: f32, right: f32, bottom: f32, animate: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).ZoomToRect(@ptrCast(*const IDirectManipulationViewport, self), left, top, right, bottom, animate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_SetViewportTransform(self: *const T, matrix: [*]const f32, pointCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).SetViewportTransform(@ptrCast(*const IDirectManipulationViewport, self), matrix, pointCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_SyncDisplayTransform(self: *const T, matrix: [*]const f32, pointCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).SyncDisplayTransform(@ptrCast(*const IDirectManipulationViewport, self), matrix, pointCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_GetPrimaryContent(self: *const T, riid: *const Guid, object: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).GetPrimaryContent(@ptrCast(*const IDirectManipulationViewport, self), riid, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_AddContent(self: *const T, content: *IDirectManipulationContent) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).AddContent(@ptrCast(*const IDirectManipulationViewport, self), content);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_RemoveContent(self: *const T, content: *IDirectManipulationContent) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).RemoveContent(@ptrCast(*const IDirectManipulationViewport, self), content);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_SetViewportOptions(self: *const T, options: DIRECTMANIPULATION_VIEWPORT_OPTIONS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).SetViewportOptions(@ptrCast(*const IDirectManipulationViewport, self), options);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_AddConfiguration(self: *const T, configuration: DIRECTMANIPULATION_CONFIGURATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).AddConfiguration(@ptrCast(*const IDirectManipulationViewport, self), configuration);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_RemoveConfiguration(self: *const T, configuration: DIRECTMANIPULATION_CONFIGURATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).RemoveConfiguration(@ptrCast(*const IDirectManipulationViewport, self), configuration);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_ActivateConfiguration(self: *const T, configuration: DIRECTMANIPULATION_CONFIGURATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).ActivateConfiguration(@ptrCast(*const IDirectManipulationViewport, self), configuration);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_SetManualGesture(self: *const T, configuration: DIRECTMANIPULATION_GESTURE_CONFIGURATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).SetManualGesture(@ptrCast(*const IDirectManipulationViewport, self), configuration);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_SetChaining(self: *const T, enabledTypes: DIRECTMANIPULATION_MOTION_TYPES) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).SetChaining(@ptrCast(*const IDirectManipulationViewport, self), enabledTypes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_AddEventHandler(self: *const T, window: HWND, eventHandler: *IDirectManipulationViewportEventHandler, cookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).AddEventHandler(@ptrCast(*const IDirectManipulationViewport, self), window, eventHandler, cookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_RemoveEventHandler(self: *const T, cookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).RemoveEventHandler(@ptrCast(*const IDirectManipulationViewport, self), cookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_SetInputMode(self: *const T, mode: DIRECTMANIPULATION_INPUT_MODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).SetInputMode(@ptrCast(*const IDirectManipulationViewport, self), mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_SetUpdateMode(self: *const T, mode: DIRECTMANIPULATION_INPUT_MODE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).SetUpdateMode(@ptrCast(*const IDirectManipulationViewport, self), mode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_Stop(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).Stop(@ptrCast(*const IDirectManipulationViewport, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport_Abandon(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport.VTable, self.vtable).Abandon(@ptrCast(*const IDirectManipulationViewport, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationViewport2_Value = @import("../zig.zig").Guid.initString("923CCAAC-61E1-4385-B726-017AF189882A");
pub const IID_IDirectManipulationViewport2 = &IID_IDirectManipulationViewport2_Value;
pub const IDirectManipulationViewport2 = extern struct {
    pub const VTable = extern struct {
        base: IDirectManipulationViewport.VTable,
        AddBehavior: fn(
            self: *const IDirectManipulationViewport2,
            behavior: *IUnknown,
            cookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveBehavior: fn(
            self: *const IDirectManipulationViewport2,
            cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllBehaviors: fn(
            self: *const IDirectManipulationViewport2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectManipulationViewport.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport2_AddBehavior(self: *const T, behavior: *IUnknown, cookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport2.VTable, self.vtable).AddBehavior(@ptrCast(*const IDirectManipulationViewport2, self), behavior, cookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport2_RemoveBehavior(self: *const T, cookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport2.VTable, self.vtable).RemoveBehavior(@ptrCast(*const IDirectManipulationViewport2, self), cookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewport2_RemoveAllBehaviors(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewport2.VTable, self.vtable).RemoveAllBehaviors(@ptrCast(*const IDirectManipulationViewport2, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationViewportEventHandler_Value = @import("../zig.zig").Guid.initString("952121DA-D69F-45F9-B0F9-F23944321A6D");
pub const IID_IDirectManipulationViewportEventHandler = &IID_IDirectManipulationViewportEventHandler_Value;
pub const IDirectManipulationViewportEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnViewportStatusChanged: fn(
            self: *const IDirectManipulationViewportEventHandler,
            viewport: *IDirectManipulationViewport,
            current: DIRECTMANIPULATION_STATUS,
            previous: DIRECTMANIPULATION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnViewportUpdated: fn(
            self: *const IDirectManipulationViewportEventHandler,
            viewport: *IDirectManipulationViewport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnContentUpdated: fn(
            self: *const IDirectManipulationViewportEventHandler,
            viewport: *IDirectManipulationViewport,
            content: *IDirectManipulationContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewportEventHandler_OnViewportStatusChanged(self: *const T, viewport: *IDirectManipulationViewport, current: DIRECTMANIPULATION_STATUS, previous: DIRECTMANIPULATION_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewportEventHandler.VTable, self.vtable).OnViewportStatusChanged(@ptrCast(*const IDirectManipulationViewportEventHandler, self), viewport, current, previous);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewportEventHandler_OnViewportUpdated(self: *const T, viewport: *IDirectManipulationViewport) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewportEventHandler.VTable, self.vtable).OnViewportUpdated(@ptrCast(*const IDirectManipulationViewportEventHandler, self), viewport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationViewportEventHandler_OnContentUpdated(self: *const T, viewport: *IDirectManipulationViewport, content: *IDirectManipulationContent) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationViewportEventHandler.VTable, self.vtable).OnContentUpdated(@ptrCast(*const IDirectManipulationViewportEventHandler, self), viewport, content);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationContent_Value = @import("../zig.zig").Guid.initString("B89962CB-3D89-442B-BB58-5098FA0F9F16");
pub const IID_IDirectManipulationContent = &IID_IDirectManipulationContent_Value;
pub const IDirectManipulationContent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetContentRect: fn(
            self: *const IDirectManipulationContent,
            contentSize: *RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContentRect: fn(
            self: *const IDirectManipulationContent,
            contentSize: *const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewport: fn(
            self: *const IDirectManipulationContent,
            riid: *const Guid,
            object: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTag: fn(
            self: *const IDirectManipulationContent,
            riid: *const Guid,
            object: ?*?*c_void,
            id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTag: fn(
            self: *const IDirectManipulationContent,
            object: ?*IUnknown,
            id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputTransform: fn(
            self: *const IDirectManipulationContent,
            matrix: [*]f32,
            pointCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentTransform: fn(
            self: *const IDirectManipulationContent,
            matrix: [*]f32,
            pointCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncContentTransform: fn(
            self: *const IDirectManipulationContent,
            matrix: [*]const f32,
            pointCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationContent_GetContentRect(self: *const T, contentSize: *RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationContent.VTable, self.vtable).GetContentRect(@ptrCast(*const IDirectManipulationContent, self), contentSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationContent_SetContentRect(self: *const T, contentSize: *const RECT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationContent.VTable, self.vtable).SetContentRect(@ptrCast(*const IDirectManipulationContent, self), contentSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationContent_GetViewport(self: *const T, riid: *const Guid, object: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationContent.VTable, self.vtable).GetViewport(@ptrCast(*const IDirectManipulationContent, self), riid, object);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationContent_GetTag(self: *const T, riid: *const Guid, object: ?*?*c_void, id: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationContent.VTable, self.vtable).GetTag(@ptrCast(*const IDirectManipulationContent, self), riid, object, id);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationContent_SetTag(self: *const T, object: ?*IUnknown, id: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationContent.VTable, self.vtable).SetTag(@ptrCast(*const IDirectManipulationContent, self), object, id);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationContent_GetOutputTransform(self: *const T, matrix: [*]f32, pointCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationContent.VTable, self.vtable).GetOutputTransform(@ptrCast(*const IDirectManipulationContent, self), matrix, pointCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationContent_GetContentTransform(self: *const T, matrix: [*]f32, pointCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationContent.VTable, self.vtable).GetContentTransform(@ptrCast(*const IDirectManipulationContent, self), matrix, pointCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationContent_SyncContentTransform(self: *const T, matrix: [*]const f32, pointCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationContent.VTable, self.vtable).SyncContentTransform(@ptrCast(*const IDirectManipulationContent, self), matrix, pointCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationPrimaryContent_Value = @import("../zig.zig").Guid.initString("C12851E4-1698-4625-B9B1-7CA3EC18630B");
pub const IID_IDirectManipulationPrimaryContent = &IID_IDirectManipulationPrimaryContent_Value;
pub const IDirectManipulationPrimaryContent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSnapInterval: fn(
            self: *const IDirectManipulationPrimaryContent,
            motion: DIRECTMANIPULATION_MOTION_TYPES,
            interval: f32,
            offset: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSnapPoints: fn(
            self: *const IDirectManipulationPrimaryContent,
            motion: DIRECTMANIPULATION_MOTION_TYPES,
            points: ?[*]const f32,
            pointCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSnapType: fn(
            self: *const IDirectManipulationPrimaryContent,
            motion: DIRECTMANIPULATION_MOTION_TYPES,
            type: DIRECTMANIPULATION_SNAPPOINT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSnapCoordinate: fn(
            self: *const IDirectManipulationPrimaryContent,
            motion: DIRECTMANIPULATION_MOTION_TYPES,
            coordinate: DIRECTMANIPULATION_SNAPPOINT_COORDINATE,
            origin: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetZoomBoundaries: fn(
            self: *const IDirectManipulationPrimaryContent,
            zoomMinimum: f32,
            zoomMaximum: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHorizontalAlignment: fn(
            self: *const IDirectManipulationPrimaryContent,
            alignment: DIRECTMANIPULATION_HORIZONTALALIGNMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVerticalAlignment: fn(
            self: *const IDirectManipulationPrimaryContent,
            alignment: DIRECTMANIPULATION_VERTICALALIGNMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInertiaEndTransform: fn(
            self: *const IDirectManipulationPrimaryContent,
            matrix: [*]f32,
            pointCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCenterPoint: fn(
            self: *const IDirectManipulationPrimaryContent,
            centerX: *f32,
            centerY: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationPrimaryContent_SetSnapInterval(self: *const T, motion: DIRECTMANIPULATION_MOTION_TYPES, interval: f32, offset: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationPrimaryContent.VTable, self.vtable).SetSnapInterval(@ptrCast(*const IDirectManipulationPrimaryContent, self), motion, interval, offset);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationPrimaryContent_SetSnapPoints(self: *const T, motion: DIRECTMANIPULATION_MOTION_TYPES, points: ?[*]const f32, pointCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationPrimaryContent.VTable, self.vtable).SetSnapPoints(@ptrCast(*const IDirectManipulationPrimaryContent, self), motion, points, pointCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationPrimaryContent_SetSnapType(self: *const T, motion: DIRECTMANIPULATION_MOTION_TYPES, type: DIRECTMANIPULATION_SNAPPOINT_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationPrimaryContent.VTable, self.vtable).SetSnapType(@ptrCast(*const IDirectManipulationPrimaryContent, self), motion, type);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationPrimaryContent_SetSnapCoordinate(self: *const T, motion: DIRECTMANIPULATION_MOTION_TYPES, coordinate: DIRECTMANIPULATION_SNAPPOINT_COORDINATE, origin: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationPrimaryContent.VTable, self.vtable).SetSnapCoordinate(@ptrCast(*const IDirectManipulationPrimaryContent, self), motion, coordinate, origin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationPrimaryContent_SetZoomBoundaries(self: *const T, zoomMinimum: f32, zoomMaximum: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationPrimaryContent.VTable, self.vtable).SetZoomBoundaries(@ptrCast(*const IDirectManipulationPrimaryContent, self), zoomMinimum, zoomMaximum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationPrimaryContent_SetHorizontalAlignment(self: *const T, alignment: DIRECTMANIPULATION_HORIZONTALALIGNMENT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationPrimaryContent.VTable, self.vtable).SetHorizontalAlignment(@ptrCast(*const IDirectManipulationPrimaryContent, self), alignment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationPrimaryContent_SetVerticalAlignment(self: *const T, alignment: DIRECTMANIPULATION_VERTICALALIGNMENT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationPrimaryContent.VTable, self.vtable).SetVerticalAlignment(@ptrCast(*const IDirectManipulationPrimaryContent, self), alignment);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationPrimaryContent_GetInertiaEndTransform(self: *const T, matrix: [*]f32, pointCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationPrimaryContent.VTable, self.vtable).GetInertiaEndTransform(@ptrCast(*const IDirectManipulationPrimaryContent, self), matrix, pointCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationPrimaryContent_GetCenterPoint(self: *const T, centerX: *f32, centerY: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationPrimaryContent.VTable, self.vtable).GetCenterPoint(@ptrCast(*const IDirectManipulationPrimaryContent, self), centerX, centerY);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DIRECTMANIPULATION_DRAG_DROP_STATUS = extern enum(i32) {
    DIRECTMANIPULATION_DRAG_DROP_READY = 0,
    DIRECTMANIPULATION_DRAG_DROP_PRESELECT = 1,
    DIRECTMANIPULATION_DRAG_DROP_SELECTING = 2,
    DIRECTMANIPULATION_DRAG_DROP_DRAGGING = 3,
    DIRECTMANIPULATION_DRAG_DROP_CANCELLED = 4,
    DIRECTMANIPULATION_DRAG_DROP_COMMITTED = 5,
};
pub const DIRECTMANIPULATION_DRAG_DROP_READY = DIRECTMANIPULATION_DRAG_DROP_STATUS.DIRECTMANIPULATION_DRAG_DROP_READY;
pub const DIRECTMANIPULATION_DRAG_DROP_PRESELECT = DIRECTMANIPULATION_DRAG_DROP_STATUS.DIRECTMANIPULATION_DRAG_DROP_PRESELECT;
pub const DIRECTMANIPULATION_DRAG_DROP_SELECTING = DIRECTMANIPULATION_DRAG_DROP_STATUS.DIRECTMANIPULATION_DRAG_DROP_SELECTING;
pub const DIRECTMANIPULATION_DRAG_DROP_DRAGGING = DIRECTMANIPULATION_DRAG_DROP_STATUS.DIRECTMANIPULATION_DRAG_DROP_DRAGGING;
pub const DIRECTMANIPULATION_DRAG_DROP_CANCELLED = DIRECTMANIPULATION_DRAG_DROP_STATUS.DIRECTMANIPULATION_DRAG_DROP_CANCELLED;
pub const DIRECTMANIPULATION_DRAG_DROP_COMMITTED = DIRECTMANIPULATION_DRAG_DROP_STATUS.DIRECTMANIPULATION_DRAG_DROP_COMMITTED;

const IID_IDirectManipulationDragDropEventHandler_Value = @import("../zig.zig").Guid.initString("1FA11B10-701B-41AE-B5F2-49E36BD595AA");
pub const IID_IDirectManipulationDragDropEventHandler = &IID_IDirectManipulationDragDropEventHandler_Value;
pub const IDirectManipulationDragDropEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnDragDropStatusChange: fn(
            self: *const IDirectManipulationDragDropEventHandler,
            viewport: *IDirectManipulationViewport2,
            current: DIRECTMANIPULATION_DRAG_DROP_STATUS,
            previous: DIRECTMANIPULATION_DRAG_DROP_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationDragDropEventHandler_OnDragDropStatusChange(self: *const T, viewport: *IDirectManipulationViewport2, current: DIRECTMANIPULATION_DRAG_DROP_STATUS, previous: DIRECTMANIPULATION_DRAG_DROP_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationDragDropEventHandler.VTable, self.vtable).OnDragDropStatusChange(@ptrCast(*const IDirectManipulationDragDropEventHandler, self), viewport, current, previous);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION = extern enum(i32) {
    VERTICAL = 1,
    HORIZONTAL = 2,
    SELECT_ONLY = 16,
    SELECT_DRAG = 32,
    HOLD_DRAG = 64,
};
pub const DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_VERTICAL = DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION.VERTICAL;
pub const DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_HORIZONTAL = DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION.HORIZONTAL;
pub const DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_SELECT_ONLY = DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION.SELECT_ONLY;
pub const DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_SELECT_DRAG = DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION.SELECT_DRAG;
pub const DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_HOLD_DRAG = DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION.HOLD_DRAG;

const IID_IDirectManipulationDragDropBehavior_Value = @import("../zig.zig").Guid.initString("814B5AF5-C2C8-4270-A9B7-A198CE8D02FA");
pub const IID_IDirectManipulationDragDropBehavior = &IID_IDirectManipulationDragDropBehavior_Value;
pub const IDirectManipulationDragDropBehavior = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetConfiguration: fn(
            self: *const IDirectManipulationDragDropBehavior,
            configuration: DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: fn(
            self: *const IDirectManipulationDragDropBehavior,
            status: *DIRECTMANIPULATION_DRAG_DROP_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationDragDropBehavior_SetConfiguration(self: *const T, configuration: DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationDragDropBehavior.VTable, self.vtable).SetConfiguration(@ptrCast(*const IDirectManipulationDragDropBehavior, self), configuration);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationDragDropBehavior_GetStatus(self: *const T, status: *DIRECTMANIPULATION_DRAG_DROP_STATUS) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationDragDropBehavior.VTable, self.vtable).GetStatus(@ptrCast(*const IDirectManipulationDragDropBehavior, self), status);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DIRECTMANIPULATION_INTERACTION_TYPE = extern enum(i32) {
    DIRECTMANIPULATION_INTERACTION_BEGIN = 0,
    MANIPULATION = 1,
    GESTURE_TAP = 2,
    GESTURE_HOLD = 3,
    GESTURE_CROSS_SLIDE = 4,
    GESTURE_PINCH_ZOOM = 5,
    DIRECTMANIPULATION_INTERACTION_END = 100,
};
pub const DIRECTMANIPULATION_INTERACTION_BEGIN = DIRECTMANIPULATION_INTERACTION_TYPE.DIRECTMANIPULATION_INTERACTION_BEGIN;
pub const DIRECTMANIPULATION_INTERACTION_TYPE_MANIPULATION = DIRECTMANIPULATION_INTERACTION_TYPE.MANIPULATION;
pub const DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_TAP = DIRECTMANIPULATION_INTERACTION_TYPE.GESTURE_TAP;
pub const DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_HOLD = DIRECTMANIPULATION_INTERACTION_TYPE.GESTURE_HOLD;
pub const DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_CROSS_SLIDE = DIRECTMANIPULATION_INTERACTION_TYPE.GESTURE_CROSS_SLIDE;
pub const DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_PINCH_ZOOM = DIRECTMANIPULATION_INTERACTION_TYPE.GESTURE_PINCH_ZOOM;
pub const DIRECTMANIPULATION_INTERACTION_END = DIRECTMANIPULATION_INTERACTION_TYPE.DIRECTMANIPULATION_INTERACTION_END;

const IID_IDirectManipulationInteractionEventHandler_Value = @import("../zig.zig").Guid.initString("E43F45B8-42B4-403E-B1F2-273B8F510830");
pub const IID_IDirectManipulationInteractionEventHandler = &IID_IDirectManipulationInteractionEventHandler_Value;
pub const IDirectManipulationInteractionEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnInteraction: fn(
            self: *const IDirectManipulationInteractionEventHandler,
            viewport: *IDirectManipulationViewport2,
            interaction: DIRECTMANIPULATION_INTERACTION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationInteractionEventHandler_OnInteraction(self: *const T, viewport: *IDirectManipulationViewport2, interaction: DIRECTMANIPULATION_INTERACTION_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationInteractionEventHandler.VTable, self.vtable).OnInteraction(@ptrCast(*const IDirectManipulationInteractionEventHandler, self), viewport, interaction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationFrameInfoProvider_Value = @import("../zig.zig").Guid.initString("FB759DBA-6F4C-4C01-874E-19C8A05907F9");
pub const IID_IDirectManipulationFrameInfoProvider = &IID_IDirectManipulationFrameInfoProvider_Value;
pub const IDirectManipulationFrameInfoProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNextFrameInfo: fn(
            self: *const IDirectManipulationFrameInfoProvider,
            time: *u64,
            processTime: *u64,
            compositionTime: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationFrameInfoProvider_GetNextFrameInfo(self: *const T, time: *u64, processTime: *u64, compositionTime: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationFrameInfoProvider.VTable, self.vtable).GetNextFrameInfo(@ptrCast(*const IDirectManipulationFrameInfoProvider, self), time, processTime, compositionTime);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationCompositor_Value = @import("../zig.zig").Guid.initString("537A0825-0387-4EFA-B62F-71EB1F085A7E");
pub const IID_IDirectManipulationCompositor = &IID_IDirectManipulationCompositor_Value;
pub const IDirectManipulationCompositor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddContent: fn(
            self: *const IDirectManipulationCompositor,
            content: *IDirectManipulationContent,
            device: ?*IUnknown,
            parentVisual: ?*IUnknown,
            childVisual: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveContent: fn(
            self: *const IDirectManipulationCompositor,
            content: *IDirectManipulationContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUpdateManager: fn(
            self: *const IDirectManipulationCompositor,
            updateManager: *IDirectManipulationUpdateManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: fn(
            self: *const IDirectManipulationCompositor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationCompositor_AddContent(self: *const T, content: *IDirectManipulationContent, device: ?*IUnknown, parentVisual: ?*IUnknown, childVisual: ?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationCompositor.VTable, self.vtable).AddContent(@ptrCast(*const IDirectManipulationCompositor, self), content, device, parentVisual, childVisual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationCompositor_RemoveContent(self: *const T, content: *IDirectManipulationContent) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationCompositor.VTable, self.vtable).RemoveContent(@ptrCast(*const IDirectManipulationCompositor, self), content);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationCompositor_SetUpdateManager(self: *const T, updateManager: *IDirectManipulationUpdateManager) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationCompositor.VTable, self.vtable).SetUpdateManager(@ptrCast(*const IDirectManipulationCompositor, self), updateManager);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationCompositor_Flush(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationCompositor.VTable, self.vtable).Flush(@ptrCast(*const IDirectManipulationCompositor, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationCompositor2_Value = @import("../zig.zig").Guid.initString("D38C7822-F1CB-43CB-B4B9-AC0C767A412E");
pub const IID_IDirectManipulationCompositor2 = &IID_IDirectManipulationCompositor2_Value;
pub const IDirectManipulationCompositor2 = extern struct {
    pub const VTable = extern struct {
        base: IDirectManipulationCompositor.VTable,
        AddContentWithCrossProcessChaining: fn(
            self: *const IDirectManipulationCompositor2,
            content: *IDirectManipulationPrimaryContent,
            device: ?*IUnknown,
            parentVisual: ?*IUnknown,
            childVisual: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDirectManipulationCompositor.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationCompositor2_AddContentWithCrossProcessChaining(self: *const T, content: *IDirectManipulationPrimaryContent, device: ?*IUnknown, parentVisual: ?*IUnknown, childVisual: ?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationCompositor2.VTable, self.vtable).AddContentWithCrossProcessChaining(@ptrCast(*const IDirectManipulationCompositor2, self), content, device, parentVisual, childVisual);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationUpdateHandler_Value = @import("../zig.zig").Guid.initString("790B6337-64F8-4FF5-A269-B32BC2AF27A7");
pub const IID_IDirectManipulationUpdateHandler = &IID_IDirectManipulationUpdateHandler_Value;
pub const IDirectManipulationUpdateHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Update: fn(
            self: *const IDirectManipulationUpdateHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationUpdateHandler_Update(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationUpdateHandler.VTable, self.vtable).Update(@ptrCast(*const IDirectManipulationUpdateHandler, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationUpdateManager_Value = @import("../zig.zig").Guid.initString("B0AE62FD-BE34-46E7-9CAA-D361FACBB9CC");
pub const IID_IDirectManipulationUpdateManager = &IID_IDirectManipulationUpdateManager_Value;
pub const IDirectManipulationUpdateManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterWaitHandleCallback: fn(
            self: *const IDirectManipulationUpdateManager,
            handle: HANDLE,
            eventHandler: *IDirectManipulationUpdateHandler,
            cookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterWaitHandleCallback: fn(
            self: *const IDirectManipulationUpdateManager,
            cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: fn(
            self: *const IDirectManipulationUpdateManager,
            frameInfo: ?*IDirectManipulationFrameInfoProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationUpdateManager_RegisterWaitHandleCallback(self: *const T, handle: HANDLE, eventHandler: *IDirectManipulationUpdateHandler, cookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationUpdateManager.VTable, self.vtable).RegisterWaitHandleCallback(@ptrCast(*const IDirectManipulationUpdateManager, self), handle, eventHandler, cookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationUpdateManager_UnregisterWaitHandleCallback(self: *const T, cookie: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationUpdateManager.VTable, self.vtable).UnregisterWaitHandleCallback(@ptrCast(*const IDirectManipulationUpdateManager, self), cookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationUpdateManager_Update(self: *const T, frameInfo: ?*IDirectManipulationFrameInfoProvider) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationUpdateManager.VTable, self.vtable).Update(@ptrCast(*const IDirectManipulationUpdateManager, self), frameInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION = extern enum(i32) {
    STOP = 0,
    FORWARD = 1,
    REVERSE = 2,
};
pub const DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION_STOP = DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION.STOP;
pub const DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION_FORWARD = DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION.FORWARD;
pub const DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION_REVERSE = DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION.REVERSE;

const IID_IDirectManipulationAutoScrollBehavior_Value = @import("../zig.zig").Guid.initString("6D5954D4-2003-4356-9B31-D051C9FF0AF7");
pub const IID_IDirectManipulationAutoScrollBehavior = &IID_IDirectManipulationAutoScrollBehavior_Value;
pub const IDirectManipulationAutoScrollBehavior = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetConfiguration: fn(
            self: *const IDirectManipulationAutoScrollBehavior,
            motionTypes: DIRECTMANIPULATION_MOTION_TYPES,
            scrollMotion: DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationAutoScrollBehavior_SetConfiguration(self: *const T, motionTypes: DIRECTMANIPULATION_MOTION_TYPES, scrollMotion: DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationAutoScrollBehavior.VTable, self.vtable).SetConfiguration(@ptrCast(*const IDirectManipulationAutoScrollBehavior, self), motionTypes, scrollMotion);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectManipulationDeferContactService_Value = @import("../zig.zig").Guid.initString("652D5C71-FE60-4A98-BE70-E5F21291E7F1");
pub const IID_IDirectManipulationDeferContactService = &IID_IDirectManipulationDeferContactService_Value;
pub const IDirectManipulationDeferContactService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DeferContact: fn(
            self: *const IDirectManipulationDeferContactService,
            pointerId: u32,
            timeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelContact: fn(
            self: *const IDirectManipulationDeferContactService,
            pointerId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelDeferral: fn(
            self: *const IDirectManipulationDeferContactService,
            pointerId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationDeferContactService_DeferContact(self: *const T, pointerId: u32, timeout: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationDeferContactService.VTable, self.vtable).DeferContact(@ptrCast(*const IDirectManipulationDeferContactService, self), pointerId, timeout);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationDeferContactService_CancelContact(self: *const T, pointerId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationDeferContactService.VTable, self.vtable).CancelContact(@ptrCast(*const IDirectManipulationDeferContactService, self), pointerId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDirectManipulationDeferContactService_CancelDeferral(self: *const T, pointerId: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDirectManipulationDeferContactService.VTable, self.vtable).CancelDeferral(@ptrCast(*const IDirectManipulationDeferContactService, self), pointerId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (8)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const MSG = @import("windows_and_messaging.zig").MSG;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const HANDLE = @import("system_services.zig").HANDLE;
const RECT = @import("display_devices.zig").RECT;
const BOOL = @import("system_services.zig").BOOL;
const HWND = @import("windows_and_messaging.zig").HWND;

test {
    const constant_export_count = 0;
    const type_export_count = 33;
    const enum_value_export_count = 77;
    const com_iface_id_export_count = 18;
    const com_class_id_export_count = 6;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 8;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

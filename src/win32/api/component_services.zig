//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (320)
//--------------------------------------------------------------------------------
const CLSID_SecurityIdentity_Value = @import("../zig.zig").Guid.initString("ECABB0A5-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_SecurityIdentity = &CLSID_SecurityIdentity_Value;

const CLSID_SecurityCallers_Value = @import("../zig.zig").Guid.initString("ECABB0A6-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_SecurityCallers = &CLSID_SecurityCallers_Value;

const CLSID_SecurityCallContext_Value = @import("../zig.zig").Guid.initString("ECABB0A7-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_SecurityCallContext = &CLSID_SecurityCallContext_Value;

const CLSID_GetSecurityCallContextAppObject_Value = @import("../zig.zig").Guid.initString("ECABB0A8-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_GetSecurityCallContextAppObject = &CLSID_GetSecurityCallContextAppObject_Value;

const CLSID_Dummy30040732_Value = @import("../zig.zig").Guid.initString("ECABB0A9-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_Dummy30040732 = &CLSID_Dummy30040732_Value;

const CLSID_TransactionContext_Value = @import("../zig.zig").Guid.initString("7999FC25-D3C6-11CF-ACAB-00A024A55AEF");
pub const CLSID_TransactionContext = &CLSID_TransactionContext_Value;

const CLSID_TransactionContextEx_Value = @import("../zig.zig").Guid.initString("5CB66670-D3D4-11CF-ACAB-00A024A55AEF");
pub const CLSID_TransactionContextEx = &CLSID_TransactionContextEx_Value;

const CLSID_ByotServerEx_Value = @import("../zig.zig").Guid.initString("ECABB0AA-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_ByotServerEx = &CLSID_ByotServerEx_Value;

const CLSID_CServiceConfig_Value = @import("../zig.zig").Guid.initString("ECABB0C8-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_CServiceConfig = &CLSID_CServiceConfig_Value;

const CLSID_ServicePool_Value = @import("../zig.zig").Guid.initString("ECABB0C9-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_ServicePool = &CLSID_ServicePool_Value;

const CLSID_ServicePoolConfig_Value = @import("../zig.zig").Guid.initString("ECABB0CA-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_ServicePoolConfig = &CLSID_ServicePoolConfig_Value;

const CLSID_SharedProperty_Value = @import("../zig.zig").Guid.initString("2A005C05-A5DE-11CF-9E66-00AA00A3F464");
pub const CLSID_SharedProperty = &CLSID_SharedProperty_Value;

const CLSID_SharedPropertyGroup_Value = @import("../zig.zig").Guid.initString("2A005C0B-A5DE-11CF-9E66-00AA00A3F464");
pub const CLSID_SharedPropertyGroup = &CLSID_SharedPropertyGroup_Value;

const CLSID_SharedPropertyGroupManager_Value = @import("../zig.zig").Guid.initString("2A005C11-A5DE-11CF-9E66-00AA00A3F464");
pub const CLSID_SharedPropertyGroupManager = &CLSID_SharedPropertyGroupManager_Value;

const CLSID_COMEvents_Value = @import("../zig.zig").Guid.initString("ECABB0AB-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_COMEvents = &CLSID_COMEvents_Value;

const CLSID_CoMTSLocator_Value = @import("../zig.zig").Guid.initString("ECABB0AC-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_CoMTSLocator = &CLSID_CoMTSLocator_Value;

const CLSID_MtsGrp_Value = @import("../zig.zig").Guid.initString("4B2E958D-0393-11D1-B1AB-00AA00BA3258");
pub const CLSID_MtsGrp = &CLSID_MtsGrp_Value;

const CLSID_ComServiceEvents_Value = @import("../zig.zig").Guid.initString("ECABB0C3-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_ComServiceEvents = &CLSID_ComServiceEvents_Value;

const CLSID_ComSystemAppEventData_Value = @import("../zig.zig").Guid.initString("ECABB0C6-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_ComSystemAppEventData = &CLSID_ComSystemAppEventData_Value;

const CLSID_CRMClerk_Value = @import("../zig.zig").Guid.initString("ECABB0BD-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_CRMClerk = &CLSID_CRMClerk_Value;

const CLSID_CRMRecoveryClerk_Value = @import("../zig.zig").Guid.initString("ECABB0BE-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_CRMRecoveryClerk = &CLSID_CRMRecoveryClerk_Value;

const CLSID_LBEvents_Value = @import("../zig.zig").Guid.initString("ECABB0C1-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_LBEvents = &CLSID_LBEvents_Value;

const CLSID_MessageMover_Value = @import("../zig.zig").Guid.initString("ECABB0BF-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_MessageMover = &CLSID_MessageMover_Value;

const CLSID_DispenserManager_Value = @import("../zig.zig").Guid.initString("ECABB0C0-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_DispenserManager = &CLSID_DispenserManager_Value;

const CLSID_PoolMgr_Value = @import("../zig.zig").Guid.initString("ECABAFB5-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_PoolMgr = &CLSID_PoolMgr_Value;

const CLSID_EventServer_Value = @import("../zig.zig").Guid.initString("ECABAFBC-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_EventServer = &CLSID_EventServer_Value;

const CLSID_TrackerServer_Value = @import("../zig.zig").Guid.initString("ECABAFB9-7F19-11D2-978E-0000F8757E2A");
pub const CLSID_TrackerServer = &CLSID_TrackerServer_Value;

const CLSID_AppDomainHelper_Value = @import("../zig.zig").Guid.initString("EF24F689-14F8-4D92-B4AF-D7B1F0E70FD4");
pub const CLSID_AppDomainHelper = &CLSID_AppDomainHelper_Value;

const CLSID_ClrAssemblyLocator_Value = @import("../zig.zig").Guid.initString("458AA3B5-265A-4B75-BC05-9BEA4630CF18");
pub const CLSID_ClrAssemblyLocator = &CLSID_ClrAssemblyLocator_Value;

const CLSID_COMAdminCatalog_Value = @import("../zig.zig").Guid.initString("F618C514-DFB8-11D1-A2CF-00805FC79235");
pub const CLSID_COMAdminCatalog = &CLSID_COMAdminCatalog_Value;

const CLSID_COMAdminCatalogObject_Value = @import("../zig.zig").Guid.initString("F618C515-DFB8-11D1-A2CF-00805FC79235");
pub const CLSID_COMAdminCatalogObject = &CLSID_COMAdminCatalogObject_Value;

const CLSID_COMAdminCatalogCollection_Value = @import("../zig.zig").Guid.initString("F618C516-DFB8-11D1-A2CF-00805FC79235");
pub const CLSID_COMAdminCatalogCollection = &CLSID_COMAdminCatalogCollection_Value;

const IID_ICOMAdminCatalog_Value = @import("../zig.zig").Guid.initString("DD662187-DFC2-11D1-A2CF-00805FC79235");
pub const IID_ICOMAdminCatalog = &IID_ICOMAdminCatalog_Value;
pub const ICOMAdminCatalog = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetCollection: fn(
            self: *const ICOMAdminCatalog,
            bstrCollName: BSTR,
            ppCatalogCollection: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: fn(
            self: *const ICOMAdminCatalog,
            bstrCatalogServerName: BSTR,
            ppCatalogCollection: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MajorVersion: fn(
            self: *const ICOMAdminCatalog,
            plMajorVersion: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MinorVersion: fn(
            self: *const ICOMAdminCatalog,
            plMinorVersion: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCollectionByQuery: fn(
            self: *const ICOMAdminCatalog,
            bstrCollName: BSTR,
            ppsaVarQuery: **SAFEARRAY,
            ppCatalogCollection: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportComponent: fn(
            self: *const ICOMAdminCatalog,
            bstrApplIDOrName: BSTR,
            bstrCLSIDOrProgID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallComponent: fn(
            self: *const ICOMAdminCatalog,
            bstrApplIDOrName: BSTR,
            bstrDLL: BSTR,
            bstrTLB: BSTR,
            bstrPSDLL: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownApplication: fn(
            self: *const ICOMAdminCatalog,
            bstrApplIDOrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportApplication: fn(
            self: *const ICOMAdminCatalog,
            bstrApplIDOrName: BSTR,
            bstrApplicationFile: BSTR,
            lOptions: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallApplication: fn(
            self: *const ICOMAdminCatalog,
            bstrApplicationFile: BSTR,
            bstrDestinationDirectory: BSTR,
            lOptions: i32,
            bstrUserId: BSTR,
            bstrPassword: BSTR,
            bstrRSN: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopRouter: fn(
            self: *const ICOMAdminCatalog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshRouter: fn(
            self: *const ICOMAdminCatalog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartRouter: fn(
            self: *const ICOMAdminCatalog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reserved1: fn(
            self: *const ICOMAdminCatalog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reserved2: fn(
            self: *const ICOMAdminCatalog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallMultipleComponents: fn(
            self: *const ICOMAdminCatalog,
            bstrApplIDOrName: BSTR,
            ppsaVarFileNames: **SAFEARRAY,
            ppsaVarCLSIDs: **SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMultipleComponentsInfo: fn(
            self: *const ICOMAdminCatalog,
            bstrApplIdOrName: BSTR,
            ppsaVarFileNames: **SAFEARRAY,
            ppsaVarCLSIDs: **SAFEARRAY,
            ppsaVarClassNames: **SAFEARRAY,
            ppsaVarFileFlags: **SAFEARRAY,
            ppsaVarComponentFlags: **SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshComponents: fn(
            self: *const ICOMAdminCatalog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackupREGDB: fn(
            self: *const ICOMAdminCatalog,
            bstrBackupFilePath: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreREGDB: fn(
            self: *const ICOMAdminCatalog,
            bstrBackupFilePath: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryApplicationFile: fn(
            self: *const ICOMAdminCatalog,
            bstrApplicationFile: BSTR,
            pbstrApplicationName: *BSTR,
            pbstrApplicationDescription: *BSTR,
            pbHasUsers: *i16,
            pbIsProxy: *i16,
            ppsaVarFileNames: **SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartApplication: fn(
            self: *const ICOMAdminCatalog,
            bstrApplIdOrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServiceCheck: fn(
            self: *const ICOMAdminCatalog,
            lService: i32,
            plStatus: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallMultipleEventClasses: fn(
            self: *const ICOMAdminCatalog,
            bstrApplIdOrName: BSTR,
            ppsaVarFileNames: **SAFEARRAY,
            ppsaVarCLSIDS: **SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallEventClass: fn(
            self: *const ICOMAdminCatalog,
            bstrApplIdOrName: BSTR,
            bstrDLL: BSTR,
            bstrTLB: BSTR,
            bstrPSDLL: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventClassesForIID: fn(
            self: *const ICOMAdminCatalog,
            bstrIID: BSTR,
            ppsaVarCLSIDs: **SAFEARRAY,
            ppsaVarProgIDs: **SAFEARRAY,
            ppsaVarDescriptions: **SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_GetCollection(self: *const T, bstrCollName: BSTR, ppCatalogCollection: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).GetCollection(@ptrCast(*const ICOMAdminCatalog, self), bstrCollName, ppCatalogCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_Connect(self: *const T, bstrCatalogServerName: BSTR, ppCatalogCollection: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).Connect(@ptrCast(*const ICOMAdminCatalog, self), bstrCatalogServerName, ppCatalogCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_get_MajorVersion(self: *const T, plMajorVersion: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).get_MajorVersion(@ptrCast(*const ICOMAdminCatalog, self), plMajorVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_get_MinorVersion(self: *const T, plMinorVersion: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).get_MinorVersion(@ptrCast(*const ICOMAdminCatalog, self), plMinorVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_GetCollectionByQuery(self: *const T, bstrCollName: BSTR, ppsaVarQuery: **SAFEARRAY, ppCatalogCollection: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).GetCollectionByQuery(@ptrCast(*const ICOMAdminCatalog, self), bstrCollName, ppsaVarQuery, ppCatalogCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_ImportComponent(self: *const T, bstrApplIDOrName: BSTR, bstrCLSIDOrProgID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).ImportComponent(@ptrCast(*const ICOMAdminCatalog, self), bstrApplIDOrName, bstrCLSIDOrProgID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_InstallComponent(self: *const T, bstrApplIDOrName: BSTR, bstrDLL: BSTR, bstrTLB: BSTR, bstrPSDLL: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).InstallComponent(@ptrCast(*const ICOMAdminCatalog, self), bstrApplIDOrName, bstrDLL, bstrTLB, bstrPSDLL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_ShutdownApplication(self: *const T, bstrApplIDOrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).ShutdownApplication(@ptrCast(*const ICOMAdminCatalog, self), bstrApplIDOrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_ExportApplication(self: *const T, bstrApplIDOrName: BSTR, bstrApplicationFile: BSTR, lOptions: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).ExportApplication(@ptrCast(*const ICOMAdminCatalog, self), bstrApplIDOrName, bstrApplicationFile, lOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_InstallApplication(self: *const T, bstrApplicationFile: BSTR, bstrDestinationDirectory: BSTR, lOptions: i32, bstrUserId: BSTR, bstrPassword: BSTR, bstrRSN: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).InstallApplication(@ptrCast(*const ICOMAdminCatalog, self), bstrApplicationFile, bstrDestinationDirectory, lOptions, bstrUserId, bstrPassword, bstrRSN);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_StopRouter(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).StopRouter(@ptrCast(*const ICOMAdminCatalog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_RefreshRouter(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).RefreshRouter(@ptrCast(*const ICOMAdminCatalog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_StartRouter(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).StartRouter(@ptrCast(*const ICOMAdminCatalog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_Reserved1(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).Reserved1(@ptrCast(*const ICOMAdminCatalog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_Reserved2(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).Reserved2(@ptrCast(*const ICOMAdminCatalog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_InstallMultipleComponents(self: *const T, bstrApplIDOrName: BSTR, ppsaVarFileNames: **SAFEARRAY, ppsaVarCLSIDs: **SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).InstallMultipleComponents(@ptrCast(*const ICOMAdminCatalog, self), bstrApplIDOrName, ppsaVarFileNames, ppsaVarCLSIDs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_GetMultipleComponentsInfo(self: *const T, bstrApplIdOrName: BSTR, ppsaVarFileNames: **SAFEARRAY, ppsaVarCLSIDs: **SAFEARRAY, ppsaVarClassNames: **SAFEARRAY, ppsaVarFileFlags: **SAFEARRAY, ppsaVarComponentFlags: **SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).GetMultipleComponentsInfo(@ptrCast(*const ICOMAdminCatalog, self), bstrApplIdOrName, ppsaVarFileNames, ppsaVarCLSIDs, ppsaVarClassNames, ppsaVarFileFlags, ppsaVarComponentFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_RefreshComponents(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).RefreshComponents(@ptrCast(*const ICOMAdminCatalog, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_BackupREGDB(self: *const T, bstrBackupFilePath: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).BackupREGDB(@ptrCast(*const ICOMAdminCatalog, self), bstrBackupFilePath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_RestoreREGDB(self: *const T, bstrBackupFilePath: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).RestoreREGDB(@ptrCast(*const ICOMAdminCatalog, self), bstrBackupFilePath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_QueryApplicationFile(self: *const T, bstrApplicationFile: BSTR, pbstrApplicationName: *BSTR, pbstrApplicationDescription: *BSTR, pbHasUsers: *i16, pbIsProxy: *i16, ppsaVarFileNames: **SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).QueryApplicationFile(@ptrCast(*const ICOMAdminCatalog, self), bstrApplicationFile, pbstrApplicationName, pbstrApplicationDescription, pbHasUsers, pbIsProxy, ppsaVarFileNames);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_StartApplication(self: *const T, bstrApplIdOrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).StartApplication(@ptrCast(*const ICOMAdminCatalog, self), bstrApplIdOrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_ServiceCheck(self: *const T, lService: i32, plStatus: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).ServiceCheck(@ptrCast(*const ICOMAdminCatalog, self), lService, plStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_InstallMultipleEventClasses(self: *const T, bstrApplIdOrName: BSTR, ppsaVarFileNames: **SAFEARRAY, ppsaVarCLSIDS: **SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).InstallMultipleEventClasses(@ptrCast(*const ICOMAdminCatalog, self), bstrApplIdOrName, ppsaVarFileNames, ppsaVarCLSIDS);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_InstallEventClass(self: *const T, bstrApplIdOrName: BSTR, bstrDLL: BSTR, bstrTLB: BSTR, bstrPSDLL: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).InstallEventClass(@ptrCast(*const ICOMAdminCatalog, self), bstrApplIdOrName, bstrDLL, bstrTLB, bstrPSDLL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog_GetEventClassesForIID(self: *const T, bstrIID: BSTR, ppsaVarCLSIDs: **SAFEARRAY, ppsaVarProgIDs: **SAFEARRAY, ppsaVarDescriptions: **SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog.VTable, self.vtable).GetEventClassesForIID(@ptrCast(*const ICOMAdminCatalog, self), bstrIID, ppsaVarCLSIDs, ppsaVarProgIDs, ppsaVarDescriptions);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const COMAdminInUse = extern enum(i32) {
    COMAdminNotInUse = 0,
    COMAdminInUseByCatalog = 1,
    COMAdminInUseByRegistryUnknown = 2,
    COMAdminInUseByRegistryProxyStub = 3,
    COMAdminInUseByRegistryTypeLib = 4,
    COMAdminInUseByRegistryClsid = 5,
};
pub const COMAdminNotInUse = COMAdminInUse.COMAdminNotInUse;
pub const COMAdminInUseByCatalog = COMAdminInUse.COMAdminInUseByCatalog;
pub const COMAdminInUseByRegistryUnknown = COMAdminInUse.COMAdminInUseByRegistryUnknown;
pub const COMAdminInUseByRegistryProxyStub = COMAdminInUse.COMAdminInUseByRegistryProxyStub;
pub const COMAdminInUseByRegistryTypeLib = COMAdminInUse.COMAdminInUseByRegistryTypeLib;
pub const COMAdminInUseByRegistryClsid = COMAdminInUse.COMAdminInUseByRegistryClsid;

const IID_ICOMAdminCatalog2_Value = @import("../zig.zig").Guid.initString("790C6E0B-9194-4CC9-9426-A48A63185696");
pub const IID_ICOMAdminCatalog2 = &IID_ICOMAdminCatalog2_Value;
pub const ICOMAdminCatalog2 = extern struct {
    pub const VTable = extern struct {
        base: ICOMAdminCatalog.VTable,
        GetCollectionByQuery2: fn(
            self: *const ICOMAdminCatalog2,
            bstrCollectionName: BSTR,
            pVarQueryStrings: *VARIANT,
            ppCatalogCollection: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationInstanceIDFromProcessID: fn(
            self: *const ICOMAdminCatalog2,
            lProcessID: i32,
            pbstrApplicationInstanceID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownApplicationInstances: fn(
            self: *const ICOMAdminCatalog2,
            pVarApplicationInstanceID: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PauseApplicationInstances: fn(
            self: *const ICOMAdminCatalog2,
            pVarApplicationInstanceID: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeApplicationInstances: fn(
            self: *const ICOMAdminCatalog2,
            pVarApplicationInstanceID: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RecycleApplicationInstances: fn(
            self: *const ICOMAdminCatalog2,
            pVarApplicationInstanceID: *VARIANT,
            lReasonCode: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AreApplicationInstancesPaused: fn(
            self: *const ICOMAdminCatalog2,
            pVarApplicationInstanceID: *VARIANT,
            pVarBoolPaused: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DumpApplicationInstance: fn(
            self: *const ICOMAdminCatalog2,
            bstrApplicationInstanceID: BSTR,
            bstrDirectory: BSTR,
            lMaxImages: i32,
            pbstrDumpFile: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_IsApplicationInstanceDumpSupported: fn(
            self: *const ICOMAdminCatalog2,
            pVarBoolDumpSupported: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateServiceForApplication: fn(
            self: *const ICOMAdminCatalog2,
            bstrApplicationIDOrName: BSTR,
            bstrServiceName: BSTR,
            bstrStartType: BSTR,
            bstrErrorControl: BSTR,
            bstrDependencies: BSTR,
            bstrRunAs: BSTR,
            bstrPassword: BSTR,
            bDesktopOk: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteServiceForApplication: fn(
            self: *const ICOMAdminCatalog2,
            bstrApplicationIDOrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartitionID: fn(
            self: *const ICOMAdminCatalog2,
            bstrApplicationIDOrName: BSTR,
            pbstrPartitionID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartitionName: fn(
            self: *const ICOMAdminCatalog2,
            bstrApplicationIDOrName: BSTR,
            pbstrPartitionName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CurrentPartition: fn(
            self: *const ICOMAdminCatalog2,
            bstrPartitionIDOrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CurrentPartitionID: fn(
            self: *const ICOMAdminCatalog2,
            pbstrPartitionID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CurrentPartitionName: fn(
            self: *const ICOMAdminCatalog2,
            pbstrPartitionName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_GlobalPartitionID: fn(
            self: *const ICOMAdminCatalog2,
            pbstrGlobalPartitionID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FlushPartitionCache: fn(
            self: *const ICOMAdminCatalog2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyApplications: fn(
            self: *const ICOMAdminCatalog2,
            bstrSourcePartitionIDOrName: BSTR,
            pVarApplicationID: *VARIANT,
            bstrDestinationPartitionIDOrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyComponents: fn(
            self: *const ICOMAdminCatalog2,
            bstrSourceApplicationIDOrName: BSTR,
            pVarCLSIDOrProgID: *VARIANT,
            bstrDestinationApplicationIDOrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveComponents: fn(
            self: *const ICOMAdminCatalog2,
            bstrSourceApplicationIDOrName: BSTR,
            pVarCLSIDOrProgID: *VARIANT,
            bstrDestinationApplicationIDOrName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AliasComponent: fn(
            self: *const ICOMAdminCatalog2,
            bstrSrcApplicationIDOrName: BSTR,
            bstrCLSIDOrProgID: BSTR,
            bstrDestApplicationIDOrName: BSTR,
            bstrNewProgId: BSTR,
            bstrNewClsid: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSafeToDelete: fn(
            self: *const ICOMAdminCatalog2,
            bstrDllName: BSTR,
            pCOMAdminInUse: *COMAdminInUse,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportUnconfiguredComponents: fn(
            self: *const ICOMAdminCatalog2,
            bstrApplicationIDOrName: BSTR,
            pVarCLSIDOrProgID: *VARIANT,
            pVarComponentType: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PromoteUnconfiguredComponents: fn(
            self: *const ICOMAdminCatalog2,
            bstrApplicationIDOrName: BSTR,
            pVarCLSIDOrProgID: *VARIANT,
            pVarComponentType: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportComponents: fn(
            self: *const ICOMAdminCatalog2,
            bstrApplicationIDOrName: BSTR,
            pVarCLSIDOrProgID: *VARIANT,
            pVarComponentType: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Is64BitCatalogServer: fn(
            self: *const ICOMAdminCatalog2,
            pbIs64Bit: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportPartition: fn(
            self: *const ICOMAdminCatalog2,
            bstrPartitionIDOrName: BSTR,
            bstrPartitionFileName: BSTR,
            lOptions: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallPartition: fn(
            self: *const ICOMAdminCatalog2,
            bstrFileName: BSTR,
            bstrDestDirectory: BSTR,
            lOptions: i32,
            bstrUserID: BSTR,
            bstrPassword: BSTR,
            bstrRSN: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryApplicationFile2: fn(
            self: *const ICOMAdminCatalog2,
            bstrApplicationFile: BSTR,
            ppFilesForImport: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponentVersionCount: fn(
            self: *const ICOMAdminCatalog2,
            bstrCLSIDOrProgID: BSTR,
            plVersionCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ICOMAdminCatalog.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_GetCollectionByQuery2(self: *const T, bstrCollectionName: BSTR, pVarQueryStrings: *VARIANT, ppCatalogCollection: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).GetCollectionByQuery2(@ptrCast(*const ICOMAdminCatalog2, self), bstrCollectionName, pVarQueryStrings, ppCatalogCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_GetApplicationInstanceIDFromProcessID(self: *const T, lProcessID: i32, pbstrApplicationInstanceID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).GetApplicationInstanceIDFromProcessID(@ptrCast(*const ICOMAdminCatalog2, self), lProcessID, pbstrApplicationInstanceID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_ShutdownApplicationInstances(self: *const T, pVarApplicationInstanceID: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).ShutdownApplicationInstances(@ptrCast(*const ICOMAdminCatalog2, self), pVarApplicationInstanceID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_PauseApplicationInstances(self: *const T, pVarApplicationInstanceID: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).PauseApplicationInstances(@ptrCast(*const ICOMAdminCatalog2, self), pVarApplicationInstanceID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_ResumeApplicationInstances(self: *const T, pVarApplicationInstanceID: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).ResumeApplicationInstances(@ptrCast(*const ICOMAdminCatalog2, self), pVarApplicationInstanceID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_RecycleApplicationInstances(self: *const T, pVarApplicationInstanceID: *VARIANT, lReasonCode: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).RecycleApplicationInstances(@ptrCast(*const ICOMAdminCatalog2, self), pVarApplicationInstanceID, lReasonCode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_AreApplicationInstancesPaused(self: *const T, pVarApplicationInstanceID: *VARIANT, pVarBoolPaused: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).AreApplicationInstancesPaused(@ptrCast(*const ICOMAdminCatalog2, self), pVarApplicationInstanceID, pVarBoolPaused);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_DumpApplicationInstance(self: *const T, bstrApplicationInstanceID: BSTR, bstrDirectory: BSTR, lMaxImages: i32, pbstrDumpFile: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).DumpApplicationInstance(@ptrCast(*const ICOMAdminCatalog2, self), bstrApplicationInstanceID, bstrDirectory, lMaxImages, pbstrDumpFile);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_get_IsApplicationInstanceDumpSupported(self: *const T, pVarBoolDumpSupported: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).get_IsApplicationInstanceDumpSupported(@ptrCast(*const ICOMAdminCatalog2, self), pVarBoolDumpSupported);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_CreateServiceForApplication(self: *const T, bstrApplicationIDOrName: BSTR, bstrServiceName: BSTR, bstrStartType: BSTR, bstrErrorControl: BSTR, bstrDependencies: BSTR, bstrRunAs: BSTR, bstrPassword: BSTR, bDesktopOk: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).CreateServiceForApplication(@ptrCast(*const ICOMAdminCatalog2, self), bstrApplicationIDOrName, bstrServiceName, bstrStartType, bstrErrorControl, bstrDependencies, bstrRunAs, bstrPassword, bDesktopOk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_DeleteServiceForApplication(self: *const T, bstrApplicationIDOrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).DeleteServiceForApplication(@ptrCast(*const ICOMAdminCatalog2, self), bstrApplicationIDOrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_GetPartitionID(self: *const T, bstrApplicationIDOrName: BSTR, pbstrPartitionID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).GetPartitionID(@ptrCast(*const ICOMAdminCatalog2, self), bstrApplicationIDOrName, pbstrPartitionID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_GetPartitionName(self: *const T, bstrApplicationIDOrName: BSTR, pbstrPartitionName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).GetPartitionName(@ptrCast(*const ICOMAdminCatalog2, self), bstrApplicationIDOrName, pbstrPartitionName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_put_CurrentPartition(self: *const T, bstrPartitionIDOrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).put_CurrentPartition(@ptrCast(*const ICOMAdminCatalog2, self), bstrPartitionIDOrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_get_CurrentPartitionID(self: *const T, pbstrPartitionID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).get_CurrentPartitionID(@ptrCast(*const ICOMAdminCatalog2, self), pbstrPartitionID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_get_CurrentPartitionName(self: *const T, pbstrPartitionName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).get_CurrentPartitionName(@ptrCast(*const ICOMAdminCatalog2, self), pbstrPartitionName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_get_GlobalPartitionID(self: *const T, pbstrGlobalPartitionID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).get_GlobalPartitionID(@ptrCast(*const ICOMAdminCatalog2, self), pbstrGlobalPartitionID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_FlushPartitionCache(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).FlushPartitionCache(@ptrCast(*const ICOMAdminCatalog2, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_CopyApplications(self: *const T, bstrSourcePartitionIDOrName: BSTR, pVarApplicationID: *VARIANT, bstrDestinationPartitionIDOrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).CopyApplications(@ptrCast(*const ICOMAdminCatalog2, self), bstrSourcePartitionIDOrName, pVarApplicationID, bstrDestinationPartitionIDOrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_CopyComponents(self: *const T, bstrSourceApplicationIDOrName: BSTR, pVarCLSIDOrProgID: *VARIANT, bstrDestinationApplicationIDOrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).CopyComponents(@ptrCast(*const ICOMAdminCatalog2, self), bstrSourceApplicationIDOrName, pVarCLSIDOrProgID, bstrDestinationApplicationIDOrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_MoveComponents(self: *const T, bstrSourceApplicationIDOrName: BSTR, pVarCLSIDOrProgID: *VARIANT, bstrDestinationApplicationIDOrName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).MoveComponents(@ptrCast(*const ICOMAdminCatalog2, self), bstrSourceApplicationIDOrName, pVarCLSIDOrProgID, bstrDestinationApplicationIDOrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_AliasComponent(self: *const T, bstrSrcApplicationIDOrName: BSTR, bstrCLSIDOrProgID: BSTR, bstrDestApplicationIDOrName: BSTR, bstrNewProgId: BSTR, bstrNewClsid: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).AliasComponent(@ptrCast(*const ICOMAdminCatalog2, self), bstrSrcApplicationIDOrName, bstrCLSIDOrProgID, bstrDestApplicationIDOrName, bstrNewProgId, bstrNewClsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_IsSafeToDelete(self: *const T, bstrDllName: BSTR, pCOMAdminInUse: *COMAdminInUse) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).IsSafeToDelete(@ptrCast(*const ICOMAdminCatalog2, self), bstrDllName, pCOMAdminInUse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_ImportUnconfiguredComponents(self: *const T, bstrApplicationIDOrName: BSTR, pVarCLSIDOrProgID: *VARIANT, pVarComponentType: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).ImportUnconfiguredComponents(@ptrCast(*const ICOMAdminCatalog2, self), bstrApplicationIDOrName, pVarCLSIDOrProgID, pVarComponentType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_PromoteUnconfiguredComponents(self: *const T, bstrApplicationIDOrName: BSTR, pVarCLSIDOrProgID: *VARIANT, pVarComponentType: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).PromoteUnconfiguredComponents(@ptrCast(*const ICOMAdminCatalog2, self), bstrApplicationIDOrName, pVarCLSIDOrProgID, pVarComponentType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_ImportComponents(self: *const T, bstrApplicationIDOrName: BSTR, pVarCLSIDOrProgID: *VARIANT, pVarComponentType: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).ImportComponents(@ptrCast(*const ICOMAdminCatalog2, self), bstrApplicationIDOrName, pVarCLSIDOrProgID, pVarComponentType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_get_Is64BitCatalogServer(self: *const T, pbIs64Bit: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).get_Is64BitCatalogServer(@ptrCast(*const ICOMAdminCatalog2, self), pbIs64Bit);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_ExportPartition(self: *const T, bstrPartitionIDOrName: BSTR, bstrPartitionFileName: BSTR, lOptions: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).ExportPartition(@ptrCast(*const ICOMAdminCatalog2, self), bstrPartitionIDOrName, bstrPartitionFileName, lOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_InstallPartition(self: *const T, bstrFileName: BSTR, bstrDestDirectory: BSTR, lOptions: i32, bstrUserID: BSTR, bstrPassword: BSTR, bstrRSN: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).InstallPartition(@ptrCast(*const ICOMAdminCatalog2, self), bstrFileName, bstrDestDirectory, lOptions, bstrUserID, bstrPassword, bstrRSN);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_QueryApplicationFile2(self: *const T, bstrApplicationFile: BSTR, ppFilesForImport: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).QueryApplicationFile2(@ptrCast(*const ICOMAdminCatalog2, self), bstrApplicationFile, ppFilesForImport);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMAdminCatalog2_GetComponentVersionCount(self: *const T, bstrCLSIDOrProgID: BSTR, plVersionCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMAdminCatalog2.VTable, self.vtable).GetComponentVersionCount(@ptrCast(*const ICOMAdminCatalog2, self), bstrCLSIDOrProgID, plVersionCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICatalogObject_Value = @import("../zig.zig").Guid.initString("6EB22871-8A19-11D0-81B6-00A0C9231C29");
pub const IID_ICatalogObject = &IID_ICatalogObject_Value;
pub const ICatalogObject = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Value: fn(
            self: *const ICatalogObject,
            bstrPropName: BSTR,
            pvarRetVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Value: fn(
            self: *const ICatalogObject,
            bstrPropName: BSTR,
            val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Key: fn(
            self: *const ICatalogObject,
            pvarRetVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ICatalogObject,
            pvarRetVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPropertyReadOnly: fn(
            self: *const ICatalogObject,
            bstrPropName: BSTR,
            pbRetVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Valid: fn(
            self: *const ICatalogObject,
            pbRetVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPropertyWriteOnly: fn(
            self: *const ICatalogObject,
            bstrPropName: BSTR,
            pbRetVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogObject_get_Value(self: *const T, bstrPropName: BSTR, pvarRetVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogObject.VTable, self.vtable).get_Value(@ptrCast(*const ICatalogObject, self), bstrPropName, pvarRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogObject_put_Value(self: *const T, bstrPropName: BSTR, val: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogObject.VTable, self.vtable).put_Value(@ptrCast(*const ICatalogObject, self), bstrPropName, val);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogObject_get_Key(self: *const T, pvarRetVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogObject.VTable, self.vtable).get_Key(@ptrCast(*const ICatalogObject, self), pvarRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogObject_get_Name(self: *const T, pvarRetVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogObject.VTable, self.vtable).get_Name(@ptrCast(*const ICatalogObject, self), pvarRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogObject_IsPropertyReadOnly(self: *const T, bstrPropName: BSTR, pbRetVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogObject.VTable, self.vtable).IsPropertyReadOnly(@ptrCast(*const ICatalogObject, self), bstrPropName, pbRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogObject_get_Valid(self: *const T, pbRetVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogObject.VTable, self.vtable).get_Valid(@ptrCast(*const ICatalogObject, self), pbRetVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogObject_IsPropertyWriteOnly(self: *const T, bstrPropName: BSTR, pbRetVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogObject.VTable, self.vtable).IsPropertyWriteOnly(@ptrCast(*const ICatalogObject, self), bstrPropName, pbRetVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICatalogCollection_Value = @import("../zig.zig").Guid.initString("6EB22872-8A19-11D0-81B6-00A0C9231C29");
pub const IID_ICatalogCollection = &IID_ICatalogCollection_Value;
pub const ICatalogCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const ICatalogCollection,
            ppEnumVariant: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ICatalogCollection,
            lIndex: i32,
            ppCatalogObject: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ICatalogCollection,
            plObjectCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const ICatalogCollection,
            lIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const ICatalogCollection,
            ppCatalogObject: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Populate: fn(
            self: *const ICatalogCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveChanges: fn(
            self: *const ICatalogCollection,
            pcChanges: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCollection: fn(
            self: *const ICatalogCollection,
            bstrCollName: BSTR,
            varObjectKey: VARIANT,
            ppCatalogCollection: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ICatalogCollection,
            pVarNamel: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AddEnabled: fn(
            self: *const ICatalogCollection,
            pVarBool: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RemoveEnabled: fn(
            self: *const ICatalogCollection,
            pVarBool: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUtilInterface: fn(
            self: *const ICatalogCollection,
            ppIDispatch: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DataStoreMajorVersion: fn(
            self: *const ICatalogCollection,
            plMajorVersion: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DataStoreMinorVersion: fn(
            self: *const ICatalogCollection,
            plMinorVersionl: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PopulateByKey: fn(
            self: *const ICatalogCollection,
            psaKeys: *SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PopulateByQuery: fn(
            self: *const ICatalogCollection,
            bstrQueryString: BSTR,
            lQueryType: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_get__NewEnum(self: *const T, ppEnumVariant: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).get__NewEnum(@ptrCast(*const ICatalogCollection, self), ppEnumVariant);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_get_Item(self: *const T, lIndex: i32, ppCatalogObject: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).get_Item(@ptrCast(*const ICatalogCollection, self), lIndex, ppCatalogObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_get_Count(self: *const T, plObjectCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).get_Count(@ptrCast(*const ICatalogCollection, self), plObjectCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_Remove(self: *const T, lIndex: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).Remove(@ptrCast(*const ICatalogCollection, self), lIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_Add(self: *const T, ppCatalogObject: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).Add(@ptrCast(*const ICatalogCollection, self), ppCatalogObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_Populate(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).Populate(@ptrCast(*const ICatalogCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_SaveChanges(self: *const T, pcChanges: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).SaveChanges(@ptrCast(*const ICatalogCollection, self), pcChanges);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_GetCollection(self: *const T, bstrCollName: BSTR, varObjectKey: VARIANT, ppCatalogCollection: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).GetCollection(@ptrCast(*const ICatalogCollection, self), bstrCollName, varObjectKey, ppCatalogCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_get_Name(self: *const T, pVarNamel: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).get_Name(@ptrCast(*const ICatalogCollection, self), pVarNamel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_get_AddEnabled(self: *const T, pVarBool: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).get_AddEnabled(@ptrCast(*const ICatalogCollection, self), pVarBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_get_RemoveEnabled(self: *const T, pVarBool: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).get_RemoveEnabled(@ptrCast(*const ICatalogCollection, self), pVarBool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_GetUtilInterface(self: *const T, ppIDispatch: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).GetUtilInterface(@ptrCast(*const ICatalogCollection, self), ppIDispatch);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_get_DataStoreMajorVersion(self: *const T, plMajorVersion: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).get_DataStoreMajorVersion(@ptrCast(*const ICatalogCollection, self), plMajorVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_get_DataStoreMinorVersion(self: *const T, plMinorVersionl: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).get_DataStoreMinorVersion(@ptrCast(*const ICatalogCollection, self), plMinorVersionl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_PopulateByKey(self: *const T, psaKeys: *SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).PopulateByKey(@ptrCast(*const ICatalogCollection, self), psaKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICatalogCollection_PopulateByQuery(self: *const T, bstrQueryString: BSTR, lQueryType: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICatalogCollection.VTable, self.vtable).PopulateByQuery(@ptrCast(*const ICatalogCollection, self), bstrQueryString, lQueryType);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const COMAdminComponentType = extern enum(i32) {
    COMAdmin32BitComponent = 1,
    COMAdmin64BitComponent = 2,
};
pub const COMAdmin32BitComponent = COMAdminComponentType.COMAdmin32BitComponent;
pub const COMAdmin64BitComponent = COMAdminComponentType.COMAdmin64BitComponent;

pub const COMAdminApplicationInstallOptions = extern enum(i32) {
    COMAdminInstallNoUsers = 0,
    COMAdminInstallUsers = 1,
    COMAdminInstallForceOverwriteOfFiles = 2,
};
pub const COMAdminInstallNoUsers = COMAdminApplicationInstallOptions.COMAdminInstallNoUsers;
pub const COMAdminInstallUsers = COMAdminApplicationInstallOptions.COMAdminInstallUsers;
pub const COMAdminInstallForceOverwriteOfFiles = COMAdminApplicationInstallOptions.COMAdminInstallForceOverwriteOfFiles;

pub const COMAdminApplicationExportOptions = extern enum(i32) {
    COMAdminExportNoUsers = 0,
    COMAdminExportUsers = 1,
    COMAdminExportApplicationProxy = 2,
    COMAdminExportForceOverwriteOfFiles = 4,
    COMAdminExportIn10Format = 16,
};
pub const COMAdminExportNoUsers = COMAdminApplicationExportOptions.COMAdminExportNoUsers;
pub const COMAdminExportUsers = COMAdminApplicationExportOptions.COMAdminExportUsers;
pub const COMAdminExportApplicationProxy = COMAdminApplicationExportOptions.COMAdminExportApplicationProxy;
pub const COMAdminExportForceOverwriteOfFiles = COMAdminApplicationExportOptions.COMAdminExportForceOverwriteOfFiles;
pub const COMAdminExportIn10Format = COMAdminApplicationExportOptions.COMAdminExportIn10Format;

pub const COMAdminThreadingModels = extern enum(i32) {
    COMAdminThreadingModelApartment = 0,
    COMAdminThreadingModelFree = 1,
    COMAdminThreadingModelMain = 2,
    COMAdminThreadingModelBoth = 3,
    COMAdminThreadingModelNeutral = 4,
    COMAdminThreadingModelNotSpecified = 5,
};
pub const COMAdminThreadingModelApartment = COMAdminThreadingModels.COMAdminThreadingModelApartment;
pub const COMAdminThreadingModelFree = COMAdminThreadingModels.COMAdminThreadingModelFree;
pub const COMAdminThreadingModelMain = COMAdminThreadingModels.COMAdminThreadingModelMain;
pub const COMAdminThreadingModelBoth = COMAdminThreadingModels.COMAdminThreadingModelBoth;
pub const COMAdminThreadingModelNeutral = COMAdminThreadingModels.COMAdminThreadingModelNeutral;
pub const COMAdminThreadingModelNotSpecified = COMAdminThreadingModels.COMAdminThreadingModelNotSpecified;

pub const COMAdminTransactionOptions = extern enum(i32) {
    COMAdminTransactionIgnored = 0,
    COMAdminTransactionNone = 1,
    COMAdminTransactionSupported = 2,
    COMAdminTransactionRequired = 3,
    COMAdminTransactionRequiresNew = 4,
};
pub const COMAdminTransactionIgnored = COMAdminTransactionOptions.COMAdminTransactionIgnored;
pub const COMAdminTransactionNone = COMAdminTransactionOptions.COMAdminTransactionNone;
pub const COMAdminTransactionSupported = COMAdminTransactionOptions.COMAdminTransactionSupported;
pub const COMAdminTransactionRequired = COMAdminTransactionOptions.COMAdminTransactionRequired;
pub const COMAdminTransactionRequiresNew = COMAdminTransactionOptions.COMAdminTransactionRequiresNew;

pub const COMAdminTxIsolationLevelOptions = extern enum(i32) {
    COMAdminTxIsolationLevelAny = 0,
    COMAdminTxIsolationLevelReadUnCommitted = 1,
    COMAdminTxIsolationLevelReadCommitted = 2,
    COMAdminTxIsolationLevelRepeatableRead = 3,
    COMAdminTxIsolationLevelSerializable = 4,
};
pub const COMAdminTxIsolationLevelAny = COMAdminTxIsolationLevelOptions.COMAdminTxIsolationLevelAny;
pub const COMAdminTxIsolationLevelReadUnCommitted = COMAdminTxIsolationLevelOptions.COMAdminTxIsolationLevelReadUnCommitted;
pub const COMAdminTxIsolationLevelReadCommitted = COMAdminTxIsolationLevelOptions.COMAdminTxIsolationLevelReadCommitted;
pub const COMAdminTxIsolationLevelRepeatableRead = COMAdminTxIsolationLevelOptions.COMAdminTxIsolationLevelRepeatableRead;
pub const COMAdminTxIsolationLevelSerializable = COMAdminTxIsolationLevelOptions.COMAdminTxIsolationLevelSerializable;

pub const COMAdminSynchronizationOptions = extern enum(i32) {
    COMAdminSynchronizationIgnored = 0,
    COMAdminSynchronizationNone = 1,
    COMAdminSynchronizationSupported = 2,
    COMAdminSynchronizationRequired = 3,
    COMAdminSynchronizationRequiresNew = 4,
};
pub const COMAdminSynchronizationIgnored = COMAdminSynchronizationOptions.COMAdminSynchronizationIgnored;
pub const COMAdminSynchronizationNone = COMAdminSynchronizationOptions.COMAdminSynchronizationNone;
pub const COMAdminSynchronizationSupported = COMAdminSynchronizationOptions.COMAdminSynchronizationSupported;
pub const COMAdminSynchronizationRequired = COMAdminSynchronizationOptions.COMAdminSynchronizationRequired;
pub const COMAdminSynchronizationRequiresNew = COMAdminSynchronizationOptions.COMAdminSynchronizationRequiresNew;

pub const COMAdminActivationOptions = extern enum(i32) {
    COMAdminActivationInproc = 0,
    COMAdminActivationLocal = 1,
};
pub const COMAdminActivationInproc = COMAdminActivationOptions.COMAdminActivationInproc;
pub const COMAdminActivationLocal = COMAdminActivationOptions.COMAdminActivationLocal;

pub const COMAdminAccessChecksLevelOptions = extern enum(i32) {
    COMAdminAccessChecksApplicationLevel = 0,
    COMAdminAccessChecksApplicationComponentLevel = 1,
};
pub const COMAdminAccessChecksApplicationLevel = COMAdminAccessChecksLevelOptions.COMAdminAccessChecksApplicationLevel;
pub const COMAdminAccessChecksApplicationComponentLevel = COMAdminAccessChecksLevelOptions.COMAdminAccessChecksApplicationComponentLevel;

pub const COMAdminAuthenticationLevelOptions = extern enum(i32) {
    COMAdminAuthenticationDefault = 0,
    COMAdminAuthenticationNone = 1,
    COMAdminAuthenticationConnect = 2,
    COMAdminAuthenticationCall = 3,
    COMAdminAuthenticationPacket = 4,
    COMAdminAuthenticationIntegrity = 5,
    COMAdminAuthenticationPrivacy = 6,
};
pub const COMAdminAuthenticationDefault = COMAdminAuthenticationLevelOptions.COMAdminAuthenticationDefault;
pub const COMAdminAuthenticationNone = COMAdminAuthenticationLevelOptions.COMAdminAuthenticationNone;
pub const COMAdminAuthenticationConnect = COMAdminAuthenticationLevelOptions.COMAdminAuthenticationConnect;
pub const COMAdminAuthenticationCall = COMAdminAuthenticationLevelOptions.COMAdminAuthenticationCall;
pub const COMAdminAuthenticationPacket = COMAdminAuthenticationLevelOptions.COMAdminAuthenticationPacket;
pub const COMAdminAuthenticationIntegrity = COMAdminAuthenticationLevelOptions.COMAdminAuthenticationIntegrity;
pub const COMAdminAuthenticationPrivacy = COMAdminAuthenticationLevelOptions.COMAdminAuthenticationPrivacy;

pub const COMAdminImpersonationLevelOptions = extern enum(i32) {
    COMAdminImpersonationAnonymous = 1,
    COMAdminImpersonationIdentify = 2,
    COMAdminImpersonationImpersonate = 3,
    COMAdminImpersonationDelegate = 4,
};
pub const COMAdminImpersonationAnonymous = COMAdminImpersonationLevelOptions.COMAdminImpersonationAnonymous;
pub const COMAdminImpersonationIdentify = COMAdminImpersonationLevelOptions.COMAdminImpersonationIdentify;
pub const COMAdminImpersonationImpersonate = COMAdminImpersonationLevelOptions.COMAdminImpersonationImpersonate;
pub const COMAdminImpersonationDelegate = COMAdminImpersonationLevelOptions.COMAdminImpersonationDelegate;

pub const COMAdminAuthenticationCapabilitiesOptions = extern enum(i32) {
    COMAdminAuthenticationCapabilitiesNone = 0,
    COMAdminAuthenticationCapabilitiesSecureReference = 2,
    COMAdminAuthenticationCapabilitiesStaticCloaking = 32,
    COMAdminAuthenticationCapabilitiesDynamicCloaking = 64,
};
pub const COMAdminAuthenticationCapabilitiesNone = COMAdminAuthenticationCapabilitiesOptions.COMAdminAuthenticationCapabilitiesNone;
pub const COMAdminAuthenticationCapabilitiesSecureReference = COMAdminAuthenticationCapabilitiesOptions.COMAdminAuthenticationCapabilitiesSecureReference;
pub const COMAdminAuthenticationCapabilitiesStaticCloaking = COMAdminAuthenticationCapabilitiesOptions.COMAdminAuthenticationCapabilitiesStaticCloaking;
pub const COMAdminAuthenticationCapabilitiesDynamicCloaking = COMAdminAuthenticationCapabilitiesOptions.COMAdminAuthenticationCapabilitiesDynamicCloaking;

pub const COMAdminOS = extern enum(i32) {
    COMAdminOSNotInitialized = 0,
    COMAdminOSWindows3_1 = 1,
    COMAdminOSWindows9x = 2,
    COMAdminOSWindows2000 = 3,
    COMAdminOSWindows2000AdvancedServer = 4,
    COMAdminOSWindows2000Unknown = 5,
    COMAdminOSUnknown = 6,
    COMAdminOSWindowsXPPersonal = 11,
    COMAdminOSWindowsXPProfessional = 12,
    COMAdminOSWindowsNETStandardServer = 13,
    COMAdminOSWindowsNETEnterpriseServer = 14,
    COMAdminOSWindowsNETDatacenterServer = 15,
    COMAdminOSWindowsNETWebServer = 16,
    COMAdminOSWindowsLonghornPersonal = 17,
    COMAdminOSWindowsLonghornProfessional = 18,
    COMAdminOSWindowsLonghornStandardServer = 19,
    COMAdminOSWindowsLonghornEnterpriseServer = 20,
    COMAdminOSWindowsLonghornDatacenterServer = 21,
    COMAdminOSWindowsLonghornWebServer = 22,
    COMAdminOSWindows7Personal = 23,
    COMAdminOSWindows7Professional = 24,
    COMAdminOSWindows7StandardServer = 25,
    COMAdminOSWindows7EnterpriseServer = 26,
    COMAdminOSWindows7DatacenterServer = 27,
    COMAdminOSWindows7WebServer = 28,
    COMAdminOSWindows8Personal = 29,
    COMAdminOSWindows8Professional = 30,
    COMAdminOSWindows8StandardServer = 31,
    COMAdminOSWindows8EnterpriseServer = 32,
    COMAdminOSWindows8DatacenterServer = 33,
    COMAdminOSWindows8WebServer = 34,
    COMAdminOSWindowsBluePersonal = 35,
    COMAdminOSWindowsBlueProfessional = 36,
    COMAdminOSWindowsBlueStandardServer = 37,
    COMAdminOSWindowsBlueEnterpriseServer = 38,
    COMAdminOSWindowsBlueDatacenterServer = 39,
    COMAdminOSWindowsBlueWebServer = 40,
};
pub const COMAdminOSNotInitialized = COMAdminOS.COMAdminOSNotInitialized;
pub const COMAdminOSWindows3_1 = COMAdminOS.COMAdminOSWindows3_1;
pub const COMAdminOSWindows9x = COMAdminOS.COMAdminOSWindows9x;
pub const COMAdminOSWindows2000 = COMAdminOS.COMAdminOSWindows2000;
pub const COMAdminOSWindows2000AdvancedServer = COMAdminOS.COMAdminOSWindows2000AdvancedServer;
pub const COMAdminOSWindows2000Unknown = COMAdminOS.COMAdminOSWindows2000Unknown;
pub const COMAdminOSUnknown = COMAdminOS.COMAdminOSUnknown;
pub const COMAdminOSWindowsXPPersonal = COMAdminOS.COMAdminOSWindowsXPPersonal;
pub const COMAdminOSWindowsXPProfessional = COMAdminOS.COMAdminOSWindowsXPProfessional;
pub const COMAdminOSWindowsNETStandardServer = COMAdminOS.COMAdminOSWindowsNETStandardServer;
pub const COMAdminOSWindowsNETEnterpriseServer = COMAdminOS.COMAdminOSWindowsNETEnterpriseServer;
pub const COMAdminOSWindowsNETDatacenterServer = COMAdminOS.COMAdminOSWindowsNETDatacenterServer;
pub const COMAdminOSWindowsNETWebServer = COMAdminOS.COMAdminOSWindowsNETWebServer;
pub const COMAdminOSWindowsLonghornPersonal = COMAdminOS.COMAdminOSWindowsLonghornPersonal;
pub const COMAdminOSWindowsLonghornProfessional = COMAdminOS.COMAdminOSWindowsLonghornProfessional;
pub const COMAdminOSWindowsLonghornStandardServer = COMAdminOS.COMAdminOSWindowsLonghornStandardServer;
pub const COMAdminOSWindowsLonghornEnterpriseServer = COMAdminOS.COMAdminOSWindowsLonghornEnterpriseServer;
pub const COMAdminOSWindowsLonghornDatacenterServer = COMAdminOS.COMAdminOSWindowsLonghornDatacenterServer;
pub const COMAdminOSWindowsLonghornWebServer = COMAdminOS.COMAdminOSWindowsLonghornWebServer;
pub const COMAdminOSWindows7Personal = COMAdminOS.COMAdminOSWindows7Personal;
pub const COMAdminOSWindows7Professional = COMAdminOS.COMAdminOSWindows7Professional;
pub const COMAdminOSWindows7StandardServer = COMAdminOS.COMAdminOSWindows7StandardServer;
pub const COMAdminOSWindows7EnterpriseServer = COMAdminOS.COMAdminOSWindows7EnterpriseServer;
pub const COMAdminOSWindows7DatacenterServer = COMAdminOS.COMAdminOSWindows7DatacenterServer;
pub const COMAdminOSWindows7WebServer = COMAdminOS.COMAdminOSWindows7WebServer;
pub const COMAdminOSWindows8Personal = COMAdminOS.COMAdminOSWindows8Personal;
pub const COMAdminOSWindows8Professional = COMAdminOS.COMAdminOSWindows8Professional;
pub const COMAdminOSWindows8StandardServer = COMAdminOS.COMAdminOSWindows8StandardServer;
pub const COMAdminOSWindows8EnterpriseServer = COMAdminOS.COMAdminOSWindows8EnterpriseServer;
pub const COMAdminOSWindows8DatacenterServer = COMAdminOS.COMAdminOSWindows8DatacenterServer;
pub const COMAdminOSWindows8WebServer = COMAdminOS.COMAdminOSWindows8WebServer;
pub const COMAdminOSWindowsBluePersonal = COMAdminOS.COMAdminOSWindowsBluePersonal;
pub const COMAdminOSWindowsBlueProfessional = COMAdminOS.COMAdminOSWindowsBlueProfessional;
pub const COMAdminOSWindowsBlueStandardServer = COMAdminOS.COMAdminOSWindowsBlueStandardServer;
pub const COMAdminOSWindowsBlueEnterpriseServer = COMAdminOS.COMAdminOSWindowsBlueEnterpriseServer;
pub const COMAdminOSWindowsBlueDatacenterServer = COMAdminOS.COMAdminOSWindowsBlueDatacenterServer;
pub const COMAdminOSWindowsBlueWebServer = COMAdminOS.COMAdminOSWindowsBlueWebServer;

pub const COMAdminServiceOptions = extern enum(i32) {
    COMAdminServiceLoadBalanceRouter = 1,
};
pub const COMAdminServiceLoadBalanceRouter = COMAdminServiceOptions.COMAdminServiceLoadBalanceRouter;

pub const COMAdminServiceStatusOptions = extern enum(i32) {
    COMAdminServiceStopped = 0,
    COMAdminServiceStartPending = 1,
    COMAdminServiceStopPending = 2,
    COMAdminServiceRunning = 3,
    COMAdminServiceContinuePending = 4,
    COMAdminServicePausePending = 5,
    COMAdminServicePaused = 6,
    COMAdminServiceUnknownState = 7,
};
pub const COMAdminServiceStopped = COMAdminServiceStatusOptions.COMAdminServiceStopped;
pub const COMAdminServiceStartPending = COMAdminServiceStatusOptions.COMAdminServiceStartPending;
pub const COMAdminServiceStopPending = COMAdminServiceStatusOptions.COMAdminServiceStopPending;
pub const COMAdminServiceRunning = COMAdminServiceStatusOptions.COMAdminServiceRunning;
pub const COMAdminServiceContinuePending = COMAdminServiceStatusOptions.COMAdminServiceContinuePending;
pub const COMAdminServicePausePending = COMAdminServiceStatusOptions.COMAdminServicePausePending;
pub const COMAdminServicePaused = COMAdminServiceStatusOptions.COMAdminServicePaused;
pub const COMAdminServiceUnknownState = COMAdminServiceStatusOptions.COMAdminServiceUnknownState;

pub const COMAdminQCMessageAuthenticateOptions = extern enum(i32) {
    COMAdminQCMessageAuthenticateSecureApps = 0,
    COMAdminQCMessageAuthenticateOff = 1,
    COMAdminQCMessageAuthenticateOn = 2,
};
pub const COMAdminQCMessageAuthenticateSecureApps = COMAdminQCMessageAuthenticateOptions.COMAdminQCMessageAuthenticateSecureApps;
pub const COMAdminQCMessageAuthenticateOff = COMAdminQCMessageAuthenticateOptions.COMAdminQCMessageAuthenticateOff;
pub const COMAdminQCMessageAuthenticateOn = COMAdminQCMessageAuthenticateOptions.COMAdminQCMessageAuthenticateOn;

pub const COMAdminFileFlags = extern enum(i32) {
    COMAdminFileFlagLoadable = 1,
    COMAdminFileFlagCOM = 2,
    COMAdminFileFlagContainsPS = 4,
    COMAdminFileFlagContainsComp = 8,
    COMAdminFileFlagContainsTLB = 16,
    COMAdminFileFlagSelfReg = 32,
    COMAdminFileFlagSelfUnReg = 64,
    COMAdminFileFlagUnloadableDLL = 128,
    COMAdminFileFlagDoesNotExist = 256,
    COMAdminFileFlagAlreadyInstalled = 512,
    COMAdminFileFlagBadTLB = 1024,
    COMAdminFileFlagGetClassObjFailed = 2048,
    COMAdminFileFlagClassNotAvailable = 4096,
    COMAdminFileFlagRegistrar = 8192,
    COMAdminFileFlagNoRegistrar = 16384,
    COMAdminFileFlagDLLRegsvrFailed = 32768,
    COMAdminFileFlagRegTLBFailed = 65536,
    COMAdminFileFlagRegistrarFailed = 131072,
    COMAdminFileFlagError = 262144,
};
pub const COMAdminFileFlagLoadable = COMAdminFileFlags.COMAdminFileFlagLoadable;
pub const COMAdminFileFlagCOM = COMAdminFileFlags.COMAdminFileFlagCOM;
pub const COMAdminFileFlagContainsPS = COMAdminFileFlags.COMAdminFileFlagContainsPS;
pub const COMAdminFileFlagContainsComp = COMAdminFileFlags.COMAdminFileFlagContainsComp;
pub const COMAdminFileFlagContainsTLB = COMAdminFileFlags.COMAdminFileFlagContainsTLB;
pub const COMAdminFileFlagSelfReg = COMAdminFileFlags.COMAdminFileFlagSelfReg;
pub const COMAdminFileFlagSelfUnReg = COMAdminFileFlags.COMAdminFileFlagSelfUnReg;
pub const COMAdminFileFlagUnloadableDLL = COMAdminFileFlags.COMAdminFileFlagUnloadableDLL;
pub const COMAdminFileFlagDoesNotExist = COMAdminFileFlags.COMAdminFileFlagDoesNotExist;
pub const COMAdminFileFlagAlreadyInstalled = COMAdminFileFlags.COMAdminFileFlagAlreadyInstalled;
pub const COMAdminFileFlagBadTLB = COMAdminFileFlags.COMAdminFileFlagBadTLB;
pub const COMAdminFileFlagGetClassObjFailed = COMAdminFileFlags.COMAdminFileFlagGetClassObjFailed;
pub const COMAdminFileFlagClassNotAvailable = COMAdminFileFlags.COMAdminFileFlagClassNotAvailable;
pub const COMAdminFileFlagRegistrar = COMAdminFileFlags.COMAdminFileFlagRegistrar;
pub const COMAdminFileFlagNoRegistrar = COMAdminFileFlags.COMAdminFileFlagNoRegistrar;
pub const COMAdminFileFlagDLLRegsvrFailed = COMAdminFileFlags.COMAdminFileFlagDLLRegsvrFailed;
pub const COMAdminFileFlagRegTLBFailed = COMAdminFileFlags.COMAdminFileFlagRegTLBFailed;
pub const COMAdminFileFlagRegistrarFailed = COMAdminFileFlags.COMAdminFileFlagRegistrarFailed;
pub const COMAdminFileFlagError = COMAdminFileFlags.COMAdminFileFlagError;

pub const COMAdminComponentFlags = extern enum(i32) {
    COMAdminCompFlagTypeInfoFound = 1,
    COMAdminCompFlagCOMPlusPropertiesFound = 2,
    COMAdminCompFlagProxyFound = 4,
    COMAdminCompFlagInterfacesFound = 8,
    COMAdminCompFlagAlreadyInstalled = 16,
    COMAdminCompFlagNotInApplication = 32,
};
pub const COMAdminCompFlagTypeInfoFound = COMAdminComponentFlags.COMAdminCompFlagTypeInfoFound;
pub const COMAdminCompFlagCOMPlusPropertiesFound = COMAdminComponentFlags.COMAdminCompFlagCOMPlusPropertiesFound;
pub const COMAdminCompFlagProxyFound = COMAdminComponentFlags.COMAdminCompFlagProxyFound;
pub const COMAdminCompFlagInterfacesFound = COMAdminComponentFlags.COMAdminCompFlagInterfacesFound;
pub const COMAdminCompFlagAlreadyInstalled = COMAdminComponentFlags.COMAdminCompFlagAlreadyInstalled;
pub const COMAdminCompFlagNotInApplication = COMAdminComponentFlags.COMAdminCompFlagNotInApplication;

pub const COMAdminErrorCodes = extern enum(i32) {
    COMAdminErrObjectErrors = -2146368511,
    COMAdminErrObjectInvalid = -2146368510,
    COMAdminErrKeyMissing = -2146368509,
    COMAdminErrAlreadyInstalled = -2146368508,
    COMAdminErrAppFileWriteFail = -2146368505,
    COMAdminErrAppFileReadFail = -2146368504,
    COMAdminErrAppFileVersion = -2146368503,
    COMAdminErrBadPath = -2146368502,
    COMAdminErrApplicationExists = -2146368501,
    COMAdminErrRoleExists = -2146368500,
    COMAdminErrCantCopyFile = -2146368499,
    COMAdminErrNoUser = -2146368497,
    COMAdminErrInvalidUserids = -2146368496,
    COMAdminErrNoRegistryCLSID = -2146368495,
    COMAdminErrBadRegistryProgID = -2146368494,
    COMAdminErrAuthenticationLevel = -2146368493,
    COMAdminErrUserPasswdNotValid = -2146368492,
    COMAdminErrCLSIDOrIIDMismatch = -2146368488,
    COMAdminErrRemoteInterface = -2146368487,
    COMAdminErrDllRegisterServer = -2146368486,
    COMAdminErrNoServerShare = -2146368485,
    COMAdminErrDllLoadFailed = -2146368483,
    COMAdminErrBadRegistryLibID = -2146368482,
    COMAdminErrAppDirNotFound = -2146368481,
    COMAdminErrRegistrarFailed = -2146368477,
    COMAdminErrCompFileDoesNotExist = -2146368476,
    COMAdminErrCompFileLoadDLLFail = -2146368475,
    COMAdminErrCompFileGetClassObj = -2146368474,
    COMAdminErrCompFileClassNotAvail = -2146368473,
    COMAdminErrCompFileBadTLB = -2146368472,
    COMAdminErrCompFileNotInstallable = -2146368471,
    COMAdminErrNotChangeable = -2146368470,
    COMAdminErrNotDeletable = -2146368469,
    COMAdminErrSession = -2146368468,
    COMAdminErrCompMoveLocked = -2146368467,
    COMAdminErrCompMoveBadDest = -2146368466,
    COMAdminErrRegisterTLB = -2146368464,
    COMAdminErrSystemApp = -2146368461,
    COMAdminErrCompFileNoRegistrar = -2146368460,
    COMAdminErrCoReqCompInstalled = -2146368459,
    COMAdminErrServiceNotInstalled = -2146368458,
    COMAdminErrPropertySaveFailed = -2146368457,
    COMAdminErrObjectExists = -2146368456,
    COMAdminErrComponentExists = -2146368455,
    COMAdminErrRegFileCorrupt = -2146368453,
    COMAdminErrPropertyOverflow = -2146368452,
    COMAdminErrNotInRegistry = -2146368450,
    COMAdminErrObjectNotPoolable = -2146368449,
    COMAdminErrApplidMatchesClsid = -2146368442,
    COMAdminErrRoleDoesNotExist = -2146368441,
    COMAdminErrStartAppNeedsComponents = -2146368440,
    COMAdminErrRequiresDifferentPlatform = -2146368439,
    COMAdminErrQueuingServiceNotAvailable = -2146367998,
    COMAdminErrObjectParentMissing = -2146367480,
    COMAdminErrObjectDoesNotExist = -2146367479,
    COMAdminErrCanNotExportAppProxy = -2146368438,
    COMAdminErrCanNotStartApp = -2146368437,
    COMAdminErrCanNotExportSystemApp = -2146368436,
    COMAdminErrCanNotSubscribeToComponent = -2146368435,
    COMAdminErrAppNotRunning = -2146367478,
    COMAdminErrEventClassCannotBeSubscriber = -2146368434,
    COMAdminErrLibAppProxyIncompatible = -2146368433,
    COMAdminErrBasePartitionOnly = -2146368432,
    COMAdminErrDuplicatePartitionName = -2146368425,
    COMAdminErrPartitionInUse = -2146368423,
    COMAdminErrImportedComponentsNotAllowed = -2146368421,
    COMAdminErrRegdbNotInitialized = -2146368398,
    COMAdminErrRegdbNotOpen = -2146368397,
    COMAdminErrRegdbSystemErr = -2146368396,
    COMAdminErrRegdbAlreadyRunning = -2146368395,
    COMAdminErrMigVersionNotSupported = -2146368384,
    COMAdminErrMigSchemaNotFound = -2146368383,
    COMAdminErrCatBitnessMismatch = -2146368382,
    COMAdminErrCatUnacceptableBitness = -2146368381,
    COMAdminErrCatWrongAppBitnessBitness = -2146368380,
    COMAdminErrCatPauseResumeNotSupported = -2146368379,
    COMAdminErrCatServerFault = -2146368378,
    COMAdminErrCantRecycleLibraryApps = -2146367473,
    COMAdminErrCantRecycleServiceApps = -2146367471,
    COMAdminErrProcessAlreadyRecycled = -2146367470,
    COMAdminErrPausedProcessMayNotBeRecycled = -2146367469,
    COMAdminErrInvalidPartition = -2146367477,
    COMAdminErrPartitionMsiOnly = -2146367463,
    COMAdminErrStartAppDisabled = -2146368431,
    COMAdminErrCompMoveSource = -2146367460,
    COMAdminErrCompMoveDest = -2146367459,
    COMAdminErrCompMovePrivate = -2146367458,
    COMAdminErrCannotCopyEventClass = -2146367456,
};
pub const COMAdminErrObjectErrors = COMAdminErrorCodes.COMAdminErrObjectErrors;
pub const COMAdminErrObjectInvalid = COMAdminErrorCodes.COMAdminErrObjectInvalid;
pub const COMAdminErrKeyMissing = COMAdminErrorCodes.COMAdminErrKeyMissing;
pub const COMAdminErrAlreadyInstalled = COMAdminErrorCodes.COMAdminErrAlreadyInstalled;
pub const COMAdminErrAppFileWriteFail = COMAdminErrorCodes.COMAdminErrAppFileWriteFail;
pub const COMAdminErrAppFileReadFail = COMAdminErrorCodes.COMAdminErrAppFileReadFail;
pub const COMAdminErrAppFileVersion = COMAdminErrorCodes.COMAdminErrAppFileVersion;
pub const COMAdminErrBadPath = COMAdminErrorCodes.COMAdminErrBadPath;
pub const COMAdminErrApplicationExists = COMAdminErrorCodes.COMAdminErrApplicationExists;
pub const COMAdminErrRoleExists = COMAdminErrorCodes.COMAdminErrRoleExists;
pub const COMAdminErrCantCopyFile = COMAdminErrorCodes.COMAdminErrCantCopyFile;
pub const COMAdminErrNoUser = COMAdminErrorCodes.COMAdminErrNoUser;
pub const COMAdminErrInvalidUserids = COMAdminErrorCodes.COMAdminErrInvalidUserids;
pub const COMAdminErrNoRegistryCLSID = COMAdminErrorCodes.COMAdminErrNoRegistryCLSID;
pub const COMAdminErrBadRegistryProgID = COMAdminErrorCodes.COMAdminErrBadRegistryProgID;
pub const COMAdminErrAuthenticationLevel = COMAdminErrorCodes.COMAdminErrAuthenticationLevel;
pub const COMAdminErrUserPasswdNotValid = COMAdminErrorCodes.COMAdminErrUserPasswdNotValid;
pub const COMAdminErrCLSIDOrIIDMismatch = COMAdminErrorCodes.COMAdminErrCLSIDOrIIDMismatch;
pub const COMAdminErrRemoteInterface = COMAdminErrorCodes.COMAdminErrRemoteInterface;
pub const COMAdminErrDllRegisterServer = COMAdminErrorCodes.COMAdminErrDllRegisterServer;
pub const COMAdminErrNoServerShare = COMAdminErrorCodes.COMAdminErrNoServerShare;
pub const COMAdminErrDllLoadFailed = COMAdminErrorCodes.COMAdminErrDllLoadFailed;
pub const COMAdminErrBadRegistryLibID = COMAdminErrorCodes.COMAdminErrBadRegistryLibID;
pub const COMAdminErrAppDirNotFound = COMAdminErrorCodes.COMAdminErrAppDirNotFound;
pub const COMAdminErrRegistrarFailed = COMAdminErrorCodes.COMAdminErrRegistrarFailed;
pub const COMAdminErrCompFileDoesNotExist = COMAdminErrorCodes.COMAdminErrCompFileDoesNotExist;
pub const COMAdminErrCompFileLoadDLLFail = COMAdminErrorCodes.COMAdminErrCompFileLoadDLLFail;
pub const COMAdminErrCompFileGetClassObj = COMAdminErrorCodes.COMAdminErrCompFileGetClassObj;
pub const COMAdminErrCompFileClassNotAvail = COMAdminErrorCodes.COMAdminErrCompFileClassNotAvail;
pub const COMAdminErrCompFileBadTLB = COMAdminErrorCodes.COMAdminErrCompFileBadTLB;
pub const COMAdminErrCompFileNotInstallable = COMAdminErrorCodes.COMAdminErrCompFileNotInstallable;
pub const COMAdminErrNotChangeable = COMAdminErrorCodes.COMAdminErrNotChangeable;
pub const COMAdminErrNotDeletable = COMAdminErrorCodes.COMAdminErrNotDeletable;
pub const COMAdminErrSession = COMAdminErrorCodes.COMAdminErrSession;
pub const COMAdminErrCompMoveLocked = COMAdminErrorCodes.COMAdminErrCompMoveLocked;
pub const COMAdminErrCompMoveBadDest = COMAdminErrorCodes.COMAdminErrCompMoveBadDest;
pub const COMAdminErrRegisterTLB = COMAdminErrorCodes.COMAdminErrRegisterTLB;
pub const COMAdminErrSystemApp = COMAdminErrorCodes.COMAdminErrSystemApp;
pub const COMAdminErrCompFileNoRegistrar = COMAdminErrorCodes.COMAdminErrCompFileNoRegistrar;
pub const COMAdminErrCoReqCompInstalled = COMAdminErrorCodes.COMAdminErrCoReqCompInstalled;
pub const COMAdminErrServiceNotInstalled = COMAdminErrorCodes.COMAdminErrServiceNotInstalled;
pub const COMAdminErrPropertySaveFailed = COMAdminErrorCodes.COMAdminErrPropertySaveFailed;
pub const COMAdminErrObjectExists = COMAdminErrorCodes.COMAdminErrObjectExists;
pub const COMAdminErrComponentExists = COMAdminErrorCodes.COMAdminErrComponentExists;
pub const COMAdminErrRegFileCorrupt = COMAdminErrorCodes.COMAdminErrRegFileCorrupt;
pub const COMAdminErrPropertyOverflow = COMAdminErrorCodes.COMAdminErrPropertyOverflow;
pub const COMAdminErrNotInRegistry = COMAdminErrorCodes.COMAdminErrNotInRegistry;
pub const COMAdminErrObjectNotPoolable = COMAdminErrorCodes.COMAdminErrObjectNotPoolable;
pub const COMAdminErrApplidMatchesClsid = COMAdminErrorCodes.COMAdminErrApplidMatchesClsid;
pub const COMAdminErrRoleDoesNotExist = COMAdminErrorCodes.COMAdminErrRoleDoesNotExist;
pub const COMAdminErrStartAppNeedsComponents = COMAdminErrorCodes.COMAdminErrStartAppNeedsComponents;
pub const COMAdminErrRequiresDifferentPlatform = COMAdminErrorCodes.COMAdminErrRequiresDifferentPlatform;
pub const COMAdminErrQueuingServiceNotAvailable = COMAdminErrorCodes.COMAdminErrQueuingServiceNotAvailable;
pub const COMAdminErrObjectParentMissing = COMAdminErrorCodes.COMAdminErrObjectParentMissing;
pub const COMAdminErrObjectDoesNotExist = COMAdminErrorCodes.COMAdminErrObjectDoesNotExist;
pub const COMAdminErrCanNotExportAppProxy = COMAdminErrorCodes.COMAdminErrCanNotExportAppProxy;
pub const COMAdminErrCanNotStartApp = COMAdminErrorCodes.COMAdminErrCanNotStartApp;
pub const COMAdminErrCanNotExportSystemApp = COMAdminErrorCodes.COMAdminErrCanNotExportSystemApp;
pub const COMAdminErrCanNotSubscribeToComponent = COMAdminErrorCodes.COMAdminErrCanNotSubscribeToComponent;
pub const COMAdminErrAppNotRunning = COMAdminErrorCodes.COMAdminErrAppNotRunning;
pub const COMAdminErrEventClassCannotBeSubscriber = COMAdminErrorCodes.COMAdminErrEventClassCannotBeSubscriber;
pub const COMAdminErrLibAppProxyIncompatible = COMAdminErrorCodes.COMAdminErrLibAppProxyIncompatible;
pub const COMAdminErrBasePartitionOnly = COMAdminErrorCodes.COMAdminErrBasePartitionOnly;
pub const COMAdminErrDuplicatePartitionName = COMAdminErrorCodes.COMAdminErrDuplicatePartitionName;
pub const COMAdminErrPartitionInUse = COMAdminErrorCodes.COMAdminErrPartitionInUse;
pub const COMAdminErrImportedComponentsNotAllowed = COMAdminErrorCodes.COMAdminErrImportedComponentsNotAllowed;
pub const COMAdminErrRegdbNotInitialized = COMAdminErrorCodes.COMAdminErrRegdbNotInitialized;
pub const COMAdminErrRegdbNotOpen = COMAdminErrorCodes.COMAdminErrRegdbNotOpen;
pub const COMAdminErrRegdbSystemErr = COMAdminErrorCodes.COMAdminErrRegdbSystemErr;
pub const COMAdminErrRegdbAlreadyRunning = COMAdminErrorCodes.COMAdminErrRegdbAlreadyRunning;
pub const COMAdminErrMigVersionNotSupported = COMAdminErrorCodes.COMAdminErrMigVersionNotSupported;
pub const COMAdminErrMigSchemaNotFound = COMAdminErrorCodes.COMAdminErrMigSchemaNotFound;
pub const COMAdminErrCatBitnessMismatch = COMAdminErrorCodes.COMAdminErrCatBitnessMismatch;
pub const COMAdminErrCatUnacceptableBitness = COMAdminErrorCodes.COMAdminErrCatUnacceptableBitness;
pub const COMAdminErrCatWrongAppBitnessBitness = COMAdminErrorCodes.COMAdminErrCatWrongAppBitnessBitness;
pub const COMAdminErrCatPauseResumeNotSupported = COMAdminErrorCodes.COMAdminErrCatPauseResumeNotSupported;
pub const COMAdminErrCatServerFault = COMAdminErrorCodes.COMAdminErrCatServerFault;
pub const COMAdminErrCantRecycleLibraryApps = COMAdminErrorCodes.COMAdminErrCantRecycleLibraryApps;
pub const COMAdminErrCantRecycleServiceApps = COMAdminErrorCodes.COMAdminErrCantRecycleServiceApps;
pub const COMAdminErrProcessAlreadyRecycled = COMAdminErrorCodes.COMAdminErrProcessAlreadyRecycled;
pub const COMAdminErrPausedProcessMayNotBeRecycled = COMAdminErrorCodes.COMAdminErrPausedProcessMayNotBeRecycled;
pub const COMAdminErrInvalidPartition = COMAdminErrorCodes.COMAdminErrInvalidPartition;
pub const COMAdminErrPartitionMsiOnly = COMAdminErrorCodes.COMAdminErrPartitionMsiOnly;
pub const COMAdminErrStartAppDisabled = COMAdminErrorCodes.COMAdminErrStartAppDisabled;
pub const COMAdminErrCompMoveSource = COMAdminErrorCodes.COMAdminErrCompMoveSource;
pub const COMAdminErrCompMoveDest = COMAdminErrorCodes.COMAdminErrCompMoveDest;
pub const COMAdminErrCompMovePrivate = COMAdminErrorCodes.COMAdminErrCompMovePrivate;
pub const COMAdminErrCannotCopyEventClass = COMAdminErrorCodes.COMAdminErrCannotCopyEventClass;

pub const BOID = extern struct {
    rgb: [16]u8,
};

pub const TX_MISC_CONSTANTS = extern enum(i32) {
    MAX_TRAN_DESC = 40,
};
pub const MAX_TRAN_DESC = TX_MISC_CONSTANTS.MAX_TRAN_DESC;

pub const ISOLATIONLEVEL = extern enum(i32) {
    UNSPECIFIED = -1,
    CHAOS = 16,
    READUNCOMMITTED = 256,
    BROWSE = 256,
    CURSORSTABILITY = 4096,
    READCOMMITTED = 4096,
    REPEATABLEREAD = 65536,
    SERIALIZABLE = 1048576,
    ISOLATED = 1048576,
};
pub const ISOLATIONLEVEL_UNSPECIFIED = ISOLATIONLEVEL.UNSPECIFIED;
pub const ISOLATIONLEVEL_CHAOS = ISOLATIONLEVEL.CHAOS;
pub const ISOLATIONLEVEL_READUNCOMMITTED = ISOLATIONLEVEL.READUNCOMMITTED;
pub const ISOLATIONLEVEL_BROWSE = ISOLATIONLEVEL.BROWSE;
pub const ISOLATIONLEVEL_CURSORSTABILITY = ISOLATIONLEVEL.CURSORSTABILITY;
pub const ISOLATIONLEVEL_READCOMMITTED = ISOLATIONLEVEL.READCOMMITTED;
pub const ISOLATIONLEVEL_REPEATABLEREAD = ISOLATIONLEVEL.REPEATABLEREAD;
pub const ISOLATIONLEVEL_SERIALIZABLE = ISOLATIONLEVEL.SERIALIZABLE;
pub const ISOLATIONLEVEL_ISOLATED = ISOLATIONLEVEL.ISOLATED;

pub const XACTTRANSINFO = extern struct {
    uow: BOID,
    isoLevel: i32,
    isoFlags: u32,
    grfTCSupported: u32,
    grfRMSupported: u32,
    grfTCSupportedRetaining: u32,
    grfRMSupportedRetaining: u32,
};

pub const XACTSTATS = extern struct {
    cOpen: u32,
    cCommitting: u32,
    cCommitted: u32,
    cAborting: u32,
    cAborted: u32,
    cInDoubt: u32,
    cHeuristicDecision: u32,
    timeTransactionsUp: FILETIME,
};

pub const ISOFLAG = extern enum(i32) {
    RETAIN_COMMIT_DC = 1,
    RETAIN_COMMIT = 2,
    RETAIN_COMMIT_NO = 3,
    RETAIN_ABORT_DC = 4,
    RETAIN_ABORT = 8,
    RETAIN_ABORT_NO = 12,
    RETAIN_DONTCARE = 5,
    RETAIN_BOTH = 10,
    RETAIN_NONE = 15,
    OPTIMISTIC = 16,
    READONLY = 32,
};
pub const ISOFLAG_RETAIN_COMMIT_DC = ISOFLAG.RETAIN_COMMIT_DC;
pub const ISOFLAG_RETAIN_COMMIT = ISOFLAG.RETAIN_COMMIT;
pub const ISOFLAG_RETAIN_COMMIT_NO = ISOFLAG.RETAIN_COMMIT_NO;
pub const ISOFLAG_RETAIN_ABORT_DC = ISOFLAG.RETAIN_ABORT_DC;
pub const ISOFLAG_RETAIN_ABORT = ISOFLAG.RETAIN_ABORT;
pub const ISOFLAG_RETAIN_ABORT_NO = ISOFLAG.RETAIN_ABORT_NO;
pub const ISOFLAG_RETAIN_DONTCARE = ISOFLAG.RETAIN_DONTCARE;
pub const ISOFLAG_RETAIN_BOTH = ISOFLAG.RETAIN_BOTH;
pub const ISOFLAG_RETAIN_NONE = ISOFLAG.RETAIN_NONE;
pub const ISOFLAG_OPTIMISTIC = ISOFLAG.OPTIMISTIC;
pub const ISOFLAG_READONLY = ISOFLAG.READONLY;

pub const XACTTC = extern enum(i32) {
    NONE = 0,
    SYNC_PHASEONE = 1,
    SYNC_PHASETWO = 2,
    SYNC = 2,
    ASYNC_PHASEONE = 4,
    ASYNC = 4,
};
pub const XACTTC_NONE = XACTTC.NONE;
pub const XACTTC_SYNC_PHASEONE = XACTTC.SYNC_PHASEONE;
pub const XACTTC_SYNC_PHASETWO = XACTTC.SYNC_PHASETWO;
pub const XACTTC_SYNC = XACTTC.SYNC;
pub const XACTTC_ASYNC_PHASEONE = XACTTC.ASYNC_PHASEONE;
pub const XACTTC_ASYNC = XACTTC.ASYNC;

pub const XACTRM = extern enum(i32) {
    OPTIMISTICLASTWINS = 1,
    NOREADONLYPREPARES = 2,
};
pub const XACTRM_OPTIMISTICLASTWINS = XACTRM.OPTIMISTICLASTWINS;
pub const XACTRM_NOREADONLYPREPARES = XACTRM.NOREADONLYPREPARES;

pub const XACTCONST = extern enum(i32) {
    TIMEOUTINFINITE = 0,
};
pub const XACTCONST_TIMEOUTINFINITE = XACTCONST.TIMEOUTINFINITE;

pub const XACTHEURISTIC = extern enum(i32) {
    ABORT = 1,
    COMMIT = 2,
    DAMAGE = 3,
    DANGER = 4,
};
pub const XACTHEURISTIC_ABORT = XACTHEURISTIC.ABORT;
pub const XACTHEURISTIC_COMMIT = XACTHEURISTIC.COMMIT;
pub const XACTHEURISTIC_DAMAGE = XACTHEURISTIC.DAMAGE;
pub const XACTHEURISTIC_DANGER = XACTHEURISTIC.DANGER;

pub const XACTSTAT = extern enum(i32) {
    NONE = 0,
    OPENNORMAL = 1,
    OPENREFUSED = 2,
    PREPARING = 4,
    PREPARED = 8,
    PREPARERETAINING = 16,
    PREPARERETAINED = 32,
    COMMITTING = 64,
    COMMITRETAINING = 128,
    ABORTING = 256,
    ABORTED = 512,
    COMMITTED = 1024,
    HEURISTIC_ABORT = 2048,
    HEURISTIC_COMMIT = 4096,
    HEURISTIC_DAMAGE = 8192,
    HEURISTIC_DANGER = 16384,
    FORCED_ABORT = 32768,
    FORCED_COMMIT = 65536,
    INDOUBT = 131072,
    CLOSED = 262144,
    OPEN = 3,
    NOTPREPARED = 524227,
    ALL = 524287,
};
pub const XACTSTAT_NONE = XACTSTAT.NONE;
pub const XACTSTAT_OPENNORMAL = XACTSTAT.OPENNORMAL;
pub const XACTSTAT_OPENREFUSED = XACTSTAT.OPENREFUSED;
pub const XACTSTAT_PREPARING = XACTSTAT.PREPARING;
pub const XACTSTAT_PREPARED = XACTSTAT.PREPARED;
pub const XACTSTAT_PREPARERETAINING = XACTSTAT.PREPARERETAINING;
pub const XACTSTAT_PREPARERETAINED = XACTSTAT.PREPARERETAINED;
pub const XACTSTAT_COMMITTING = XACTSTAT.COMMITTING;
pub const XACTSTAT_COMMITRETAINING = XACTSTAT.COMMITRETAINING;
pub const XACTSTAT_ABORTING = XACTSTAT.ABORTING;
pub const XACTSTAT_ABORTED = XACTSTAT.ABORTED;
pub const XACTSTAT_COMMITTED = XACTSTAT.COMMITTED;
pub const XACTSTAT_HEURISTIC_ABORT = XACTSTAT.HEURISTIC_ABORT;
pub const XACTSTAT_HEURISTIC_COMMIT = XACTSTAT.HEURISTIC_COMMIT;
pub const XACTSTAT_HEURISTIC_DAMAGE = XACTSTAT.HEURISTIC_DAMAGE;
pub const XACTSTAT_HEURISTIC_DANGER = XACTSTAT.HEURISTIC_DANGER;
pub const XACTSTAT_FORCED_ABORT = XACTSTAT.FORCED_ABORT;
pub const XACTSTAT_FORCED_COMMIT = XACTSTAT.FORCED_COMMIT;
pub const XACTSTAT_INDOUBT = XACTSTAT.INDOUBT;
pub const XACTSTAT_CLOSED = XACTSTAT.CLOSED;
pub const XACTSTAT_OPEN = XACTSTAT.OPEN;
pub const XACTSTAT_NOTPREPARED = XACTSTAT.NOTPREPARED;
pub const XACTSTAT_ALL = XACTSTAT.ALL;

pub const XACTOPT = extern struct {
    ulTimeout: u32,
    szDescription: [40]u8,
};

const IID_ITransaction_Value = @import("../zig.zig").Guid.initString("0FB15084-AF41-11CE-BD2B-204C4F4F5020");
pub const IID_ITransaction = &IID_ITransaction_Value;
pub const ITransaction = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Commit: fn(
            self: *const ITransaction,
            fRetaining: BOOL,
            grfTC: u32,
            grfRM: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: fn(
            self: *const ITransaction,
            pboidReason: *BOID,
            fRetaining: BOOL,
            fAsync: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransactionInfo: fn(
            self: *const ITransaction,
            pinfo: *XACTTRANSINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransaction_Commit(self: *const T, fRetaining: BOOL, grfTC: u32, grfRM: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransaction.VTable, self.vtable).Commit(@ptrCast(*const ITransaction, self), fRetaining, grfTC, grfRM);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransaction_Abort(self: *const T, pboidReason: *BOID, fRetaining: BOOL, fAsync: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransaction.VTable, self.vtable).Abort(@ptrCast(*const ITransaction, self), pboidReason, fRetaining, fAsync);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransaction_GetTransactionInfo(self: *const T, pinfo: *XACTTRANSINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransaction.VTable, self.vtable).GetTransactionInfo(@ptrCast(*const ITransaction, self), pinfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionCloner_Value = @import("../zig.zig").Guid.initString("02656950-2152-11D0-944C-00A0C905416E");
pub const IID_ITransactionCloner = &IID_ITransactionCloner_Value;
pub const ITransactionCloner = extern struct {
    pub const VTable = extern struct {
        base: ITransaction.VTable,
        CloneWithCommitDisabled: fn(
            self: *const ITransactionCloner,
            ppITransaction: **ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ITransaction.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionCloner_CloneWithCommitDisabled(self: *const T, ppITransaction: **ITransaction) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionCloner.VTable, self.vtable).CloneWithCommitDisabled(@ptrCast(*const ITransactionCloner, self), ppITransaction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransaction2_Value = @import("../zig.zig").Guid.initString("34021548-0065-11D3-BAC1-00C04F797BE2");
pub const IID_ITransaction2 = &IID_ITransaction2_Value;
pub const ITransaction2 = extern struct {
    pub const VTable = extern struct {
        base: ITransactionCloner.VTable,
        GetTransactionInfo2: fn(
            self: *const ITransaction2,
            pinfo: *XACTTRANSINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ITransactionCloner.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransaction2_GetTransactionInfo2(self: *const T, pinfo: *XACTTRANSINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransaction2.VTable, self.vtable).GetTransactionInfo2(@ptrCast(*const ITransaction2, self), pinfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionDispenser_Value = @import("../zig.zig").Guid.initString("3A6AD9E1-23B9-11CF-AD60-00AA00A74CCD");
pub const IID_ITransactionDispenser = &IID_ITransactionDispenser_Value;
pub const ITransactionDispenser = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOptionsObject: fn(
            self: *const ITransactionDispenser,
            ppOptions: **ITransactionOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginTransaction: fn(
            self: *const ITransactionDispenser,
            punkOuter: *IUnknown,
            isoLevel: i32,
            isoFlags: u32,
            pOptions: *ITransactionOptions,
            ppTransaction: **ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionDispenser_GetOptionsObject(self: *const T, ppOptions: **ITransactionOptions) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionDispenser.VTable, self.vtable).GetOptionsObject(@ptrCast(*const ITransactionDispenser, self), ppOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionDispenser_BeginTransaction(self: *const T, punkOuter: *IUnknown, isoLevel: i32, isoFlags: u32, pOptions: *ITransactionOptions, ppTransaction: **ITransaction) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionDispenser.VTable, self.vtable).BeginTransaction(@ptrCast(*const ITransactionDispenser, self), punkOuter, isoLevel, isoFlags, pOptions, ppTransaction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionOptions_Value = @import("../zig.zig").Guid.initString("3A6AD9E0-23B9-11CF-AD60-00AA00A74CCD");
pub const IID_ITransactionOptions = &IID_ITransactionOptions_Value;
pub const ITransactionOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOptions: fn(
            self: *const ITransactionOptions,
            pOptions: *XACTOPT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: fn(
            self: *const ITransactionOptions,
            pOptions: *XACTOPT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionOptions_SetOptions(self: *const T, pOptions: *XACTOPT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionOptions.VTable, self.vtable).SetOptions(@ptrCast(*const ITransactionOptions, self), pOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionOptions_GetOptions(self: *const T, pOptions: *XACTOPT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionOptions.VTable, self.vtable).GetOptions(@ptrCast(*const ITransactionOptions, self), pOptions);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionOutcomeEvents_Value = @import("../zig.zig").Guid.initString("3A6AD9E2-23B9-11CF-AD60-00AA00A74CCD");
pub const IID_ITransactionOutcomeEvents = &IID_ITransactionOutcomeEvents_Value;
pub const ITransactionOutcomeEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Committed: fn(
            self: *const ITransactionOutcomeEvents,
            fRetaining: BOOL,
            pNewUOW: *BOID,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Aborted: fn(
            self: *const ITransactionOutcomeEvents,
            pboidReason: *BOID,
            fRetaining: BOOL,
            pNewUOW: *BOID,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HeuristicDecision: fn(
            self: *const ITransactionOutcomeEvents,
            dwDecision: u32,
            pboidReason: *BOID,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Indoubt: fn(
            self: *const ITransactionOutcomeEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionOutcomeEvents_Committed(self: *const T, fRetaining: BOOL, pNewUOW: *BOID, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionOutcomeEvents.VTable, self.vtable).Committed(@ptrCast(*const ITransactionOutcomeEvents, self), fRetaining, pNewUOW, hr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionOutcomeEvents_Aborted(self: *const T, pboidReason: *BOID, fRetaining: BOOL, pNewUOW: *BOID, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionOutcomeEvents.VTable, self.vtable).Aborted(@ptrCast(*const ITransactionOutcomeEvents, self), pboidReason, fRetaining, pNewUOW, hr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionOutcomeEvents_HeuristicDecision(self: *const T, dwDecision: u32, pboidReason: *BOID, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionOutcomeEvents.VTable, self.vtable).HeuristicDecision(@ptrCast(*const ITransactionOutcomeEvents, self), dwDecision, pboidReason, hr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionOutcomeEvents_Indoubt(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionOutcomeEvents.VTable, self.vtable).Indoubt(@ptrCast(*const ITransactionOutcomeEvents, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITmNodeName_Value = @import("../zig.zig").Guid.initString("30274F88-6EE4-474E-9B95-7807BC9EF8CF");
pub const IID_ITmNodeName = &IID_ITmNodeName_Value;
pub const ITmNodeName = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNodeNameSize: fn(
            self: *const ITmNodeName,
            pcbNodeNameSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNodeName: fn(
            self: *const ITmNodeName,
            cbNodeNameBufferSize: u32,
            pNodeNameBuffer: PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITmNodeName_GetNodeNameSize(self: *const T, pcbNodeNameSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITmNodeName.VTable, self.vtable).GetNodeNameSize(@ptrCast(*const ITmNodeName, self), pcbNodeNameSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITmNodeName_GetNodeName(self: *const T, cbNodeNameBufferSize: u32, pNodeNameBuffer: PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITmNodeName.VTable, self.vtable).GetNodeName(@ptrCast(*const ITmNodeName, self), cbNodeNameBufferSize, pNodeNameBuffer);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IKernelTransaction_Value = @import("../zig.zig").Guid.initString("79427A2B-F895-40E0-BE79-B57DC82ED231");
pub const IID_IKernelTransaction = &IID_IKernelTransaction_Value;
pub const IKernelTransaction = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetHandle: fn(
            self: *const IKernelTransaction,
            pHandle: *HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IKernelTransaction_GetHandle(self: *const T, pHandle: *HANDLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IKernelTransaction.VTable, self.vtable).GetHandle(@ptrCast(*const IKernelTransaction, self), pHandle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionResourceAsync_Value = @import("../zig.zig").Guid.initString("69E971F0-23CE-11CF-AD60-00AA00A74CCD");
pub const IID_ITransactionResourceAsync = &IID_ITransactionResourceAsync_Value;
pub const ITransactionResourceAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PrepareRequest: fn(
            self: *const ITransactionResourceAsync,
            fRetaining: BOOL,
            grfRM: u32,
            fWantMoniker: BOOL,
            fSinglePhase: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitRequest: fn(
            self: *const ITransactionResourceAsync,
            grfRM: u32,
            pNewUOW: *BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortRequest: fn(
            self: *const ITransactionResourceAsync,
            pboidReason: *BOID,
            fRetaining: BOOL,
            pNewUOW: *BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TMDown: fn(
            self: *const ITransactionResourceAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionResourceAsync_PrepareRequest(self: *const T, fRetaining: BOOL, grfRM: u32, fWantMoniker: BOOL, fSinglePhase: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionResourceAsync.VTable, self.vtable).PrepareRequest(@ptrCast(*const ITransactionResourceAsync, self), fRetaining, grfRM, fWantMoniker, fSinglePhase);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionResourceAsync_CommitRequest(self: *const T, grfRM: u32, pNewUOW: *BOID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionResourceAsync.VTable, self.vtable).CommitRequest(@ptrCast(*const ITransactionResourceAsync, self), grfRM, pNewUOW);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionResourceAsync_AbortRequest(self: *const T, pboidReason: *BOID, fRetaining: BOOL, pNewUOW: *BOID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionResourceAsync.VTable, self.vtable).AbortRequest(@ptrCast(*const ITransactionResourceAsync, self), pboidReason, fRetaining, pNewUOW);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionResourceAsync_TMDown(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionResourceAsync.VTable, self.vtable).TMDown(@ptrCast(*const ITransactionResourceAsync, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionLastResourceAsync_Value = @import("../zig.zig").Guid.initString("C82BD532-5B30-11D3-8A91-00C04F79EB6D");
pub const IID_ITransactionLastResourceAsync = &IID_ITransactionLastResourceAsync_Value;
pub const ITransactionLastResourceAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DelegateCommit: fn(
            self: *const ITransactionLastResourceAsync,
            grfRM: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ForgetRequest: fn(
            self: *const ITransactionLastResourceAsync,
            pNewUOW: *BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionLastResourceAsync_DelegateCommit(self: *const T, grfRM: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionLastResourceAsync.VTable, self.vtable).DelegateCommit(@ptrCast(*const ITransactionLastResourceAsync, self), grfRM);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionLastResourceAsync_ForgetRequest(self: *const T, pNewUOW: *BOID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionLastResourceAsync.VTable, self.vtable).ForgetRequest(@ptrCast(*const ITransactionLastResourceAsync, self), pNewUOW);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionResource_Value = @import("../zig.zig").Guid.initString("EE5FF7B3-4572-11D0-9452-00A0C905416E");
pub const IID_ITransactionResource = &IID_ITransactionResource_Value;
pub const ITransactionResource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PrepareRequest: fn(
            self: *const ITransactionResource,
            fRetaining: BOOL,
            grfRM: u32,
            fWantMoniker: BOOL,
            fSinglePhase: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitRequest: fn(
            self: *const ITransactionResource,
            grfRM: u32,
            pNewUOW: *BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortRequest: fn(
            self: *const ITransactionResource,
            pboidReason: *BOID,
            fRetaining: BOOL,
            pNewUOW: *BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TMDown: fn(
            self: *const ITransactionResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionResource_PrepareRequest(self: *const T, fRetaining: BOOL, grfRM: u32, fWantMoniker: BOOL, fSinglePhase: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionResource.VTable, self.vtable).PrepareRequest(@ptrCast(*const ITransactionResource, self), fRetaining, grfRM, fWantMoniker, fSinglePhase);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionResource_CommitRequest(self: *const T, grfRM: u32, pNewUOW: *BOID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionResource.VTable, self.vtable).CommitRequest(@ptrCast(*const ITransactionResource, self), grfRM, pNewUOW);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionResource_AbortRequest(self: *const T, pboidReason: *BOID, fRetaining: BOOL, pNewUOW: *BOID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionResource.VTable, self.vtable).AbortRequest(@ptrCast(*const ITransactionResource, self), pboidReason, fRetaining, pNewUOW);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionResource_TMDown(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionResource.VTable, self.vtable).TMDown(@ptrCast(*const ITransactionResource, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionEnlistmentAsync_Value = @import("../zig.zig").Guid.initString("0FB15081-AF41-11CE-BD2B-204C4F4F5020");
pub const IID_ITransactionEnlistmentAsync = &IID_ITransactionEnlistmentAsync_Value;
pub const ITransactionEnlistmentAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PrepareRequestDone: fn(
            self: *const ITransactionEnlistmentAsync,
            hr: HRESULT,
            pmk: *IMoniker,
            pboidReason: *BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitRequestDone: fn(
            self: *const ITransactionEnlistmentAsync,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortRequestDone: fn(
            self: *const ITransactionEnlistmentAsync,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionEnlistmentAsync_PrepareRequestDone(self: *const T, hr: HRESULT, pmk: *IMoniker, pboidReason: *BOID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionEnlistmentAsync.VTable, self.vtable).PrepareRequestDone(@ptrCast(*const ITransactionEnlistmentAsync, self), hr, pmk, pboidReason);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionEnlistmentAsync_CommitRequestDone(self: *const T, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionEnlistmentAsync.VTable, self.vtable).CommitRequestDone(@ptrCast(*const ITransactionEnlistmentAsync, self), hr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionEnlistmentAsync_AbortRequestDone(self: *const T, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionEnlistmentAsync.VTable, self.vtable).AbortRequestDone(@ptrCast(*const ITransactionEnlistmentAsync, self), hr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionLastEnlistmentAsync_Value = @import("../zig.zig").Guid.initString("C82BD533-5B30-11D3-8A91-00C04F79EB6D");
pub const IID_ITransactionLastEnlistmentAsync = &IID_ITransactionLastEnlistmentAsync_Value;
pub const ITransactionLastEnlistmentAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TransactionOutcome: fn(
            self: *const ITransactionLastEnlistmentAsync,
            XactStat: XACTSTAT,
            pboidReason: *BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionLastEnlistmentAsync_TransactionOutcome(self: *const T, XactStat: XACTSTAT, pboidReason: *BOID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionLastEnlistmentAsync.VTable, self.vtable).TransactionOutcome(@ptrCast(*const ITransactionLastEnlistmentAsync, self), XactStat, pboidReason);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionExportFactory_Value = @import("../zig.zig").Guid.initString("E1CF9B53-8745-11CE-A9BA-00AA006C3706");
pub const IID_ITransactionExportFactory = &IID_ITransactionExportFactory_Value;
pub const ITransactionExportFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRemoteClassId: fn(
            self: *const ITransactionExportFactory,
            pclsid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: fn(
            self: *const ITransactionExportFactory,
            cbWhereabouts: u32,
            rgbWhereabouts: [*:0]u8,
            ppExport: **ITransactionExport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionExportFactory_GetRemoteClassId(self: *const T, pclsid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionExportFactory.VTable, self.vtable).GetRemoteClassId(@ptrCast(*const ITransactionExportFactory, self), pclsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionExportFactory_Create(self: *const T, cbWhereabouts: u32, rgbWhereabouts: [*:0]u8, ppExport: **ITransactionExport) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionExportFactory.VTable, self.vtable).Create(@ptrCast(*const ITransactionExportFactory, self), cbWhereabouts, rgbWhereabouts, ppExport);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionImportWhereabouts_Value = @import("../zig.zig").Guid.initString("0141FDA4-8FC0-11CE-BD18-204C4F4F5020");
pub const IID_ITransactionImportWhereabouts = &IID_ITransactionImportWhereabouts_Value;
pub const ITransactionImportWhereabouts = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWhereaboutsSize: fn(
            self: *const ITransactionImportWhereabouts,
            pcbWhereabouts: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWhereabouts: fn(
            self: *const ITransactionImportWhereabouts,
            cbWhereabouts: u32,
            rgbWhereabouts: [*:0]u8,
            pcbUsed: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionImportWhereabouts_GetWhereaboutsSize(self: *const T, pcbWhereabouts: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionImportWhereabouts.VTable, self.vtable).GetWhereaboutsSize(@ptrCast(*const ITransactionImportWhereabouts, self), pcbWhereabouts);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionImportWhereabouts_GetWhereabouts(self: *const T, cbWhereabouts: u32, rgbWhereabouts: [*:0]u8, pcbUsed: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionImportWhereabouts.VTable, self.vtable).GetWhereabouts(@ptrCast(*const ITransactionImportWhereabouts, self), cbWhereabouts, rgbWhereabouts, pcbUsed);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionExport_Value = @import("../zig.zig").Guid.initString("0141FDA5-8FC0-11CE-BD18-204C4F4F5020");
pub const IID_ITransactionExport = &IID_ITransactionExport_Value;
pub const ITransactionExport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Export: fn(
            self: *const ITransactionExport,
            punkTransaction: *IUnknown,
            pcbTransactionCookie: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransactionCookie: fn(
            self: *const ITransactionExport,
            punkTransaction: *IUnknown,
            cbTransactionCookie: u32,
            rgbTransactionCookie: [*:0]u8,
            pcbUsed: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionExport_Export(self: *const T, punkTransaction: *IUnknown, pcbTransactionCookie: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionExport.VTable, self.vtable).Export(@ptrCast(*const ITransactionExport, self), punkTransaction, pcbTransactionCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionExport_GetTransactionCookie(self: *const T, punkTransaction: *IUnknown, cbTransactionCookie: u32, rgbTransactionCookie: [*:0]u8, pcbUsed: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionExport.VTable, self.vtable).GetTransactionCookie(@ptrCast(*const ITransactionExport, self), punkTransaction, cbTransactionCookie, rgbTransactionCookie, pcbUsed);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionImport_Value = @import("../zig.zig").Guid.initString("E1CF9B5A-8745-11CE-A9BA-00AA006C3706");
pub const IID_ITransactionImport = &IID_ITransactionImport_Value;
pub const ITransactionImport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Import: fn(
            self: *const ITransactionImport,
            cbTransactionCookie: u32,
            rgbTransactionCookie: [*:0]u8,
            piid: *Guid,
            ppvTransaction: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionImport_Import(self: *const T, cbTransactionCookie: u32, rgbTransactionCookie: [*:0]u8, piid: *Guid, ppvTransaction: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionImport.VTable, self.vtable).Import(@ptrCast(*const ITransactionImport, self), cbTransactionCookie, rgbTransactionCookie, piid, ppvTransaction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITipTransaction_Value = @import("../zig.zig").Guid.initString("17CF72D0-BAC5-11D1-B1BF-00C04FC2F3EF");
pub const IID_ITipTransaction = &IID_ITipTransaction_Value;
pub const ITipTransaction = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Push: fn(
            self: *const ITipTransaction,
            i_pszRemoteTmUrl: *u8,
            o_ppszRemoteTxUrl: *PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransactionUrl: fn(
            self: *const ITipTransaction,
            o_ppszLocalTxUrl: *PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipTransaction_Push(self: *const T, i_pszRemoteTmUrl: *u8, o_ppszRemoteTxUrl: *PSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipTransaction.VTable, self.vtable).Push(@ptrCast(*const ITipTransaction, self), i_pszRemoteTmUrl, o_ppszRemoteTxUrl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipTransaction_GetTransactionUrl(self: *const T, o_ppszLocalTxUrl: *PSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipTransaction.VTable, self.vtable).GetTransactionUrl(@ptrCast(*const ITipTransaction, self), o_ppszLocalTxUrl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITipHelper_Value = @import("../zig.zig").Guid.initString("17CF72D1-BAC5-11D1-B1BF-00C04FC2F3EF");
pub const IID_ITipHelper = &IID_ITipHelper_Value;
pub const ITipHelper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Pull: fn(
            self: *const ITipHelper,
            i_pszTxUrl: *u8,
            o_ppITransaction: **ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PullAsync: fn(
            self: *const ITipHelper,
            i_pszTxUrl: *u8,
            i_pTipPullSink: *ITipPullSink,
            o_ppITransaction: **ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalTmUrl: fn(
            self: *const ITipHelper,
            o_ppszLocalTmUrl: **u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipHelper_Pull(self: *const T, i_pszTxUrl: *u8, o_ppITransaction: **ITransaction) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipHelper.VTable, self.vtable).Pull(@ptrCast(*const ITipHelper, self), i_pszTxUrl, o_ppITransaction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipHelper_PullAsync(self: *const T, i_pszTxUrl: *u8, i_pTipPullSink: *ITipPullSink, o_ppITransaction: **ITransaction) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipHelper.VTable, self.vtable).PullAsync(@ptrCast(*const ITipHelper, self), i_pszTxUrl, i_pTipPullSink, o_ppITransaction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipHelper_GetLocalTmUrl(self: *const T, o_ppszLocalTmUrl: **u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipHelper.VTable, self.vtable).GetLocalTmUrl(@ptrCast(*const ITipHelper, self), o_ppszLocalTmUrl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITipPullSink_Value = @import("../zig.zig").Guid.initString("17CF72D2-BAC5-11D1-B1BF-00C04FC2F3EF");
pub const IID_ITipPullSink = &IID_ITipPullSink_Value;
pub const ITipPullSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PullComplete: fn(
            self: *const ITipPullSink,
            i_hrPull: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITipPullSink_PullComplete(self: *const T, i_hrPull: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITipPullSink.VTable, self.vtable).PullComplete(@ptrCast(*const ITipPullSink, self), i_hrPull);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcNetworkAccessConfig_Value = @import("../zig.zig").Guid.initString("9797C15D-A428-4291-87B6-0995031A678D");
pub const IID_IDtcNetworkAccessConfig = &IID_IDtcNetworkAccessConfig_Value;
pub const IDtcNetworkAccessConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAnyNetworkAccess: fn(
            self: *const IDtcNetworkAccessConfig,
            pbAnyNetworkAccess: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAnyNetworkAccess: fn(
            self: *const IDtcNetworkAccessConfig,
            bAnyNetworkAccess: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkAdministrationAccess: fn(
            self: *const IDtcNetworkAccessConfig,
            pbNetworkAdministrationAccess: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkAdministrationAccess: fn(
            self: *const IDtcNetworkAccessConfig,
            bNetworkAdministrationAccess: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkTransactionAccess: fn(
            self: *const IDtcNetworkAccessConfig,
            pbNetworkTransactionAccess: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkTransactionAccess: fn(
            self: *const IDtcNetworkAccessConfig,
            bNetworkTransactionAccess: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkClientAccess: fn(
            self: *const IDtcNetworkAccessConfig,
            pbNetworkClientAccess: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkClientAccess: fn(
            self: *const IDtcNetworkAccessConfig,
            bNetworkClientAccess: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkTIPAccess: fn(
            self: *const IDtcNetworkAccessConfig,
            pbNetworkTIPAccess: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkTIPAccess: fn(
            self: *const IDtcNetworkAccessConfig,
            bNetworkTIPAccess: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXAAccess: fn(
            self: *const IDtcNetworkAccessConfig,
            pbXAAccess: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetXAAccess: fn(
            self: *const IDtcNetworkAccessConfig,
            bXAAccess: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestartDtcService: fn(
            self: *const IDtcNetworkAccessConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_GetAnyNetworkAccess(self: *const T, pbAnyNetworkAccess: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).GetAnyNetworkAccess(@ptrCast(*const IDtcNetworkAccessConfig, self), pbAnyNetworkAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_SetAnyNetworkAccess(self: *const T, bAnyNetworkAccess: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).SetAnyNetworkAccess(@ptrCast(*const IDtcNetworkAccessConfig, self), bAnyNetworkAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_GetNetworkAdministrationAccess(self: *const T, pbNetworkAdministrationAccess: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).GetNetworkAdministrationAccess(@ptrCast(*const IDtcNetworkAccessConfig, self), pbNetworkAdministrationAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_SetNetworkAdministrationAccess(self: *const T, bNetworkAdministrationAccess: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).SetNetworkAdministrationAccess(@ptrCast(*const IDtcNetworkAccessConfig, self), bNetworkAdministrationAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_GetNetworkTransactionAccess(self: *const T, pbNetworkTransactionAccess: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).GetNetworkTransactionAccess(@ptrCast(*const IDtcNetworkAccessConfig, self), pbNetworkTransactionAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_SetNetworkTransactionAccess(self: *const T, bNetworkTransactionAccess: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).SetNetworkTransactionAccess(@ptrCast(*const IDtcNetworkAccessConfig, self), bNetworkTransactionAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_GetNetworkClientAccess(self: *const T, pbNetworkClientAccess: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).GetNetworkClientAccess(@ptrCast(*const IDtcNetworkAccessConfig, self), pbNetworkClientAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_SetNetworkClientAccess(self: *const T, bNetworkClientAccess: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).SetNetworkClientAccess(@ptrCast(*const IDtcNetworkAccessConfig, self), bNetworkClientAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_GetNetworkTIPAccess(self: *const T, pbNetworkTIPAccess: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).GetNetworkTIPAccess(@ptrCast(*const IDtcNetworkAccessConfig, self), pbNetworkTIPAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_SetNetworkTIPAccess(self: *const T, bNetworkTIPAccess: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).SetNetworkTIPAccess(@ptrCast(*const IDtcNetworkAccessConfig, self), bNetworkTIPAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_GetXAAccess(self: *const T, pbXAAccess: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).GetXAAccess(@ptrCast(*const IDtcNetworkAccessConfig, self), pbXAAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_SetXAAccess(self: *const T, bXAAccess: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).SetXAAccess(@ptrCast(*const IDtcNetworkAccessConfig, self), bXAAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig_RestartDtcService(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig.VTable, self.vtable).RestartDtcService(@ptrCast(*const IDtcNetworkAccessConfig, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const AUTHENTICATION_LEVEL = extern enum(i32) {
    NO_AUTHENTICATION_REQUIRED = 0,
    INCOMING_AUTHENTICATION_REQUIRED = 1,
    MUTUAL_AUTHENTICATION_REQUIRED = 2,
};
pub const NO_AUTHENTICATION_REQUIRED = AUTHENTICATION_LEVEL.NO_AUTHENTICATION_REQUIRED;
pub const INCOMING_AUTHENTICATION_REQUIRED = AUTHENTICATION_LEVEL.INCOMING_AUTHENTICATION_REQUIRED;
pub const MUTUAL_AUTHENTICATION_REQUIRED = AUTHENTICATION_LEVEL.MUTUAL_AUTHENTICATION_REQUIRED;

const IID_IDtcNetworkAccessConfig2_Value = @import("../zig.zig").Guid.initString("A7AA013B-EB7D-4F42-B41C-B2DEC09AE034");
pub const IID_IDtcNetworkAccessConfig2 = &IID_IDtcNetworkAccessConfig2_Value;
pub const IDtcNetworkAccessConfig2 = extern struct {
    pub const VTable = extern struct {
        base: IDtcNetworkAccessConfig.VTable,
        GetNetworkInboundAccess: fn(
            self: *const IDtcNetworkAccessConfig2,
            pbInbound: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkOutboundAccess: fn(
            self: *const IDtcNetworkAccessConfig2,
            pbOutbound: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkInboundAccess: fn(
            self: *const IDtcNetworkAccessConfig2,
            bInbound: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkOutboundAccess: fn(
            self: *const IDtcNetworkAccessConfig2,
            bOutbound: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthenticationLevel: fn(
            self: *const IDtcNetworkAccessConfig2,
            pAuthLevel: *AUTHENTICATION_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAuthenticationLevel: fn(
            self: *const IDtcNetworkAccessConfig2,
            AuthLevel: AUTHENTICATION_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDtcNetworkAccessConfig.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig2_GetNetworkInboundAccess(self: *const T, pbInbound: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig2.VTable, self.vtable).GetNetworkInboundAccess(@ptrCast(*const IDtcNetworkAccessConfig2, self), pbInbound);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig2_GetNetworkOutboundAccess(self: *const T, pbOutbound: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig2.VTable, self.vtable).GetNetworkOutboundAccess(@ptrCast(*const IDtcNetworkAccessConfig2, self), pbOutbound);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig2_SetNetworkInboundAccess(self: *const T, bInbound: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig2.VTable, self.vtable).SetNetworkInboundAccess(@ptrCast(*const IDtcNetworkAccessConfig2, self), bInbound);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig2_SetNetworkOutboundAccess(self: *const T, bOutbound: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig2.VTable, self.vtable).SetNetworkOutboundAccess(@ptrCast(*const IDtcNetworkAccessConfig2, self), bOutbound);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig2_GetAuthenticationLevel(self: *const T, pAuthLevel: *AUTHENTICATION_LEVEL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig2.VTable, self.vtable).GetAuthenticationLevel(@ptrCast(*const IDtcNetworkAccessConfig2, self), pAuthLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig2_SetAuthenticationLevel(self: *const T, AuthLevel: AUTHENTICATION_LEVEL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig2.VTable, self.vtable).SetAuthenticationLevel(@ptrCast(*const IDtcNetworkAccessConfig2, self), AuthLevel);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcNetworkAccessConfig3_Value = @import("../zig.zig").Guid.initString("76E4B4F3-2CA5-466B-89D5-FD218EE75B49");
pub const IID_IDtcNetworkAccessConfig3 = &IID_IDtcNetworkAccessConfig3_Value;
pub const IDtcNetworkAccessConfig3 = extern struct {
    pub const VTable = extern struct {
        base: IDtcNetworkAccessConfig2.VTable,
        GetLUAccess: fn(
            self: *const IDtcNetworkAccessConfig3,
            pbLUAccess: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLUAccess: fn(
            self: *const IDtcNetworkAccessConfig3,
            bLUAccess: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDtcNetworkAccessConfig2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig3_GetLUAccess(self: *const T, pbLUAccess: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig3.VTable, self.vtable).GetLUAccess(@ptrCast(*const IDtcNetworkAccessConfig3, self), pbLUAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcNetworkAccessConfig3_SetLUAccess(self: *const T, bLUAccess: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcNetworkAccessConfig3.VTable, self.vtable).SetLUAccess(@ptrCast(*const IDtcNetworkAccessConfig3, self), bLUAccess);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const XACT_DTC_CONSTANTS = extern enum(i32) {
    XACT_E_CONNECTION_REQUEST_DENIED = -2147168000,
    XACT_E_TOOMANY_ENLISTMENTS = -2147167999,
    XACT_E_DUPLICATE_GUID = -2147167998,
    XACT_E_NOTSINGLEPHASE = -2147167997,
    XACT_E_RECOVERYALREADYDONE = -2147167996,
    XACT_E_PROTOCOL = -2147167995,
    XACT_E_RM_FAILURE = -2147167994,
    XACT_E_RECOVERY_FAILED = -2147167993,
    XACT_E_LU_NOT_FOUND = -2147167992,
    XACT_E_DUPLICATE_LU = -2147167991,
    XACT_E_LU_NOT_CONNECTED = -2147167990,
    XACT_E_DUPLICATE_TRANSID = -2147167989,
    XACT_E_LU_BUSY = -2147167988,
    XACT_E_LU_NO_RECOVERY_PROCESS = -2147167987,
    XACT_E_LU_DOWN = -2147167986,
    XACT_E_LU_RECOVERING = -2147167985,
    XACT_E_LU_RECOVERY_MISMATCH = -2147167984,
    XACT_E_RM_UNAVAILABLE = -2147167983,
    XACT_E_LRMRECOVERYALREADYDONE = -2147167982,
    XACT_E_NOLASTRESOURCEINTERFACE = -2147167981,
    XACT_S_NONOTIFY = 315648,
    XACT_OK_NONOTIFY = 315649,
    dwUSER_MS_SQLSERVER = 65535,
};
pub const XACT_E_CONNECTION_REQUEST_DENIED = XACT_DTC_CONSTANTS.XACT_E_CONNECTION_REQUEST_DENIED;
pub const XACT_E_TOOMANY_ENLISTMENTS = XACT_DTC_CONSTANTS.XACT_E_TOOMANY_ENLISTMENTS;
pub const XACT_E_DUPLICATE_GUID = XACT_DTC_CONSTANTS.XACT_E_DUPLICATE_GUID;
pub const XACT_E_NOTSINGLEPHASE = XACT_DTC_CONSTANTS.XACT_E_NOTSINGLEPHASE;
pub const XACT_E_RECOVERYALREADYDONE = XACT_DTC_CONSTANTS.XACT_E_RECOVERYALREADYDONE;
pub const XACT_E_PROTOCOL = XACT_DTC_CONSTANTS.XACT_E_PROTOCOL;
pub const XACT_E_RM_FAILURE = XACT_DTC_CONSTANTS.XACT_E_RM_FAILURE;
pub const XACT_E_RECOVERY_FAILED = XACT_DTC_CONSTANTS.XACT_E_RECOVERY_FAILED;
pub const XACT_E_LU_NOT_FOUND = XACT_DTC_CONSTANTS.XACT_E_LU_NOT_FOUND;
pub const XACT_E_DUPLICATE_LU = XACT_DTC_CONSTANTS.XACT_E_DUPLICATE_LU;
pub const XACT_E_LU_NOT_CONNECTED = XACT_DTC_CONSTANTS.XACT_E_LU_NOT_CONNECTED;
pub const XACT_E_DUPLICATE_TRANSID = XACT_DTC_CONSTANTS.XACT_E_DUPLICATE_TRANSID;
pub const XACT_E_LU_BUSY = XACT_DTC_CONSTANTS.XACT_E_LU_BUSY;
pub const XACT_E_LU_NO_RECOVERY_PROCESS = XACT_DTC_CONSTANTS.XACT_E_LU_NO_RECOVERY_PROCESS;
pub const XACT_E_LU_DOWN = XACT_DTC_CONSTANTS.XACT_E_LU_DOWN;
pub const XACT_E_LU_RECOVERING = XACT_DTC_CONSTANTS.XACT_E_LU_RECOVERING;
pub const XACT_E_LU_RECOVERY_MISMATCH = XACT_DTC_CONSTANTS.XACT_E_LU_RECOVERY_MISMATCH;
pub const XACT_E_RM_UNAVAILABLE = XACT_DTC_CONSTANTS.XACT_E_RM_UNAVAILABLE;
pub const XACT_E_LRMRECOVERYALREADYDONE = XACT_DTC_CONSTANTS.XACT_E_LRMRECOVERYALREADYDONE;
pub const XACT_E_NOLASTRESOURCEINTERFACE = XACT_DTC_CONSTANTS.XACT_E_NOLASTRESOURCEINTERFACE;
pub const XACT_S_NONOTIFY = XACT_DTC_CONSTANTS.XACT_S_NONOTIFY;
pub const XACT_OK_NONOTIFY = XACT_DTC_CONSTANTS.XACT_OK_NONOTIFY;
pub const dwUSER_MS_SQLSERVER = XACT_DTC_CONSTANTS.dwUSER_MS_SQLSERVER;

pub const xid_t = extern struct {
    formatID: i32,
    gtrid_length: i32,
    bqual_length: i32,
    data: [128]i8,
};

pub const xa_switch_t = extern struct {
    name: [32]i8,
    flags: i32,
    version: i32,
    xa_open_entry: ?*c_void,
    xa_close_entry: ?*c_void,
    xa_start_entry: ?*c_void,
    xa_end_entry: ?*c_void,
    xa_rollback_entry: ?*c_void,
    xa_prepare_entry: ?*c_void,
    xa_commit_entry: ?*c_void,
    xa_recover_entry: ?*c_void,
    xa_forget_entry: ?*c_void,
    xa_complete_entry: ?*c_void,
};

const IID_IXATransLookup_Value = @import("../zig.zig").Guid.initString("F3B1F131-EEDA-11CE-AED4-00AA0051E2C4");
pub const IID_IXATransLookup = &IID_IXATransLookup_Value;
pub const IXATransLookup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Lookup: fn(
            self: *const IXATransLookup,
            ppTransaction: **ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXATransLookup_Lookup(self: *const T, ppTransaction: **ITransaction) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXATransLookup.VTable, self.vtable).Lookup(@ptrCast(*const IXATransLookup, self), ppTransaction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IXATransLookup2_Value = @import("../zig.zig").Guid.initString("BF193C85-0D1A-4290-B88F-D2CB8873D1E7");
pub const IID_IXATransLookup2 = &IID_IXATransLookup2_Value;
pub const IXATransLookup2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Lookup: fn(
            self: *const IXATransLookup2,
            pXID: *xid_t,
            ppTransaction: **ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXATransLookup2_Lookup(self: *const T, pXID: *xid_t, ppTransaction: **ITransaction) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXATransLookup2.VTable, self.vtable).Lookup(@ptrCast(*const IXATransLookup2, self), pXID, ppTransaction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IResourceManagerSink_Value = @import("../zig.zig").Guid.initString("0D563181-DEFB-11CE-AED1-00AA0051E2C4");
pub const IID_IResourceManagerSink = &IID_IResourceManagerSink_Value;
pub const IResourceManagerSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TMDown: fn(
            self: *const IResourceManagerSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResourceManagerSink_TMDown(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResourceManagerSink.VTable, self.vtable).TMDown(@ptrCast(*const IResourceManagerSink, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IResourceManager_Value = @import("../zig.zig").Guid.initString("13741D21-87EB-11CE-8081-0080C758527E");
pub const IID_IResourceManager = &IID_IResourceManager_Value;
pub const IResourceManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Enlist: fn(
            self: *const IResourceManager,
            pTransaction: ?*ITransaction,
            pRes: ?*ITransactionResourceAsync,
            pUOW: *BOID,
            pisoLevel: *i32,
            ppEnlist: **ITransactionEnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reenlist: fn(
            self: *const IResourceManager,
            pPrepInfo: [*:0]u8,
            cbPrepInfo: u32,
            lTimeout: u32,
            pXactStat: *XACTSTAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReenlistmentComplete: fn(
            self: *const IResourceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDistributedTransactionManager: fn(
            self: *const IResourceManager,
            iid: *const Guid,
            ppvObject: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResourceManager_Enlist(self: *const T, pTransaction: ?*ITransaction, pRes: ?*ITransactionResourceAsync, pUOW: *BOID, pisoLevel: *i32, ppEnlist: **ITransactionEnlistmentAsync) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResourceManager.VTable, self.vtable).Enlist(@ptrCast(*const IResourceManager, self), pTransaction, pRes, pUOW, pisoLevel, ppEnlist);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResourceManager_Reenlist(self: *const T, pPrepInfo: [*:0]u8, cbPrepInfo: u32, lTimeout: u32, pXactStat: *XACTSTAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResourceManager.VTable, self.vtable).Reenlist(@ptrCast(*const IResourceManager, self), pPrepInfo, cbPrepInfo, lTimeout, pXactStat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResourceManager_ReenlistmentComplete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResourceManager.VTable, self.vtable).ReenlistmentComplete(@ptrCast(*const IResourceManager, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResourceManager_GetDistributedTransactionManager(self: *const T, iid: *const Guid, ppvObject: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResourceManager.VTable, self.vtable).GetDistributedTransactionManager(@ptrCast(*const IResourceManager, self), iid, ppvObject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILastResourceManager_Value = @import("../zig.zig").Guid.initString("4D964AD4-5B33-11D3-8A91-00C04F79EB6D");
pub const IID_ILastResourceManager = &IID_ILastResourceManager_Value;
pub const ILastResourceManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TransactionCommitted: fn(
            self: *const ILastResourceManager,
            pPrepInfo: [*:0]u8,
            cbPrepInfo: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RecoveryDone: fn(
            self: *const ILastResourceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILastResourceManager_TransactionCommitted(self: *const T, pPrepInfo: [*:0]u8, cbPrepInfo: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILastResourceManager.VTable, self.vtable).TransactionCommitted(@ptrCast(*const ILastResourceManager, self), pPrepInfo, cbPrepInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILastResourceManager_RecoveryDone(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILastResourceManager.VTable, self.vtable).RecoveryDone(@ptrCast(*const ILastResourceManager, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// WARNING: this COM type has been skipped because it causes some sort of error
const IID_IResourceManager2_Value = @import("../zig.zig").Guid.initString("D136C69A-F749-11D1-8F47-00C04F8EE57D");
pub const IID_IResourceManager2 = &IID_IResourceManager2_Value;
pub const IResourceManager2 = extern struct {
    pub const VTable = extern struct {
        _: *opaque{}, // just a placeholder because this COM type is skipped
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IResourceManagerRejoinable_Value = @import("../zig.zig").Guid.initString("6F6DE620-B5DF-4F3E-9CFA-C8AEBD05172B");
pub const IID_IResourceManagerRejoinable = &IID_IResourceManagerRejoinable_Value;
pub const IResourceManagerRejoinable = extern struct {
    pub const VTable = extern struct {
        base: IResourceManager2.VTable,
        Rejoin: fn(
            self: *const IResourceManagerRejoinable,
            pPrepInfo: [*:0]u8,
            cbPrepInfo: u32,
            lTimeout: u32,
            pXactStat: *XACTSTAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IResourceManager2.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResourceManagerRejoinable_Rejoin(self: *const T, pPrepInfo: [*:0]u8, cbPrepInfo: u32, lTimeout: u32, pXactStat: *XACTSTAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResourceManagerRejoinable.VTable, self.vtable).Rejoin(@ptrCast(*const IResourceManagerRejoinable, self), pPrepInfo, cbPrepInfo, lTimeout, pXactStat);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IXAConfig_Value = @import("../zig.zig").Guid.initString("C8A6E3A1-9A8C-11CF-A308-00A0C905416E");
pub const IID_IXAConfig = &IID_IXAConfig_Value;
pub const IXAConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IXAConfig,
            clsidHelperDll: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminate: fn(
            self: *const IXAConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAConfig_Initialize(self: *const T, clsidHelperDll: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAConfig.VTable, self.vtable).Initialize(@ptrCast(*const IXAConfig, self), clsidHelperDll);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAConfig_Terminate(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAConfig.VTable, self.vtable).Terminate(@ptrCast(*const IXAConfig, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IRMHelper_Value = @import("../zig.zig").Guid.initString("E793F6D1-F53D-11CF-A60D-00A0C905416E");
pub const IID_IRMHelper = &IID_IRMHelper_Value;
pub const IRMHelper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RMCount: fn(
            self: *const IRMHelper,
            dwcTotalNumberOfRMs: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RMInfo: fn(
            self: *const IRMHelper,
            pXa_Switch: *xa_switch_t,
            fCDeclCallingConv: BOOL,
            pszOpenString: *i8,
            pszCloseString: *i8,
            guidRMRecovery: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRMHelper_RMCount(self: *const T, dwcTotalNumberOfRMs: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRMHelper.VTable, self.vtable).RMCount(@ptrCast(*const IRMHelper, self), dwcTotalNumberOfRMs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IRMHelper_RMInfo(self: *const T, pXa_Switch: *xa_switch_t, fCDeclCallingConv: BOOL, pszOpenString: *i8, pszCloseString: *i8, guidRMRecovery: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IRMHelper.VTable, self.vtable).RMInfo(@ptrCast(*const IRMHelper, self), pXa_Switch, fCDeclCallingConv, pszOpenString, pszCloseString, guidRMRecovery);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IXAObtainRMInfo_Value = @import("../zig.zig").Guid.initString("E793F6D2-F53D-11CF-A60D-00A0C905416E");
pub const IID_IXAObtainRMInfo = &IID_IXAObtainRMInfo_Value;
pub const IXAObtainRMInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ObtainRMInfo: fn(
            self: *const IXAObtainRMInfo,
            pIRMHelper: ?*IRMHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IXAObtainRMInfo_ObtainRMInfo(self: *const T, pIRMHelper: ?*IRMHelper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IXAObtainRMInfo.VTable, self.vtable).ObtainRMInfo(@ptrCast(*const IXAObtainRMInfo, self), pIRMHelper);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IResourceManagerFactory_Value = @import("../zig.zig").Guid.initString("13741D20-87EB-11CE-8081-0080C758527E");
pub const IID_IResourceManagerFactory = &IID_IResourceManagerFactory_Value;
pub const IResourceManagerFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: fn(
            self: *const IResourceManagerFactory,
            pguidRM: *Guid,
            pszRMName: *i8,
            pIResMgrSink: ?*IResourceManagerSink,
            ppResMgr: **IResourceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResourceManagerFactory_Create(self: *const T, pguidRM: *Guid, pszRMName: *i8, pIResMgrSink: ?*IResourceManagerSink, ppResMgr: **IResourceManager) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResourceManagerFactory.VTable, self.vtable).Create(@ptrCast(*const IResourceManagerFactory, self), pguidRM, pszRMName, pIResMgrSink, ppResMgr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IResourceManagerFactory2_Value = @import("../zig.zig").Guid.initString("6B369C21-FBD2-11D1-8F47-00C04F8EE57D");
pub const IID_IResourceManagerFactory2 = &IID_IResourceManagerFactory2_Value;
pub const IResourceManagerFactory2 = extern struct {
    pub const VTable = extern struct {
        base: IResourceManagerFactory.VTable,
        CreateEx: fn(
            self: *const IResourceManagerFactory2,
            pguidRM: *Guid,
            pszRMName: *i8,
            pIResMgrSink: ?*IResourceManagerSink,
            riidRequested: *const Guid,
            ppvResMgr: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IResourceManagerFactory.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IResourceManagerFactory2_CreateEx(self: *const T, pguidRM: *Guid, pszRMName: *i8, pIResMgrSink: ?*IResourceManagerSink, riidRequested: *const Guid, ppvResMgr: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IResourceManagerFactory2.VTable, self.vtable).CreateEx(@ptrCast(*const IResourceManagerFactory2, self), pguidRM, pszRMName, pIResMgrSink, riidRequested, ppvResMgr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrepareInfo_Value = @import("../zig.zig").Guid.initString("80C7BFD0-87EE-11CE-8081-0080C758527E");
pub const IID_IPrepareInfo = &IID_IPrepareInfo_Value;
pub const IPrepareInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPrepareInfoSize: fn(
            self: *const IPrepareInfo,
            pcbPrepInfo: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrepareInfo: fn(
            self: *const IPrepareInfo,
            pPrepInfo: *u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrepareInfo_GetPrepareInfoSize(self: *const T, pcbPrepInfo: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrepareInfo.VTable, self.vtable).GetPrepareInfoSize(@ptrCast(*const IPrepareInfo, self), pcbPrepInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrepareInfo_GetPrepareInfo(self: *const T, pPrepInfo: *u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrepareInfo.VTable, self.vtable).GetPrepareInfo(@ptrCast(*const IPrepareInfo, self), pPrepInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrepareInfo2_Value = @import("../zig.zig").Guid.initString("5FAB2547-9779-11D1-B886-00C04FB9618A");
pub const IID_IPrepareInfo2 = &IID_IPrepareInfo2_Value;
pub const IPrepareInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPrepareInfoSize: fn(
            self: *const IPrepareInfo2,
            pcbPrepInfo: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrepareInfo: fn(
            self: *const IPrepareInfo2,
            cbPrepareInfo: u32,
            pPrepInfo: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrepareInfo2_GetPrepareInfoSize(self: *const T, pcbPrepInfo: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrepareInfo2.VTable, self.vtable).GetPrepareInfoSize(@ptrCast(*const IPrepareInfo2, self), pcbPrepInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPrepareInfo2_GetPrepareInfo(self: *const T, cbPrepareInfo: u32, pPrepInfo: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPrepareInfo2.VTable, self.vtable).GetPrepareInfo(@ptrCast(*const IPrepareInfo2, self), cbPrepareInfo, pPrepInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetDispenser_Value = @import("../zig.zig").Guid.initString("C23CC370-87EF-11CE-8081-0080C758527E");
pub const IID_IGetDispenser = &IID_IGetDispenser_Value;
pub const IGetDispenser = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDispenser: fn(
            self: *const IGetDispenser,
            iid: *const Guid,
            ppvObject: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetDispenser_GetDispenser(self: *const T, iid: *const Guid, ppvObject: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetDispenser.VTable, self.vtable).GetDispenser(@ptrCast(*const IGetDispenser, self), iid, ppvObject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionVoterBallotAsync2_Value = @import("../zig.zig").Guid.initString("5433376C-414D-11D3-B206-00C04FC2F3EF");
pub const IID_ITransactionVoterBallotAsync2 = &IID_ITransactionVoterBallotAsync2_Value;
pub const ITransactionVoterBallotAsync2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        VoteRequestDone: fn(
            self: *const ITransactionVoterBallotAsync2,
            hr: HRESULT,
            pboidReason: ?*BOID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionVoterBallotAsync2_VoteRequestDone(self: *const T, hr: HRESULT, pboidReason: ?*BOID) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionVoterBallotAsync2.VTable, self.vtable).VoteRequestDone(@ptrCast(*const ITransactionVoterBallotAsync2, self), hr, pboidReason);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionVoterNotifyAsync2_Value = @import("../zig.zig").Guid.initString("5433376B-414D-11D3-B206-00C04FC2F3EF");
pub const IID_ITransactionVoterNotifyAsync2 = &IID_ITransactionVoterNotifyAsync2_Value;
pub const ITransactionVoterNotifyAsync2 = extern struct {
    pub const VTable = extern struct {
        base: ITransactionOutcomeEvents.VTable,
        VoteRequest: fn(
            self: *const ITransactionVoterNotifyAsync2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ITransactionOutcomeEvents.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionVoterNotifyAsync2_VoteRequest(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionVoterNotifyAsync2.VTable, self.vtable).VoteRequest(@ptrCast(*const ITransactionVoterNotifyAsync2, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionVoterFactory2_Value = @import("../zig.zig").Guid.initString("5433376A-414D-11D3-B206-00C04FC2F3EF");
pub const IID_ITransactionVoterFactory2 = &IID_ITransactionVoterFactory2_Value;
pub const ITransactionVoterFactory2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: fn(
            self: *const ITransactionVoterFactory2,
            pTransaction: ?*ITransaction,
            pVoterNotify: ?*ITransactionVoterNotifyAsync2,
            ppVoterBallot: **ITransactionVoterBallotAsync2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionVoterFactory2_Create(self: *const T, pTransaction: ?*ITransaction, pVoterNotify: ?*ITransactionVoterNotifyAsync2, ppVoterBallot: **ITransactionVoterBallotAsync2) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionVoterFactory2.VTable, self.vtable).Create(@ptrCast(*const ITransactionVoterFactory2, self), pTransaction, pVoterNotify, ppVoterBallot);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionPhase0EnlistmentAsync_Value = @import("../zig.zig").Guid.initString("82DC88E1-A954-11D1-8F88-00600895E7D5");
pub const IID_ITransactionPhase0EnlistmentAsync = &IID_ITransactionPhase0EnlistmentAsync_Value;
pub const ITransactionPhase0EnlistmentAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Enable: fn(
            self: *const ITransactionPhase0EnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForEnlistment: fn(
            self: *const ITransactionPhase0EnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Phase0Done: fn(
            self: *const ITransactionPhase0EnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unenlist: fn(
            self: *const ITransactionPhase0EnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransaction: fn(
            self: *const ITransactionPhase0EnlistmentAsync,
            ppITransaction: **ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionPhase0EnlistmentAsync_Enable(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionPhase0EnlistmentAsync.VTable, self.vtable).Enable(@ptrCast(*const ITransactionPhase0EnlistmentAsync, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionPhase0EnlistmentAsync_WaitForEnlistment(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionPhase0EnlistmentAsync.VTable, self.vtable).WaitForEnlistment(@ptrCast(*const ITransactionPhase0EnlistmentAsync, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionPhase0EnlistmentAsync_Phase0Done(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionPhase0EnlistmentAsync.VTable, self.vtable).Phase0Done(@ptrCast(*const ITransactionPhase0EnlistmentAsync, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionPhase0EnlistmentAsync_Unenlist(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionPhase0EnlistmentAsync.VTable, self.vtable).Unenlist(@ptrCast(*const ITransactionPhase0EnlistmentAsync, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionPhase0EnlistmentAsync_GetTransaction(self: *const T, ppITransaction: **ITransaction) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionPhase0EnlistmentAsync.VTable, self.vtable).GetTransaction(@ptrCast(*const ITransactionPhase0EnlistmentAsync, self), ppITransaction);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionPhase0NotifyAsync_Value = @import("../zig.zig").Guid.initString("EF081809-0C76-11D2-87A6-00C04F990F34");
pub const IID_ITransactionPhase0NotifyAsync = &IID_ITransactionPhase0NotifyAsync_Value;
pub const ITransactionPhase0NotifyAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Phase0Request: fn(
            self: *const ITransactionPhase0NotifyAsync,
            fAbortingHint: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnlistCompleted: fn(
            self: *const ITransactionPhase0NotifyAsync,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionPhase0NotifyAsync_Phase0Request(self: *const T, fAbortingHint: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionPhase0NotifyAsync.VTable, self.vtable).Phase0Request(@ptrCast(*const ITransactionPhase0NotifyAsync, self), fAbortingHint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionPhase0NotifyAsync_EnlistCompleted(self: *const T, status: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionPhase0NotifyAsync.VTable, self.vtable).EnlistCompleted(@ptrCast(*const ITransactionPhase0NotifyAsync, self), status);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionPhase0Factory_Value = @import("../zig.zig").Guid.initString("82DC88E0-A954-11D1-8F88-00600895E7D5");
pub const IID_ITransactionPhase0Factory = &IID_ITransactionPhase0Factory_Value;
pub const ITransactionPhase0Factory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: fn(
            self: *const ITransactionPhase0Factory,
            pPhase0Notify: ?*ITransactionPhase0NotifyAsync,
            ppPhase0Enlistment: **ITransactionPhase0EnlistmentAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionPhase0Factory_Create(self: *const T, pPhase0Notify: ?*ITransactionPhase0NotifyAsync, ppPhase0Enlistment: **ITransactionPhase0EnlistmentAsync) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionPhase0Factory.VTable, self.vtable).Create(@ptrCast(*const ITransactionPhase0Factory, self), pPhase0Notify, ppPhase0Enlistment);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionTransmitter_Value = @import("../zig.zig").Guid.initString("59313E01-B36C-11CF-A539-00AA006887C3");
pub const IID_ITransactionTransmitter = &IID_ITransactionTransmitter_Value;
pub const ITransactionTransmitter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Set: fn(
            self: *const ITransactionTransmitter,
            pTransaction: ?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropagationTokenSize: fn(
            self: *const ITransactionTransmitter,
            pcbToken: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MarshalPropagationToken: fn(
            self: *const ITransactionTransmitter,
            cbToken: u32,
            rgbToken: [*:0]u8,
            pcbUsed: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnmarshalReturnToken: fn(
            self: *const ITransactionTransmitter,
            cbReturnToken: u32,
            rgbReturnToken: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const ITransactionTransmitter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionTransmitter_Set(self: *const T, pTransaction: ?*ITransaction) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionTransmitter.VTable, self.vtable).Set(@ptrCast(*const ITransactionTransmitter, self), pTransaction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionTransmitter_GetPropagationTokenSize(self: *const T, pcbToken: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionTransmitter.VTable, self.vtable).GetPropagationTokenSize(@ptrCast(*const ITransactionTransmitter, self), pcbToken);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionTransmitter_MarshalPropagationToken(self: *const T, cbToken: u32, rgbToken: [*:0]u8, pcbUsed: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionTransmitter.VTable, self.vtable).MarshalPropagationToken(@ptrCast(*const ITransactionTransmitter, self), cbToken, rgbToken, pcbUsed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionTransmitter_UnmarshalReturnToken(self: *const T, cbReturnToken: u32, rgbReturnToken: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionTransmitter.VTable, self.vtable).UnmarshalReturnToken(@ptrCast(*const ITransactionTransmitter, self), cbReturnToken, rgbReturnToken);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionTransmitter_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionTransmitter.VTable, self.vtable).Reset(@ptrCast(*const ITransactionTransmitter, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionTransmitterFactory_Value = @import("../zig.zig").Guid.initString("59313E00-B36C-11CF-A539-00AA006887C3");
pub const IID_ITransactionTransmitterFactory = &IID_ITransactionTransmitterFactory_Value;
pub const ITransactionTransmitterFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: fn(
            self: *const ITransactionTransmitterFactory,
            ppTransmitter: **ITransactionTransmitter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionTransmitterFactory_Create(self: *const T, ppTransmitter: **ITransactionTransmitter) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionTransmitterFactory.VTable, self.vtable).Create(@ptrCast(*const ITransactionTransmitterFactory, self), ppTransmitter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionReceiver_Value = @import("../zig.zig").Guid.initString("59313E03-B36C-11CF-A539-00AA006887C3");
pub const IID_ITransactionReceiver = &IID_ITransactionReceiver_Value;
pub const ITransactionReceiver = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UnmarshalPropagationToken: fn(
            self: *const ITransactionReceiver,
            cbToken: u32,
            rgbToken: [*:0]u8,
            ppTransaction: **ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReturnTokenSize: fn(
            self: *const ITransactionReceiver,
            pcbReturnToken: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MarshalReturnToken: fn(
            self: *const ITransactionReceiver,
            cbReturnToken: u32,
            rgbReturnToken: [*:0]u8,
            pcbUsed: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const ITransactionReceiver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionReceiver_UnmarshalPropagationToken(self: *const T, cbToken: u32, rgbToken: [*:0]u8, ppTransaction: **ITransaction) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionReceiver.VTable, self.vtable).UnmarshalPropagationToken(@ptrCast(*const ITransactionReceiver, self), cbToken, rgbToken, ppTransaction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionReceiver_GetReturnTokenSize(self: *const T, pcbReturnToken: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionReceiver.VTable, self.vtable).GetReturnTokenSize(@ptrCast(*const ITransactionReceiver, self), pcbReturnToken);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionReceiver_MarshalReturnToken(self: *const T, cbReturnToken: u32, rgbReturnToken: [*:0]u8, pcbUsed: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionReceiver.VTable, self.vtable).MarshalReturnToken(@ptrCast(*const ITransactionReceiver, self), cbReturnToken, rgbReturnToken, pcbUsed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionReceiver_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionReceiver.VTable, self.vtable).Reset(@ptrCast(*const ITransactionReceiver, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionReceiverFactory_Value = @import("../zig.zig").Guid.initString("59313E02-B36C-11CF-A539-00AA006887C3");
pub const IID_ITransactionReceiverFactory = &IID_ITransactionReceiverFactory_Value;
pub const ITransactionReceiverFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: fn(
            self: *const ITransactionReceiverFactory,
            ppReceiver: **ITransactionReceiver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionReceiverFactory_Create(self: *const T, ppReceiver: **ITransactionReceiver) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionReceiverFactory.VTable, self.vtable).Create(@ptrCast(*const ITransactionReceiverFactory, self), ppReceiver);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _ProxyConfigParams = extern struct {
    wcThreadsMax: u16,
};

const IID_IDtcLuConfigure_Value = @import("../zig.zig").Guid.initString("4131E760-1AEA-11D0-944B-00A0C905416E");
pub const IID_IDtcLuConfigure = &IID_IDtcLuConfigure_Value;
pub const IDtcLuConfigure = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Add: fn(
            self: *const IDtcLuConfigure,
            pucLuPair: [*:0]u8,
            cbLuPair: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IDtcLuConfigure,
            pucLuPair: [*:0]u8,
            cbLuPair: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuConfigure_Add(self: *const T, pucLuPair: [*:0]u8, cbLuPair: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuConfigure.VTable, self.vtable).Add(@ptrCast(*const IDtcLuConfigure, self), pucLuPair, cbLuPair);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuConfigure_Delete(self: *const T, pucLuPair: [*:0]u8, cbLuPair: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuConfigure.VTable, self.vtable).Delete(@ptrCast(*const IDtcLuConfigure, self), pucLuPair, cbLuPair);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRecovery_Value = @import("../zig.zig").Guid.initString("AC2B8AD2-D6F0-11D0-B386-00A0C9083365");
pub const IID_IDtcLuRecovery = &IID_IDtcLuRecovery_Value;
pub const IDtcLuRecovery = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRecoveryFactory_Value = @import("../zig.zig").Guid.initString("4131E762-1AEA-11D0-944B-00A0C905416E");
pub const IID_IDtcLuRecoveryFactory = &IID_IDtcLuRecoveryFactory_Value;
pub const IDtcLuRecoveryFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: fn(
            self: *const IDtcLuRecoveryFactory,
            pucLuPair: [*:0]u8,
            cbLuPair: u32,
            ppRecovery: **IDtcLuRecovery,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryFactory_Create(self: *const T, pucLuPair: [*:0]u8, cbLuPair: u32, ppRecovery: **IDtcLuRecovery) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryFactory.VTable, self.vtable).Create(@ptrCast(*const IDtcLuRecoveryFactory, self), pucLuPair, cbLuPair, ppRecovery);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const _DtcLu_LocalRecovery_Work = extern enum(i32) {
    DTCINITIATEDRECOVERYWORK_CHECKLUSTATUS = 1,
    DTCINITIATEDRECOVERYWORK_TRANS = 2,
    DTCINITIATEDRECOVERYWORK_TMDOWN = 3,
};
pub const DTCINITIATEDRECOVERYWORK_CHECKLUSTATUS = _DtcLu_LocalRecovery_Work.DTCINITIATEDRECOVERYWORK_CHECKLUSTATUS;
pub const DTCINITIATEDRECOVERYWORK_TRANS = _DtcLu_LocalRecovery_Work.DTCINITIATEDRECOVERYWORK_TRANS;
pub const DTCINITIATEDRECOVERYWORK_TMDOWN = _DtcLu_LocalRecovery_Work.DTCINITIATEDRECOVERYWORK_TMDOWN;

pub const _DtcLu_Xln = extern enum(i32) {
    DTCLUXLN_COLD = 1,
    DTCLUXLN_WARM = 2,
};
pub const DTCLUXLN_COLD = _DtcLu_Xln.DTCLUXLN_COLD;
pub const DTCLUXLN_WARM = _DtcLu_Xln.DTCLUXLN_WARM;

pub const _DtcLu_Xln_Confirmation = extern enum(i32) {
    DTCLUXLNCONFIRMATION_CONFIRM = 1,
    DTCLUXLNCONFIRMATION_LOGNAMEMISMATCH = 2,
    DTCLUXLNCONFIRMATION_COLDWARMMISMATCH = 3,
    DTCLUXLNCONFIRMATION_OBSOLETE = 4,
};
pub const DTCLUXLNCONFIRMATION_CONFIRM = _DtcLu_Xln_Confirmation.DTCLUXLNCONFIRMATION_CONFIRM;
pub const DTCLUXLNCONFIRMATION_LOGNAMEMISMATCH = _DtcLu_Xln_Confirmation.DTCLUXLNCONFIRMATION_LOGNAMEMISMATCH;
pub const DTCLUXLNCONFIRMATION_COLDWARMMISMATCH = _DtcLu_Xln_Confirmation.DTCLUXLNCONFIRMATION_COLDWARMMISMATCH;
pub const DTCLUXLNCONFIRMATION_OBSOLETE = _DtcLu_Xln_Confirmation.DTCLUXLNCONFIRMATION_OBSOLETE;

pub const _DtcLu_Xln_Response = extern enum(i32) {
    DTCLUXLNRESPONSE_OK_SENDOURXLNBACK = 1,
    DTCLUXLNRESPONSE_OK_SENDCONFIRMATION = 2,
    DTCLUXLNRESPONSE_LOGNAMEMISMATCH = 3,
    DTCLUXLNRESPONSE_COLDWARMMISMATCH = 4,
};
pub const DTCLUXLNRESPONSE_OK_SENDOURXLNBACK = _DtcLu_Xln_Response.DTCLUXLNRESPONSE_OK_SENDOURXLNBACK;
pub const DTCLUXLNRESPONSE_OK_SENDCONFIRMATION = _DtcLu_Xln_Response.DTCLUXLNRESPONSE_OK_SENDCONFIRMATION;
pub const DTCLUXLNRESPONSE_LOGNAMEMISMATCH = _DtcLu_Xln_Response.DTCLUXLNRESPONSE_LOGNAMEMISMATCH;
pub const DTCLUXLNRESPONSE_COLDWARMMISMATCH = _DtcLu_Xln_Response.DTCLUXLNRESPONSE_COLDWARMMISMATCH;

pub const _DtcLu_Xln_Error = extern enum(i32) {
    DTCLUXLNERROR_PROTOCOL = 1,
    DTCLUXLNERROR_LOGNAMEMISMATCH = 2,
    DTCLUXLNERROR_COLDWARMMISMATCH = 3,
};
pub const DTCLUXLNERROR_PROTOCOL = _DtcLu_Xln_Error.DTCLUXLNERROR_PROTOCOL;
pub const DTCLUXLNERROR_LOGNAMEMISMATCH = _DtcLu_Xln_Error.DTCLUXLNERROR_LOGNAMEMISMATCH;
pub const DTCLUXLNERROR_COLDWARMMISMATCH = _DtcLu_Xln_Error.DTCLUXLNERROR_COLDWARMMISMATCH;

pub const _DtcLu_CompareState = extern enum(i32) {
    DTCLUCOMPARESTATE_COMMITTED = 1,
    DTCLUCOMPARESTATE_HEURISTICCOMMITTED = 2,
    DTCLUCOMPARESTATE_HEURISTICMIXED = 3,
    DTCLUCOMPARESTATE_HEURISTICRESET = 4,
    DTCLUCOMPARESTATE_INDOUBT = 5,
    DTCLUCOMPARESTATE_RESET = 6,
};
pub const DTCLUCOMPARESTATE_COMMITTED = _DtcLu_CompareState.DTCLUCOMPARESTATE_COMMITTED;
pub const DTCLUCOMPARESTATE_HEURISTICCOMMITTED = _DtcLu_CompareState.DTCLUCOMPARESTATE_HEURISTICCOMMITTED;
pub const DTCLUCOMPARESTATE_HEURISTICMIXED = _DtcLu_CompareState.DTCLUCOMPARESTATE_HEURISTICMIXED;
pub const DTCLUCOMPARESTATE_HEURISTICRESET = _DtcLu_CompareState.DTCLUCOMPARESTATE_HEURISTICRESET;
pub const DTCLUCOMPARESTATE_INDOUBT = _DtcLu_CompareState.DTCLUCOMPARESTATE_INDOUBT;
pub const DTCLUCOMPARESTATE_RESET = _DtcLu_CompareState.DTCLUCOMPARESTATE_RESET;

pub const _DtcLu_CompareStates_Confirmation = extern enum(i32) {
    DTCLUCOMPARESTATESCONFIRMATION_CONFIRM = 1,
    DTCLUCOMPARESTATESCONFIRMATION_PROTOCOL = 2,
};
pub const DTCLUCOMPARESTATESCONFIRMATION_CONFIRM = _DtcLu_CompareStates_Confirmation.DTCLUCOMPARESTATESCONFIRMATION_CONFIRM;
pub const DTCLUCOMPARESTATESCONFIRMATION_PROTOCOL = _DtcLu_CompareStates_Confirmation.DTCLUCOMPARESTATESCONFIRMATION_PROTOCOL;

pub const _DtcLu_CompareStates_Error = extern enum(i32) {
    DTCLUCOMPARESTATESERROR_PROTOCOL = 1,
};
pub const DTCLUCOMPARESTATESERROR_PROTOCOL = _DtcLu_CompareStates_Error.DTCLUCOMPARESTATESERROR_PROTOCOL;

pub const _DtcLu_CompareStates_Response = extern enum(i32) {
    DTCLUCOMPARESTATESRESPONSE_OK = 1,
    DTCLUCOMPARESTATESRESPONSE_PROTOCOL = 2,
};
pub const DTCLUCOMPARESTATESRESPONSE_OK = _DtcLu_CompareStates_Response.DTCLUCOMPARESTATESRESPONSE_OK;
pub const DTCLUCOMPARESTATESRESPONSE_PROTOCOL = _DtcLu_CompareStates_Response.DTCLUCOMPARESTATESRESPONSE_PROTOCOL;

const IID_IDtcLuRecoveryInitiatedByDtcTransWork_Value = @import("../zig.zig").Guid.initString("4131E765-1AEA-11D0-944B-00A0C905416E");
pub const IID_IDtcLuRecoveryInitiatedByDtcTransWork = &IID_IDtcLuRecoveryInitiatedByDtcTransWork_Value;
pub const IDtcLuRecoveryInitiatedByDtcTransWork = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLogNameSizes: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            pcbOurLogName: *u32,
            pcbRemoteLogName: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOurXln: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            pXln: *_DtcLu_Xln,
            pOurLogName: *u8,
            pRemoteLogName: *u8,
            pdwProtocol: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleConfirmationFromOurXln: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            Confirmation: _DtcLu_Xln_Confirmation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleTheirXlnResponse: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            Xln: _DtcLu_Xln,
            pRemoteLogName: *u8,
            cbRemoteLogName: u32,
            dwProtocol: u32,
            pConfirmation: *_DtcLu_Xln_Confirmation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleErrorFromOurXln: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            Error: _DtcLu_Xln_Error,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckForCompareStates: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            fCompareStates: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOurTransIdSize: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            pcbOurTransId: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOurCompareStates: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            pOurTransId: *u8,
            pCompareState: *_DtcLu_CompareState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleTheirCompareStatesResponse: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            CompareState: _DtcLu_CompareState,
            pConfirmation: *_DtcLu_CompareStates_Confirmation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleErrorFromOurCompareStates: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            Error: _DtcLu_CompareStates_Error,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConversationLost: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecoverySeqNum: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            plRecoverySeqNum: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ObsoleteRecoverySeqNum: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcTransWork,
            lNewRecoverySeqNum: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_GetLogNameSizes(self: *const T, pcbOurLogName: *u32, pcbRemoteLogName: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).GetLogNameSizes(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self), pcbOurLogName, pcbRemoteLogName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_GetOurXln(self: *const T, pXln: *_DtcLu_Xln, pOurLogName: *u8, pRemoteLogName: *u8, pdwProtocol: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).GetOurXln(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self), pXln, pOurLogName, pRemoteLogName, pdwProtocol);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_HandleConfirmationFromOurXln(self: *const T, Confirmation: _DtcLu_Xln_Confirmation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).HandleConfirmationFromOurXln(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self), Confirmation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_HandleTheirXlnResponse(self: *const T, Xln: _DtcLu_Xln, pRemoteLogName: *u8, cbRemoteLogName: u32, dwProtocol: u32, pConfirmation: *_DtcLu_Xln_Confirmation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).HandleTheirXlnResponse(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self), Xln, pRemoteLogName, cbRemoteLogName, dwProtocol, pConfirmation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_HandleErrorFromOurXln(self: *const T, Error: _DtcLu_Xln_Error) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).HandleErrorFromOurXln(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self), Error);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_CheckForCompareStates(self: *const T, fCompareStates: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).CheckForCompareStates(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self), fCompareStates);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_GetOurTransIdSize(self: *const T, pcbOurTransId: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).GetOurTransIdSize(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self), pcbOurTransId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_GetOurCompareStates(self: *const T, pOurTransId: *u8, pCompareState: *_DtcLu_CompareState) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).GetOurCompareStates(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self), pOurTransId, pCompareState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_HandleTheirCompareStatesResponse(self: *const T, CompareState: _DtcLu_CompareState, pConfirmation: *_DtcLu_CompareStates_Confirmation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).HandleTheirCompareStatesResponse(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self), CompareState, pConfirmation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_HandleErrorFromOurCompareStates(self: *const T, Error: _DtcLu_CompareStates_Error) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).HandleErrorFromOurCompareStates(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self), Error);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_ConversationLost(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).ConversationLost(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_GetRecoverySeqNum(self: *const T, plRecoverySeqNum: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).GetRecoverySeqNum(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self), plRecoverySeqNum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcTransWork_ObsoleteRecoverySeqNum(self: *const T, lNewRecoverySeqNum: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork.VTable, self.vtable).ObsoleteRecoverySeqNum(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcTransWork, self), lNewRecoverySeqNum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRecoveryInitiatedByDtcStatusWork_Value = @import("../zig.zig").Guid.initString("4131E766-1AEA-11D0-944B-00A0C905416E");
pub const IID_IDtcLuRecoveryInitiatedByDtcStatusWork = &IID_IDtcLuRecoveryInitiatedByDtcStatusWork_Value;
pub const IDtcLuRecoveryInitiatedByDtcStatusWork = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        HandleCheckLuStatus: fn(
            self: *const IDtcLuRecoveryInitiatedByDtcStatusWork,
            lRecoverySeqNum: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtcStatusWork_HandleCheckLuStatus(self: *const T, lRecoverySeqNum: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtcStatusWork.VTable, self.vtable).HandleCheckLuStatus(@ptrCast(*const IDtcLuRecoveryInitiatedByDtcStatusWork, self), lRecoverySeqNum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRecoveryInitiatedByDtc_Value = @import("../zig.zig").Guid.initString("4131E764-1AEA-11D0-944B-00A0C905416E");
pub const IID_IDtcLuRecoveryInitiatedByDtc = &IID_IDtcLuRecoveryInitiatedByDtc_Value;
pub const IDtcLuRecoveryInitiatedByDtc = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWork: fn(
            self: *const IDtcLuRecoveryInitiatedByDtc,
            pWork: *_DtcLu_LocalRecovery_Work,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByDtc_GetWork(self: *const T, pWork: *_DtcLu_LocalRecovery_Work, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByDtc.VTable, self.vtable).GetWork(@ptrCast(*const IDtcLuRecoveryInitiatedByDtc, self), pWork, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRecoveryInitiatedByLuWork_Value = @import("../zig.zig").Guid.initString("AC2B8AD1-D6F0-11D0-B386-00A0C9083365");
pub const IID_IDtcLuRecoveryInitiatedByLuWork = &IID_IDtcLuRecoveryInitiatedByLuWork_Value;
pub const IDtcLuRecoveryInitiatedByLuWork = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        HandleTheirXln: fn(
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            lRecoverySeqNum: i32,
            Xln: _DtcLu_Xln,
            pRemoteLogName: *u8,
            cbRemoteLogName: u32,
            pOurLogName: *u8,
            cbOurLogName: u32,
            dwProtocol: u32,
            pResponse: *_DtcLu_Xln_Response,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOurLogNameSize: fn(
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            pcbOurLogName: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOurXln: fn(
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            pXln: *_DtcLu_Xln,
            pOurLogName: *u8,
            pdwProtocol: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleConfirmationOfOurXln: fn(
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            Confirmation: _DtcLu_Xln_Confirmation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleTheirCompareStates: fn(
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            pRemoteTransId: *u8,
            cbRemoteTransId: u32,
            CompareState: _DtcLu_CompareState,
            pResponse: *_DtcLu_CompareStates_Response,
            pCompareState: *_DtcLu_CompareState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleConfirmationOfOurCompareStates: fn(
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            Confirmation: _DtcLu_CompareStates_Confirmation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleErrorFromOurCompareStates: fn(
            self: *const IDtcLuRecoveryInitiatedByLuWork,
            Error: _DtcLu_CompareStates_Error,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConversationLost: fn(
            self: *const IDtcLuRecoveryInitiatedByLuWork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByLuWork_HandleTheirXln(self: *const T, lRecoverySeqNum: i32, Xln: _DtcLu_Xln, pRemoteLogName: *u8, cbRemoteLogName: u32, pOurLogName: *u8, cbOurLogName: u32, dwProtocol: u32, pResponse: *_DtcLu_Xln_Response) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByLuWork.VTable, self.vtable).HandleTheirXln(@ptrCast(*const IDtcLuRecoveryInitiatedByLuWork, self), lRecoverySeqNum, Xln, pRemoteLogName, cbRemoteLogName, pOurLogName, cbOurLogName, dwProtocol, pResponse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByLuWork_GetOurLogNameSize(self: *const T, pcbOurLogName: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByLuWork.VTable, self.vtable).GetOurLogNameSize(@ptrCast(*const IDtcLuRecoveryInitiatedByLuWork, self), pcbOurLogName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByLuWork_GetOurXln(self: *const T, pXln: *_DtcLu_Xln, pOurLogName: *u8, pdwProtocol: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByLuWork.VTable, self.vtable).GetOurXln(@ptrCast(*const IDtcLuRecoveryInitiatedByLuWork, self), pXln, pOurLogName, pdwProtocol);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByLuWork_HandleConfirmationOfOurXln(self: *const T, Confirmation: _DtcLu_Xln_Confirmation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByLuWork.VTable, self.vtable).HandleConfirmationOfOurXln(@ptrCast(*const IDtcLuRecoveryInitiatedByLuWork, self), Confirmation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByLuWork_HandleTheirCompareStates(self: *const T, pRemoteTransId: *u8, cbRemoteTransId: u32, CompareState: _DtcLu_CompareState, pResponse: *_DtcLu_CompareStates_Response, pCompareState: *_DtcLu_CompareState) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByLuWork.VTable, self.vtable).HandleTheirCompareStates(@ptrCast(*const IDtcLuRecoveryInitiatedByLuWork, self), pRemoteTransId, cbRemoteTransId, CompareState, pResponse, pCompareState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByLuWork_HandleConfirmationOfOurCompareStates(self: *const T, Confirmation: _DtcLu_CompareStates_Confirmation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByLuWork.VTable, self.vtable).HandleConfirmationOfOurCompareStates(@ptrCast(*const IDtcLuRecoveryInitiatedByLuWork, self), Confirmation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByLuWork_HandleErrorFromOurCompareStates(self: *const T, Error: _DtcLu_CompareStates_Error) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByLuWork.VTable, self.vtable).HandleErrorFromOurCompareStates(@ptrCast(*const IDtcLuRecoveryInitiatedByLuWork, self), Error);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByLuWork_ConversationLost(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByLuWork.VTable, self.vtable).ConversationLost(@ptrCast(*const IDtcLuRecoveryInitiatedByLuWork, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRecoveryInitiatedByLu_Value = @import("../zig.zig").Guid.initString("4131E768-1AEA-11D0-944B-00A0C905416E");
pub const IID_IDtcLuRecoveryInitiatedByLu = &IID_IDtcLuRecoveryInitiatedByLu_Value;
pub const IDtcLuRecoveryInitiatedByLu = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetObjectToHandleWorkFromLu: fn(
            self: *const IDtcLuRecoveryInitiatedByLu,
            ppWork: **IDtcLuRecoveryInitiatedByLuWork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRecoveryInitiatedByLu_GetObjectToHandleWorkFromLu(self: *const T, ppWork: **IDtcLuRecoveryInitiatedByLuWork) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRecoveryInitiatedByLu.VTable, self.vtable).GetObjectToHandleWorkFromLu(@ptrCast(*const IDtcLuRecoveryInitiatedByLu, self), ppWork);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRmEnlistment_Value = @import("../zig.zig").Guid.initString("4131E769-1AEA-11D0-944B-00A0C905416E");
pub const IID_IDtcLuRmEnlistment = &IID_IDtcLuRmEnlistment_Value;
pub const IDtcLuRmEnlistment = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Unplug: fn(
            self: *const IDtcLuRmEnlistment,
            fConversationLost: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackedOut: fn(
            self: *const IDtcLuRmEnlistment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackOut: fn(
            self: *const IDtcLuRmEnlistment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Committed: fn(
            self: *const IDtcLuRmEnlistment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Forget: fn(
            self: *const IDtcLuRmEnlistment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestCommit: fn(
            self: *const IDtcLuRmEnlistment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistment_Unplug(self: *const T, fConversationLost: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistment.VTable, self.vtable).Unplug(@ptrCast(*const IDtcLuRmEnlistment, self), fConversationLost);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistment_BackedOut(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistment.VTable, self.vtable).BackedOut(@ptrCast(*const IDtcLuRmEnlistment, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistment_BackOut(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistment.VTable, self.vtable).BackOut(@ptrCast(*const IDtcLuRmEnlistment, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistment_Committed(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistment.VTable, self.vtable).Committed(@ptrCast(*const IDtcLuRmEnlistment, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistment_Forget(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistment.VTable, self.vtable).Forget(@ptrCast(*const IDtcLuRmEnlistment, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistment_RequestCommit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistment.VTable, self.vtable).RequestCommit(@ptrCast(*const IDtcLuRmEnlistment, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRmEnlistmentSink_Value = @import("../zig.zig").Guid.initString("4131E770-1AEA-11D0-944B-00A0C905416E");
pub const IID_IDtcLuRmEnlistmentSink = &IID_IDtcLuRmEnlistmentSink_Value;
pub const IDtcLuRmEnlistmentSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AckUnplug: fn(
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TmDown: fn(
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SessionLost: fn(
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackedOut: fn(
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackOut: fn(
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Committed: fn(
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Forget: fn(
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Prepare: fn(
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestCommit: fn(
            self: *const IDtcLuRmEnlistmentSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistmentSink_AckUnplug(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistmentSink.VTable, self.vtable).AckUnplug(@ptrCast(*const IDtcLuRmEnlistmentSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistmentSink_TmDown(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistmentSink.VTable, self.vtable).TmDown(@ptrCast(*const IDtcLuRmEnlistmentSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistmentSink_SessionLost(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistmentSink.VTable, self.vtable).SessionLost(@ptrCast(*const IDtcLuRmEnlistmentSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistmentSink_BackedOut(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistmentSink.VTable, self.vtable).BackedOut(@ptrCast(*const IDtcLuRmEnlistmentSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistmentSink_BackOut(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistmentSink.VTable, self.vtable).BackOut(@ptrCast(*const IDtcLuRmEnlistmentSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistmentSink_Committed(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistmentSink.VTable, self.vtable).Committed(@ptrCast(*const IDtcLuRmEnlistmentSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistmentSink_Forget(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistmentSink.VTable, self.vtable).Forget(@ptrCast(*const IDtcLuRmEnlistmentSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistmentSink_Prepare(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistmentSink.VTable, self.vtable).Prepare(@ptrCast(*const IDtcLuRmEnlistmentSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistmentSink_RequestCommit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistmentSink.VTable, self.vtable).RequestCommit(@ptrCast(*const IDtcLuRmEnlistmentSink, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuRmEnlistmentFactory_Value = @import("../zig.zig").Guid.initString("4131E771-1AEA-11D0-944B-00A0C905416E");
pub const IID_IDtcLuRmEnlistmentFactory = &IID_IDtcLuRmEnlistmentFactory_Value;
pub const IDtcLuRmEnlistmentFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: fn(
            self: *const IDtcLuRmEnlistmentFactory,
            pucLuPair: *u8,
            cbLuPair: u32,
            pITransaction: *ITransaction,
            pTransId: *u8,
            cbTransId: u32,
            pRmEnlistmentSink: *IDtcLuRmEnlistmentSink,
            ppRmEnlistment: **IDtcLuRmEnlistment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuRmEnlistmentFactory_Create(self: *const T, pucLuPair: *u8, cbLuPair: u32, pITransaction: *ITransaction, pTransId: *u8, cbTransId: u32, pRmEnlistmentSink: *IDtcLuRmEnlistmentSink, ppRmEnlistment: **IDtcLuRmEnlistment) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuRmEnlistmentFactory.VTable, self.vtable).Create(@ptrCast(*const IDtcLuRmEnlistmentFactory, self), pucLuPair, cbLuPair, pITransaction, pTransId, cbTransId, pRmEnlistmentSink, ppRmEnlistment);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuSubordinateDtc_Value = @import("../zig.zig").Guid.initString("4131E773-1AEA-11D0-944B-00A0C905416E");
pub const IID_IDtcLuSubordinateDtc = &IID_IDtcLuSubordinateDtc_Value;
pub const IDtcLuSubordinateDtc = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Unplug: fn(
            self: *const IDtcLuSubordinateDtc,
            fConversationLost: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackedOut: fn(
            self: *const IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackOut: fn(
            self: *const IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Committed: fn(
            self: *const IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Forget: fn(
            self: *const IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Prepare: fn(
            self: *const IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestCommit: fn(
            self: *const IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtc_Unplug(self: *const T, fConversationLost: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtc.VTable, self.vtable).Unplug(@ptrCast(*const IDtcLuSubordinateDtc, self), fConversationLost);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtc_BackedOut(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtc.VTable, self.vtable).BackedOut(@ptrCast(*const IDtcLuSubordinateDtc, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtc_BackOut(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtc.VTable, self.vtable).BackOut(@ptrCast(*const IDtcLuSubordinateDtc, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtc_Committed(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtc.VTable, self.vtable).Committed(@ptrCast(*const IDtcLuSubordinateDtc, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtc_Forget(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtc.VTable, self.vtable).Forget(@ptrCast(*const IDtcLuSubordinateDtc, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtc_Prepare(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtc.VTable, self.vtable).Prepare(@ptrCast(*const IDtcLuSubordinateDtc, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtc_RequestCommit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtc.VTable, self.vtable).RequestCommit(@ptrCast(*const IDtcLuSubordinateDtc, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuSubordinateDtcSink_Value = @import("../zig.zig").Guid.initString("4131E774-1AEA-11D0-944B-00A0C905416E");
pub const IID_IDtcLuSubordinateDtcSink = &IID_IDtcLuSubordinateDtcSink_Value;
pub const IDtcLuSubordinateDtcSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AckUnplug: fn(
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TmDown: fn(
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SessionLost: fn(
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackedOut: fn(
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackOut: fn(
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Committed: fn(
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Forget: fn(
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestCommit: fn(
            self: *const IDtcLuSubordinateDtcSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtcSink_AckUnplug(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtcSink.VTable, self.vtable).AckUnplug(@ptrCast(*const IDtcLuSubordinateDtcSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtcSink_TmDown(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtcSink.VTable, self.vtable).TmDown(@ptrCast(*const IDtcLuSubordinateDtcSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtcSink_SessionLost(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtcSink.VTable, self.vtable).SessionLost(@ptrCast(*const IDtcLuSubordinateDtcSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtcSink_BackedOut(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtcSink.VTable, self.vtable).BackedOut(@ptrCast(*const IDtcLuSubordinateDtcSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtcSink_BackOut(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtcSink.VTable, self.vtable).BackOut(@ptrCast(*const IDtcLuSubordinateDtcSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtcSink_Committed(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtcSink.VTable, self.vtable).Committed(@ptrCast(*const IDtcLuSubordinateDtcSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtcSink_Forget(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtcSink.VTable, self.vtable).Forget(@ptrCast(*const IDtcLuSubordinateDtcSink, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtcSink_RequestCommit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtcSink.VTable, self.vtable).RequestCommit(@ptrCast(*const IDtcLuSubordinateDtcSink, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDtcLuSubordinateDtcFactory_Value = @import("../zig.zig").Guid.initString("4131E775-1AEA-11D0-944B-00A0C905416E");
pub const IID_IDtcLuSubordinateDtcFactory = &IID_IDtcLuSubordinateDtcFactory_Value;
pub const IDtcLuSubordinateDtcFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: fn(
            self: *const IDtcLuSubordinateDtcFactory,
            pucLuPair: *u8,
            cbLuPair: u32,
            punkTransactionOuter: *IUnknown,
            isoLevel: i32,
            isoFlags: u32,
            pOptions: *ITransactionOptions,
            ppTransaction: **ITransaction,
            pTransId: *u8,
            cbTransId: u32,
            pSubordinateDtcSink: *IDtcLuSubordinateDtcSink,
            ppSubordinateDtc: **IDtcLuSubordinateDtc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDtcLuSubordinateDtcFactory_Create(self: *const T, pucLuPair: *u8, cbLuPair: u32, punkTransactionOuter: *IUnknown, isoLevel: i32, isoFlags: u32, pOptions: *ITransactionOptions, ppTransaction: **ITransaction, pTransId: *u8, cbTransId: u32, pSubordinateDtcSink: *IDtcLuSubordinateDtcSink, ppSubordinateDtc: **IDtcLuSubordinateDtc) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDtcLuSubordinateDtcFactory.VTable, self.vtable).Create(@ptrCast(*const IDtcLuSubordinateDtcFactory, self), pucLuPair, cbLuPair, punkTransactionOuter, isoLevel, isoFlags, pOptions, ppTransaction, pTransId, cbTransId, pSubordinateDtcSink, ppSubordinateDtc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISecurityIdentityColl_Value = @import("../zig.zig").Guid.initString("CAFC823C-B441-11D1-B82B-0000F8757E2A");
pub const IID_ISecurityIdentityColl = &IID_ISecurityIdentityColl_Value;
pub const ISecurityIdentityColl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISecurityIdentityColl,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISecurityIdentityColl,
            name: BSTR,
            pItem: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISecurityIdentityColl,
            ppEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityIdentityColl_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityIdentityColl.VTable, self.vtable).get_Count(@ptrCast(*const ISecurityIdentityColl, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityIdentityColl_get_Item(self: *const T, name: BSTR, pItem: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityIdentityColl.VTable, self.vtable).get_Item(@ptrCast(*const ISecurityIdentityColl, self), name, pItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityIdentityColl_get__NewEnum(self: *const T, ppEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityIdentityColl.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISecurityIdentityColl, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISecurityCallersColl_Value = @import("../zig.zig").Guid.initString("CAFC823D-B441-11D1-B82B-0000F8757E2A");
pub const IID_ISecurityCallersColl = &IID_ISecurityCallersColl_Value;
pub const ISecurityCallersColl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISecurityCallersColl,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISecurityCallersColl,
            lIndex: i32,
            pObj: **ISecurityIdentityColl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISecurityCallersColl,
            ppEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityCallersColl_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityCallersColl.VTable, self.vtable).get_Count(@ptrCast(*const ISecurityCallersColl, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityCallersColl_get_Item(self: *const T, lIndex: i32, pObj: **ISecurityIdentityColl) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityCallersColl.VTable, self.vtable).get_Item(@ptrCast(*const ISecurityCallersColl, self), lIndex, pObj);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityCallersColl_get__NewEnum(self: *const T, ppEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityCallersColl.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISecurityCallersColl, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISecurityCallContext_Value = @import("../zig.zig").Guid.initString("CAFC823E-B441-11D1-B82B-0000F8757E2A");
pub const IID_ISecurityCallContext = &IID_ISecurityCallContext_Value;
pub const ISecurityCallContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISecurityCallContext,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISecurityCallContext,
            name: BSTR,
            pItem: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISecurityCallContext,
            ppEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCallerInRole: fn(
            self: *const ISecurityCallContext,
            bstrRole: BSTR,
            pfInRole: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSecurityEnabled: fn(
            self: *const ISecurityCallContext,
            pfIsEnabled: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUserInRole: fn(
            self: *const ISecurityCallContext,
            pUser: *VARIANT,
            bstrRole: BSTR,
            pfInRole: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityCallContext_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityCallContext.VTable, self.vtable).get_Count(@ptrCast(*const ISecurityCallContext, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityCallContext_get_Item(self: *const T, name: BSTR, pItem: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityCallContext.VTable, self.vtable).get_Item(@ptrCast(*const ISecurityCallContext, self), name, pItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityCallContext_get__NewEnum(self: *const T, ppEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityCallContext.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISecurityCallContext, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityCallContext_IsCallerInRole(self: *const T, bstrRole: BSTR, pfInRole: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityCallContext.VTable, self.vtable).IsCallerInRole(@ptrCast(*const ISecurityCallContext, self), bstrRole, pfInRole);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityCallContext_IsSecurityEnabled(self: *const T, pfIsEnabled: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityCallContext.VTable, self.vtable).IsSecurityEnabled(@ptrCast(*const ISecurityCallContext, self), pfIsEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityCallContext_IsUserInRole(self: *const T, pUser: *VARIANT, bstrRole: BSTR, pfInRole: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityCallContext.VTable, self.vtable).IsUserInRole(@ptrCast(*const ISecurityCallContext, self), pUser, bstrRole, pfInRole);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetSecurityCallContext_Value = @import("../zig.zig").Guid.initString("CAFC823F-B441-11D1-B82B-0000F8757E2A");
pub const IID_IGetSecurityCallContext = &IID_IGetSecurityCallContext_Value;
pub const IGetSecurityCallContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetSecurityCallContext: fn(
            self: *const IGetSecurityCallContext,
            ppObject: **ISecurityCallContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetSecurityCallContext_GetSecurityCallContext(self: *const T, ppObject: **ISecurityCallContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetSecurityCallContext.VTable, self.vtable).GetSecurityCallContext(@ptrCast(*const IGetSecurityCallContext, self), ppObject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_SecurityProperty_Value = @import("../zig.zig").Guid.initString("E74A7215-014D-11D1-A63C-00A0C911B4E0");
pub const IID_SecurityProperty = &IID_SecurityProperty_Value;
pub const SecurityProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetDirectCallerName: fn(
            self: *const SecurityProperty,
            bstrUserName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDirectCreatorName: fn(
            self: *const SecurityProperty,
            bstrUserName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOriginalCallerName: fn(
            self: *const SecurityProperty,
            bstrUserName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOriginalCreatorName: fn(
            self: *const SecurityProperty,
            bstrUserName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn SecurityProperty_GetDirectCallerName(self: *const T, bstrUserName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const SecurityProperty.VTable, self.vtable).GetDirectCallerName(@ptrCast(*const SecurityProperty, self), bstrUserName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn SecurityProperty_GetDirectCreatorName(self: *const T, bstrUserName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const SecurityProperty.VTable, self.vtable).GetDirectCreatorName(@ptrCast(*const SecurityProperty, self), bstrUserName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn SecurityProperty_GetOriginalCallerName(self: *const T, bstrUserName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const SecurityProperty.VTable, self.vtable).GetOriginalCallerName(@ptrCast(*const SecurityProperty, self), bstrUserName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn SecurityProperty_GetOriginalCreatorName(self: *const T, bstrUserName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const SecurityProperty.VTable, self.vtable).GetOriginalCreatorName(@ptrCast(*const SecurityProperty, self), bstrUserName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ContextInfo_Value = @import("../zig.zig").Guid.initString("19A5A02C-0AC8-11D2-B286-00C04F8EF934");
pub const IID_ContextInfo = &IID_ContextInfo_Value;
pub const ContextInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        IsInTransaction: fn(
            self: *const ContextInfo,
            pbIsInTx: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransaction: fn(
            self: *const ContextInfo,
            ppTx: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransactionId: fn(
            self: *const ContextInfo,
            pbstrTxId: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActivityId: fn(
            self: *const ContextInfo,
            pbstrActivityId: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContextId: fn(
            self: *const ContextInfo,
            pbstrCtxId: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ContextInfo_IsInTransaction(self: *const T, pbIsInTx: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ContextInfo.VTable, self.vtable).IsInTransaction(@ptrCast(*const ContextInfo, self), pbIsInTx);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ContextInfo_GetTransaction(self: *const T, ppTx: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ContextInfo.VTable, self.vtable).GetTransaction(@ptrCast(*const ContextInfo, self), ppTx);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ContextInfo_GetTransactionId(self: *const T, pbstrTxId: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ContextInfo.VTable, self.vtable).GetTransactionId(@ptrCast(*const ContextInfo, self), pbstrTxId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ContextInfo_GetActivityId(self: *const T, pbstrActivityId: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ContextInfo.VTable, self.vtable).GetActivityId(@ptrCast(*const ContextInfo, self), pbstrActivityId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ContextInfo_GetContextId(self: *const T, pbstrCtxId: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ContextInfo.VTable, self.vtable).GetContextId(@ptrCast(*const ContextInfo, self), pbstrCtxId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ContextInfo2_Value = @import("../zig.zig").Guid.initString("C99D6E75-2375-11D4-8331-00C04F605588");
pub const IID_ContextInfo2 = &IID_ContextInfo2_Value;
pub const ContextInfo2 = extern struct {
    pub const VTable = extern struct {
        base: ContextInfo.VTable,
        GetPartitionId: fn(
            self: *const ContextInfo2,
            __MIDL__ContextInfo20000: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationId: fn(
            self: *const ContextInfo2,
            __MIDL__ContextInfo20001: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationInstanceId: fn(
            self: *const ContextInfo2,
            __MIDL__ContextInfo20002: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ContextInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ContextInfo2_GetPartitionId(self: *const T, __MIDL__ContextInfo20000: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ContextInfo2.VTable, self.vtable).GetPartitionId(@ptrCast(*const ContextInfo2, self), __MIDL__ContextInfo20000);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ContextInfo2_GetApplicationId(self: *const T, __MIDL__ContextInfo20001: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ContextInfo2.VTable, self.vtable).GetApplicationId(@ptrCast(*const ContextInfo2, self), __MIDL__ContextInfo20001);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ContextInfo2_GetApplicationInstanceId(self: *const T, __MIDL__ContextInfo20002: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ContextInfo2.VTable, self.vtable).GetApplicationInstanceId(@ptrCast(*const ContextInfo2, self), __MIDL__ContextInfo20002);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ObjectContext_Value = @import("../zig.zig").Guid.initString("74C08646-CEDB-11CF-8B49-00AA00B8A790");
pub const IID_ObjectContext = &IID_ObjectContext_Value;
pub const ObjectContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateInstance: fn(
            self: *const ObjectContext,
            bstrProgID: BSTR,
            pObject: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetComplete: fn(
            self: *const ObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAbort: fn(
            self: *const ObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableCommit: fn(
            self: *const ObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableCommit: fn(
            self: *const ObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsInTransaction: fn(
            self: *const ObjectContext,
            pbIsInTx: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSecurityEnabled: fn(
            self: *const ObjectContext,
            pbIsEnabled: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCallerInRole: fn(
            self: *const ObjectContext,
            bstrRole: BSTR,
            pbInRole: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ObjectContext,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ObjectContext,
            name: BSTR,
            pItem: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ObjectContext,
            ppEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Security: fn(
            self: *const ObjectContext,
            ppSecurityProperty: **SecurityProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ContextInfo: fn(
            self: *const ObjectContext,
            ppContextInfo: **ContextInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_CreateInstance(self: *const T, bstrProgID: BSTR, pObject: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).CreateInstance(@ptrCast(*const ObjectContext, self), bstrProgID, pObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_SetComplete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).SetComplete(@ptrCast(*const ObjectContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_SetAbort(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).SetAbort(@ptrCast(*const ObjectContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_EnableCommit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).EnableCommit(@ptrCast(*const ObjectContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_DisableCommit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).DisableCommit(@ptrCast(*const ObjectContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_IsInTransaction(self: *const T, pbIsInTx: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).IsInTransaction(@ptrCast(*const ObjectContext, self), pbIsInTx);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_IsSecurityEnabled(self: *const T, pbIsEnabled: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).IsSecurityEnabled(@ptrCast(*const ObjectContext, self), pbIsEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_IsCallerInRole(self: *const T, bstrRole: BSTR, pbInRole: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).IsCallerInRole(@ptrCast(*const ObjectContext, self), bstrRole, pbInRole);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).get_Count(@ptrCast(*const ObjectContext, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_get_Item(self: *const T, name: BSTR, pItem: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).get_Item(@ptrCast(*const ObjectContext, self), name, pItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_get__NewEnum(self: *const T, ppEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).get__NewEnum(@ptrCast(*const ObjectContext, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_get_Security(self: *const T, ppSecurityProperty: **SecurityProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).get_Security(@ptrCast(*const ObjectContext, self), ppSecurityProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectContext_get_ContextInfo(self: *const T, ppContextInfo: **ContextInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectContext.VTable, self.vtable).get_ContextInfo(@ptrCast(*const ObjectContext, self), ppContextInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionContextEx_Value = @import("../zig.zig").Guid.initString("7999FC22-D3C6-11CF-ACAB-00A024A55AEF");
pub const IID_ITransactionContextEx = &IID_ITransactionContextEx_Value;
pub const ITransactionContextEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstance: fn(
            self: *const ITransactionContextEx,
            rclsid: *const Guid,
            riid: *const Guid,
            pObject: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const ITransactionContextEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: fn(
            self: *const ITransactionContextEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionContextEx_CreateInstance(self: *const T, rclsid: *const Guid, riid: *const Guid, pObject: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionContextEx.VTable, self.vtable).CreateInstance(@ptrCast(*const ITransactionContextEx, self), rclsid, riid, pObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionContextEx_Commit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionContextEx.VTable, self.vtable).Commit(@ptrCast(*const ITransactionContextEx, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionContextEx_Abort(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionContextEx.VTable, self.vtable).Abort(@ptrCast(*const ITransactionContextEx, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionContext_Value = @import("../zig.zig").Guid.initString("7999FC21-D3C6-11CF-ACAB-00A024A55AEF");
pub const IID_ITransactionContext = &IID_ITransactionContext_Value;
pub const ITransactionContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateInstance: fn(
            self: *const ITransactionContext,
            pszProgId: BSTR,
            pObject: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const ITransactionContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: fn(
            self: *const ITransactionContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionContext_CreateInstance(self: *const T, pszProgId: BSTR, pObject: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionContext.VTable, self.vtable).CreateInstance(@ptrCast(*const ITransactionContext, self), pszProgId, pObject);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionContext_Commit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionContext.VTable, self.vtable).Commit(@ptrCast(*const ITransactionContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionContext_Abort(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionContext.VTable, self.vtable).Abort(@ptrCast(*const ITransactionContext, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICreateWithTransactionEx_Value = @import("../zig.zig").Guid.initString("455ACF57-5345-11D2-99CF-00C04F797BC9");
pub const IID_ICreateWithTransactionEx = &IID_ICreateWithTransactionEx_Value;
pub const ICreateWithTransactionEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstance: fn(
            self: *const ICreateWithTransactionEx,
            pTransaction: ?*ITransaction,
            rclsid: *const Guid,
            riid: *const Guid,
            pObject: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreateWithTransactionEx_CreateInstance(self: *const T, pTransaction: ?*ITransaction, rclsid: *const Guid, riid: *const Guid, pObject: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreateWithTransactionEx.VTable, self.vtable).CreateInstance(@ptrCast(*const ICreateWithTransactionEx, self), pTransaction, rclsid, riid, pObject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICreateWithLocalTransaction_Value = @import("../zig.zig").Guid.initString("227AC7A8-8423-42CE-B7CF-03061EC9AAA3");
pub const IID_ICreateWithLocalTransaction = &IID_ICreateWithLocalTransaction_Value;
pub const ICreateWithLocalTransaction = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstanceWithSysTx: fn(
            self: *const ICreateWithLocalTransaction,
            pTransaction: *IUnknown,
            rclsid: *const Guid,
            riid: *const Guid,
            pObject: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreateWithLocalTransaction_CreateInstanceWithSysTx(self: *const T, pTransaction: *IUnknown, rclsid: *const Guid, riid: *const Guid, pObject: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreateWithLocalTransaction.VTable, self.vtable).CreateInstanceWithSysTx(@ptrCast(*const ICreateWithLocalTransaction, self), pTransaction, rclsid, riid, pObject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICreateWithTipTransactionEx_Value = @import("../zig.zig").Guid.initString("455ACF59-5345-11D2-99CF-00C04F797BC9");
pub const IID_ICreateWithTipTransactionEx = &IID_ICreateWithTipTransactionEx_Value;
pub const ICreateWithTipTransactionEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstance: fn(
            self: *const ICreateWithTipTransactionEx,
            bstrTipUrl: BSTR,
            rclsid: *const Guid,
            riid: *const Guid,
            pObject: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICreateWithTipTransactionEx_CreateInstance(self: *const T, bstrTipUrl: BSTR, rclsid: *const Guid, riid: *const Guid, pObject: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICreateWithTipTransactionEx.VTable, self.vtable).CreateInstance(@ptrCast(*const ICreateWithTipTransactionEx, self), bstrTipUrl, rclsid, riid, pObject);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const COMSVCSEVENTINFO = extern struct {
    cbSize: u32,
    dwPid: u32,
    lTime: i64,
    lMicroTime: i32,
    perfCount: i64,
    guidApp: Guid,
    sMachineName: PWSTR,
};

const IID_IComLTxEvents_Value = @import("../zig.zig").Guid.initString("605CF82C-578E-4298-975D-82BABCD9E053");
pub const IID_IComLTxEvents = &IID_IComLTxEvents_Value;
pub const IComLTxEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnLtxTransactionStart: fn(
            self: *const IComLTxEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidLtx: Guid,
            tsid: Guid,
            fRoot: BOOL,
            nIsolationLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLtxTransactionPrepare: fn(
            self: *const IComLTxEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidLtx: Guid,
            fVote: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLtxTransactionAbort: fn(
            self: *const IComLTxEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidLtx: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLtxTransactionCommit: fn(
            self: *const IComLTxEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidLtx: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLtxTransactionPromote: fn(
            self: *const IComLTxEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidLtx: Guid,
            txnId: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComLTxEvents_OnLtxTransactionStart(self: *const T, pInfo: *COMSVCSEVENTINFO, guidLtx: Guid, tsid: Guid, fRoot: BOOL, nIsolationLevel: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComLTxEvents.VTable, self.vtable).OnLtxTransactionStart(@ptrCast(*const IComLTxEvents, self), pInfo, guidLtx, tsid, fRoot, nIsolationLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComLTxEvents_OnLtxTransactionPrepare(self: *const T, pInfo: *COMSVCSEVENTINFO, guidLtx: Guid, fVote: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComLTxEvents.VTable, self.vtable).OnLtxTransactionPrepare(@ptrCast(*const IComLTxEvents, self), pInfo, guidLtx, fVote);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComLTxEvents_OnLtxTransactionAbort(self: *const T, pInfo: *COMSVCSEVENTINFO, guidLtx: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComLTxEvents.VTable, self.vtable).OnLtxTransactionAbort(@ptrCast(*const IComLTxEvents, self), pInfo, guidLtx);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComLTxEvents_OnLtxTransactionCommit(self: *const T, pInfo: *COMSVCSEVENTINFO, guidLtx: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComLTxEvents.VTable, self.vtable).OnLtxTransactionCommit(@ptrCast(*const IComLTxEvents, self), pInfo, guidLtx);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComLTxEvents_OnLtxTransactionPromote(self: *const T, pInfo: *COMSVCSEVENTINFO, guidLtx: Guid, txnId: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComLTxEvents.VTable, self.vtable).OnLtxTransactionPromote(@ptrCast(*const IComLTxEvents, self), pInfo, guidLtx, txnId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComUserEvent_Value = @import("../zig.zig").Guid.initString("683130A4-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComUserEvent = &IID_IComUserEvent_Value;
pub const IComUserEvent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnUserEvent: fn(
            self: *const IComUserEvent,
            pInfo: *COMSVCSEVENTINFO,
            pvarEvent: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComUserEvent_OnUserEvent(self: *const T, pInfo: *COMSVCSEVENTINFO, pvarEvent: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComUserEvent.VTable, self.vtable).OnUserEvent(@ptrCast(*const IComUserEvent, self), pInfo, pvarEvent);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComThreadEvents_Value = @import("../zig.zig").Guid.initString("683130A5-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComThreadEvents = &IID_IComThreadEvents_Value;
pub const IComThreadEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnThreadStart: fn(
            self: *const IComThreadEvents,
            pInfo: *COMSVCSEVENTINFO,
            ThreadID: u64,
            dwThread: u32,
            dwTheadCnt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadTerminate: fn(
            self: *const IComThreadEvents,
            pInfo: *COMSVCSEVENTINFO,
            ThreadID: u64,
            dwThread: u32,
            dwTheadCnt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadBindToApartment: fn(
            self: *const IComThreadEvents,
            pInfo: *COMSVCSEVENTINFO,
            ThreadID: u64,
            AptID: u64,
            dwActCnt: u32,
            dwLowCnt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadUnBind: fn(
            self: *const IComThreadEvents,
            pInfo: *COMSVCSEVENTINFO,
            ThreadID: u64,
            AptID: u64,
            dwActCnt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadWorkEnque: fn(
            self: *const IComThreadEvents,
            pInfo: *COMSVCSEVENTINFO,
            ThreadID: u64,
            MsgWorkID: u64,
            QueueLen: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadWorkPrivate: fn(
            self: *const IComThreadEvents,
            pInfo: *COMSVCSEVENTINFO,
            ThreadID: u64,
            MsgWorkID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadWorkPublic: fn(
            self: *const IComThreadEvents,
            pInfo: *COMSVCSEVENTINFO,
            ThreadID: u64,
            MsgWorkID: u64,
            QueueLen: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadWorkRedirect: fn(
            self: *const IComThreadEvents,
            pInfo: *COMSVCSEVENTINFO,
            ThreadID: u64,
            MsgWorkID: u64,
            QueueLen: u32,
            ThreadNum: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadWorkReject: fn(
            self: *const IComThreadEvents,
            pInfo: *COMSVCSEVENTINFO,
            ThreadID: u64,
            MsgWorkID: u64,
            QueueLen: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadAssignApartment: fn(
            self: *const IComThreadEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
            AptID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnThreadUnassignApartment: fn(
            self: *const IComThreadEvents,
            pInfo: *COMSVCSEVENTINFO,
            AptID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComThreadEvents_OnThreadStart(self: *const T, pInfo: *COMSVCSEVENTINFO, ThreadID: u64, dwThread: u32, dwTheadCnt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComThreadEvents.VTable, self.vtable).OnThreadStart(@ptrCast(*const IComThreadEvents, self), pInfo, ThreadID, dwThread, dwTheadCnt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComThreadEvents_OnThreadTerminate(self: *const T, pInfo: *COMSVCSEVENTINFO, ThreadID: u64, dwThread: u32, dwTheadCnt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComThreadEvents.VTable, self.vtable).OnThreadTerminate(@ptrCast(*const IComThreadEvents, self), pInfo, ThreadID, dwThread, dwTheadCnt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComThreadEvents_OnThreadBindToApartment(self: *const T, pInfo: *COMSVCSEVENTINFO, ThreadID: u64, AptID: u64, dwActCnt: u32, dwLowCnt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComThreadEvents.VTable, self.vtable).OnThreadBindToApartment(@ptrCast(*const IComThreadEvents, self), pInfo, ThreadID, AptID, dwActCnt, dwLowCnt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComThreadEvents_OnThreadUnBind(self: *const T, pInfo: *COMSVCSEVENTINFO, ThreadID: u64, AptID: u64, dwActCnt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComThreadEvents.VTable, self.vtable).OnThreadUnBind(@ptrCast(*const IComThreadEvents, self), pInfo, ThreadID, AptID, dwActCnt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComThreadEvents_OnThreadWorkEnque(self: *const T, pInfo: *COMSVCSEVENTINFO, ThreadID: u64, MsgWorkID: u64, QueueLen: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComThreadEvents.VTable, self.vtable).OnThreadWorkEnque(@ptrCast(*const IComThreadEvents, self), pInfo, ThreadID, MsgWorkID, QueueLen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComThreadEvents_OnThreadWorkPrivate(self: *const T, pInfo: *COMSVCSEVENTINFO, ThreadID: u64, MsgWorkID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComThreadEvents.VTable, self.vtable).OnThreadWorkPrivate(@ptrCast(*const IComThreadEvents, self), pInfo, ThreadID, MsgWorkID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComThreadEvents_OnThreadWorkPublic(self: *const T, pInfo: *COMSVCSEVENTINFO, ThreadID: u64, MsgWorkID: u64, QueueLen: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComThreadEvents.VTable, self.vtable).OnThreadWorkPublic(@ptrCast(*const IComThreadEvents, self), pInfo, ThreadID, MsgWorkID, QueueLen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComThreadEvents_OnThreadWorkRedirect(self: *const T, pInfo: *COMSVCSEVENTINFO, ThreadID: u64, MsgWorkID: u64, QueueLen: u32, ThreadNum: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComThreadEvents.VTable, self.vtable).OnThreadWorkRedirect(@ptrCast(*const IComThreadEvents, self), pInfo, ThreadID, MsgWorkID, QueueLen, ThreadNum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComThreadEvents_OnThreadWorkReject(self: *const T, pInfo: *COMSVCSEVENTINFO, ThreadID: u64, MsgWorkID: u64, QueueLen: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComThreadEvents.VTable, self.vtable).OnThreadWorkReject(@ptrCast(*const IComThreadEvents, self), pInfo, ThreadID, MsgWorkID, QueueLen);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComThreadEvents_OnThreadAssignApartment(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid, AptID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComThreadEvents.VTable, self.vtable).OnThreadAssignApartment(@ptrCast(*const IComThreadEvents, self), pInfo, guidActivity, AptID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComThreadEvents_OnThreadUnassignApartment(self: *const T, pInfo: *COMSVCSEVENTINFO, AptID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComThreadEvents.VTable, self.vtable).OnThreadUnassignApartment(@ptrCast(*const IComThreadEvents, self), pInfo, AptID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComAppEvents_Value = @import("../zig.zig").Guid.initString("683130A6-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComAppEvents = &IID_IComAppEvents_Value;
pub const IComAppEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnAppActivation: fn(
            self: *const IComAppEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidApp: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAppShutdown: fn(
            self: *const IComAppEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidApp: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAppForceShutdown: fn(
            self: *const IComAppEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidApp: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComAppEvents_OnAppActivation(self: *const T, pInfo: *COMSVCSEVENTINFO, guidApp: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComAppEvents.VTable, self.vtable).OnAppActivation(@ptrCast(*const IComAppEvents, self), pInfo, guidApp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComAppEvents_OnAppShutdown(self: *const T, pInfo: *COMSVCSEVENTINFO, guidApp: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComAppEvents.VTable, self.vtable).OnAppShutdown(@ptrCast(*const IComAppEvents, self), pInfo, guidApp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComAppEvents_OnAppForceShutdown(self: *const T, pInfo: *COMSVCSEVENTINFO, guidApp: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComAppEvents.VTable, self.vtable).OnAppForceShutdown(@ptrCast(*const IComAppEvents, self), pInfo, guidApp);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComInstanceEvents_Value = @import("../zig.zig").Guid.initString("683130A7-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComInstanceEvents = &IID_IComInstanceEvents_Value;
pub const IComInstanceEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjectCreate: fn(
            self: *const IComInstanceEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
            clsid: *const Guid,
            tsid: *const Guid,
            CtxtID: u64,
            ObjectID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjectDestroy: fn(
            self: *const IComInstanceEvents,
            pInfo: *COMSVCSEVENTINFO,
            CtxtID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComInstanceEvents_OnObjectCreate(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid, clsid: *const Guid, tsid: *const Guid, CtxtID: u64, ObjectID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComInstanceEvents.VTable, self.vtable).OnObjectCreate(@ptrCast(*const IComInstanceEvents, self), pInfo, guidActivity, clsid, tsid, CtxtID, ObjectID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComInstanceEvents_OnObjectDestroy(self: *const T, pInfo: *COMSVCSEVENTINFO, CtxtID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComInstanceEvents.VTable, self.vtable).OnObjectDestroy(@ptrCast(*const IComInstanceEvents, self), pInfo, CtxtID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComTransactionEvents_Value = @import("../zig.zig").Guid.initString("683130A8-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComTransactionEvents = &IID_IComTransactionEvents_Value;
pub const IComTransactionEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnTransactionStart: fn(
            self: *const IComTransactionEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidTx: *const Guid,
            tsid: *const Guid,
            fRoot: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTransactionPrepare: fn(
            self: *const IComTransactionEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidTx: *const Guid,
            fVoteYes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTransactionAbort: fn(
            self: *const IComTransactionEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidTx: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTransactionCommit: fn(
            self: *const IComTransactionEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidTx: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTransactionEvents_OnTransactionStart(self: *const T, pInfo: *COMSVCSEVENTINFO, guidTx: *const Guid, tsid: *const Guid, fRoot: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTransactionEvents.VTable, self.vtable).OnTransactionStart(@ptrCast(*const IComTransactionEvents, self), pInfo, guidTx, tsid, fRoot);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTransactionEvents_OnTransactionPrepare(self: *const T, pInfo: *COMSVCSEVENTINFO, guidTx: *const Guid, fVoteYes: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTransactionEvents.VTable, self.vtable).OnTransactionPrepare(@ptrCast(*const IComTransactionEvents, self), pInfo, guidTx, fVoteYes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTransactionEvents_OnTransactionAbort(self: *const T, pInfo: *COMSVCSEVENTINFO, guidTx: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTransactionEvents.VTable, self.vtable).OnTransactionAbort(@ptrCast(*const IComTransactionEvents, self), pInfo, guidTx);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTransactionEvents_OnTransactionCommit(self: *const T, pInfo: *COMSVCSEVENTINFO, guidTx: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTransactionEvents.VTable, self.vtable).OnTransactionCommit(@ptrCast(*const IComTransactionEvents, self), pInfo, guidTx);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComMethodEvents_Value = @import("../zig.zig").Guid.initString("683130A9-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComMethodEvents = &IID_IComMethodEvents_Value;
pub const IComMethodEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnMethodCall: fn(
            self: *const IComMethodEvents,
            pInfo: *COMSVCSEVENTINFO,
            oid: u64,
            guidCid: *const Guid,
            guidRid: *const Guid,
            iMeth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnMethodReturn: fn(
            self: *const IComMethodEvents,
            pInfo: *COMSVCSEVENTINFO,
            oid: u64,
            guidCid: *const Guid,
            guidRid: *const Guid,
            iMeth: u32,
            hresult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnMethodException: fn(
            self: *const IComMethodEvents,
            pInfo: *COMSVCSEVENTINFO,
            oid: u64,
            guidCid: *const Guid,
            guidRid: *const Guid,
            iMeth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComMethodEvents_OnMethodCall(self: *const T, pInfo: *COMSVCSEVENTINFO, oid: u64, guidCid: *const Guid, guidRid: *const Guid, iMeth: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComMethodEvents.VTable, self.vtable).OnMethodCall(@ptrCast(*const IComMethodEvents, self), pInfo, oid, guidCid, guidRid, iMeth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComMethodEvents_OnMethodReturn(self: *const T, pInfo: *COMSVCSEVENTINFO, oid: u64, guidCid: *const Guid, guidRid: *const Guid, iMeth: u32, hresult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComMethodEvents.VTable, self.vtable).OnMethodReturn(@ptrCast(*const IComMethodEvents, self), pInfo, oid, guidCid, guidRid, iMeth, hresult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComMethodEvents_OnMethodException(self: *const T, pInfo: *COMSVCSEVENTINFO, oid: u64, guidCid: *const Guid, guidRid: *const Guid, iMeth: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComMethodEvents.VTable, self.vtable).OnMethodException(@ptrCast(*const IComMethodEvents, self), pInfo, oid, guidCid, guidRid, iMeth);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComObjectEvents_Value = @import("../zig.zig").Guid.initString("683130AA-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComObjectEvents = &IID_IComObjectEvents_Value;
pub const IComObjectEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjectActivate: fn(
            self: *const IComObjectEvents,
            pInfo: *COMSVCSEVENTINFO,
            CtxtID: u64,
            ObjectID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjectDeactivate: fn(
            self: *const IComObjectEvents,
            pInfo: *COMSVCSEVENTINFO,
            CtxtID: u64,
            ObjectID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDisableCommit: fn(
            self: *const IComObjectEvents,
            pInfo: *COMSVCSEVENTINFO,
            CtxtID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEnableCommit: fn(
            self: *const IComObjectEvents,
            pInfo: *COMSVCSEVENTINFO,
            CtxtID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSetComplete: fn(
            self: *const IComObjectEvents,
            pInfo: *COMSVCSEVENTINFO,
            CtxtID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSetAbort: fn(
            self: *const IComObjectEvents,
            pInfo: *COMSVCSEVENTINFO,
            CtxtID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectEvents_OnObjectActivate(self: *const T, pInfo: *COMSVCSEVENTINFO, CtxtID: u64, ObjectID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectEvents.VTable, self.vtable).OnObjectActivate(@ptrCast(*const IComObjectEvents, self), pInfo, CtxtID, ObjectID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectEvents_OnObjectDeactivate(self: *const T, pInfo: *COMSVCSEVENTINFO, CtxtID: u64, ObjectID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectEvents.VTable, self.vtable).OnObjectDeactivate(@ptrCast(*const IComObjectEvents, self), pInfo, CtxtID, ObjectID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectEvents_OnDisableCommit(self: *const T, pInfo: *COMSVCSEVENTINFO, CtxtID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectEvents.VTable, self.vtable).OnDisableCommit(@ptrCast(*const IComObjectEvents, self), pInfo, CtxtID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectEvents_OnEnableCommit(self: *const T, pInfo: *COMSVCSEVENTINFO, CtxtID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectEvents.VTable, self.vtable).OnEnableCommit(@ptrCast(*const IComObjectEvents, self), pInfo, CtxtID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectEvents_OnSetComplete(self: *const T, pInfo: *COMSVCSEVENTINFO, CtxtID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectEvents.VTable, self.vtable).OnSetComplete(@ptrCast(*const IComObjectEvents, self), pInfo, CtxtID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectEvents_OnSetAbort(self: *const T, pInfo: *COMSVCSEVENTINFO, CtxtID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectEvents.VTable, self.vtable).OnSetAbort(@ptrCast(*const IComObjectEvents, self), pInfo, CtxtID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComResourceEvents_Value = @import("../zig.zig").Guid.initString("683130AB-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComResourceEvents = &IID_IComResourceEvents_Value;
pub const IComResourceEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnResourceCreate: fn(
            self: *const IComResourceEvents,
            pInfo: *COMSVCSEVENTINFO,
            ObjectID: u64,
            pszType: [*:0]const u16,
            resId: u64,
            enlisted: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnResourceAllocate: fn(
            self: *const IComResourceEvents,
            pInfo: *COMSVCSEVENTINFO,
            ObjectID: u64,
            pszType: [*:0]const u16,
            resId: u64,
            enlisted: BOOL,
            NumRated: u32,
            Rating: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnResourceRecycle: fn(
            self: *const IComResourceEvents,
            pInfo: *COMSVCSEVENTINFO,
            ObjectID: u64,
            pszType: [*:0]const u16,
            resId: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnResourceDestroy: fn(
            self: *const IComResourceEvents,
            pInfo: *COMSVCSEVENTINFO,
            ObjectID: u64,
            hr: HRESULT,
            pszType: [*:0]const u16,
            resId: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnResourceTrack: fn(
            self: *const IComResourceEvents,
            pInfo: *COMSVCSEVENTINFO,
            ObjectID: u64,
            pszType: [*:0]const u16,
            resId: u64,
            enlisted: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComResourceEvents_OnResourceCreate(self: *const T, pInfo: *COMSVCSEVENTINFO, ObjectID: u64, pszType: [*:0]const u16, resId: u64, enlisted: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComResourceEvents.VTable, self.vtable).OnResourceCreate(@ptrCast(*const IComResourceEvents, self), pInfo, ObjectID, pszType, resId, enlisted);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComResourceEvents_OnResourceAllocate(self: *const T, pInfo: *COMSVCSEVENTINFO, ObjectID: u64, pszType: [*:0]const u16, resId: u64, enlisted: BOOL, NumRated: u32, Rating: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComResourceEvents.VTable, self.vtable).OnResourceAllocate(@ptrCast(*const IComResourceEvents, self), pInfo, ObjectID, pszType, resId, enlisted, NumRated, Rating);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComResourceEvents_OnResourceRecycle(self: *const T, pInfo: *COMSVCSEVENTINFO, ObjectID: u64, pszType: [*:0]const u16, resId: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComResourceEvents.VTable, self.vtable).OnResourceRecycle(@ptrCast(*const IComResourceEvents, self), pInfo, ObjectID, pszType, resId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComResourceEvents_OnResourceDestroy(self: *const T, pInfo: *COMSVCSEVENTINFO, ObjectID: u64, hr: HRESULT, pszType: [*:0]const u16, resId: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComResourceEvents.VTable, self.vtable).OnResourceDestroy(@ptrCast(*const IComResourceEvents, self), pInfo, ObjectID, hr, pszType, resId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComResourceEvents_OnResourceTrack(self: *const T, pInfo: *COMSVCSEVENTINFO, ObjectID: u64, pszType: [*:0]const u16, resId: u64, enlisted: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComResourceEvents.VTable, self.vtable).OnResourceTrack(@ptrCast(*const IComResourceEvents, self), pInfo, ObjectID, pszType, resId, enlisted);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComSecurityEvents_Value = @import("../zig.zig").Guid.initString("683130AC-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComSecurityEvents = &IID_IComSecurityEvents_Value;
pub const IComSecurityEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnAuthenticate: fn(
            self: *const IComSecurityEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
            ObjectID: u64,
            guidIID: *const Guid,
            iMeth: u32,
            cbByteOrig: u32,
            pSidOriginalUser: [*:0]u8,
            cbByteCur: u32,
            pSidCurrentUser: [*:0]u8,
            bCurrentUserInpersonatingInProc: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAuthenticateFail: fn(
            self: *const IComSecurityEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
            ObjectID: u64,
            guidIID: *const Guid,
            iMeth: u32,
            cbByteOrig: u32,
            pSidOriginalUser: [*:0]u8,
            cbByteCur: u32,
            pSidCurrentUser: [*:0]u8,
            bCurrentUserInpersonatingInProc: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComSecurityEvents_OnAuthenticate(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid, ObjectID: u64, guidIID: *const Guid, iMeth: u32, cbByteOrig: u32, pSidOriginalUser: [*:0]u8, cbByteCur: u32, pSidCurrentUser: [*:0]u8, bCurrentUserInpersonatingInProc: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComSecurityEvents.VTable, self.vtable).OnAuthenticate(@ptrCast(*const IComSecurityEvents, self), pInfo, guidActivity, ObjectID, guidIID, iMeth, cbByteOrig, pSidOriginalUser, cbByteCur, pSidCurrentUser, bCurrentUserInpersonatingInProc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComSecurityEvents_OnAuthenticateFail(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid, ObjectID: u64, guidIID: *const Guid, iMeth: u32, cbByteOrig: u32, pSidOriginalUser: [*:0]u8, cbByteCur: u32, pSidCurrentUser: [*:0]u8, bCurrentUserInpersonatingInProc: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComSecurityEvents.VTable, self.vtable).OnAuthenticateFail(@ptrCast(*const IComSecurityEvents, self), pInfo, guidActivity, ObjectID, guidIID, iMeth, cbByteOrig, pSidOriginalUser, cbByteCur, pSidCurrentUser, bCurrentUserInpersonatingInProc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComObjectPoolEvents_Value = @import("../zig.zig").Guid.initString("683130AD-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComObjectPoolEvents = &IID_IComObjectPoolEvents_Value;
pub const IComObjectPoolEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjPoolPutObject: fn(
            self: *const IComObjectPoolEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidObject: *const Guid,
            nReason: i32,
            dwAvailable: u32,
            oid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolGetObject: fn(
            self: *const IComObjectPoolEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
            guidObject: *const Guid,
            dwAvailable: u32,
            oid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolRecycleToTx: fn(
            self: *const IComObjectPoolEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
            guidObject: *const Guid,
            guidTx: *const Guid,
            objid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolGetFromTx: fn(
            self: *const IComObjectPoolEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
            guidObject: *const Guid,
            guidTx: *const Guid,
            objid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPoolEvents_OnObjPoolPutObject(self: *const T, pInfo: *COMSVCSEVENTINFO, guidObject: *const Guid, nReason: i32, dwAvailable: u32, oid: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPoolEvents.VTable, self.vtable).OnObjPoolPutObject(@ptrCast(*const IComObjectPoolEvents, self), pInfo, guidObject, nReason, dwAvailable, oid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPoolEvents_OnObjPoolGetObject(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid, guidObject: *const Guid, dwAvailable: u32, oid: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPoolEvents.VTable, self.vtable).OnObjPoolGetObject(@ptrCast(*const IComObjectPoolEvents, self), pInfo, guidActivity, guidObject, dwAvailable, oid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPoolEvents_OnObjPoolRecycleToTx(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid, guidObject: *const Guid, guidTx: *const Guid, objid: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPoolEvents.VTable, self.vtable).OnObjPoolRecycleToTx(@ptrCast(*const IComObjectPoolEvents, self), pInfo, guidActivity, guidObject, guidTx, objid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPoolEvents_OnObjPoolGetFromTx(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid, guidObject: *const Guid, guidTx: *const Guid, objid: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPoolEvents.VTable, self.vtable).OnObjPoolGetFromTx(@ptrCast(*const IComObjectPoolEvents, self), pInfo, guidActivity, guidObject, guidTx, objid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComObjectPoolEvents2_Value = @import("../zig.zig").Guid.initString("683130AE-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComObjectPoolEvents2 = &IID_IComObjectPoolEvents2_Value;
pub const IComObjectPoolEvents2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjPoolCreateObject: fn(
            self: *const IComObjectPoolEvents2,
            pInfo: *COMSVCSEVENTINFO,
            guidObject: *const Guid,
            dwObjsCreated: u32,
            oid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolDestroyObject: fn(
            self: *const IComObjectPoolEvents2,
            pInfo: *COMSVCSEVENTINFO,
            guidObject: *const Guid,
            dwObjsCreated: u32,
            oid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolCreateDecision: fn(
            self: *const IComObjectPoolEvents2,
            pInfo: *COMSVCSEVENTINFO,
            dwThreadsWaiting: u32,
            dwAvail: u32,
            dwCreated: u32,
            dwMin: u32,
            dwMax: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolTimeout: fn(
            self: *const IComObjectPoolEvents2,
            pInfo: *COMSVCSEVENTINFO,
            guidObject: *const Guid,
            guidActivity: *const Guid,
            dwTimeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolCreatePool: fn(
            self: *const IComObjectPoolEvents2,
            pInfo: *COMSVCSEVENTINFO,
            guidObject: *const Guid,
            dwMin: u32,
            dwMax: u32,
            dwTimeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPoolEvents2_OnObjPoolCreateObject(self: *const T, pInfo: *COMSVCSEVENTINFO, guidObject: *const Guid, dwObjsCreated: u32, oid: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPoolEvents2.VTable, self.vtable).OnObjPoolCreateObject(@ptrCast(*const IComObjectPoolEvents2, self), pInfo, guidObject, dwObjsCreated, oid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPoolEvents2_OnObjPoolDestroyObject(self: *const T, pInfo: *COMSVCSEVENTINFO, guidObject: *const Guid, dwObjsCreated: u32, oid: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPoolEvents2.VTable, self.vtable).OnObjPoolDestroyObject(@ptrCast(*const IComObjectPoolEvents2, self), pInfo, guidObject, dwObjsCreated, oid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPoolEvents2_OnObjPoolCreateDecision(self: *const T, pInfo: *COMSVCSEVENTINFO, dwThreadsWaiting: u32, dwAvail: u32, dwCreated: u32, dwMin: u32, dwMax: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPoolEvents2.VTable, self.vtable).OnObjPoolCreateDecision(@ptrCast(*const IComObjectPoolEvents2, self), pInfo, dwThreadsWaiting, dwAvail, dwCreated, dwMin, dwMax);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPoolEvents2_OnObjPoolTimeout(self: *const T, pInfo: *COMSVCSEVENTINFO, guidObject: *const Guid, guidActivity: *const Guid, dwTimeout: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPoolEvents2.VTable, self.vtable).OnObjPoolTimeout(@ptrCast(*const IComObjectPoolEvents2, self), pInfo, guidObject, guidActivity, dwTimeout);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPoolEvents2_OnObjPoolCreatePool(self: *const T, pInfo: *COMSVCSEVENTINFO, guidObject: *const Guid, dwMin: u32, dwMax: u32, dwTimeout: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPoolEvents2.VTable, self.vtable).OnObjPoolCreatePool(@ptrCast(*const IComObjectPoolEvents2, self), pInfo, guidObject, dwMin, dwMax, dwTimeout);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComObjectConstructionEvents_Value = @import("../zig.zig").Guid.initString("683130AF-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComObjectConstructionEvents = &IID_IComObjectConstructionEvents_Value;
pub const IComObjectConstructionEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjectConstruct: fn(
            self: *const IComObjectConstructionEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidObject: *const Guid,
            sConstructString: [*:0]const u16,
            oid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectConstructionEvents_OnObjectConstruct(self: *const T, pInfo: *COMSVCSEVENTINFO, guidObject: *const Guid, sConstructString: [*:0]const u16, oid: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectConstructionEvents.VTable, self.vtable).OnObjectConstruct(@ptrCast(*const IComObjectConstructionEvents, self), pInfo, guidObject, sConstructString, oid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComActivityEvents_Value = @import("../zig.zig").Guid.initString("683130B0-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComActivityEvents = &IID_IComActivityEvents_Value;
pub const IComActivityEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnActivityCreate: fn(
            self: *const IComActivityEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityDestroy: fn(
            self: *const IComActivityEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityEnter: fn(
            self: *const IComActivityEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidCurrent: *const Guid,
            guidEntered: *const Guid,
            dwThread: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityTimeout: fn(
            self: *const IComActivityEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidCurrent: *const Guid,
            guidEntered: *const Guid,
            dwThread: u32,
            dwTimeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityReenter: fn(
            self: *const IComActivityEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidCurrent: *const Guid,
            dwThread: u32,
            dwCallDepth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityLeave: fn(
            self: *const IComActivityEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidCurrent: *const Guid,
            guidLeft: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivityLeaveSame: fn(
            self: *const IComActivityEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidCurrent: *const Guid,
            dwCallDepth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComActivityEvents_OnActivityCreate(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComActivityEvents.VTable, self.vtable).OnActivityCreate(@ptrCast(*const IComActivityEvents, self), pInfo, guidActivity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComActivityEvents_OnActivityDestroy(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComActivityEvents.VTable, self.vtable).OnActivityDestroy(@ptrCast(*const IComActivityEvents, self), pInfo, guidActivity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComActivityEvents_OnActivityEnter(self: *const T, pInfo: *COMSVCSEVENTINFO, guidCurrent: *const Guid, guidEntered: *const Guid, dwThread: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComActivityEvents.VTable, self.vtable).OnActivityEnter(@ptrCast(*const IComActivityEvents, self), pInfo, guidCurrent, guidEntered, dwThread);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComActivityEvents_OnActivityTimeout(self: *const T, pInfo: *COMSVCSEVENTINFO, guidCurrent: *const Guid, guidEntered: *const Guid, dwThread: u32, dwTimeout: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComActivityEvents.VTable, self.vtable).OnActivityTimeout(@ptrCast(*const IComActivityEvents, self), pInfo, guidCurrent, guidEntered, dwThread, dwTimeout);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComActivityEvents_OnActivityReenter(self: *const T, pInfo: *COMSVCSEVENTINFO, guidCurrent: *const Guid, dwThread: u32, dwCallDepth: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComActivityEvents.VTable, self.vtable).OnActivityReenter(@ptrCast(*const IComActivityEvents, self), pInfo, guidCurrent, dwThread, dwCallDepth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComActivityEvents_OnActivityLeave(self: *const T, pInfo: *COMSVCSEVENTINFO, guidCurrent: *const Guid, guidLeft: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComActivityEvents.VTable, self.vtable).OnActivityLeave(@ptrCast(*const IComActivityEvents, self), pInfo, guidCurrent, guidLeft);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComActivityEvents_OnActivityLeaveSame(self: *const T, pInfo: *COMSVCSEVENTINFO, guidCurrent: *const Guid, dwCallDepth: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComActivityEvents.VTable, self.vtable).OnActivityLeaveSame(@ptrCast(*const IComActivityEvents, self), pInfo, guidCurrent, dwCallDepth);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComIdentityEvents_Value = @import("../zig.zig").Guid.initString("683130B1-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComIdentityEvents = &IID_IComIdentityEvents_Value;
pub const IComIdentityEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnIISRequestInfo: fn(
            self: *const IComIdentityEvents,
            pInfo: *COMSVCSEVENTINFO,
            ObjId: u64,
            pszClientIP: [*:0]const u16,
            pszServerIP: [*:0]const u16,
            pszURL: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComIdentityEvents_OnIISRequestInfo(self: *const T, pInfo: *COMSVCSEVENTINFO, ObjId: u64, pszClientIP: [*:0]const u16, pszServerIP: [*:0]const u16, pszURL: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComIdentityEvents.VTable, self.vtable).OnIISRequestInfo(@ptrCast(*const IComIdentityEvents, self), pInfo, ObjId, pszClientIP, pszServerIP, pszURL);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComQCEvents_Value = @import("../zig.zig").Guid.initString("683130B2-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComQCEvents = &IID_IComQCEvents_Value;
pub const IComQCEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnQCRecord: fn(
            self: *const IComQCEvents,
            pInfo: *COMSVCSEVENTINFO,
            objid: u64,
            szQueue: *[60]u16,
            guidMsgId: *const Guid,
            guidWorkFlowId: *const Guid,
            msmqhr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQCQueueOpen: fn(
            self: *const IComQCEvents,
            pInfo: *COMSVCSEVENTINFO,
            szQueue: *[60]u16,
            QueueID: u64,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQCReceive: fn(
            self: *const IComQCEvents,
            pInfo: *COMSVCSEVENTINFO,
            QueueID: u64,
            guidMsgId: *const Guid,
            guidWorkFlowId: *const Guid,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQCReceiveFail: fn(
            self: *const IComQCEvents,
            pInfo: *COMSVCSEVENTINFO,
            QueueID: u64,
            msmqhr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQCMoveToReTryQueue: fn(
            self: *const IComQCEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidMsgId: *const Guid,
            guidWorkFlowId: *const Guid,
            RetryIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQCMoveToDeadQueue: fn(
            self: *const IComQCEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidMsgId: *const Guid,
            guidWorkFlowId: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnQCPlayback: fn(
            self: *const IComQCEvents,
            pInfo: *COMSVCSEVENTINFO,
            objid: u64,
            guidMsgId: *const Guid,
            guidWorkFlowId: *const Guid,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComQCEvents_OnQCRecord(self: *const T, pInfo: *COMSVCSEVENTINFO, objid: u64, szQueue: *[60]u16, guidMsgId: *const Guid, guidWorkFlowId: *const Guid, msmqhr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComQCEvents.VTable, self.vtable).OnQCRecord(@ptrCast(*const IComQCEvents, self), pInfo, objid, szQueue, guidMsgId, guidWorkFlowId, msmqhr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComQCEvents_OnQCQueueOpen(self: *const T, pInfo: *COMSVCSEVENTINFO, szQueue: *[60]u16, QueueID: u64, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComQCEvents.VTable, self.vtable).OnQCQueueOpen(@ptrCast(*const IComQCEvents, self), pInfo, szQueue, QueueID, hr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComQCEvents_OnQCReceive(self: *const T, pInfo: *COMSVCSEVENTINFO, QueueID: u64, guidMsgId: *const Guid, guidWorkFlowId: *const Guid, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComQCEvents.VTable, self.vtable).OnQCReceive(@ptrCast(*const IComQCEvents, self), pInfo, QueueID, guidMsgId, guidWorkFlowId, hr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComQCEvents_OnQCReceiveFail(self: *const T, pInfo: *COMSVCSEVENTINFO, QueueID: u64, msmqhr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComQCEvents.VTable, self.vtable).OnQCReceiveFail(@ptrCast(*const IComQCEvents, self), pInfo, QueueID, msmqhr);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComQCEvents_OnQCMoveToReTryQueue(self: *const T, pInfo: *COMSVCSEVENTINFO, guidMsgId: *const Guid, guidWorkFlowId: *const Guid, RetryIndex: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComQCEvents.VTable, self.vtable).OnQCMoveToReTryQueue(@ptrCast(*const IComQCEvents, self), pInfo, guidMsgId, guidWorkFlowId, RetryIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComQCEvents_OnQCMoveToDeadQueue(self: *const T, pInfo: *COMSVCSEVENTINFO, guidMsgId: *const Guid, guidWorkFlowId: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComQCEvents.VTable, self.vtable).OnQCMoveToDeadQueue(@ptrCast(*const IComQCEvents, self), pInfo, guidMsgId, guidWorkFlowId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComQCEvents_OnQCPlayback(self: *const T, pInfo: *COMSVCSEVENTINFO, objid: u64, guidMsgId: *const Guid, guidWorkFlowId: *const Guid, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComQCEvents.VTable, self.vtable).OnQCPlayback(@ptrCast(*const IComQCEvents, self), pInfo, objid, guidMsgId, guidWorkFlowId, hr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComExceptionEvents_Value = @import("../zig.zig").Guid.initString("683130B3-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComExceptionEvents = &IID_IComExceptionEvents_Value;
pub const IComExceptionEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnExceptionUser: fn(
            self: *const IComExceptionEvents,
            pInfo: *COMSVCSEVENTINFO,
            code: u32,
            address: u64,
            pszStackTrace: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComExceptionEvents_OnExceptionUser(self: *const T, pInfo: *COMSVCSEVENTINFO, code: u32, address: u64, pszStackTrace: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComExceptionEvents.VTable, self.vtable).OnExceptionUser(@ptrCast(*const IComExceptionEvents, self), pInfo, code, address, pszStackTrace);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ILBEvents_Value = @import("../zig.zig").Guid.initString("683130B4-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_ILBEvents = &IID_ILBEvents_Value;
pub const ILBEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TargetUp: fn(
            self: *const ILBEvents,
            bstrServerName: BSTR,
            bstrClsidEng: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TargetDown: fn(
            self: *const ILBEvents,
            bstrServerName: BSTR,
            bstrClsidEng: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EngineDefined: fn(
            self: *const ILBEvents,
            bstrPropName: BSTR,
            varPropValue: *VARIANT,
            bstrClsidEng: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILBEvents_TargetUp(self: *const T, bstrServerName: BSTR, bstrClsidEng: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILBEvents.VTable, self.vtable).TargetUp(@ptrCast(*const ILBEvents, self), bstrServerName, bstrClsidEng);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILBEvents_TargetDown(self: *const T, bstrServerName: BSTR, bstrClsidEng: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILBEvents.VTable, self.vtable).TargetDown(@ptrCast(*const ILBEvents, self), bstrServerName, bstrClsidEng);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ILBEvents_EngineDefined(self: *const T, bstrPropName: BSTR, varPropValue: *VARIANT, bstrClsidEng: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ILBEvents.VTable, self.vtable).EngineDefined(@ptrCast(*const ILBEvents, self), bstrPropName, varPropValue, bstrClsidEng);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComCRMEvents_Value = @import("../zig.zig").Guid.initString("683130B5-2E50-11D2-98A5-00C04F8EE1C4");
pub const IID_IComCRMEvents = &IID_IComCRMEvents_Value;
pub const IComCRMEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCRMRecoveryStart: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidApp: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMRecoveryDone: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidApp: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMCheckpoint: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidApp: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMBegin: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidClerkCLSID: Guid,
            guidActivity: Guid,
            guidTx: Guid,
            szProgIdCompensator: *[64]u16,
            szDescription: *[64]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMPrepare: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidClerkCLSID: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMCommit: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidClerkCLSID: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMAbort: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidClerkCLSID: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMIndoubt: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidClerkCLSID: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMDone: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidClerkCLSID: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMRelease: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidClerkCLSID: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMAnalyze: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidClerkCLSID: Guid,
            dwCrmRecordType: u32,
            dwRecordSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMWrite: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidClerkCLSID: Guid,
            fVariants: BOOL,
            dwRecordSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMForget: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidClerkCLSID: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMForce: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidClerkCLSID: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCRMDeliver: fn(
            self: *const IComCRMEvents,
            pInfo: *COMSVCSEVENTINFO,
            guidClerkCLSID: Guid,
            fVariants: BOOL,
            dwRecordSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMRecoveryStart(self: *const T, pInfo: *COMSVCSEVENTINFO, guidApp: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMRecoveryStart(@ptrCast(*const IComCRMEvents, self), pInfo, guidApp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMRecoveryDone(self: *const T, pInfo: *COMSVCSEVENTINFO, guidApp: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMRecoveryDone(@ptrCast(*const IComCRMEvents, self), pInfo, guidApp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMCheckpoint(self: *const T, pInfo: *COMSVCSEVENTINFO, guidApp: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMCheckpoint(@ptrCast(*const IComCRMEvents, self), pInfo, guidApp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMBegin(self: *const T, pInfo: *COMSVCSEVENTINFO, guidClerkCLSID: Guid, guidActivity: Guid, guidTx: Guid, szProgIdCompensator: *[64]u16, szDescription: *[64]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMBegin(@ptrCast(*const IComCRMEvents, self), pInfo, guidClerkCLSID, guidActivity, guidTx, szProgIdCompensator, szDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMPrepare(self: *const T, pInfo: *COMSVCSEVENTINFO, guidClerkCLSID: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMPrepare(@ptrCast(*const IComCRMEvents, self), pInfo, guidClerkCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMCommit(self: *const T, pInfo: *COMSVCSEVENTINFO, guidClerkCLSID: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMCommit(@ptrCast(*const IComCRMEvents, self), pInfo, guidClerkCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMAbort(self: *const T, pInfo: *COMSVCSEVENTINFO, guidClerkCLSID: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMAbort(@ptrCast(*const IComCRMEvents, self), pInfo, guidClerkCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMIndoubt(self: *const T, pInfo: *COMSVCSEVENTINFO, guidClerkCLSID: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMIndoubt(@ptrCast(*const IComCRMEvents, self), pInfo, guidClerkCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMDone(self: *const T, pInfo: *COMSVCSEVENTINFO, guidClerkCLSID: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMDone(@ptrCast(*const IComCRMEvents, self), pInfo, guidClerkCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMRelease(self: *const T, pInfo: *COMSVCSEVENTINFO, guidClerkCLSID: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMRelease(@ptrCast(*const IComCRMEvents, self), pInfo, guidClerkCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMAnalyze(self: *const T, pInfo: *COMSVCSEVENTINFO, guidClerkCLSID: Guid, dwCrmRecordType: u32, dwRecordSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMAnalyze(@ptrCast(*const IComCRMEvents, self), pInfo, guidClerkCLSID, dwCrmRecordType, dwRecordSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMWrite(self: *const T, pInfo: *COMSVCSEVENTINFO, guidClerkCLSID: Guid, fVariants: BOOL, dwRecordSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMWrite(@ptrCast(*const IComCRMEvents, self), pInfo, guidClerkCLSID, fVariants, dwRecordSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMForget(self: *const T, pInfo: *COMSVCSEVENTINFO, guidClerkCLSID: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMForget(@ptrCast(*const IComCRMEvents, self), pInfo, guidClerkCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMForce(self: *const T, pInfo: *COMSVCSEVENTINFO, guidClerkCLSID: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMForce(@ptrCast(*const IComCRMEvents, self), pInfo, guidClerkCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComCRMEvents_OnCRMDeliver(self: *const T, pInfo: *COMSVCSEVENTINFO, guidClerkCLSID: Guid, fVariants: BOOL, dwRecordSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComCRMEvents.VTable, self.vtable).OnCRMDeliver(@ptrCast(*const IComCRMEvents, self), pInfo, guidClerkCLSID, fVariants, dwRecordSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComMethod2Events_Value = @import("../zig.zig").Guid.initString("FB388AAA-567D-4024-AF8E-6E93EE748573");
pub const IID_IComMethod2Events = &IID_IComMethod2Events_Value;
pub const IComMethod2Events = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnMethodCall2: fn(
            self: *const IComMethod2Events,
            pInfo: *COMSVCSEVENTINFO,
            oid: u64,
            guidCid: *const Guid,
            guidRid: *const Guid,
            dwThread: u32,
            iMeth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnMethodReturn2: fn(
            self: *const IComMethod2Events,
            pInfo: *COMSVCSEVENTINFO,
            oid: u64,
            guidCid: *const Guid,
            guidRid: *const Guid,
            dwThread: u32,
            iMeth: u32,
            hresult: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnMethodException2: fn(
            self: *const IComMethod2Events,
            pInfo: *COMSVCSEVENTINFO,
            oid: u64,
            guidCid: *const Guid,
            guidRid: *const Guid,
            dwThread: u32,
            iMeth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComMethod2Events_OnMethodCall2(self: *const T, pInfo: *COMSVCSEVENTINFO, oid: u64, guidCid: *const Guid, guidRid: *const Guid, dwThread: u32, iMeth: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComMethod2Events.VTable, self.vtable).OnMethodCall2(@ptrCast(*const IComMethod2Events, self), pInfo, oid, guidCid, guidRid, dwThread, iMeth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComMethod2Events_OnMethodReturn2(self: *const T, pInfo: *COMSVCSEVENTINFO, oid: u64, guidCid: *const Guid, guidRid: *const Guid, dwThread: u32, iMeth: u32, hresult: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComMethod2Events.VTable, self.vtable).OnMethodReturn2(@ptrCast(*const IComMethod2Events, self), pInfo, oid, guidCid, guidRid, dwThread, iMeth, hresult);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComMethod2Events_OnMethodException2(self: *const T, pInfo: *COMSVCSEVENTINFO, oid: u64, guidCid: *const Guid, guidRid: *const Guid, dwThread: u32, iMeth: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComMethod2Events.VTable, self.vtable).OnMethodException2(@ptrCast(*const IComMethod2Events, self), pInfo, oid, guidCid, guidRid, dwThread, iMeth);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComTrackingInfoEvents_Value = @import("../zig.zig").Guid.initString("4E6CDCC9-FB25-4FD5-9CC5-C9F4B6559CEC");
pub const IID_IComTrackingInfoEvents = &IID_IComTrackingInfoEvents_Value;
pub const IComTrackingInfoEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnNewTrackingInfo: fn(
            self: *const IComTrackingInfoEvents,
            pToplevelCollection: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTrackingInfoEvents_OnNewTrackingInfo(self: *const T, pToplevelCollection: ?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTrackingInfoEvents.VTable, self.vtable).OnNewTrackingInfo(@ptrCast(*const IComTrackingInfoEvents, self), pToplevelCollection);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const TRACKING_COLL_TYPE = extern enum(i32) {
    TRKCOLL_PROCESSES = 0,
    TRKCOLL_APPLICATIONS = 1,
    TRKCOLL_COMPONENTS = 2,
};
pub const TRKCOLL_PROCESSES = TRACKING_COLL_TYPE.TRKCOLL_PROCESSES;
pub const TRKCOLL_APPLICATIONS = TRACKING_COLL_TYPE.TRKCOLL_APPLICATIONS;
pub const TRKCOLL_COMPONENTS = TRACKING_COLL_TYPE.TRKCOLL_COMPONENTS;

const IID_IComTrackingInfoCollection_Value = @import("../zig.zig").Guid.initString("C266C677-C9AD-49AB-9FD9-D9661078588A");
pub const IID_IComTrackingInfoCollection = &IID_IComTrackingInfoCollection_Value;
pub const IComTrackingInfoCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Type: fn(
            self: *const IComTrackingInfoCollection,
            pType: *TRACKING_COLL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Count: fn(
            self: *const IComTrackingInfoCollection,
            pCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IComTrackingInfoCollection,
            ulIndex: u32,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTrackingInfoCollection_Type(self: *const T, pType: *TRACKING_COLL_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTrackingInfoCollection.VTable, self.vtable).Type(@ptrCast(*const IComTrackingInfoCollection, self), pType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTrackingInfoCollection_Count(self: *const T, pCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTrackingInfoCollection.VTable, self.vtable).Count(@ptrCast(*const IComTrackingInfoCollection, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTrackingInfoCollection_Item(self: *const T, ulIndex: u32, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTrackingInfoCollection.VTable, self.vtable).Item(@ptrCast(*const IComTrackingInfoCollection, self), ulIndex, riid, ppv);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComTrackingInfoObject_Value = @import("../zig.zig").Guid.initString("116E42C5-D8B1-47BF-AB1E-C895ED3E2372");
pub const IID_IComTrackingInfoObject = &IID_IComTrackingInfoObject_Value;
pub const IComTrackingInfoObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetValue: fn(
            self: *const IComTrackingInfoObject,
            szPropertyName: PWSTR,
            pvarOut: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTrackingInfoObject_GetValue(self: *const T, szPropertyName: PWSTR, pvarOut: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTrackingInfoObject.VTable, self.vtable).GetValue(@ptrCast(*const IComTrackingInfoObject, self), szPropertyName, pvarOut);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComTrackingInfoProperties_Value = @import("../zig.zig").Guid.initString("789B42BE-6F6B-443A-898E-67ABF390AA14");
pub const IID_IComTrackingInfoProperties = &IID_IComTrackingInfoProperties_Value;
pub const IComTrackingInfoProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PropCount: fn(
            self: *const IComTrackingInfoProperties,
            pCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropName: fn(
            self: *const IComTrackingInfoProperties,
            ulIndex: u32,
            ppszPropName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTrackingInfoProperties_PropCount(self: *const T, pCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTrackingInfoProperties.VTable, self.vtable).PropCount(@ptrCast(*const IComTrackingInfoProperties, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTrackingInfoProperties_GetPropName(self: *const T, ulIndex: u32, ppszPropName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTrackingInfoProperties.VTable, self.vtable).GetPropName(@ptrCast(*const IComTrackingInfoProperties, self), ulIndex, ppszPropName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComApp2Events_Value = @import("../zig.zig").Guid.initString("1290BC1A-B219-418D-B078-5934DED08242");
pub const IID_IComApp2Events = &IID_IComApp2Events_Value;
pub const IComApp2Events = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnAppActivation2: fn(
            self: *const IComApp2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidApp: Guid,
            guidProcess: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAppShutdown2: fn(
            self: *const IComApp2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidApp: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAppForceShutdown2: fn(
            self: *const IComApp2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidApp: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAppPaused2: fn(
            self: *const IComApp2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidApp: Guid,
            bPaused: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAppRecycle2: fn(
            self: *const IComApp2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidApp: Guid,
            guidProcess: Guid,
            lReason: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComApp2Events_OnAppActivation2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidApp: Guid, guidProcess: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComApp2Events.VTable, self.vtable).OnAppActivation2(@ptrCast(*const IComApp2Events, self), pInfo, guidApp, guidProcess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComApp2Events_OnAppShutdown2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidApp: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComApp2Events.VTable, self.vtable).OnAppShutdown2(@ptrCast(*const IComApp2Events, self), pInfo, guidApp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComApp2Events_OnAppForceShutdown2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidApp: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComApp2Events.VTable, self.vtable).OnAppForceShutdown2(@ptrCast(*const IComApp2Events, self), pInfo, guidApp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComApp2Events_OnAppPaused2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidApp: Guid, bPaused: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComApp2Events.VTable, self.vtable).OnAppPaused2(@ptrCast(*const IComApp2Events, self), pInfo, guidApp, bPaused);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComApp2Events_OnAppRecycle2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidApp: Guid, guidProcess: Guid, lReason: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComApp2Events.VTable, self.vtable).OnAppRecycle2(@ptrCast(*const IComApp2Events, self), pInfo, guidApp, guidProcess, lReason);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComTransaction2Events_Value = @import("../zig.zig").Guid.initString("A136F62A-2F94-4288-86E0-D8A1FA4C0299");
pub const IID_IComTransaction2Events = &IID_IComTransaction2Events_Value;
pub const IComTransaction2Events = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnTransactionStart2: fn(
            self: *const IComTransaction2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidTx: *const Guid,
            tsid: *const Guid,
            fRoot: BOOL,
            nIsolationLevel: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTransactionPrepare2: fn(
            self: *const IComTransaction2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidTx: *const Guid,
            fVoteYes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTransactionAbort2: fn(
            self: *const IComTransaction2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidTx: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTransactionCommit2: fn(
            self: *const IComTransaction2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidTx: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTransaction2Events_OnTransactionStart2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidTx: *const Guid, tsid: *const Guid, fRoot: BOOL, nIsolationLevel: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTransaction2Events.VTable, self.vtable).OnTransactionStart2(@ptrCast(*const IComTransaction2Events, self), pInfo, guidTx, tsid, fRoot, nIsolationLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTransaction2Events_OnTransactionPrepare2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidTx: *const Guid, fVoteYes: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTransaction2Events.VTable, self.vtable).OnTransactionPrepare2(@ptrCast(*const IComTransaction2Events, self), pInfo, guidTx, fVoteYes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTransaction2Events_OnTransactionAbort2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidTx: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTransaction2Events.VTable, self.vtable).OnTransactionAbort2(@ptrCast(*const IComTransaction2Events, self), pInfo, guidTx);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComTransaction2Events_OnTransactionCommit2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidTx: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComTransaction2Events.VTable, self.vtable).OnTransactionCommit2(@ptrCast(*const IComTransaction2Events, self), pInfo, guidTx);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComInstance2Events_Value = @import("../zig.zig").Guid.initString("20E3BF07-B506-4AD5-A50C-D2CA5B9C158E");
pub const IID_IComInstance2Events = &IID_IComInstance2Events_Value;
pub const IComInstance2Events = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjectCreate2: fn(
            self: *const IComInstance2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
            clsid: *const Guid,
            tsid: *const Guid,
            CtxtID: u64,
            ObjectID: u64,
            guidPartition: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjectDestroy2: fn(
            self: *const IComInstance2Events,
            pInfo: *COMSVCSEVENTINFO,
            CtxtID: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComInstance2Events_OnObjectCreate2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid, clsid: *const Guid, tsid: *const Guid, CtxtID: u64, ObjectID: u64, guidPartition: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComInstance2Events.VTable, self.vtable).OnObjectCreate2(@ptrCast(*const IComInstance2Events, self), pInfo, guidActivity, clsid, tsid, CtxtID, ObjectID, guidPartition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComInstance2Events_OnObjectDestroy2(self: *const T, pInfo: *COMSVCSEVENTINFO, CtxtID: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComInstance2Events.VTable, self.vtable).OnObjectDestroy2(@ptrCast(*const IComInstance2Events, self), pInfo, CtxtID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComObjectPool2Events_Value = @import("../zig.zig").Guid.initString("65BF6534-85EA-4F64-8CF4-3D974B2AB1CF");
pub const IID_IComObjectPool2Events = &IID_IComObjectPool2Events_Value;
pub const IComObjectPool2Events = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjPoolPutObject2: fn(
            self: *const IComObjectPool2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidObject: *const Guid,
            nReason: i32,
            dwAvailable: u32,
            oid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolGetObject2: fn(
            self: *const IComObjectPool2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
            guidObject: *const Guid,
            dwAvailable: u32,
            oid: u64,
            guidPartition: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolRecycleToTx2: fn(
            self: *const IComObjectPool2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
            guidObject: *const Guid,
            guidTx: *const Guid,
            objid: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnObjPoolGetFromTx2: fn(
            self: *const IComObjectPool2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidActivity: *const Guid,
            guidObject: *const Guid,
            guidTx: *const Guid,
            objid: u64,
            guidPartition: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPool2Events_OnObjPoolPutObject2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidObject: *const Guid, nReason: i32, dwAvailable: u32, oid: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPool2Events.VTable, self.vtable).OnObjPoolPutObject2(@ptrCast(*const IComObjectPool2Events, self), pInfo, guidObject, nReason, dwAvailable, oid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPool2Events_OnObjPoolGetObject2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid, guidObject: *const Guid, dwAvailable: u32, oid: u64, guidPartition: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPool2Events.VTable, self.vtable).OnObjPoolGetObject2(@ptrCast(*const IComObjectPool2Events, self), pInfo, guidActivity, guidObject, dwAvailable, oid, guidPartition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPool2Events_OnObjPoolRecycleToTx2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid, guidObject: *const Guid, guidTx: *const Guid, objid: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPool2Events.VTable, self.vtable).OnObjPoolRecycleToTx2(@ptrCast(*const IComObjectPool2Events, self), pInfo, guidActivity, guidObject, guidTx, objid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectPool2Events_OnObjPoolGetFromTx2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidActivity: *const Guid, guidObject: *const Guid, guidTx: *const Guid, objid: u64, guidPartition: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectPool2Events.VTable, self.vtable).OnObjPoolGetFromTx2(@ptrCast(*const IComObjectPool2Events, self), pInfo, guidActivity, guidObject, guidTx, objid, guidPartition);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComObjectConstruction2Events_Value = @import("../zig.zig").Guid.initString("4B5A7827-8DF2-45C0-8F6F-57EA1F856A9F");
pub const IID_IComObjectConstruction2Events = &IID_IComObjectConstruction2Events_Value;
pub const IComObjectConstruction2Events = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnObjectConstruct2: fn(
            self: *const IComObjectConstruction2Events,
            pInfo: *COMSVCSEVENTINFO,
            guidObject: *const Guid,
            sConstructString: [*:0]const u16,
            oid: u64,
            guidPartition: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComObjectConstruction2Events_OnObjectConstruct2(self: *const T, pInfo: *COMSVCSEVENTINFO, guidObject: *const Guid, sConstructString: [*:0]const u16, oid: u64, guidPartition: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComObjectConstruction2Events.VTable, self.vtable).OnObjectConstruct2(@ptrCast(*const IComObjectConstruction2Events, self), pInfo, guidObject, sConstructString, oid, guidPartition);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISystemAppEventData_Value = @import("../zig.zig").Guid.initString("D6D48A3C-D5C5-49E7-8C74-99E4889ED52F");
pub const IID_ISystemAppEventData = &IID_ISystemAppEventData_Value;
pub const ISystemAppEventData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Startup: fn(
            self: *const ISystemAppEventData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDataChanged: fn(
            self: *const ISystemAppEventData,
            dwPID: u32,
            dwMask: u32,
            dwNumberSinks: u32,
            bstrDwMethodMask: BSTR,
            dwReason: u32,
            u64TraceHandle: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemAppEventData_Startup(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemAppEventData.VTable, self.vtable).Startup(@ptrCast(*const ISystemAppEventData, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISystemAppEventData_OnDataChanged(self: *const T, dwPID: u32, dwMask: u32, dwNumberSinks: u32, bstrDwMethodMask: BSTR, dwReason: u32, u64TraceHandle: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISystemAppEventData.VTable, self.vtable).OnDataChanged(@ptrCast(*const ISystemAppEventData, self), dwPID, dwMask, dwNumberSinks, bstrDwMethodMask, dwReason, u64TraceHandle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IMtsEvents_Value = @import("../zig.zig").Guid.initString("BACEDF4D-74AB-11D0-B162-00AA00BA3258");
pub const IID_IMtsEvents = &IID_IMtsEvents_Value;
pub const IMtsEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_PackageName: fn(
            self: *const IMtsEvents,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PackageGuid: fn(
            self: *const IMtsEvents,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostEvent: fn(
            self: *const IMtsEvents,
            vEvent: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FireEvents: fn(
            self: *const IMtsEvents,
            pVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProcessID: fn(
            self: *const IMtsEvents,
            id: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsEvents_get_PackageName(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsEvents.VTable, self.vtable).get_PackageName(@ptrCast(*const IMtsEvents, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsEvents_get_PackageGuid(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsEvents.VTable, self.vtable).get_PackageGuid(@ptrCast(*const IMtsEvents, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsEvents_PostEvent(self: *const T, vEvent: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsEvents.VTable, self.vtable).PostEvent(@ptrCast(*const IMtsEvents, self), vEvent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsEvents_get_FireEvents(self: *const T, pVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsEvents.VTable, self.vtable).get_FireEvents(@ptrCast(*const IMtsEvents, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsEvents_GetProcessID(self: *const T, id: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsEvents.VTable, self.vtable).GetProcessID(@ptrCast(*const IMtsEvents, self), id);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IMtsEventInfo_Value = @import("../zig.zig").Guid.initString("D56C3DC1-8482-11D0-B170-00AA00BA3258");
pub const IID_IMtsEventInfo = &IID_IMtsEventInfo_Value;
pub const IMtsEventInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Names: fn(
            self: *const IMtsEventInfo,
            pUnk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DisplayName: fn(
            self: *const IMtsEventInfo,
            sDisplayName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EventID: fn(
            self: *const IMtsEventInfo,
            sGuidEventID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IMtsEventInfo,
            lCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Value: fn(
            self: *const IMtsEventInfo,
            sKey: BSTR,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsEventInfo_get_Names(self: *const T, pUnk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsEventInfo.VTable, self.vtable).get_Names(@ptrCast(*const IMtsEventInfo, self), pUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsEventInfo_get_DisplayName(self: *const T, sDisplayName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsEventInfo.VTable, self.vtable).get_DisplayName(@ptrCast(*const IMtsEventInfo, self), sDisplayName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsEventInfo_get_EventID(self: *const T, sGuidEventID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsEventInfo.VTable, self.vtable).get_EventID(@ptrCast(*const IMtsEventInfo, self), sGuidEventID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsEventInfo_get_Count(self: *const T, lCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsEventInfo.VTable, self.vtable).get_Count(@ptrCast(*const IMtsEventInfo, self), lCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsEventInfo_get_Value(self: *const T, sKey: BSTR, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsEventInfo.VTable, self.vtable).get_Value(@ptrCast(*const IMtsEventInfo, self), sKey, pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IMTSLocator_Value = @import("../zig.zig").Guid.initString("D19B8BFD-7F88-11D0-B16E-00AA00BA3258");
pub const IID_IMTSLocator = &IID_IMTSLocator_Value;
pub const IMTSLocator = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetEventDispatcher: fn(
            self: *const IMTSLocator,
            pUnk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMTSLocator_GetEventDispatcher(self: *const T, pUnk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMTSLocator.VTable, self.vtable).GetEventDispatcher(@ptrCast(*const IMTSLocator, self), pUnk);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IMtsGrp_Value = @import("../zig.zig").Guid.initString("4B2E958C-0393-11D1-B1AB-00AA00BA3258");
pub const IID_IMtsGrp = &IID_IMtsGrp_Value;
pub const IMtsGrp = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const IMtsGrp,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IMtsGrp,
            lIndex: i32,
            ppUnkDispatcher: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const IMtsGrp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsGrp_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsGrp.VTable, self.vtable).get_Count(@ptrCast(*const IMtsGrp, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsGrp_Item(self: *const T, lIndex: i32, ppUnkDispatcher: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsGrp.VTable, self.vtable).Item(@ptrCast(*const IMtsGrp, self), lIndex, ppUnkDispatcher);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMtsGrp_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMtsGrp.VTable, self.vtable).Refresh(@ptrCast(*const IMtsGrp, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IMessageMover_Value = @import("../zig.zig").Guid.initString("588A085A-B795-11D1-8054-00C04FC340EE");
pub const IID_IMessageMover = &IID_IMessageMover_Value;
pub const IMessageMover = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_SourcePath: fn(
            self: *const IMessageMover,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SourcePath: fn(
            self: *const IMessageMover,
            newVal: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DestPath: fn(
            self: *const IMessageMover,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_DestPath: fn(
            self: *const IMessageMover,
            newVal: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CommitBatchSize: fn(
            self: *const IMessageMover,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CommitBatchSize: fn(
            self: *const IMessageMover,
            newVal: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveMessages: fn(
            self: *const IMessageMover,
            plMessagesMoved: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMessageMover_get_SourcePath(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMessageMover.VTable, self.vtable).get_SourcePath(@ptrCast(*const IMessageMover, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMessageMover_put_SourcePath(self: *const T, newVal: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMessageMover.VTable, self.vtable).put_SourcePath(@ptrCast(*const IMessageMover, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMessageMover_get_DestPath(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMessageMover.VTable, self.vtable).get_DestPath(@ptrCast(*const IMessageMover, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMessageMover_put_DestPath(self: *const T, newVal: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMessageMover.VTable, self.vtable).put_DestPath(@ptrCast(*const IMessageMover, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMessageMover_get_CommitBatchSize(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMessageMover.VTable, self.vtable).get_CommitBatchSize(@ptrCast(*const IMessageMover, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMessageMover_put_CommitBatchSize(self: *const T, newVal: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMessageMover.VTable, self.vtable).put_CommitBatchSize(@ptrCast(*const IMessageMover, self), newVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMessageMover_MoveMessages(self: *const T, plMessagesMoved: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMessageMover.VTable, self.vtable).MoveMessages(@ptrCast(*const IMessageMover, self), plMessagesMoved);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEventServerTrace_Value = @import("../zig.zig").Guid.initString("9A9F12B8-80AF-47AB-A579-35EA57725370");
pub const IID_IEventServerTrace = &IID_IEventServerTrace_Value;
pub const IEventServerTrace = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        StartTraceGuid: fn(
            self: *const IEventServerTrace,
            bstrguidEvent: BSTR,
            bstrguidFilter: BSTR,
            lPidFilter: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopTraceGuid: fn(
            self: *const IEventServerTrace,
            bstrguidEvent: BSTR,
            bstrguidFilter: BSTR,
            lPidFilter: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumTraceGuid: fn(
            self: *const IEventServerTrace,
            plCntGuids: *i32,
            pbstrGuidList: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventServerTrace_StartTraceGuid(self: *const T, bstrguidEvent: BSTR, bstrguidFilter: BSTR, lPidFilter: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventServerTrace.VTable, self.vtable).StartTraceGuid(@ptrCast(*const IEventServerTrace, self), bstrguidEvent, bstrguidFilter, lPidFilter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventServerTrace_StopTraceGuid(self: *const T, bstrguidEvent: BSTR, bstrguidFilter: BSTR, lPidFilter: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventServerTrace.VTable, self.vtable).StopTraceGuid(@ptrCast(*const IEventServerTrace, self), bstrguidEvent, bstrguidFilter, lPidFilter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventServerTrace_EnumTraceGuid(self: *const T, plCntGuids: *i32, pbstrGuidList: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventServerTrace.VTable, self.vtable).EnumTraceGuid(@ptrCast(*const IEventServerTrace, self), plCntGuids, pbstrGuidList);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const RECYCLE_INFO = extern struct {
    guidCombaseProcessIdentifier: Guid,
    ProcessStartTime: i64,
    dwRecycleLifetimeLimit: u32,
    dwRecycleMemoryLimit: u32,
    dwRecycleExpirationTimeout: u32,
};

pub const DUMPTYPE = extern enum(i32) {
    FULL = 0,
    MINI = 1,
    NONE = 2,
};
pub const DUMPTYPE_FULL = DUMPTYPE.FULL;
pub const DUMPTYPE_MINI = DUMPTYPE.MINI;
pub const DUMPTYPE_NONE = DUMPTYPE.NONE;

pub const HANG_INFO = extern struct {
    fAppHangMonitorEnabled: BOOL,
    fTerminateOnHang: BOOL,
    DumpType: DUMPTYPE,
    dwHangTimeout: u32,
    dwDumpCount: u32,
    dwInfoMsgCount: u32,
};

pub const COMPLUS_APPTYPE = extern enum(i32) {
    APPTYPE_UNKNOWN = -1,
    APPTYPE_SERVER = 1,
    APPTYPE_LIBRARY = 0,
    APPTYPE_SWC = 2,
};
pub const APPTYPE_UNKNOWN = COMPLUS_APPTYPE.APPTYPE_UNKNOWN;
pub const APPTYPE_SERVER = COMPLUS_APPTYPE.APPTYPE_SERVER;
pub const APPTYPE_LIBRARY = COMPLUS_APPTYPE.APPTYPE_LIBRARY;
pub const APPTYPE_SWC = COMPLUS_APPTYPE.APPTYPE_SWC;

pub const CAppStatistics = extern struct {
    m_cTotalCalls: u32,
    m_cTotalInstances: u32,
    m_cTotalClasses: u32,
    m_cCallsPerSecond: u32,
};

pub const CAppData = extern struct {
    m_idApp: u32,
    m_szAppGuid: [40]u16,
    m_dwAppProcessId: u32,
    m_AppStatistics: CAppStatistics,
};

pub const CCLSIDData = extern struct {
    m_clsid: Guid,
    m_cReferences: u32,
    m_cBound: u32,
    m_cPooled: u32,
    m_cInCall: u32,
    m_dwRespTime: u32,
    m_cCallsCompleted: u32,
    m_cCallsFailed: u32,
};

pub const CCLSIDData2 = extern struct {
    m_clsid: Guid,
    m_appid: Guid,
    m_partid: Guid,
    m_pwszAppName: PWSTR,
    m_pwszCtxName: PWSTR,
    m_eAppType: COMPLUS_APPTYPE,
    m_cReferences: u32,
    m_cBound: u32,
    m_cPooled: u32,
    m_cInCall: u32,
    m_dwRespTime: u32,
    m_cCallsCompleted: u32,
    m_cCallsFailed: u32,
};

pub const GetAppTrackerDataFlags = extern enum(i32) {
    GATD_INCLUDE_PROCESS_EXE_NAME = 1,
    GATD_INCLUDE_LIBRARY_APPS = 2,
    GATD_INCLUDE_SWC = 4,
    GATD_INCLUDE_CLASS_NAME = 8,
    GATD_INCLUDE_APPLICATION_NAME = 16,
};
pub const GATD_INCLUDE_PROCESS_EXE_NAME = GetAppTrackerDataFlags.GATD_INCLUDE_PROCESS_EXE_NAME;
pub const GATD_INCLUDE_LIBRARY_APPS = GetAppTrackerDataFlags.GATD_INCLUDE_LIBRARY_APPS;
pub const GATD_INCLUDE_SWC = GetAppTrackerDataFlags.GATD_INCLUDE_SWC;
pub const GATD_INCLUDE_CLASS_NAME = GetAppTrackerDataFlags.GATD_INCLUDE_CLASS_NAME;
pub const GATD_INCLUDE_APPLICATION_NAME = GetAppTrackerDataFlags.GATD_INCLUDE_APPLICATION_NAME;

pub const ApplicationProcessSummary = extern struct {
    PartitionIdPrimaryApplication: Guid,
    ApplicationIdPrimaryApplication: Guid,
    ApplicationInstanceId: Guid,
    ProcessId: u32,
    Type: COMPLUS_APPTYPE,
    ProcessExeName: PWSTR,
    IsService: BOOL,
    IsPaused: BOOL,
    IsRecycled: BOOL,
};

pub const ApplicationProcessStatistics = extern struct {
    NumCallsOutstanding: u32,
    NumTrackedComponents: u32,
    NumComponentInstances: u32,
    AvgCallsPerSecond: u32,
    Reserved1: u32,
    Reserved2: u32,
    Reserved3: u32,
    Reserved4: u32,
};

pub const ApplicationProcessRecycleInfo = extern struct {
    IsRecyclable: BOOL,
    IsRecycled: BOOL,
    TimeRecycled: FILETIME,
    TimeToTerminate: FILETIME,
    RecycleReasonCode: i32,
    IsPendingRecycle: BOOL,
    HasAutomaticLifetimeRecycling: BOOL,
    TimeForAutomaticRecycling: FILETIME,
    MemoryLimitInKB: u32,
    MemoryUsageInKBLastCheck: u32,
    ActivationLimit: u32,
    NumActivationsLastReported: u32,
    CallLimit: u32,
    NumCallsLastReported: u32,
};

pub const ApplicationSummary = extern struct {
    ApplicationInstanceId: Guid,
    PartitionId: Guid,
    ApplicationId: Guid,
    Type: COMPLUS_APPTYPE,
    ApplicationName: PWSTR,
    NumTrackedComponents: u32,
    NumComponentInstances: u32,
};

pub const ComponentSummary = extern struct {
    ApplicationInstanceId: Guid,
    PartitionId: Guid,
    ApplicationId: Guid,
    Clsid: Guid,
    ClassName: PWSTR,
    ApplicationName: PWSTR,
};

pub const ComponentStatistics = extern struct {
    NumInstances: u32,
    NumBoundReferences: u32,
    NumPooledObjects: u32,
    NumObjectsInCall: u32,
    AvgResponseTimeInMs: u32,
    NumCallsCompletedRecent: u32,
    NumCallsFailedRecent: u32,
    NumCallsCompletedTotal: u32,
    NumCallsFailedTotal: u32,
    Reserved1: u32,
    Reserved2: u32,
    Reserved3: u32,
    Reserved4: u32,
};

pub const ComponentHangMonitorInfo = extern struct {
    IsMonitored: BOOL,
    TerminateOnHang: BOOL,
    AvgCallThresholdInMs: u32,
};

const IID_IGetAppTrackerData_Value = @import("../zig.zig").Guid.initString("507C3AC8-3E12-4CB0-9366-653D3E050638");
pub const IID_IGetAppTrackerData = &IID_IGetAppTrackerData_Value;
pub const IGetAppTrackerData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetApplicationProcesses: fn(
            self: *const IGetAppTrackerData,
            PartitionId: *const Guid,
            ApplicationId: *const Guid,
            Flags: u32,
            NumApplicationProcesses: *u32,
            ApplicationProcesses: ?[*]?*ApplicationProcessSummary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationProcessDetails: fn(
            self: *const IGetAppTrackerData,
            ApplicationInstanceId: *const Guid,
            ProcessId: u32,
            Flags: u32,
            Summary: ?*ApplicationProcessSummary,
            Statistics: ?*ApplicationProcessStatistics,
            RecycleInfo: ?*ApplicationProcessRecycleInfo,
            AnyComponentsHangMonitored: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationsInProcess: fn(
            self: *const IGetAppTrackerData,
            ApplicationInstanceId: *const Guid,
            ProcessId: u32,
            PartitionId: *const Guid,
            Flags: u32,
            NumApplicationsInProcess: *u32,
            Applications: ?[*]?*ApplicationSummary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponentsInProcess: fn(
            self: *const IGetAppTrackerData,
            ApplicationInstanceId: *const Guid,
            ProcessId: u32,
            PartitionId: *const Guid,
            ApplicationId: *const Guid,
            Flags: u32,
            NumComponentsInProcess: *u32,
            Components: ?[*]?*ComponentSummary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponentDetails: fn(
            self: *const IGetAppTrackerData,
            ApplicationInstanceId: *const Guid,
            ProcessId: u32,
            Clsid: *const Guid,
            Flags: u32,
            Summary: ?*ComponentSummary,
            Statistics: ?*ComponentStatistics,
            HangMonitorInfo: ?*ComponentHangMonitorInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTrackerDataAsCollectionObject: fn(
            self: *const IGetAppTrackerData,
            TopLevelCollection: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSuggestedPollingInterval: fn(
            self: *const IGetAppTrackerData,
            PollingIntervalInSeconds: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetAppTrackerData_GetApplicationProcesses(self: *const T, PartitionId: *const Guid, ApplicationId: *const Guid, Flags: u32, NumApplicationProcesses: *u32, ApplicationProcesses: ?[*]?*ApplicationProcessSummary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetAppTrackerData.VTable, self.vtable).GetApplicationProcesses(@ptrCast(*const IGetAppTrackerData, self), PartitionId, ApplicationId, Flags, NumApplicationProcesses, ApplicationProcesses);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetAppTrackerData_GetApplicationProcessDetails(self: *const T, ApplicationInstanceId: *const Guid, ProcessId: u32, Flags: u32, Summary: ?*ApplicationProcessSummary, Statistics: ?*ApplicationProcessStatistics, RecycleInfo: ?*ApplicationProcessRecycleInfo, AnyComponentsHangMonitored: ?*BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetAppTrackerData.VTable, self.vtable).GetApplicationProcessDetails(@ptrCast(*const IGetAppTrackerData, self), ApplicationInstanceId, ProcessId, Flags, Summary, Statistics, RecycleInfo, AnyComponentsHangMonitored);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetAppTrackerData_GetApplicationsInProcess(self: *const T, ApplicationInstanceId: *const Guid, ProcessId: u32, PartitionId: *const Guid, Flags: u32, NumApplicationsInProcess: *u32, Applications: ?[*]?*ApplicationSummary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetAppTrackerData.VTable, self.vtable).GetApplicationsInProcess(@ptrCast(*const IGetAppTrackerData, self), ApplicationInstanceId, ProcessId, PartitionId, Flags, NumApplicationsInProcess, Applications);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetAppTrackerData_GetComponentsInProcess(self: *const T, ApplicationInstanceId: *const Guid, ProcessId: u32, PartitionId: *const Guid, ApplicationId: *const Guid, Flags: u32, NumComponentsInProcess: *u32, Components: ?[*]?*ComponentSummary) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetAppTrackerData.VTable, self.vtable).GetComponentsInProcess(@ptrCast(*const IGetAppTrackerData, self), ApplicationInstanceId, ProcessId, PartitionId, ApplicationId, Flags, NumComponentsInProcess, Components);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetAppTrackerData_GetComponentDetails(self: *const T, ApplicationInstanceId: *const Guid, ProcessId: u32, Clsid: *const Guid, Flags: u32, Summary: ?*ComponentSummary, Statistics: ?*ComponentStatistics, HangMonitorInfo: ?*ComponentHangMonitorInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetAppTrackerData.VTable, self.vtable).GetComponentDetails(@ptrCast(*const IGetAppTrackerData, self), ApplicationInstanceId, ProcessId, Clsid, Flags, Summary, Statistics, HangMonitorInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetAppTrackerData_GetTrackerDataAsCollectionObject(self: *const T, TopLevelCollection: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetAppTrackerData.VTable, self.vtable).GetTrackerDataAsCollectionObject(@ptrCast(*const IGetAppTrackerData, self), TopLevelCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetAppTrackerData_GetSuggestedPollingInterval(self: *const T, PollingIntervalInSeconds: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetAppTrackerData.VTable, self.vtable).GetSuggestedPollingInterval(@ptrCast(*const IGetAppTrackerData, self), PollingIntervalInSeconds);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDispenserManager_Value = @import("../zig.zig").Guid.initString("5CB31E10-2B5F-11CF-BE10-00AA00A2FA25");
pub const IID_IDispenserManager = &IID_IDispenserManager_Value;
pub const IDispenserManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterDispenser: fn(
            self: *const IDispenserManager,
            __MIDL__IDispenserManager0000: *IDispenserDriver,
            szDispenserName: [*:0]const u16,
            __MIDL__IDispenserManager0001: **IHolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContext: fn(
            self: *const IDispenserManager,
            __MIDL__IDispenserManager0002: *?*c_void,
            __MIDL__IDispenserManager0003: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispenserManager_RegisterDispenser(self: *const T, __MIDL__IDispenserManager0000: *IDispenserDriver, szDispenserName: [*:0]const u16, __MIDL__IDispenserManager0001: **IHolder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispenserManager.VTable, self.vtable).RegisterDispenser(@ptrCast(*const IDispenserManager, self), __MIDL__IDispenserManager0000, szDispenserName, __MIDL__IDispenserManager0001);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispenserManager_GetContext(self: *const T, __MIDL__IDispenserManager0002: *?*c_void, __MIDL__IDispenserManager0003: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispenserManager.VTable, self.vtable).GetContext(@ptrCast(*const IDispenserManager, self), __MIDL__IDispenserManager0002, __MIDL__IDispenserManager0003);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IHolder_Value = @import("../zig.zig").Guid.initString("BF6A1850-2B45-11CF-BE10-00AA00A2FA25");
pub const IID_IHolder = &IID_IHolder_Value;
pub const IHolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AllocResource: fn(
            self: *const IHolder,
            __MIDL__IHolder0000: ?*c_void,
            __MIDL__IHolder0001: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FreeResource: fn(
            self: *const IHolder,
            __MIDL__IHolder0002: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TrackResource: fn(
            self: *const IHolder,
            __MIDL__IHolder0003: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TrackResourceS: fn(
            self: *const IHolder,
            __MIDL__IHolder0004: *u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UntrackResource: fn(
            self: *const IHolder,
            __MIDL__IHolder0005: ?*c_void,
            __MIDL__IHolder0006: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UntrackResourceS: fn(
            self: *const IHolder,
            __MIDL__IHolder0007: *u16,
            __MIDL__IHolder0008: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IHolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestDestroyResource: fn(
            self: *const IHolder,
            __MIDL__IHolder0009: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHolder_AllocResource(self: *const T, __MIDL__IHolder0000: ?*c_void, __MIDL__IHolder0001: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHolder.VTable, self.vtable).AllocResource(@ptrCast(*const IHolder, self), __MIDL__IHolder0000, __MIDL__IHolder0001);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHolder_FreeResource(self: *const T, __MIDL__IHolder0002: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHolder.VTable, self.vtable).FreeResource(@ptrCast(*const IHolder, self), __MIDL__IHolder0002);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHolder_TrackResource(self: *const T, __MIDL__IHolder0003: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHolder.VTable, self.vtable).TrackResource(@ptrCast(*const IHolder, self), __MIDL__IHolder0003);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHolder_TrackResourceS(self: *const T, __MIDL__IHolder0004: *u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHolder.VTable, self.vtable).TrackResourceS(@ptrCast(*const IHolder, self), __MIDL__IHolder0004);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHolder_UntrackResource(self: *const T, __MIDL__IHolder0005: ?*c_void, __MIDL__IHolder0006: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHolder.VTable, self.vtable).UntrackResource(@ptrCast(*const IHolder, self), __MIDL__IHolder0005, __MIDL__IHolder0006);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHolder_UntrackResourceS(self: *const T, __MIDL__IHolder0007: *u16, __MIDL__IHolder0008: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHolder.VTable, self.vtable).UntrackResourceS(@ptrCast(*const IHolder, self), __MIDL__IHolder0007, __MIDL__IHolder0008);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHolder_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHolder.VTable, self.vtable).Close(@ptrCast(*const IHolder, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IHolder_RequestDestroyResource(self: *const T, __MIDL__IHolder0009: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IHolder.VTable, self.vtable).RequestDestroyResource(@ptrCast(*const IHolder, self), __MIDL__IHolder0009);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDispenserDriver_Value = @import("../zig.zig").Guid.initString("208B3651-2B48-11CF-BE10-00AA00A2FA25");
pub const IID_IDispenserDriver = &IID_IDispenserDriver_Value;
pub const IDispenserDriver = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateResource: fn(
            self: *const IDispenserDriver,
            ResTypId: ?*c_void,
            pResId: *?*c_void,
            pSecsFreeBeforeDestroy: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RateResource: fn(
            self: *const IDispenserDriver,
            ResTypId: ?*c_void,
            ResId: ?*c_void,
            fRequiresTransactionEnlistment: BOOL,
            pRating: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnlistResource: fn(
            self: *const IDispenserDriver,
            ResId: ?*c_void,
            TransId: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetResource: fn(
            self: *const IDispenserDriver,
            ResId: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyResource: fn(
            self: *const IDispenserDriver,
            ResId: ?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyResourceS: fn(
            self: *const IDispenserDriver,
            ResId: *u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispenserDriver_CreateResource(self: *const T, ResTypId: ?*c_void, pResId: *?*c_void, pSecsFreeBeforeDestroy: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispenserDriver.VTable, self.vtable).CreateResource(@ptrCast(*const IDispenserDriver, self), ResTypId, pResId, pSecsFreeBeforeDestroy);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispenserDriver_RateResource(self: *const T, ResTypId: ?*c_void, ResId: ?*c_void, fRequiresTransactionEnlistment: BOOL, pRating: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispenserDriver.VTable, self.vtable).RateResource(@ptrCast(*const IDispenserDriver, self), ResTypId, ResId, fRequiresTransactionEnlistment, pRating);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispenserDriver_EnlistResource(self: *const T, ResId: ?*c_void, TransId: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispenserDriver.VTable, self.vtable).EnlistResource(@ptrCast(*const IDispenserDriver, self), ResId, TransId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispenserDriver_ResetResource(self: *const T, ResId: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispenserDriver.VTable, self.vtable).ResetResource(@ptrCast(*const IDispenserDriver, self), ResId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispenserDriver_DestroyResource(self: *const T, ResId: ?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispenserDriver.VTable, self.vtable).DestroyResource(@ptrCast(*const IDispenserDriver, self), ResId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IDispenserDriver_DestroyResourceS(self: *const T, ResId: *u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IDispenserDriver.VTable, self.vtable).DestroyResourceS(@ptrCast(*const IDispenserDriver, self), ResId);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionProxy_Value = @import("../zig.zig").Guid.initString("02558374-DF2E-4DAE-BD6B-1D5C994F9BDC");
pub const IID_ITransactionProxy = &IID_ITransactionProxy_Value;
pub const ITransactionProxy = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Commit: fn(
            self: *const ITransactionProxy,
            guid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: fn(
            self: *const ITransactionProxy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Promote: fn(
            self: *const ITransactionProxy,
            pTransaction: **ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVoter: fn(
            self: *const ITransactionProxy,
            pTxAsync: *ITransactionVoterNotifyAsync2,
            ppBallot: **ITransactionVoterBallotAsync2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsolationLevel: fn(
            self: *const ITransactionProxy,
            __MIDL__ITransactionProxy0000: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIdentifier: fn(
            self: *const ITransactionProxy,
            pbstrIdentifier: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsReusable: fn(
            self: *const ITransactionProxy,
            pfIsReusable: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProxy_Commit(self: *const T, guid: Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionProxy.VTable, self.vtable).Commit(@ptrCast(*const ITransactionProxy, self), guid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProxy_Abort(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionProxy.VTable, self.vtable).Abort(@ptrCast(*const ITransactionProxy, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProxy_Promote(self: *const T, pTransaction: **ITransaction) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionProxy.VTable, self.vtable).Promote(@ptrCast(*const ITransactionProxy, self), pTransaction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProxy_CreateVoter(self: *const T, pTxAsync: *ITransactionVoterNotifyAsync2, ppBallot: **ITransactionVoterBallotAsync2) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionProxy.VTable, self.vtable).CreateVoter(@ptrCast(*const ITransactionProxy, self), pTxAsync, ppBallot);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProxy_GetIsolationLevel(self: *const T, __MIDL__ITransactionProxy0000: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionProxy.VTable, self.vtable).GetIsolationLevel(@ptrCast(*const ITransactionProxy, self), __MIDL__ITransactionProxy0000);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProxy_GetIdentifier(self: *const T, pbstrIdentifier: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionProxy.VTable, self.vtable).GetIdentifier(@ptrCast(*const ITransactionProxy, self), pbstrIdentifier);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProxy_IsReusable(self: *const T, pfIsReusable: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionProxy.VTable, self.vtable).IsReusable(@ptrCast(*const ITransactionProxy, self), pfIsReusable);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContextSecurityPerimeter_Value = @import("../zig.zig").Guid.initString("A7549A29-A7C4-42E1-8DC1-7E3D748DC24A");
pub const IID_IContextSecurityPerimeter = &IID_IContextSecurityPerimeter_Value;
pub const IContextSecurityPerimeter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPerimeterFlag: fn(
            self: *const IContextSecurityPerimeter,
            pFlag: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPerimeterFlag: fn(
            self: *const IContextSecurityPerimeter,
            fFlag: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextSecurityPerimeter_GetPerimeterFlag(self: *const T, pFlag: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextSecurityPerimeter.VTable, self.vtable).GetPerimeterFlag(@ptrCast(*const IContextSecurityPerimeter, self), pFlag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextSecurityPerimeter_SetPerimeterFlag(self: *const T, fFlag: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextSecurityPerimeter.VTable, self.vtable).SetPerimeterFlag(@ptrCast(*const IContextSecurityPerimeter, self), fFlag);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITxProxyHolder_Value = @import("../zig.zig").Guid.initString("13D86F31-0139-41AF-BCAD-C7D50435FE9F");
pub const IID_ITxProxyHolder = &IID_ITxProxyHolder_Value;
pub const ITxProxyHolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIdentifier: fn(
            self: *const ITxProxyHolder,
            pGuidLtx: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITxProxyHolder_GetIdentifier(self: *const T, pGuidLtx: *Guid) callconv(.Inline) void {
            return @ptrCast(*const ITxProxyHolder.VTable, self.vtable).GetIdentifier(@ptrCast(*const ITxProxyHolder, self), pGuidLtx);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectContext_Value = @import("../zig.zig").Guid.initString("51372AE0-CAE7-11CF-BE81-00AA00A2FA25");
pub const IID_IObjectContext = &IID_IObjectContext_Value;
pub const IObjectContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstance: fn(
            self: *const IObjectContext,
            rclsid: *const Guid,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetComplete: fn(
            self: *const IObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAbort: fn(
            self: *const IObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableCommit: fn(
            self: *const IObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableCommit: fn(
            self: *const IObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsInTransaction: fn(
            self: *const IObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsSecurityEnabled: fn(
            self: *const IObjectContext,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsCallerInRole: fn(
            self: *const IObjectContext,
            bstrRole: BSTR,
            pfIsInRole: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContext_CreateInstance(self: *const T, rclsid: *const Guid, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContext.VTable, self.vtable).CreateInstance(@ptrCast(*const IObjectContext, self), rclsid, riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContext_SetComplete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContext.VTable, self.vtable).SetComplete(@ptrCast(*const IObjectContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContext_SetAbort(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContext.VTable, self.vtable).SetAbort(@ptrCast(*const IObjectContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContext_EnableCommit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContext.VTable, self.vtable).EnableCommit(@ptrCast(*const IObjectContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContext_DisableCommit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContext.VTable, self.vtable).DisableCommit(@ptrCast(*const IObjectContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContext_IsInTransaction(self: *const T) callconv(.Inline) BOOL {
            return @ptrCast(*const IObjectContext.VTable, self.vtable).IsInTransaction(@ptrCast(*const IObjectContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContext_IsSecurityEnabled(self: *const T) callconv(.Inline) BOOL {
            return @ptrCast(*const IObjectContext.VTable, self.vtable).IsSecurityEnabled(@ptrCast(*const IObjectContext, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContext_IsCallerInRole(self: *const T, bstrRole: BSTR, pfIsInRole: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContext.VTable, self.vtable).IsCallerInRole(@ptrCast(*const IObjectContext, self), bstrRole, pfIsInRole);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectControl_Value = @import("../zig.zig").Guid.initString("51372AEC-CAE7-11CF-BE81-00AA00A2FA25");
pub const IID_IObjectControl = &IID_IObjectControl_Value;
pub const IObjectControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Activate: fn(
            self: *const IObjectControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deactivate: fn(
            self: *const IObjectControl,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CanBePooled: fn(
            self: *const IObjectControl,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectControl_Activate(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectControl.VTable, self.vtable).Activate(@ptrCast(*const IObjectControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectControl_Deactivate(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IObjectControl.VTable, self.vtable).Deactivate(@ptrCast(*const IObjectControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectControl_CanBePooled(self: *const T) callconv(.Inline) BOOL {
            return @ptrCast(*const IObjectControl.VTable, self.vtable).CanBePooled(@ptrCast(*const IObjectControl, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumNames_Value = @import("../zig.zig").Guid.initString("51372AF2-CAE7-11CF-BE81-00AA00A2FA25");
pub const IID_IEnumNames = &IID_IEnumNames_Value;
pub const IEnumNames = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumNames,
            celt: u32,
            rgname: *BSTR,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumNames,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumNames,
            ppenum: **IEnumNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumNames_Next(self: *const T, celt: u32, rgname: *BSTR, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumNames.VTable, self.vtable).Next(@ptrCast(*const IEnumNames, self), celt, rgname, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumNames_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumNames.VTable, self.vtable).Skip(@ptrCast(*const IEnumNames, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumNames_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumNames.VTable, self.vtable).Reset(@ptrCast(*const IEnumNames, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumNames_Clone(self: *const T, ppenum: **IEnumNames) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumNames.VTable, self.vtable).Clone(@ptrCast(*const IEnumNames, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISecurityProperty_Value = @import("../zig.zig").Guid.initString("51372AEA-CAE7-11CF-BE81-00AA00A2FA25");
pub const IID_ISecurityProperty = &IID_ISecurityProperty_Value;
pub const ISecurityProperty = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDirectCreatorSID: fn(
            self: *const ISecurityProperty,
            pSID: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOriginalCreatorSID: fn(
            self: *const ISecurityProperty,
            pSID: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDirectCallerSID: fn(
            self: *const ISecurityProperty,
            pSID: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOriginalCallerSID: fn(
            self: *const ISecurityProperty,
            pSID: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseSID: fn(
            self: *const ISecurityProperty,
            pSID: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityProperty_GetDirectCreatorSID(self: *const T, pSID: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityProperty.VTable, self.vtable).GetDirectCreatorSID(@ptrCast(*const ISecurityProperty, self), pSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityProperty_GetOriginalCreatorSID(self: *const T, pSID: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityProperty.VTable, self.vtable).GetOriginalCreatorSID(@ptrCast(*const ISecurityProperty, self), pSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityProperty_GetDirectCallerSID(self: *const T, pSID: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityProperty.VTable, self.vtable).GetDirectCallerSID(@ptrCast(*const ISecurityProperty, self), pSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityProperty_GetOriginalCallerSID(self: *const T, pSID: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityProperty.VTable, self.vtable).GetOriginalCallerSID(@ptrCast(*const ISecurityProperty, self), pSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISecurityProperty_ReleaseSID(self: *const T, pSID: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISecurityProperty.VTable, self.vtable).ReleaseSID(@ptrCast(*const ISecurityProperty, self), pSID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ObjectControl_Value = @import("../zig.zig").Guid.initString("7DC41850-0C31-11D0-8B79-00AA00B8A790");
pub const IID_ObjectControl = &IID_ObjectControl_Value;
pub const ObjectControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Activate: fn(
            self: *const ObjectControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deactivate: fn(
            self: *const ObjectControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanBePooled: fn(
            self: *const ObjectControl,
            pbPoolable: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectControl_Activate(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectControl.VTable, self.vtable).Activate(@ptrCast(*const ObjectControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectControl_Deactivate(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectControl.VTable, self.vtable).Deactivate(@ptrCast(*const ObjectControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ObjectControl_CanBePooled(self: *const T, pbPoolable: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ObjectControl.VTable, self.vtable).CanBePooled(@ptrCast(*const ObjectControl, self), pbPoolable);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISharedProperty_Value = @import("../zig.zig").Guid.initString("2A005C01-A5DE-11CF-9E66-00AA00A3F464");
pub const IID_ISharedProperty = &IID_ISharedProperty_Value;
pub const ISharedProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Value: fn(
            self: *const ISharedProperty,
            pVal: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Value: fn(
            self: *const ISharedProperty,
            val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedProperty_get_Value(self: *const T, pVal: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedProperty.VTable, self.vtable).get_Value(@ptrCast(*const ISharedProperty, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedProperty_put_Value(self: *const T, val: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedProperty.VTable, self.vtable).put_Value(@ptrCast(*const ISharedProperty, self), val);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISharedPropertyGroup_Value = @import("../zig.zig").Guid.initString("2A005C07-A5DE-11CF-9E66-00AA00A3F464");
pub const IID_ISharedPropertyGroup = &IID_ISharedPropertyGroup_Value;
pub const ISharedPropertyGroup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreatePropertyByPosition: fn(
            self: *const ISharedPropertyGroup,
            Index: i32,
            fExists: *i16,
            ppProp: **ISharedProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PropertyByPosition: fn(
            self: *const ISharedPropertyGroup,
            Index: i32,
            ppProperty: **ISharedProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateProperty: fn(
            self: *const ISharedPropertyGroup,
            Name: BSTR,
            fExists: *i16,
            ppProp: **ISharedProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Property: fn(
            self: *const ISharedPropertyGroup,
            Name: BSTR,
            ppProperty: **ISharedProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedPropertyGroup_CreatePropertyByPosition(self: *const T, Index: i32, fExists: *i16, ppProp: **ISharedProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedPropertyGroup.VTable, self.vtable).CreatePropertyByPosition(@ptrCast(*const ISharedPropertyGroup, self), Index, fExists, ppProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedPropertyGroup_get_PropertyByPosition(self: *const T, Index: i32, ppProperty: **ISharedProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedPropertyGroup.VTable, self.vtable).get_PropertyByPosition(@ptrCast(*const ISharedPropertyGroup, self), Index, ppProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedPropertyGroup_CreateProperty(self: *const T, Name: BSTR, fExists: *i16, ppProp: **ISharedProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedPropertyGroup.VTable, self.vtable).CreateProperty(@ptrCast(*const ISharedPropertyGroup, self), Name, fExists, ppProp);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedPropertyGroup_get_Property(self: *const T, Name: BSTR, ppProperty: **ISharedProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedPropertyGroup.VTable, self.vtable).get_Property(@ptrCast(*const ISharedPropertyGroup, self), Name, ppProperty);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISharedPropertyGroupManager_Value = @import("../zig.zig").Guid.initString("2A005C0D-A5DE-11CF-9E66-00AA00A3F464");
pub const IID_ISharedPropertyGroupManager = &IID_ISharedPropertyGroupManager_Value;
pub const ISharedPropertyGroupManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreatePropertyGroup: fn(
            self: *const ISharedPropertyGroupManager,
            Name: BSTR,
            dwIsoMode: *i32,
            dwRelMode: *i32,
            fExists: *i16,
            ppGroup: **ISharedPropertyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Group: fn(
            self: *const ISharedPropertyGroupManager,
            Name: BSTR,
            ppGroup: **ISharedPropertyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISharedPropertyGroupManager,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedPropertyGroupManager_CreatePropertyGroup(self: *const T, Name: BSTR, dwIsoMode: *i32, dwRelMode: *i32, fExists: *i16, ppGroup: **ISharedPropertyGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedPropertyGroupManager.VTable, self.vtable).CreatePropertyGroup(@ptrCast(*const ISharedPropertyGroupManager, self), Name, dwIsoMode, dwRelMode, fExists, ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedPropertyGroupManager_get_Group(self: *const T, Name: BSTR, ppGroup: **ISharedPropertyGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedPropertyGroupManager.VTable, self.vtable).get_Group(@ptrCast(*const ISharedPropertyGroupManager, self), Name, ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISharedPropertyGroupManager_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISharedPropertyGroupManager.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISharedPropertyGroupManager, self), retval);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectConstruct_Value = @import("../zig.zig").Guid.initString("41C4F8B3-7439-11D2-98CB-00C04F8EE1C4");
pub const IID_IObjectConstruct = &IID_IObjectConstruct_Value;
pub const IObjectConstruct = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Construct: fn(
            self: *const IObjectConstruct,
            pCtorObj: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectConstruct_Construct(self: *const T, pCtorObj: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectConstruct.VTable, self.vtable).Construct(@ptrCast(*const IObjectConstruct, self), pCtorObj);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectConstructString_Value = @import("../zig.zig").Guid.initString("41C4F8B2-7439-11D2-98CB-00C04F8EE1C4");
pub const IID_IObjectConstructString = &IID_IObjectConstructString_Value;
pub const IObjectConstructString = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_ConstructString: fn(
            self: *const IObjectConstructString,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectConstructString_get_ConstructString(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectConstructString.VTable, self.vtable).get_ConstructString(@ptrCast(*const IObjectConstructString, self), pVal);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectContextActivity_Value = @import("../zig.zig").Guid.initString("51372AFC-CAE7-11CF-BE81-00AA00A2FA25");
pub const IID_IObjectContextActivity = &IID_IObjectContextActivity_Value;
pub const IObjectContextActivity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetActivityId: fn(
            self: *const IObjectContextActivity,
            pGUID: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContextActivity_GetActivityId(self: *const T, pGUID: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContextActivity.VTable, self.vtable).GetActivityId(@ptrCast(*const IObjectContextActivity, self), pGUID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectContextInfo_Value = @import("../zig.zig").Guid.initString("75B52DDB-E8ED-11D1-93AD-00AA00BA3258");
pub const IID_IObjectContextInfo = &IID_IObjectContextInfo_Value;
pub const IObjectContextInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsInTransaction: fn(
            self: *const IObjectContextInfo,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetTransaction: fn(
            self: *const IObjectContextInfo,
            pptrans: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransactionId: fn(
            self: *const IObjectContextInfo,
            pGuid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActivityId: fn(
            self: *const IObjectContextInfo,
            pGUID: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContextId: fn(
            self: *const IObjectContextInfo,
            pGuid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContextInfo_IsInTransaction(self: *const T) callconv(.Inline) BOOL {
            return @ptrCast(*const IObjectContextInfo.VTable, self.vtable).IsInTransaction(@ptrCast(*const IObjectContextInfo, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContextInfo_GetTransaction(self: *const T, pptrans: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContextInfo.VTable, self.vtable).GetTransaction(@ptrCast(*const IObjectContextInfo, self), pptrans);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContextInfo_GetTransactionId(self: *const T, pGuid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContextInfo.VTable, self.vtable).GetTransactionId(@ptrCast(*const IObjectContextInfo, self), pGuid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContextInfo_GetActivityId(self: *const T, pGUID: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContextInfo.VTable, self.vtable).GetActivityId(@ptrCast(*const IObjectContextInfo, self), pGUID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContextInfo_GetContextId(self: *const T, pGuid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContextInfo.VTable, self.vtable).GetContextId(@ptrCast(*const IObjectContextInfo, self), pGuid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectContextInfo2_Value = @import("../zig.zig").Guid.initString("594BE71A-4BC4-438B-9197-CFD176248B09");
pub const IID_IObjectContextInfo2 = &IID_IObjectContextInfo2_Value;
pub const IObjectContextInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IObjectContextInfo.VTable,
        GetPartitionId: fn(
            self: *const IObjectContextInfo2,
            pGuid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationId: fn(
            self: *const IObjectContextInfo2,
            pGuid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationInstanceId: fn(
            self: *const IObjectContextInfo2,
            pGuid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IObjectContextInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContextInfo2_GetPartitionId(self: *const T, pGuid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContextInfo2.VTable, self.vtable).GetPartitionId(@ptrCast(*const IObjectContextInfo2, self), pGuid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContextInfo2_GetApplicationId(self: *const T, pGuid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContextInfo2.VTable, self.vtable).GetApplicationId(@ptrCast(*const IObjectContextInfo2, self), pGuid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContextInfo2_GetApplicationInstanceId(self: *const T, pGuid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContextInfo2.VTable, self.vtable).GetApplicationInstanceId(@ptrCast(*const IObjectContextInfo2, self), pGuid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionStatus_Value = @import("../zig.zig").Guid.initString("61F589E8-3724-4898-A0A4-664AE9E1D1B4");
pub const IID_ITransactionStatus = &IID_ITransactionStatus_Value;
pub const ITransactionStatus = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTransactionStatus: fn(
            self: *const ITransactionStatus,
            hrStatus: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransactionStatus: fn(
            self: *const ITransactionStatus,
            pHrStatus: *HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionStatus_SetTransactionStatus(self: *const T, hrStatus: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionStatus.VTable, self.vtable).SetTransactionStatus(@ptrCast(*const ITransactionStatus, self), hrStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionStatus_GetTransactionStatus(self: *const T, pHrStatus: *HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionStatus.VTable, self.vtable).GetTransactionStatus(@ptrCast(*const ITransactionStatus, self), pHrStatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjectContextTip_Value = @import("../zig.zig").Guid.initString("92FD41CA-BAD9-11D2-9A2D-00C04F797BC9");
pub const IID_IObjectContextTip = &IID_IObjectContextTip_Value;
pub const IObjectContextTip = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTipUrl: fn(
            self: *const IObjectContextTip,
            pTipUrl: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjectContextTip_GetTipUrl(self: *const T, pTipUrl: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IObjectContextTip.VTable, self.vtable).GetTipUrl(@ptrCast(*const IObjectContextTip, self), pTipUrl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPlaybackControl_Value = @import("../zig.zig").Guid.initString("51372AFD-CAE7-11CF-BE81-00AA00A2FA25");
pub const IID_IPlaybackControl = &IID_IPlaybackControl_Value;
pub const IPlaybackControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FinalClientRetry: fn(
            self: *const IPlaybackControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FinalServerRetry: fn(
            self: *const IPlaybackControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPlaybackControl_FinalClientRetry(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPlaybackControl.VTable, self.vtable).FinalClientRetry(@ptrCast(*const IPlaybackControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPlaybackControl_FinalServerRetry(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPlaybackControl.VTable, self.vtable).FinalServerRetry(@ptrCast(*const IPlaybackControl, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetContextProperties_Value = @import("../zig.zig").Guid.initString("51372AF4-CAE7-11CF-BE81-00AA00A2FA25");
pub const IID_IGetContextProperties = &IID_IGetContextProperties_Value;
pub const IGetContextProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Count: fn(
            self: *const IGetContextProperties,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IGetContextProperties,
            name: BSTR,
            pProperty: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumNames: fn(
            self: *const IGetContextProperties,
            ppenum: **IEnumNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetContextProperties_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetContextProperties.VTable, self.vtable).Count(@ptrCast(*const IGetContextProperties, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetContextProperties_GetProperty(self: *const T, name: BSTR, pProperty: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetContextProperties.VTable, self.vtable).GetProperty(@ptrCast(*const IGetContextProperties, self), name, pProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetContextProperties_EnumNames(self: *const T, ppenum: **IEnumNames) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetContextProperties.VTable, self.vtable).EnumNames(@ptrCast(*const IGetContextProperties, self), ppenum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const TransactionVote = extern enum(i32) {
    TxCommit = 0,
    TxAbort = 1,
};
pub const TxCommit = TransactionVote.TxCommit;
pub const TxAbort = TransactionVote.TxAbort;

const IID_IContextState_Value = @import("../zig.zig").Guid.initString("3C05E54B-A42A-11D2-AFC4-00C04F8EE1C4");
pub const IID_IContextState = &IID_IContextState_Value;
pub const IContextState = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetDeactivateOnReturn: fn(
            self: *const IContextState,
            bDeactivate: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeactivateOnReturn: fn(
            self: *const IContextState,
            pbDeactivate: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMyTransactionVote: fn(
            self: *const IContextState,
            txVote: TransactionVote,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMyTransactionVote: fn(
            self: *const IContextState,
            ptxVote: *TransactionVote,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextState_SetDeactivateOnReturn(self: *const T, bDeactivate: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextState.VTable, self.vtable).SetDeactivateOnReturn(@ptrCast(*const IContextState, self), bDeactivate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextState_GetDeactivateOnReturn(self: *const T, pbDeactivate: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextState.VTable, self.vtable).GetDeactivateOnReturn(@ptrCast(*const IContextState, self), pbDeactivate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextState_SetMyTransactionVote(self: *const T, txVote: TransactionVote) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextState.VTable, self.vtable).SetMyTransactionVote(@ptrCast(*const IContextState, self), txVote);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextState_GetMyTransactionVote(self: *const T, ptxVote: *TransactionVote) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextState.VTable, self.vtable).GetMyTransactionVote(@ptrCast(*const IContextState, self), ptxVote);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPoolManager_Value = @import("../zig.zig").Guid.initString("0A469861-5A91-43A0-99B6-D5E179BB0631");
pub const IID_IPoolManager = &IID_IPoolManager_Value;
pub const IPoolManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ShutdownPool: fn(
            self: *const IPoolManager,
            CLSIDOrProgID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPoolManager_ShutdownPool(self: *const T, CLSIDOrProgID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPoolManager.VTable, self.vtable).ShutdownPool(@ptrCast(*const IPoolManager, self), CLSIDOrProgID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISelectCOMLBServer_Value = @import("../zig.zig").Guid.initString("DCF443F4-3F8A-4872-B9F0-369A796D12D6");
pub const IID_ISelectCOMLBServer = &IID_ISelectCOMLBServer_Value;
pub const ISelectCOMLBServer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: fn(
            self: *const ISelectCOMLBServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLBServer: fn(
            self: *const ISelectCOMLBServer,
            pUnk: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISelectCOMLBServer_Init(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISelectCOMLBServer.VTable, self.vtable).Init(@ptrCast(*const ISelectCOMLBServer, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISelectCOMLBServer_GetLBServer(self: *const T, pUnk: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISelectCOMLBServer.VTable, self.vtable).GetLBServer(@ptrCast(*const ISelectCOMLBServer, self), pUnk);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICOMLBArguments_Value = @import("../zig.zig").Guid.initString("3A0F150F-8EE5-4B94-B40E-AEF2F9E42ED2");
pub const IID_ICOMLBArguments = &IID_ICOMLBArguments_Value;
pub const ICOMLBArguments = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCLSID: fn(
            self: *const ICOMLBArguments,
            pCLSID: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCLSID: fn(
            self: *const ICOMLBArguments,
            pCLSID: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMachineName: fn(
            self: *const ICOMLBArguments,
            cchSvr: u32,
            szServerName: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMachineName: fn(
            self: *const ICOMLBArguments,
            cchSvr: u32,
            szServerName: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMLBArguments_GetCLSID(self: *const T, pCLSID: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMLBArguments.VTable, self.vtable).GetCLSID(@ptrCast(*const ICOMLBArguments, self), pCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMLBArguments_SetCLSID(self: *const T, pCLSID: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMLBArguments.VTable, self.vtable).SetCLSID(@ptrCast(*const ICOMLBArguments, self), pCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMLBArguments_GetMachineName(self: *const T, cchSvr: u32, szServerName: [*:0]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMLBArguments.VTable, self.vtable).GetMachineName(@ptrCast(*const ICOMLBArguments, self), cchSvr, szServerName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICOMLBArguments_SetMachineName(self: *const T, cchSvr: u32, szServerName: [*:0]u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICOMLBArguments.VTable, self.vtable).SetMachineName(@ptrCast(*const ICOMLBArguments, self), cchSvr, szServerName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICrmLogControl_Value = @import("../zig.zig").Guid.initString("A0E174B3-D26E-11D2-8F84-00805FC7BCD9");
pub const IID_ICrmLogControl = &IID_ICrmLogControl_Value;
pub const ICrmLogControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_TransactionUOW: fn(
            self: *const ICrmLogControl,
            pVal: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterCompensator: fn(
            self: *const ICrmLogControl,
            lpcwstrProgIdCompensator: [*:0]const u16,
            lpcwstrDescription: [*:0]const u16,
            lCrmRegFlags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteLogRecordVariants: fn(
            self: *const ICrmLogControl,
            pLogRecord: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ForceLog: fn(
            self: *const ICrmLogControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ForgetLogRecord: fn(
            self: *const ICrmLogControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ForceTransactionToAbort: fn(
            self: *const ICrmLogControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteLogRecord: fn(
            self: *const ICrmLogControl,
            rgBlob: [*]BLOB,
            cBlob: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmLogControl_get_TransactionUOW(self: *const T, pVal: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmLogControl.VTable, self.vtable).get_TransactionUOW(@ptrCast(*const ICrmLogControl, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmLogControl_RegisterCompensator(self: *const T, lpcwstrProgIdCompensator: [*:0]const u16, lpcwstrDescription: [*:0]const u16, lCrmRegFlags: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmLogControl.VTable, self.vtable).RegisterCompensator(@ptrCast(*const ICrmLogControl, self), lpcwstrProgIdCompensator, lpcwstrDescription, lCrmRegFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmLogControl_WriteLogRecordVariants(self: *const T, pLogRecord: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmLogControl.VTable, self.vtable).WriteLogRecordVariants(@ptrCast(*const ICrmLogControl, self), pLogRecord);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmLogControl_ForceLog(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmLogControl.VTable, self.vtable).ForceLog(@ptrCast(*const ICrmLogControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmLogControl_ForgetLogRecord(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmLogControl.VTable, self.vtable).ForgetLogRecord(@ptrCast(*const ICrmLogControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmLogControl_ForceTransactionToAbort(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmLogControl.VTable, self.vtable).ForceTransactionToAbort(@ptrCast(*const ICrmLogControl, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmLogControl_WriteLogRecord(self: *const T, rgBlob: [*]BLOB, cBlob: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmLogControl.VTable, self.vtable).WriteLogRecord(@ptrCast(*const ICrmLogControl, self), rgBlob, cBlob);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICrmCompensatorVariants_Value = @import("../zig.zig").Guid.initString("F0BAF8E4-7804-11D1-82E9-00A0C91EEDE9");
pub const IID_ICrmCompensatorVariants = &IID_ICrmCompensatorVariants_Value;
pub const ICrmCompensatorVariants = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetLogControlVariants: fn(
            self: *const ICrmCompensatorVariants,
            pLogControl: ?*ICrmLogControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginPrepareVariants: fn(
            self: *const ICrmCompensatorVariants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareRecordVariants: fn(
            self: *const ICrmCompensatorVariants,
            pLogRecord: *VARIANT,
            pbForget: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndPrepareVariants: fn(
            self: *const ICrmCompensatorVariants,
            pbOkToPrepare: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginCommitVariants: fn(
            self: *const ICrmCompensatorVariants,
            bRecovery: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitRecordVariants: fn(
            self: *const ICrmCompensatorVariants,
            pLogRecord: *VARIANT,
            pbForget: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndCommitVariants: fn(
            self: *const ICrmCompensatorVariants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginAbortVariants: fn(
            self: *const ICrmCompensatorVariants,
            bRecovery: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortRecordVariants: fn(
            self: *const ICrmCompensatorVariants,
            pLogRecord: *VARIANT,
            pbForget: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndAbortVariants: fn(
            self: *const ICrmCompensatorVariants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensatorVariants_SetLogControlVariants(self: *const T, pLogControl: ?*ICrmLogControl) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensatorVariants.VTable, self.vtable).SetLogControlVariants(@ptrCast(*const ICrmCompensatorVariants, self), pLogControl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensatorVariants_BeginPrepareVariants(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensatorVariants.VTable, self.vtable).BeginPrepareVariants(@ptrCast(*const ICrmCompensatorVariants, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensatorVariants_PrepareRecordVariants(self: *const T, pLogRecord: *VARIANT, pbForget: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensatorVariants.VTable, self.vtable).PrepareRecordVariants(@ptrCast(*const ICrmCompensatorVariants, self), pLogRecord, pbForget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensatorVariants_EndPrepareVariants(self: *const T, pbOkToPrepare: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensatorVariants.VTable, self.vtable).EndPrepareVariants(@ptrCast(*const ICrmCompensatorVariants, self), pbOkToPrepare);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensatorVariants_BeginCommitVariants(self: *const T, bRecovery: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensatorVariants.VTable, self.vtable).BeginCommitVariants(@ptrCast(*const ICrmCompensatorVariants, self), bRecovery);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensatorVariants_CommitRecordVariants(self: *const T, pLogRecord: *VARIANT, pbForget: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensatorVariants.VTable, self.vtable).CommitRecordVariants(@ptrCast(*const ICrmCompensatorVariants, self), pLogRecord, pbForget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensatorVariants_EndCommitVariants(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensatorVariants.VTable, self.vtable).EndCommitVariants(@ptrCast(*const ICrmCompensatorVariants, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensatorVariants_BeginAbortVariants(self: *const T, bRecovery: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensatorVariants.VTable, self.vtable).BeginAbortVariants(@ptrCast(*const ICrmCompensatorVariants, self), bRecovery);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensatorVariants_AbortRecordVariants(self: *const T, pLogRecord: *VARIANT, pbForget: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensatorVariants.VTable, self.vtable).AbortRecordVariants(@ptrCast(*const ICrmCompensatorVariants, self), pLogRecord, pbForget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensatorVariants_EndAbortVariants(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensatorVariants.VTable, self.vtable).EndAbortVariants(@ptrCast(*const ICrmCompensatorVariants, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CrmLogRecordRead = extern struct {
    dwCrmFlags: u32,
    dwSequenceNumber: u32,
    blobUserData: BLOB,
};

const IID_ICrmCompensator_Value = @import("../zig.zig").Guid.initString("BBC01830-8D3B-11D1-82EC-00A0C91EEDE9");
pub const IID_ICrmCompensator = &IID_ICrmCompensator_Value;
pub const ICrmCompensator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetLogControl: fn(
            self: *const ICrmCompensator,
            pLogControl: ?*ICrmLogControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginPrepare: fn(
            self: *const ICrmCompensator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareRecord: fn(
            self: *const ICrmCompensator,
            crmLogRec: CrmLogRecordRead,
            pfForget: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndPrepare: fn(
            self: *const ICrmCompensator,
            pfOkToPrepare: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginCommit: fn(
            self: *const ICrmCompensator,
            fRecovery: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitRecord: fn(
            self: *const ICrmCompensator,
            crmLogRec: CrmLogRecordRead,
            pfForget: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndCommit: fn(
            self: *const ICrmCompensator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginAbort: fn(
            self: *const ICrmCompensator,
            fRecovery: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortRecord: fn(
            self: *const ICrmCompensator,
            crmLogRec: CrmLogRecordRead,
            pfForget: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndAbort: fn(
            self: *const ICrmCompensator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensator_SetLogControl(self: *const T, pLogControl: ?*ICrmLogControl) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensator.VTable, self.vtable).SetLogControl(@ptrCast(*const ICrmCompensator, self), pLogControl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensator_BeginPrepare(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensator.VTable, self.vtable).BeginPrepare(@ptrCast(*const ICrmCompensator, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensator_PrepareRecord(self: *const T, crmLogRec: CrmLogRecordRead, pfForget: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensator.VTable, self.vtable).PrepareRecord(@ptrCast(*const ICrmCompensator, self), crmLogRec, pfForget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensator_EndPrepare(self: *const T, pfOkToPrepare: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensator.VTable, self.vtable).EndPrepare(@ptrCast(*const ICrmCompensator, self), pfOkToPrepare);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensator_BeginCommit(self: *const T, fRecovery: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensator.VTable, self.vtable).BeginCommit(@ptrCast(*const ICrmCompensator, self), fRecovery);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensator_CommitRecord(self: *const T, crmLogRec: CrmLogRecordRead, pfForget: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensator.VTable, self.vtable).CommitRecord(@ptrCast(*const ICrmCompensator, self), crmLogRec, pfForget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensator_EndCommit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensator.VTable, self.vtable).EndCommit(@ptrCast(*const ICrmCompensator, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensator_BeginAbort(self: *const T, fRecovery: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensator.VTable, self.vtable).BeginAbort(@ptrCast(*const ICrmCompensator, self), fRecovery);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensator_AbortRecord(self: *const T, crmLogRec: CrmLogRecordRead, pfForget: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensator.VTable, self.vtable).AbortRecord(@ptrCast(*const ICrmCompensator, self), crmLogRec, pfForget);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmCompensator_EndAbort(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmCompensator.VTable, self.vtable).EndAbort(@ptrCast(*const ICrmCompensator, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CrmTransactionState = extern enum(i32) {
    TxState_Active = 0,
    TxState_Committed = 1,
    TxState_Aborted = 2,
    TxState_Indoubt = 3,
};
pub const TxState_Active = CrmTransactionState.TxState_Active;
pub const TxState_Committed = CrmTransactionState.TxState_Committed;
pub const TxState_Aborted = CrmTransactionState.TxState_Aborted;
pub const TxState_Indoubt = CrmTransactionState.TxState_Indoubt;

const IID_ICrmMonitorLogRecords_Value = @import("../zig.zig").Guid.initString("70C8E441-C7ED-11D1-82FB-00A0C91EEDE9");
pub const IID_ICrmMonitorLogRecords = &IID_ICrmMonitorLogRecords_Value;
pub const ICrmMonitorLogRecords = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        get_Count: fn(
            self: *const ICrmMonitorLogRecords,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TransactionState: fn(
            self: *const ICrmMonitorLogRecords,
            pVal: *CrmTransactionState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_StructuredRecords: fn(
            self: *const ICrmMonitorLogRecords,
            pVal: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLogRecord: fn(
            self: *const ICrmMonitorLogRecords,
            dwIndex: u32,
            pCrmLogRec: *CrmLogRecordRead,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLogRecordVariants: fn(
            self: *const ICrmMonitorLogRecords,
            IndexNumber: VARIANT,
            pLogRecord: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitorLogRecords_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitorLogRecords.VTable, self.vtable).get_Count(@ptrCast(*const ICrmMonitorLogRecords, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitorLogRecords_get_TransactionState(self: *const T, pVal: *CrmTransactionState) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitorLogRecords.VTable, self.vtable).get_TransactionState(@ptrCast(*const ICrmMonitorLogRecords, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitorLogRecords_get_StructuredRecords(self: *const T, pVal: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitorLogRecords.VTable, self.vtable).get_StructuredRecords(@ptrCast(*const ICrmMonitorLogRecords, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitorLogRecords_GetLogRecord(self: *const T, dwIndex: u32, pCrmLogRec: *CrmLogRecordRead) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitorLogRecords.VTable, self.vtable).GetLogRecord(@ptrCast(*const ICrmMonitorLogRecords, self), dwIndex, pCrmLogRec);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitorLogRecords_GetLogRecordVariants(self: *const T, IndexNumber: VARIANT, pLogRecord: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitorLogRecords.VTable, self.vtable).GetLogRecordVariants(@ptrCast(*const ICrmMonitorLogRecords, self), IndexNumber, pLogRecord);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICrmMonitorClerks_Value = @import("../zig.zig").Guid.initString("70C8E442-C7ED-11D1-82FB-00A0C91EEDE9");
pub const IID_ICrmMonitorClerks = &IID_ICrmMonitorClerks_Value;
pub const ICrmMonitorClerks = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Item: fn(
            self: *const ICrmMonitorClerks,
            Index: VARIANT,
            pItem: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ICrmMonitorClerks,
            pVal: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const ICrmMonitorClerks,
            pVal: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProgIdCompensator: fn(
            self: *const ICrmMonitorClerks,
            Index: VARIANT,
            pItem: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Description: fn(
            self: *const ICrmMonitorClerks,
            Index: VARIANT,
            pItem: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransactionUOW: fn(
            self: *const ICrmMonitorClerks,
            Index: VARIANT,
            pItem: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivityId: fn(
            self: *const ICrmMonitorClerks,
            Index: VARIANT,
            pItem: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitorClerks_Item(self: *const T, Index: VARIANT, pItem: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitorClerks.VTable, self.vtable).Item(@ptrCast(*const ICrmMonitorClerks, self), Index, pItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitorClerks_get__NewEnum(self: *const T, pVal: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitorClerks.VTable, self.vtable).get__NewEnum(@ptrCast(*const ICrmMonitorClerks, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitorClerks_get_Count(self: *const T, pVal: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitorClerks.VTable, self.vtable).get_Count(@ptrCast(*const ICrmMonitorClerks, self), pVal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitorClerks_ProgIdCompensator(self: *const T, Index: VARIANT, pItem: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitorClerks.VTable, self.vtable).ProgIdCompensator(@ptrCast(*const ICrmMonitorClerks, self), Index, pItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitorClerks_Description(self: *const T, Index: VARIANT, pItem: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitorClerks.VTable, self.vtable).Description(@ptrCast(*const ICrmMonitorClerks, self), Index, pItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitorClerks_TransactionUOW(self: *const T, Index: VARIANT, pItem: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitorClerks.VTable, self.vtable).TransactionUOW(@ptrCast(*const ICrmMonitorClerks, self), Index, pItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitorClerks_ActivityId(self: *const T, Index: VARIANT, pItem: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitorClerks.VTable, self.vtable).ActivityId(@ptrCast(*const ICrmMonitorClerks, self), Index, pItem);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICrmMonitor_Value = @import("../zig.zig").Guid.initString("70C8E443-C7ED-11D1-82FB-00A0C91EEDE9");
pub const IID_ICrmMonitor = &IID_ICrmMonitor_Value;
pub const ICrmMonitor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClerks: fn(
            self: *const ICrmMonitor,
            pClerks: **ICrmMonitorClerks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HoldClerk: fn(
            self: *const ICrmMonitor,
            Index: VARIANT,
            pItem: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitor_GetClerks(self: *const T, pClerks: **ICrmMonitorClerks) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitor.VTable, self.vtable).GetClerks(@ptrCast(*const ICrmMonitor, self), pClerks);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmMonitor_HoldClerk(self: *const T, Index: VARIANT, pItem: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmMonitor.VTable, self.vtable).HoldClerk(@ptrCast(*const ICrmMonitor, self), Index, pItem);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICrmFormatLogRecords_Value = @import("../zig.zig").Guid.initString("9C51D821-C98B-11D1-82FB-00A0C91EEDE9");
pub const IID_ICrmFormatLogRecords = &IID_ICrmFormatLogRecords_Value;
pub const ICrmFormatLogRecords = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetColumnCount: fn(
            self: *const ICrmFormatLogRecords,
            plColumnCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnHeaders: fn(
            self: *const ICrmFormatLogRecords,
            pHeaders: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumn: fn(
            self: *const ICrmFormatLogRecords,
            CrmLogRec: CrmLogRecordRead,
            pFormattedLogRecord: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnVariants: fn(
            self: *const ICrmFormatLogRecords,
            LogRecord: VARIANT,
            pFormattedLogRecord: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmFormatLogRecords_GetColumnCount(self: *const T, plColumnCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmFormatLogRecords.VTable, self.vtable).GetColumnCount(@ptrCast(*const ICrmFormatLogRecords, self), plColumnCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmFormatLogRecords_GetColumnHeaders(self: *const T, pHeaders: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmFormatLogRecords.VTable, self.vtable).GetColumnHeaders(@ptrCast(*const ICrmFormatLogRecords, self), pHeaders);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmFormatLogRecords_GetColumn(self: *const T, CrmLogRec: CrmLogRecordRead, pFormattedLogRecord: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmFormatLogRecords.VTable, self.vtable).GetColumn(@ptrCast(*const ICrmFormatLogRecords, self), CrmLogRec, pFormattedLogRecord);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICrmFormatLogRecords_GetColumnVariants(self: *const T, LogRecord: VARIANT, pFormattedLogRecord: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICrmFormatLogRecords.VTable, self.vtable).GetColumnVariants(@ptrCast(*const ICrmFormatLogRecords, self), LogRecord, pFormattedLogRecord);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const CSC_InheritanceConfig = extern enum(i32) {
    CSC_Inherit = 0,
    CSC_Ignore = 1,
};
pub const CSC_Inherit = CSC_InheritanceConfig.CSC_Inherit;
pub const CSC_Ignore = CSC_InheritanceConfig.CSC_Ignore;

pub const CSC_ThreadPool = extern enum(i32) {
    CSC_ThreadPoolNone = 0,
    CSC_ThreadPoolInherit = 1,
    CSC_STAThreadPool = 2,
    CSC_MTAThreadPool = 3,
};
pub const CSC_ThreadPoolNone = CSC_ThreadPool.CSC_ThreadPoolNone;
pub const CSC_ThreadPoolInherit = CSC_ThreadPool.CSC_ThreadPoolInherit;
pub const CSC_STAThreadPool = CSC_ThreadPool.CSC_STAThreadPool;
pub const CSC_MTAThreadPool = CSC_ThreadPool.CSC_MTAThreadPool;

pub const CSC_Binding = extern enum(i32) {
    CSC_NoBinding = 0,
    CSC_BindToPoolThread = 1,
};
pub const CSC_NoBinding = CSC_Binding.CSC_NoBinding;
pub const CSC_BindToPoolThread = CSC_Binding.CSC_BindToPoolThread;

pub const CSC_TransactionConfig = extern enum(i32) {
    CSC_NoTransaction = 0,
    CSC_IfContainerIsTransactional = 1,
    CSC_CreateTransactionIfNecessary = 2,
    CSC_NewTransaction = 3,
};
pub const CSC_NoTransaction = CSC_TransactionConfig.CSC_NoTransaction;
pub const CSC_IfContainerIsTransactional = CSC_TransactionConfig.CSC_IfContainerIsTransactional;
pub const CSC_CreateTransactionIfNecessary = CSC_TransactionConfig.CSC_CreateTransactionIfNecessary;
pub const CSC_NewTransaction = CSC_TransactionConfig.CSC_NewTransaction;

pub const CSC_SynchronizationConfig = extern enum(i32) {
    CSC_NoSynchronization = 0,
    CSC_IfContainerIsSynchronized = 1,
    CSC_NewSynchronizationIfNecessary = 2,
    CSC_NewSynchronization = 3,
};
pub const CSC_NoSynchronization = CSC_SynchronizationConfig.CSC_NoSynchronization;
pub const CSC_IfContainerIsSynchronized = CSC_SynchronizationConfig.CSC_IfContainerIsSynchronized;
pub const CSC_NewSynchronizationIfNecessary = CSC_SynchronizationConfig.CSC_NewSynchronizationIfNecessary;
pub const CSC_NewSynchronization = CSC_SynchronizationConfig.CSC_NewSynchronization;

pub const CSC_TrackerConfig = extern enum(i32) {
    CSC_DontUseTracker = 0,
    CSC_UseTracker = 1,
};
pub const CSC_DontUseTracker = CSC_TrackerConfig.CSC_DontUseTracker;
pub const CSC_UseTracker = CSC_TrackerConfig.CSC_UseTracker;

pub const CSC_PartitionConfig = extern enum(i32) {
    CSC_NoPartition = 0,
    CSC_InheritPartition = 1,
    CSC_NewPartition = 2,
};
pub const CSC_NoPartition = CSC_PartitionConfig.CSC_NoPartition;
pub const CSC_InheritPartition = CSC_PartitionConfig.CSC_InheritPartition;
pub const CSC_NewPartition = CSC_PartitionConfig.CSC_NewPartition;

pub const CSC_IISIntrinsicsConfig = extern enum(i32) {
    CSC_NoIISIntrinsics = 0,
    CSC_InheritIISIntrinsics = 1,
};
pub const CSC_NoIISIntrinsics = CSC_IISIntrinsicsConfig.CSC_NoIISIntrinsics;
pub const CSC_InheritIISIntrinsics = CSC_IISIntrinsicsConfig.CSC_InheritIISIntrinsics;

pub const CSC_COMTIIntrinsicsConfig = extern enum(i32) {
    CSC_NoCOMTIIntrinsics = 0,
    CSC_InheritCOMTIIntrinsics = 1,
};
pub const CSC_NoCOMTIIntrinsics = CSC_COMTIIntrinsicsConfig.CSC_NoCOMTIIntrinsics;
pub const CSC_InheritCOMTIIntrinsics = CSC_COMTIIntrinsicsConfig.CSC_InheritCOMTIIntrinsics;

pub const CSC_SxsConfig = extern enum(i32) {
    CSC_NoSxs = 0,
    CSC_InheritSxs = 1,
    CSC_NewSxs = 2,
};
pub const CSC_NoSxs = CSC_SxsConfig.CSC_NoSxs;
pub const CSC_InheritSxs = CSC_SxsConfig.CSC_InheritSxs;
pub const CSC_NewSxs = CSC_SxsConfig.CSC_NewSxs;

const IID_IServiceIISIntrinsicsConfig_Value = @import("../zig.zig").Guid.initString("1A0CF920-D452-46F4-BC36-48118D54EA52");
pub const IID_IServiceIISIntrinsicsConfig = &IID_IServiceIISIntrinsicsConfig_Value;
pub const IServiceIISIntrinsicsConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IISIntrinsicsConfig: fn(
            self: *const IServiceIISIntrinsicsConfig,
            iisIntrinsicsConfig: CSC_IISIntrinsicsConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceIISIntrinsicsConfig_IISIntrinsicsConfig(self: *const T, iisIntrinsicsConfig: CSC_IISIntrinsicsConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceIISIntrinsicsConfig.VTable, self.vtable).IISIntrinsicsConfig(@ptrCast(*const IServiceIISIntrinsicsConfig, self), iisIntrinsicsConfig);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServiceComTIIntrinsicsConfig_Value = @import("../zig.zig").Guid.initString("09E6831E-04E1-4ED4-9D0F-E8B168BAFEAF");
pub const IID_IServiceComTIIntrinsicsConfig = &IID_IServiceComTIIntrinsicsConfig_Value;
pub const IServiceComTIIntrinsicsConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ComTIIntrinsicsConfig: fn(
            self: *const IServiceComTIIntrinsicsConfig,
            comtiIntrinsicsConfig: CSC_COMTIIntrinsicsConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceComTIIntrinsicsConfig_ComTIIntrinsicsConfig(self: *const T, comtiIntrinsicsConfig: CSC_COMTIIntrinsicsConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceComTIIntrinsicsConfig.VTable, self.vtable).ComTIIntrinsicsConfig(@ptrCast(*const IServiceComTIIntrinsicsConfig, self), comtiIntrinsicsConfig);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServiceSxsConfig_Value = @import("../zig.zig").Guid.initString("C7CD7379-F3F2-4634-811B-703281D73E08");
pub const IID_IServiceSxsConfig = &IID_IServiceSxsConfig_Value;
pub const IServiceSxsConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SxsConfig: fn(
            self: *const IServiceSxsConfig,
            scsConfig: CSC_SxsConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SxsName: fn(
            self: *const IServiceSxsConfig,
            szSxsName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SxsDirectory: fn(
            self: *const IServiceSxsConfig,
            szSxsDirectory: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceSxsConfig_SxsConfig(self: *const T, scsConfig: CSC_SxsConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceSxsConfig.VTable, self.vtable).SxsConfig(@ptrCast(*const IServiceSxsConfig, self), scsConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceSxsConfig_SxsName(self: *const T, szSxsName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceSxsConfig.VTable, self.vtable).SxsName(@ptrCast(*const IServiceSxsConfig, self), szSxsName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceSxsConfig_SxsDirectory(self: *const T, szSxsDirectory: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceSxsConfig.VTable, self.vtable).SxsDirectory(@ptrCast(*const IServiceSxsConfig, self), szSxsDirectory);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ICheckSxsConfig_Value = @import("../zig.zig").Guid.initString("0FF5A96F-11FC-47D1-BAA6-25DD347E7242");
pub const IID_ICheckSxsConfig = &IID_ICheckSxsConfig_Value;
pub const ICheckSxsConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsSameSxsConfig: fn(
            self: *const ICheckSxsConfig,
            wszSxsName: [*:0]const u16,
            wszSxsDirectory: [*:0]const u16,
            wszSxsAppName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ICheckSxsConfig_IsSameSxsConfig(self: *const T, wszSxsName: [*:0]const u16, wszSxsDirectory: [*:0]const u16, wszSxsAppName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ICheckSxsConfig.VTable, self.vtable).IsSameSxsConfig(@ptrCast(*const ICheckSxsConfig, self), wszSxsName, wszSxsDirectory, wszSxsAppName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServiceInheritanceConfig_Value = @import("../zig.zig").Guid.initString("92186771-D3B4-4D77-A8EA-EE842D586F35");
pub const IID_IServiceInheritanceConfig = &IID_IServiceInheritanceConfig_Value;
pub const IServiceInheritanceConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ContainingContextTreatment: fn(
            self: *const IServiceInheritanceConfig,
            inheritanceConfig: CSC_InheritanceConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceInheritanceConfig_ContainingContextTreatment(self: *const T, inheritanceConfig: CSC_InheritanceConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceInheritanceConfig.VTable, self.vtable).ContainingContextTreatment(@ptrCast(*const IServiceInheritanceConfig, self), inheritanceConfig);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServiceThreadPoolConfig_Value = @import("../zig.zig").Guid.initString("186D89BC-F277-4BCC-80D5-4DF7B836EF4A");
pub const IID_IServiceThreadPoolConfig = &IID_IServiceThreadPoolConfig_Value;
pub const IServiceThreadPoolConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SelectThreadPool: fn(
            self: *const IServiceThreadPoolConfig,
            threadPool: CSC_ThreadPool,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBindingInfo: fn(
            self: *const IServiceThreadPoolConfig,
            binding: CSC_Binding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceThreadPoolConfig_SelectThreadPool(self: *const T, threadPool: CSC_ThreadPool) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceThreadPoolConfig.VTable, self.vtable).SelectThreadPool(@ptrCast(*const IServiceThreadPoolConfig, self), threadPool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceThreadPoolConfig_SetBindingInfo(self: *const T, binding: CSC_Binding) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceThreadPoolConfig.VTable, self.vtable).SetBindingInfo(@ptrCast(*const IServiceThreadPoolConfig, self), binding);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServiceTransactionConfigBase_Value = @import("../zig.zig").Guid.initString("772B3FBE-6FFD-42FB-B5F8-8F9B260F3810");
pub const IID_IServiceTransactionConfigBase = &IID_IServiceTransactionConfigBase_Value;
pub const IServiceTransactionConfigBase = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConfigureTransaction: fn(
            self: *const IServiceTransactionConfigBase,
            transactionConfig: CSC_TransactionConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsolationLevel: fn(
            self: *const IServiceTransactionConfigBase,
            option: COMAdminTxIsolationLevelOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransactionTimeout: fn(
            self: *const IServiceTransactionConfigBase,
            ulTimeoutSec: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BringYourOwnTransaction: fn(
            self: *const IServiceTransactionConfigBase,
            szTipURL: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewTransactionDescription: fn(
            self: *const IServiceTransactionConfigBase,
            szTxDesc: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceTransactionConfigBase_ConfigureTransaction(self: *const T, transactionConfig: CSC_TransactionConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceTransactionConfigBase.VTable, self.vtable).ConfigureTransaction(@ptrCast(*const IServiceTransactionConfigBase, self), transactionConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceTransactionConfigBase_IsolationLevel(self: *const T, option: COMAdminTxIsolationLevelOptions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceTransactionConfigBase.VTable, self.vtable).IsolationLevel(@ptrCast(*const IServiceTransactionConfigBase, self), option);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceTransactionConfigBase_TransactionTimeout(self: *const T, ulTimeoutSec: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceTransactionConfigBase.VTable, self.vtable).TransactionTimeout(@ptrCast(*const IServiceTransactionConfigBase, self), ulTimeoutSec);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceTransactionConfigBase_BringYourOwnTransaction(self: *const T, szTipURL: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceTransactionConfigBase.VTable, self.vtable).BringYourOwnTransaction(@ptrCast(*const IServiceTransactionConfigBase, self), szTipURL);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceTransactionConfigBase_NewTransactionDescription(self: *const T, szTxDesc: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceTransactionConfigBase.VTable, self.vtable).NewTransactionDescription(@ptrCast(*const IServiceTransactionConfigBase, self), szTxDesc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServiceTransactionConfig_Value = @import("../zig.zig").Guid.initString("59F4C2A3-D3D7-4A31-B6E4-6AB3177C50B9");
pub const IID_IServiceTransactionConfig = &IID_IServiceTransactionConfig_Value;
pub const IServiceTransactionConfig = extern struct {
    pub const VTable = extern struct {
        base: IServiceTransactionConfigBase.VTable,
        ConfigureBYOT: fn(
            self: *const IServiceTransactionConfig,
            pITxByot: ?*ITransaction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IServiceTransactionConfigBase.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceTransactionConfig_ConfigureBYOT(self: *const T, pITxByot: ?*ITransaction) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceTransactionConfig.VTable, self.vtable).ConfigureBYOT(@ptrCast(*const IServiceTransactionConfig, self), pITxByot);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServiceSysTxnConfig_Value = @import("../zig.zig").Guid.initString("33CAF1A1-FCB8-472B-B45E-967448DED6D8");
pub const IID_IServiceSysTxnConfig = &IID_IServiceSysTxnConfig_Value;
pub const IServiceSysTxnConfig = extern struct {
    pub const VTable = extern struct {
        base: IServiceTransactionConfig.VTable,
        ConfigureBYOTSysTxn: fn(
            self: *const IServiceSysTxnConfig,
            pTxProxy: *ITransactionProxy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IServiceTransactionConfig.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceSysTxnConfig_ConfigureBYOTSysTxn(self: *const T, pTxProxy: *ITransactionProxy) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceSysTxnConfig.VTable, self.vtable).ConfigureBYOTSysTxn(@ptrCast(*const IServiceSysTxnConfig, self), pTxProxy);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServiceSynchronizationConfig_Value = @import("../zig.zig").Guid.initString("FD880E81-6DCE-4C58-AF83-A208846C0030");
pub const IID_IServiceSynchronizationConfig = &IID_IServiceSynchronizationConfig_Value;
pub const IServiceSynchronizationConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConfigureSynchronization: fn(
            self: *const IServiceSynchronizationConfig,
            synchConfig: CSC_SynchronizationConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceSynchronizationConfig_ConfigureSynchronization(self: *const T, synchConfig: CSC_SynchronizationConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceSynchronizationConfig.VTable, self.vtable).ConfigureSynchronization(@ptrCast(*const IServiceSynchronizationConfig, self), synchConfig);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServiceTrackerConfig_Value = @import("../zig.zig").Guid.initString("6C3A3E1D-0BA6-4036-B76F-D0404DB816C9");
pub const IID_IServiceTrackerConfig = &IID_IServiceTrackerConfig_Value;
pub const IServiceTrackerConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TrackerConfig: fn(
            self: *const IServiceTrackerConfig,
            trackerConfig: CSC_TrackerConfig,
            szTrackerAppName: [*:0]const u16,
            szTrackerCtxName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceTrackerConfig_TrackerConfig(self: *const T, trackerConfig: CSC_TrackerConfig, szTrackerAppName: [*:0]const u16, szTrackerCtxName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceTrackerConfig.VTable, self.vtable).TrackerConfig(@ptrCast(*const IServiceTrackerConfig, self), trackerConfig, szTrackerAppName, szTrackerCtxName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServicePartitionConfig_Value = @import("../zig.zig").Guid.initString("80182D03-5EA4-4831-AE97-55BEFFC2E590");
pub const IID_IServicePartitionConfig = &IID_IServicePartitionConfig_Value;
pub const IServicePartitionConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PartitionConfig: fn(
            self: *const IServicePartitionConfig,
            partitionConfig: CSC_PartitionConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PartitionID: fn(
            self: *const IServicePartitionConfig,
            guidPartitionID: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePartitionConfig_PartitionConfig(self: *const T, partitionConfig: CSC_PartitionConfig) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePartitionConfig.VTable, self.vtable).PartitionConfig(@ptrCast(*const IServicePartitionConfig, self), partitionConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePartitionConfig_PartitionID(self: *const T, guidPartitionID: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePartitionConfig.VTable, self.vtable).PartitionID(@ptrCast(*const IServicePartitionConfig, self), guidPartitionID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServiceCall_Value = @import("../zig.zig").Guid.initString("BD3E2E12-42DD-40F4-A09A-95A50C58304B");
pub const IID_IServiceCall = &IID_IServiceCall_Value;
pub const IServiceCall = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCall: fn(
            self: *const IServiceCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceCall_OnCall(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceCall.VTable, self.vtable).OnCall(@ptrCast(*const IServiceCall, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAsyncErrorNotify_Value = @import("../zig.zig").Guid.initString("FE6777FB-A674-4177-8F32-6D707E113484");
pub const IID_IAsyncErrorNotify = &IID_IAsyncErrorNotify_Value;
pub const IAsyncErrorNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnError: fn(
            self: *const IAsyncErrorNotify,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAsyncErrorNotify_OnError(self: *const T, hr: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAsyncErrorNotify.VTable, self.vtable).OnError(@ptrCast(*const IAsyncErrorNotify, self), hr);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServiceActivity_Value = @import("../zig.zig").Guid.initString("67532E0C-9E2F-4450-A354-035633944E17");
pub const IID_IServiceActivity = &IID_IServiceActivity_Value;
pub const IServiceActivity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SynchronousCall: fn(
            self: *const IServiceActivity,
            pIServiceCall: ?*IServiceCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsynchronousCall: fn(
            self: *const IServiceActivity,
            pIServiceCall: ?*IServiceCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToCurrentThread: fn(
            self: *const IServiceActivity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnbindFromThread: fn(
            self: *const IServiceActivity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceActivity_SynchronousCall(self: *const T, pIServiceCall: ?*IServiceCall) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceActivity.VTable, self.vtable).SynchronousCall(@ptrCast(*const IServiceActivity, self), pIServiceCall);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceActivity_AsynchronousCall(self: *const T, pIServiceCall: ?*IServiceCall) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceActivity.VTable, self.vtable).AsynchronousCall(@ptrCast(*const IServiceActivity, self), pIServiceCall);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceActivity_BindToCurrentThread(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceActivity.VTable, self.vtable).BindToCurrentThread(@ptrCast(*const IServiceActivity, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServiceActivity_UnbindFromThread(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServiceActivity.VTable, self.vtable).UnbindFromThread(@ptrCast(*const IServiceActivity, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IThreadPoolKnobs_Value = @import("../zig.zig").Guid.initString("51372AF7-CAE7-11CF-BE81-00AA00A2FA25");
pub const IID_IThreadPoolKnobs = &IID_IThreadPoolKnobs_Value;
pub const IThreadPoolKnobs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMaxThreads: fn(
            self: *const IThreadPoolKnobs,
            plcMaxThreads: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentThreads: fn(
            self: *const IThreadPoolKnobs,
            plcCurrentThreads: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxThreads: fn(
            self: *const IThreadPoolKnobs,
            lcMaxThreads: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeleteDelay: fn(
            self: *const IThreadPoolKnobs,
            pmsecDeleteDelay: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDeleteDelay: fn(
            self: *const IThreadPoolKnobs,
            msecDeleteDelay: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxQueuedRequests: fn(
            self: *const IThreadPoolKnobs,
            plcMaxQueuedRequests: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentQueuedRequests: fn(
            self: *const IThreadPoolKnobs,
            plcCurrentQueuedRequests: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxQueuedRequests: fn(
            self: *const IThreadPoolKnobs,
            lcMaxQueuedRequests: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMinThreads: fn(
            self: *const IThreadPoolKnobs,
            lcMinThreads: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetQueueDepth: fn(
            self: *const IThreadPoolKnobs,
            lcQueueDepth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThreadPoolKnobs_GetMaxThreads(self: *const T, plcMaxThreads: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThreadPoolKnobs.VTable, self.vtable).GetMaxThreads(@ptrCast(*const IThreadPoolKnobs, self), plcMaxThreads);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThreadPoolKnobs_GetCurrentThreads(self: *const T, plcCurrentThreads: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThreadPoolKnobs.VTable, self.vtable).GetCurrentThreads(@ptrCast(*const IThreadPoolKnobs, self), plcCurrentThreads);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThreadPoolKnobs_SetMaxThreads(self: *const T, lcMaxThreads: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThreadPoolKnobs.VTable, self.vtable).SetMaxThreads(@ptrCast(*const IThreadPoolKnobs, self), lcMaxThreads);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThreadPoolKnobs_GetDeleteDelay(self: *const T, pmsecDeleteDelay: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThreadPoolKnobs.VTable, self.vtable).GetDeleteDelay(@ptrCast(*const IThreadPoolKnobs, self), pmsecDeleteDelay);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThreadPoolKnobs_SetDeleteDelay(self: *const T, msecDeleteDelay: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThreadPoolKnobs.VTable, self.vtable).SetDeleteDelay(@ptrCast(*const IThreadPoolKnobs, self), msecDeleteDelay);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThreadPoolKnobs_GetMaxQueuedRequests(self: *const T, plcMaxQueuedRequests: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThreadPoolKnobs.VTable, self.vtable).GetMaxQueuedRequests(@ptrCast(*const IThreadPoolKnobs, self), plcMaxQueuedRequests);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThreadPoolKnobs_GetCurrentQueuedRequests(self: *const T, plcCurrentQueuedRequests: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThreadPoolKnobs.VTable, self.vtable).GetCurrentQueuedRequests(@ptrCast(*const IThreadPoolKnobs, self), plcCurrentQueuedRequests);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThreadPoolKnobs_SetMaxQueuedRequests(self: *const T, lcMaxQueuedRequests: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThreadPoolKnobs.VTable, self.vtable).SetMaxQueuedRequests(@ptrCast(*const IThreadPoolKnobs, self), lcMaxQueuedRequests);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThreadPoolKnobs_SetMinThreads(self: *const T, lcMinThreads: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThreadPoolKnobs.VTable, self.vtable).SetMinThreads(@ptrCast(*const IThreadPoolKnobs, self), lcMinThreads);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IThreadPoolKnobs_SetQueueDepth(self: *const T, lcQueueDepth: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IThreadPoolKnobs.VTable, self.vtable).SetQueueDepth(@ptrCast(*const IThreadPoolKnobs, self), lcQueueDepth);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComStaThreadPoolKnobs_Value = @import("../zig.zig").Guid.initString("324B64FA-33B6-11D2-98B7-00C04F8EE1C4");
pub const IID_IComStaThreadPoolKnobs = &IID_IComStaThreadPoolKnobs_Value;
pub const IComStaThreadPoolKnobs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetMinThreadCount: fn(
            self: *const IComStaThreadPoolKnobs,
            minThreads: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMinThreadCount: fn(
            self: *const IComStaThreadPoolKnobs,
            minThreads: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxThreadCount: fn(
            self: *const IComStaThreadPoolKnobs,
            maxThreads: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxThreadCount: fn(
            self: *const IComStaThreadPoolKnobs,
            maxThreads: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActivityPerThread: fn(
            self: *const IComStaThreadPoolKnobs,
            activitiesPerThread: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActivityPerThread: fn(
            self: *const IComStaThreadPoolKnobs,
            activitiesPerThread: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActivityRatio: fn(
            self: *const IComStaThreadPoolKnobs,
            activityRatio: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetActivityRatio: fn(
            self: *const IComStaThreadPoolKnobs,
            activityRatio: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThreadCount: fn(
            self: *const IComStaThreadPoolKnobs,
            pdwThreads: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQueueDepth: fn(
            self: *const IComStaThreadPoolKnobs,
            pdwQDepth: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetQueueDepth: fn(
            self: *const IComStaThreadPoolKnobs,
            dwQDepth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs_SetMinThreadCount(self: *const T, minThreads: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs.VTable, self.vtable).SetMinThreadCount(@ptrCast(*const IComStaThreadPoolKnobs, self), minThreads);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs_GetMinThreadCount(self: *const T, minThreads: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs.VTable, self.vtable).GetMinThreadCount(@ptrCast(*const IComStaThreadPoolKnobs, self), minThreads);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs_SetMaxThreadCount(self: *const T, maxThreads: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs.VTable, self.vtable).SetMaxThreadCount(@ptrCast(*const IComStaThreadPoolKnobs, self), maxThreads);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs_GetMaxThreadCount(self: *const T, maxThreads: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs.VTable, self.vtable).GetMaxThreadCount(@ptrCast(*const IComStaThreadPoolKnobs, self), maxThreads);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs_SetActivityPerThread(self: *const T, activitiesPerThread: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs.VTable, self.vtable).SetActivityPerThread(@ptrCast(*const IComStaThreadPoolKnobs, self), activitiesPerThread);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs_GetActivityPerThread(self: *const T, activitiesPerThread: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs.VTable, self.vtable).GetActivityPerThread(@ptrCast(*const IComStaThreadPoolKnobs, self), activitiesPerThread);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs_SetActivityRatio(self: *const T, activityRatio: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs.VTable, self.vtable).SetActivityRatio(@ptrCast(*const IComStaThreadPoolKnobs, self), activityRatio);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs_GetActivityRatio(self: *const T, activityRatio: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs.VTable, self.vtable).GetActivityRatio(@ptrCast(*const IComStaThreadPoolKnobs, self), activityRatio);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs_GetThreadCount(self: *const T, pdwThreads: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs.VTable, self.vtable).GetThreadCount(@ptrCast(*const IComStaThreadPoolKnobs, self), pdwThreads);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs_GetQueueDepth(self: *const T, pdwQDepth: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs.VTable, self.vtable).GetQueueDepth(@ptrCast(*const IComStaThreadPoolKnobs, self), pdwQDepth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs_SetQueueDepth(self: *const T, dwQDepth: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs.VTable, self.vtable).SetQueueDepth(@ptrCast(*const IComStaThreadPoolKnobs, self), dwQDepth);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComMtaThreadPoolKnobs_Value = @import("../zig.zig").Guid.initString("F9A76D2E-76A5-43EB-A0C4-49BEC8E48480");
pub const IID_IComMtaThreadPoolKnobs = &IID_IComMtaThreadPoolKnobs_Value;
pub const IComMtaThreadPoolKnobs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MTASetMaxThreadCount: fn(
            self: *const IComMtaThreadPoolKnobs,
            dwMaxThreads: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MTAGetMaxThreadCount: fn(
            self: *const IComMtaThreadPoolKnobs,
            pdwMaxThreads: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MTASetThrottleValue: fn(
            self: *const IComMtaThreadPoolKnobs,
            dwThrottle: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MTAGetThrottleValue: fn(
            self: *const IComMtaThreadPoolKnobs,
            pdwThrottle: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComMtaThreadPoolKnobs_MTASetMaxThreadCount(self: *const T, dwMaxThreads: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComMtaThreadPoolKnobs.VTable, self.vtable).MTASetMaxThreadCount(@ptrCast(*const IComMtaThreadPoolKnobs, self), dwMaxThreads);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComMtaThreadPoolKnobs_MTAGetMaxThreadCount(self: *const T, pdwMaxThreads: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComMtaThreadPoolKnobs.VTable, self.vtable).MTAGetMaxThreadCount(@ptrCast(*const IComMtaThreadPoolKnobs, self), pdwMaxThreads);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComMtaThreadPoolKnobs_MTASetThrottleValue(self: *const T, dwThrottle: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComMtaThreadPoolKnobs.VTable, self.vtable).MTASetThrottleValue(@ptrCast(*const IComMtaThreadPoolKnobs, self), dwThrottle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComMtaThreadPoolKnobs_MTAGetThrottleValue(self: *const T, pdwThrottle: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComMtaThreadPoolKnobs.VTable, self.vtable).MTAGetThrottleValue(@ptrCast(*const IComMtaThreadPoolKnobs, self), pdwThrottle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IComStaThreadPoolKnobs2_Value = @import("../zig.zig").Guid.initString("73707523-FF9A-4974-BF84-2108DC213740");
pub const IID_IComStaThreadPoolKnobs2 = &IID_IComStaThreadPoolKnobs2_Value;
pub const IComStaThreadPoolKnobs2 = extern struct {
    pub const VTable = extern struct {
        base: IComStaThreadPoolKnobs.VTable,
        GetMaxCPULoad: fn(
            self: *const IComStaThreadPoolKnobs2,
            pdwLoad: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxCPULoad: fn(
            self: *const IComStaThreadPoolKnobs2,
            pdwLoad: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCPUMetricEnabled: fn(
            self: *const IComStaThreadPoolKnobs2,
            pbMetricEnabled: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCPUMetricEnabled: fn(
            self: *const IComStaThreadPoolKnobs2,
            bMetricEnabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCreateThreadsAggressively: fn(
            self: *const IComStaThreadPoolKnobs2,
            pbMetricEnabled: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCreateThreadsAggressively: fn(
            self: *const IComStaThreadPoolKnobs2,
            bMetricEnabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxCSR: fn(
            self: *const IComStaThreadPoolKnobs2,
            pdwCSR: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxCSR: fn(
            self: *const IComStaThreadPoolKnobs2,
            dwCSR: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWaitTimeForThreadCleanup: fn(
            self: *const IComStaThreadPoolKnobs2,
            pdwThreadCleanupWaitTime: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWaitTimeForThreadCleanup: fn(
            self: *const IComStaThreadPoolKnobs2,
            dwThreadCleanupWaitTime: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IComStaThreadPoolKnobs.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs2_GetMaxCPULoad(self: *const T, pdwLoad: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs2.VTable, self.vtable).GetMaxCPULoad(@ptrCast(*const IComStaThreadPoolKnobs2, self), pdwLoad);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs2_SetMaxCPULoad(self: *const T, pdwLoad: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs2.VTable, self.vtable).SetMaxCPULoad(@ptrCast(*const IComStaThreadPoolKnobs2, self), pdwLoad);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs2_GetCPUMetricEnabled(self: *const T, pbMetricEnabled: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs2.VTable, self.vtable).GetCPUMetricEnabled(@ptrCast(*const IComStaThreadPoolKnobs2, self), pbMetricEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs2_SetCPUMetricEnabled(self: *const T, bMetricEnabled: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs2.VTable, self.vtable).SetCPUMetricEnabled(@ptrCast(*const IComStaThreadPoolKnobs2, self), bMetricEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs2_GetCreateThreadsAggressively(self: *const T, pbMetricEnabled: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs2.VTable, self.vtable).GetCreateThreadsAggressively(@ptrCast(*const IComStaThreadPoolKnobs2, self), pbMetricEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs2_SetCreateThreadsAggressively(self: *const T, bMetricEnabled: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs2.VTable, self.vtable).SetCreateThreadsAggressively(@ptrCast(*const IComStaThreadPoolKnobs2, self), bMetricEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs2_GetMaxCSR(self: *const T, pdwCSR: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs2.VTable, self.vtable).GetMaxCSR(@ptrCast(*const IComStaThreadPoolKnobs2, self), pdwCSR);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs2_SetMaxCSR(self: *const T, dwCSR: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs2.VTable, self.vtable).SetMaxCSR(@ptrCast(*const IComStaThreadPoolKnobs2, self), dwCSR);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs2_GetWaitTimeForThreadCleanup(self: *const T, pdwThreadCleanupWaitTime: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs2.VTable, self.vtable).GetWaitTimeForThreadCleanup(@ptrCast(*const IComStaThreadPoolKnobs2, self), pdwThreadCleanupWaitTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IComStaThreadPoolKnobs2_SetWaitTimeForThreadCleanup(self: *const T, dwThreadCleanupWaitTime: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IComStaThreadPoolKnobs2.VTable, self.vtable).SetWaitTimeForThreadCleanup(@ptrCast(*const IComStaThreadPoolKnobs2, self), dwThreadCleanupWaitTime);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IProcessInitializer_Value = @import("../zig.zig").Guid.initString("1113F52D-DC7F-4943-AED6-88D04027E32A");
pub const IID_IProcessInitializer = &IID_IProcessInitializer_Value;
pub const IProcessInitializer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Startup: fn(
            self: *const IProcessInitializer,
            punkProcessControl: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: fn(
            self: *const IProcessInitializer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProcessInitializer_Startup(self: *const T, punkProcessControl: ?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProcessInitializer.VTable, self.vtable).Startup(@ptrCast(*const IProcessInitializer, self), punkProcessControl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IProcessInitializer_Shutdown(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IProcessInitializer.VTable, self.vtable).Shutdown(@ptrCast(*const IProcessInitializer, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServicePoolConfig_Value = @import("../zig.zig").Guid.initString("A9690656-5BCA-470C-8451-250C1F43A33E");
pub const IID_IServicePoolConfig = &IID_IServicePoolConfig_Value;
pub const IServicePoolConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        put_MaxPoolSize: fn(
            self: *const IServicePoolConfig,
            dwMaxPool: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MaxPoolSize: fn(
            self: *const IServicePoolConfig,
            pdwMaxPool: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MinPoolSize: fn(
            self: *const IServicePoolConfig,
            dwMinPool: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MinPoolSize: fn(
            self: *const IServicePoolConfig,
            pdwMinPool: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CreationTimeout: fn(
            self: *const IServicePoolConfig,
            dwCreationTimeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CreationTimeout: fn(
            self: *const IServicePoolConfig,
            pdwCreationTimeout: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_TransactionAffinity: fn(
            self: *const IServicePoolConfig,
            fTxAffinity: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TransactionAffinity: fn(
            self: *const IServicePoolConfig,
            pfTxAffinity: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_ClassFactory: fn(
            self: *const IServicePoolConfig,
            pFactory: *IClassFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ClassFactory: fn(
            self: *const IServicePoolConfig,
            pFactory: **IClassFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePoolConfig_put_MaxPoolSize(self: *const T, dwMaxPool: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePoolConfig.VTable, self.vtable).put_MaxPoolSize(@ptrCast(*const IServicePoolConfig, self), dwMaxPool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePoolConfig_get_MaxPoolSize(self: *const T, pdwMaxPool: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePoolConfig.VTable, self.vtable).get_MaxPoolSize(@ptrCast(*const IServicePoolConfig, self), pdwMaxPool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePoolConfig_put_MinPoolSize(self: *const T, dwMinPool: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePoolConfig.VTable, self.vtable).put_MinPoolSize(@ptrCast(*const IServicePoolConfig, self), dwMinPool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePoolConfig_get_MinPoolSize(self: *const T, pdwMinPool: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePoolConfig.VTable, self.vtable).get_MinPoolSize(@ptrCast(*const IServicePoolConfig, self), pdwMinPool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePoolConfig_put_CreationTimeout(self: *const T, dwCreationTimeout: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePoolConfig.VTable, self.vtable).put_CreationTimeout(@ptrCast(*const IServicePoolConfig, self), dwCreationTimeout);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePoolConfig_get_CreationTimeout(self: *const T, pdwCreationTimeout: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePoolConfig.VTable, self.vtable).get_CreationTimeout(@ptrCast(*const IServicePoolConfig, self), pdwCreationTimeout);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePoolConfig_put_TransactionAffinity(self: *const T, fTxAffinity: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePoolConfig.VTable, self.vtable).put_TransactionAffinity(@ptrCast(*const IServicePoolConfig, self), fTxAffinity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePoolConfig_get_TransactionAffinity(self: *const T, pfTxAffinity: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePoolConfig.VTable, self.vtable).get_TransactionAffinity(@ptrCast(*const IServicePoolConfig, self), pfTxAffinity);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePoolConfig_put_ClassFactory(self: *const T, pFactory: *IClassFactory) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePoolConfig.VTable, self.vtable).put_ClassFactory(@ptrCast(*const IServicePoolConfig, self), pFactory);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePoolConfig_get_ClassFactory(self: *const T, pFactory: **IClassFactory) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePoolConfig.VTable, self.vtable).get_ClassFactory(@ptrCast(*const IServicePoolConfig, self), pFactory);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IServicePool_Value = @import("../zig.zig").Guid.initString("B302DF81-EA45-451E-99A2-09F9FD1B1E13");
pub const IID_IServicePool = &IID_IServicePool_Value;
pub const IServicePool = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IServicePool,
            pPoolConfig: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: fn(
            self: *const IServicePool,
            riid: *const Guid,
            ppv: **c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: fn(
            self: *const IServicePool,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePool_Initialize(self: *const T, pPoolConfig: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePool.VTable, self.vtable).Initialize(@ptrCast(*const IServicePool, self), pPoolConfig);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePool_GetObject(self: *const T, riid: *const Guid, ppv: **c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePool.VTable, self.vtable).GetObject(@ptrCast(*const IServicePool, self), riid, ppv);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IServicePool_Shutdown(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IServicePool.VTable, self.vtable).Shutdown(@ptrCast(*const IServicePool, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IManagedPooledObj_Value = @import("../zig.zig").Guid.initString("C5DA4BEA-1B42-4437-8926-B6A38860A770");
pub const IID_IManagedPooledObj = &IID_IManagedPooledObj_Value;
pub const IManagedPooledObj = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetHeld: fn(
            self: *const IManagedPooledObj,
            m_bHeld: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IManagedPooledObj_SetHeld(self: *const T, m_bHeld: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IManagedPooledObj.VTable, self.vtable).SetHeld(@ptrCast(*const IManagedPooledObj, self), m_bHeld);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IManagedPoolAction_Value = @import("../zig.zig").Guid.initString("DA91B74E-5388-4783-949D-C1CD5FB00506");
pub const IID_IManagedPoolAction = &IID_IManagedPoolAction_Value;
pub const IManagedPoolAction = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LastRelease: fn(
            self: *const IManagedPoolAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IManagedPoolAction_LastRelease(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IManagedPoolAction.VTable, self.vtable).LastRelease(@ptrCast(*const IManagedPoolAction, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IManagedObjectInfo_Value = @import("../zig.zig").Guid.initString("1427C51A-4584-49D8-90A0-C50D8086CBE9");
pub const IID_IManagedObjectInfo = &IID_IManagedObjectInfo_Value;
pub const IManagedObjectInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIUnknown: fn(
            self: *const IManagedObjectInfo,
            pUnk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIObjectControl: fn(
            self: *const IManagedObjectInfo,
            pCtrl: **IObjectControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInPool: fn(
            self: *const IManagedObjectInfo,
            bInPool: BOOL,
            pPooledObj: *IManagedPooledObj,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWrapperStrength: fn(
            self: *const IManagedObjectInfo,
            bStrong: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IManagedObjectInfo_GetIUnknown(self: *const T, pUnk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IManagedObjectInfo.VTable, self.vtable).GetIUnknown(@ptrCast(*const IManagedObjectInfo, self), pUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IManagedObjectInfo_GetIObjectControl(self: *const T, pCtrl: **IObjectControl) callconv(.Inline) HRESULT {
            return @ptrCast(*const IManagedObjectInfo.VTable, self.vtable).GetIObjectControl(@ptrCast(*const IManagedObjectInfo, self), pCtrl);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IManagedObjectInfo_SetInPool(self: *const T, bInPool: BOOL, pPooledObj: *IManagedPooledObj) callconv(.Inline) HRESULT {
            return @ptrCast(*const IManagedObjectInfo.VTable, self.vtable).SetInPool(@ptrCast(*const IManagedObjectInfo, self), bInPool, pPooledObj);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IManagedObjectInfo_SetWrapperStrength(self: *const T, bStrong: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IManagedObjectInfo.VTable, self.vtable).SetWrapperStrength(@ptrCast(*const IManagedObjectInfo, self), bStrong);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAppDomainHelper_Value = @import("../zig.zig").Guid.initString("C7B67079-8255-42C6-9EC0-6994A3548780");
pub const IID_IAppDomainHelper = &IID_IAppDomainHelper_Value;
pub const IAppDomainHelper = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: fn(
            self: *const IAppDomainHelper,
            pUnkAD: *IUnknown,
            __MIDL__IAppDomainHelper0000: *****HRESULT,
            pPool: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoCallback: fn(
            self: *const IAppDomainHelper,
            pUnkAD: *IUnknown,
            __MIDL__IAppDomainHelper0001: *****HRESULT,
            pPool: *c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppDomainHelper_Initialize(self: *const T, pUnkAD: *IUnknown, __MIDL__IAppDomainHelper0000: *****HRESULT, pPool: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppDomainHelper.VTable, self.vtable).Initialize(@ptrCast(*const IAppDomainHelper, self), pUnkAD, __MIDL__IAppDomainHelper0000, pPool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAppDomainHelper_DoCallback(self: *const T, pUnkAD: *IUnknown, __MIDL__IAppDomainHelper0001: *****HRESULT, pPool: *c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAppDomainHelper.VTable, self.vtable).DoCallback(@ptrCast(*const IAppDomainHelper, self), pUnkAD, __MIDL__IAppDomainHelper0001, pPool);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IAssemblyLocator_Value = @import("../zig.zig").Guid.initString("391FFBB9-A8EE-432A-ABC8-BAA238DAB90F");
pub const IID_IAssemblyLocator = &IID_IAssemblyLocator_Value;
pub const IAssemblyLocator = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetModules: fn(
            self: *const IAssemblyLocator,
            applicationDir: BSTR,
            applicationName: BSTR,
            assemblyName: BSTR,
            pModules: **SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IAssemblyLocator_GetModules(self: *const T, applicationDir: BSTR, applicationName: BSTR, assemblyName: BSTR, pModules: **SAFEARRAY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IAssemblyLocator.VTable, self.vtable).GetModules(@ptrCast(*const IAssemblyLocator, self), applicationDir, applicationName, assemblyName, pModules);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IManagedActivationEvents_Value = @import("../zig.zig").Guid.initString("A5F325AF-572F-46DA-B8AB-827C3D95D99E");
pub const IID_IManagedActivationEvents = &IID_IManagedActivationEvents_Value;
pub const IManagedActivationEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateManagedStub: fn(
            self: *const IManagedActivationEvents,
            pInfo: *IManagedObjectInfo,
            fDist: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyManagedStub: fn(
            self: *const IManagedActivationEvents,
            pInfo: *IManagedObjectInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IManagedActivationEvents_CreateManagedStub(self: *const T, pInfo: *IManagedObjectInfo, fDist: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IManagedActivationEvents.VTable, self.vtable).CreateManagedStub(@ptrCast(*const IManagedActivationEvents, self), pInfo, fDist);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IManagedActivationEvents_DestroyManagedStub(self: *const T, pInfo: *IManagedObjectInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IManagedActivationEvents.VTable, self.vtable).DestroyManagedStub(@ptrCast(*const IManagedActivationEvents, self), pInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISendMethodEvents_Value = @import("../zig.zig").Guid.initString("2732FD59-B2B4-4D44-878C-8B8F09626008");
pub const IID_ISendMethodEvents = &IID_ISendMethodEvents_Value;
pub const ISendMethodEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SendMethodCall: fn(
            self: *const ISendMethodEvents,
            pIdentity: *const c_void,
            riid: *const Guid,
            dwMeth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendMethodReturn: fn(
            self: *const ISendMethodEvents,
            pIdentity: *const c_void,
            riid: *const Guid,
            dwMeth: u32,
            hrCall: HRESULT,
            hrServer: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISendMethodEvents_SendMethodCall(self: *const T, pIdentity: *const c_void, riid: *const Guid, dwMeth: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISendMethodEvents.VTable, self.vtable).SendMethodCall(@ptrCast(*const ISendMethodEvents, self), pIdentity, riid, dwMeth);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISendMethodEvents_SendMethodReturn(self: *const T, pIdentity: *const c_void, riid: *const Guid, dwMeth: u32, hrCall: HRESULT, hrServer: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISendMethodEvents.VTable, self.vtable).SendMethodReturn(@ptrCast(*const ISendMethodEvents, self), pIdentity, riid, dwMeth, hrCall, hrServer);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionResourcePool_Value = @import("../zig.zig").Guid.initString("C5FEB7C1-346A-11D1-B1CC-00AA00BA3258");
pub const IID_ITransactionResourcePool = &IID_ITransactionResourcePool_Value;
pub const ITransactionResourcePool = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PutResource: fn(
            self: *const ITransactionResourcePool,
            pPool: *IObjPool,
            pUnk: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResource: fn(
            self: *const ITransactionResourcePool,
            pPool: *IObjPool,
            ppUnk: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionResourcePool_PutResource(self: *const T, pPool: *IObjPool, pUnk: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionResourcePool.VTable, self.vtable).PutResource(@ptrCast(*const ITransactionResourcePool, self), pPool, pUnk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionResourcePool_GetResource(self: *const T, pPool: *IObjPool, ppUnk: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionResourcePool.VTable, self.vtable).GetResource(@ptrCast(*const ITransactionResourcePool, self), pPool, ppUnk);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IMTSCall_Value = @import("../zig.zig").Guid.initString("51372AEF-CAE7-11CF-BE81-00AA00A2FA25");
pub const IID_IMTSCall = &IID_IMTSCall_Value;
pub const IMTSCall = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCall: fn(
            self: *const IMTSCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMTSCall_OnCall(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMTSCall.VTable, self.vtable).OnCall(@ptrCast(*const IMTSCall, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IContextProperties_Value = @import("../zig.zig").Guid.initString("D396DA85-BF8F-11D1-BBAE-00C04FC2FA5F");
pub const IID_IContextProperties = &IID_IContextProperties_Value;
pub const IContextProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Count: fn(
            self: *const IContextProperties,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IContextProperties,
            name: BSTR,
            pProperty: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumNames: fn(
            self: *const IContextProperties,
            ppenum: **IEnumNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IContextProperties,
            name: BSTR,
            property: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveProperty: fn(
            self: *const IContextProperties,
            name: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextProperties_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextProperties.VTable, self.vtable).Count(@ptrCast(*const IContextProperties, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextProperties_GetProperty(self: *const T, name: BSTR, pProperty: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextProperties.VTable, self.vtable).GetProperty(@ptrCast(*const IContextProperties, self), name, pProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextProperties_EnumNames(self: *const T, ppenum: **IEnumNames) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextProperties.VTable, self.vtable).EnumNames(@ptrCast(*const IContextProperties, self), ppenum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextProperties_SetProperty(self: *const T, name: BSTR, property: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextProperties.VTable, self.vtable).SetProperty(@ptrCast(*const IContextProperties, self), name, property);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContextProperties_RemoveProperty(self: *const T, name: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IContextProperties.VTable, self.vtable).RemoveProperty(@ptrCast(*const IContextProperties, self), name);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IObjPool_Value = @import("../zig.zig").Guid.initString("7D8805A0-2EA7-11D1-B1CC-00AA00BA3258");
pub const IID_IObjPool = &IID_IObjPool_Value;
pub const IObjPool = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reserved1: fn(
            self: *const IObjPool,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved2: fn(
            self: *const IObjPool,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved3: fn(
            self: *const IObjPool,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved4: fn(
            self: *const IObjPool,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PutEndTx: fn(
            self: *const IObjPool,
            pObj: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved5: fn(
            self: *const IObjPool,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved6: fn(
            self: *const IObjPool,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjPool_Reserved1(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IObjPool.VTable, self.vtable).Reserved1(@ptrCast(*const IObjPool, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjPool_Reserved2(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IObjPool.VTable, self.vtable).Reserved2(@ptrCast(*const IObjPool, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjPool_Reserved3(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IObjPool.VTable, self.vtable).Reserved3(@ptrCast(*const IObjPool, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjPool_Reserved4(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IObjPool.VTable, self.vtable).Reserved4(@ptrCast(*const IObjPool, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjPool_PutEndTx(self: *const T, pObj: *IUnknown) callconv(.Inline) void {
            return @ptrCast(*const IObjPool.VTable, self.vtable).PutEndTx(@ptrCast(*const IObjPool, self), pObj);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjPool_Reserved5(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IObjPool.VTable, self.vtable).Reserved5(@ptrCast(*const IObjPool, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IObjPool_Reserved6(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IObjPool.VTable, self.vtable).Reserved6(@ptrCast(*const IObjPool, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ITransactionProperty_Value = @import("../zig.zig").Guid.initString("788EA814-87B1-11D1-BBA6-00C04FC2FA5F");
pub const IID_ITransactionProperty = &IID_ITransactionProperty_Value;
pub const ITransactionProperty = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reserved1: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved2: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved3: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved4: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved5: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved6: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved7: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved8: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved9: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetTransactionResourcePool: fn(
            self: *const ITransactionProperty,
            ppTxPool: **ITransactionResourcePool,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reserved10: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved11: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved12: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved13: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved14: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved15: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved16: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Reserved17: fn(
            self: *const ITransactionProperty,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved1(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved1(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved2(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved2(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved3(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved3(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved4(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved4(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved5(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved5(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved6(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved6(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved7(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved7(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved8(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved8(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved9(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved9(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_GetTransactionResourcePool(self: *const T, ppTxPool: **ITransactionResourcePool) callconv(.Inline) HRESULT {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).GetTransactionResourcePool(@ptrCast(*const ITransactionProperty, self), ppTxPool);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved10(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved10(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved11(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved11(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved12(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved12(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved13(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved13(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved14(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved14(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved15(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved15(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved16(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved16(@ptrCast(*const ITransactionProperty, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ITransactionProperty_Reserved17(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const ITransactionProperty.VTable, self.vtable).Reserved17(@ptrCast(*const ITransactionProperty, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IMTSActivity_Value = @import("../zig.zig").Guid.initString("51372AF0-CAE7-11CF-BE81-00AA00A2FA25");
pub const IID_IMTSActivity = &IID_IMTSActivity_Value;
pub const IMTSActivity = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SynchronousCall: fn(
            self: *const IMTSActivity,
            pCall: *IMTSCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsyncCall: fn(
            self: *const IMTSActivity,
            pCall: *IMTSCall,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reserved1: fn(
            self: *const IMTSActivity,
        ) callconv(@import("std").os.windows.WINAPI) void,
        BindToCurrentThread: fn(
            self: *const IMTSActivity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnbindFromThread: fn(
            self: *const IMTSActivity,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMTSActivity_SynchronousCall(self: *const T, pCall: *IMTSCall) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMTSActivity.VTable, self.vtable).SynchronousCall(@ptrCast(*const IMTSActivity, self), pCall);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMTSActivity_AsyncCall(self: *const T, pCall: *IMTSCall) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMTSActivity.VTable, self.vtable).AsyncCall(@ptrCast(*const IMTSActivity, self), pCall);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMTSActivity_Reserved1(self: *const T) callconv(.Inline) void {
            return @ptrCast(*const IMTSActivity.VTable, self.vtable).Reserved1(@ptrCast(*const IMTSActivity, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMTSActivity_BindToCurrentThread(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMTSActivity.VTable, self.vtable).BindToCurrentThread(@ptrCast(*const IMTSActivity, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMTSActivity_UnbindFromThread(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMTSActivity.VTable, self.vtable).UnbindFromThread(@ptrCast(*const IMTSActivity, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const __MIDL___MIDL_itf_autosvcs_0001_0150_0001 = extern enum(i32) {
    mtsErrCtxAborted = -2147164158,
    mtsErrCtxAborting = -2147164157,
    mtsErrCtxNoContext = -2147164156,
    mtsErrCtxNotRegistered = -2147164155,
    mtsErrCtxSynchTimeout = -2147164154,
    mtsErrCtxOldReference = -2147164153,
    mtsErrCtxRoleNotFound = -2147164148,
    mtsErrCtxNoSecurity = -2147164147,
    mtsErrCtxWrongThread = -2147164146,
    mtsErrCtxTMNotAvailable = -2147164145,
    comQCErrApplicationNotQueued = -2146368000,
    comQCErrNoQueueableInterfaces = -2146367999,
    comQCErrQueuingServiceNotAvailable = -2146367998,
    comQCErrQueueTransactMismatch = -2146367997,
    comqcErrRecorderMarshalled = -2146367996,
    comqcErrOutParam = -2146367995,
    comqcErrRecorderNotTrusted = -2146367994,
    comqcErrPSLoad = -2146367993,
    comqcErrMarshaledObjSameTxn = -2146367992,
    comqcErrInvalidMessage = -2146367920,
    comqcErrMsmqSidUnavailable = -2146367919,
    comqcErrWrongMsgExtension = -2146367918,
    comqcErrMsmqServiceUnavailable = -2146367917,
    comqcErrMsgNotAuthenticated = -2146367916,
    comqcErrMsmqConnectorUsed = -2146367915,
    comqcErrBadMarshaledObject = -2146367914,
};
pub const mtsErrCtxAborted = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.mtsErrCtxAborted;
pub const mtsErrCtxAborting = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.mtsErrCtxAborting;
pub const mtsErrCtxNoContext = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.mtsErrCtxNoContext;
pub const mtsErrCtxNotRegistered = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.mtsErrCtxNotRegistered;
pub const mtsErrCtxSynchTimeout = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.mtsErrCtxSynchTimeout;
pub const mtsErrCtxOldReference = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.mtsErrCtxOldReference;
pub const mtsErrCtxRoleNotFound = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.mtsErrCtxRoleNotFound;
pub const mtsErrCtxNoSecurity = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.mtsErrCtxNoSecurity;
pub const mtsErrCtxWrongThread = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.mtsErrCtxWrongThread;
pub const mtsErrCtxTMNotAvailable = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.mtsErrCtxTMNotAvailable;
pub const comQCErrApplicationNotQueued = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comQCErrApplicationNotQueued;
pub const comQCErrNoQueueableInterfaces = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comQCErrNoQueueableInterfaces;
pub const comQCErrQueuingServiceNotAvailable = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comQCErrQueuingServiceNotAvailable;
pub const comQCErrQueueTransactMismatch = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comQCErrQueueTransactMismatch;
pub const comqcErrRecorderMarshalled = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comqcErrRecorderMarshalled;
pub const comqcErrOutParam = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comqcErrOutParam;
pub const comqcErrRecorderNotTrusted = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comqcErrRecorderNotTrusted;
pub const comqcErrPSLoad = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comqcErrPSLoad;
pub const comqcErrMarshaledObjSameTxn = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comqcErrMarshaledObjSameTxn;
pub const comqcErrInvalidMessage = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comqcErrInvalidMessage;
pub const comqcErrMsmqSidUnavailable = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comqcErrMsmqSidUnavailable;
pub const comqcErrWrongMsgExtension = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comqcErrWrongMsgExtension;
pub const comqcErrMsmqServiceUnavailable = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comqcErrMsmqServiceUnavailable;
pub const comqcErrMsgNotAuthenticated = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comqcErrMsgNotAuthenticated;
pub const comqcErrMsmqConnectorUsed = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comqcErrMsmqConnectorUsed;
pub const comqcErrBadMarshaledObject = __MIDL___MIDL_itf_autosvcs_0001_0150_0001.comqcErrBadMarshaledObject;

pub const __MIDL___MIDL_itf_autosvcs_0001_0159_0001 = extern enum(i32) {
    LockSetGet = 0,
    LockMethod = 1,
};
pub const LockSetGet = __MIDL___MIDL_itf_autosvcs_0001_0159_0001.LockSetGet;
pub const LockMethod = __MIDL___MIDL_itf_autosvcs_0001_0159_0001.LockMethod;

pub const __MIDL___MIDL_itf_autosvcs_0001_0159_0002 = extern enum(i32) {
    Standard = 0,
    Process = 1,
};
// TODO: enum '__MIDL___MIDL_itf_autosvcs_0001_0159_0002' has known value symbol conflicts, skipping the value aliases

pub const CRMFLAGS = extern enum(i32) {
    CRMFLAG_FORGETTARGET = 1,
    CRMFLAG_WRITTENDURINGPREPARE = 2,
    CRMFLAG_WRITTENDURINGCOMMIT = 4,
    CRMFLAG_WRITTENDURINGABORT = 8,
    CRMFLAG_WRITTENDURINGRECOVERY = 16,
    CRMFLAG_WRITTENDURINGREPLAY = 32,
    CRMFLAG_REPLAYINPROGRESS = 64,
};
pub const CRMFLAG_FORGETTARGET = CRMFLAGS.CRMFLAG_FORGETTARGET;
pub const CRMFLAG_WRITTENDURINGPREPARE = CRMFLAGS.CRMFLAG_WRITTENDURINGPREPARE;
pub const CRMFLAG_WRITTENDURINGCOMMIT = CRMFLAGS.CRMFLAG_WRITTENDURINGCOMMIT;
pub const CRMFLAG_WRITTENDURINGABORT = CRMFLAGS.CRMFLAG_WRITTENDURINGABORT;
pub const CRMFLAG_WRITTENDURINGRECOVERY = CRMFLAGS.CRMFLAG_WRITTENDURINGRECOVERY;
pub const CRMFLAG_WRITTENDURINGREPLAY = CRMFLAGS.CRMFLAG_WRITTENDURINGREPLAY;
pub const CRMFLAG_REPLAYINPROGRESS = CRMFLAGS.CRMFLAG_REPLAYINPROGRESS;

pub const CRMREGFLAGS = extern enum(i32) {
    CRMREGFLAG_PREPAREPHASE = 1,
    CRMREGFLAG_COMMITPHASE = 2,
    CRMREGFLAG_ABORTPHASE = 4,
    CRMREGFLAG_ALLPHASES = 7,
    CRMREGFLAG_FAILIFINDOUBTSREMAIN = 16,
};
pub const CRMREGFLAG_PREPAREPHASE = CRMREGFLAGS.CRMREGFLAG_PREPAREPHASE;
pub const CRMREGFLAG_COMMITPHASE = CRMREGFLAGS.CRMREGFLAG_COMMITPHASE;
pub const CRMREGFLAG_ABORTPHASE = CRMREGFLAGS.CRMREGFLAG_ABORTPHASE;
pub const CRMREGFLAG_ALLPHASES = CRMREGFLAGS.CRMREGFLAG_ALLPHASES;
pub const CRMREGFLAG_FAILIFINDOUBTSREMAIN = CRMREGFLAGS.CRMREGFLAG_FAILIFINDOUBTSREMAIN;

const CLSID_CEventSystem_Value = @import("../zig.zig").Guid.initString("4E14FBA2-2E22-11D1-9964-00C04FBBB345");
pub const CLSID_CEventSystem = &CLSID_CEventSystem_Value;

const CLSID_CEventPublisher_Value = @import("../zig.zig").Guid.initString("AB944620-79C6-11D1-88F9-0080C7D771BF");
pub const CLSID_CEventPublisher = &CLSID_CEventPublisher_Value;

const CLSID_CEventClass_Value = @import("../zig.zig").Guid.initString("CDBEC9C0-7A68-11D1-88F9-0080C7D771BF");
pub const CLSID_CEventClass = &CLSID_CEventClass_Value;

const CLSID_CEventSubscription_Value = @import("../zig.zig").Guid.initString("7542E960-79C7-11D1-88F9-0080C7D771BF");
pub const CLSID_CEventSubscription = &CLSID_CEventSubscription_Value;

const CLSID_EventObjectChange_Value = @import("../zig.zig").Guid.initString("D0565000-9DF4-11D1-A281-00C04FCA0AA7");
pub const CLSID_EventObjectChange = &CLSID_EventObjectChange_Value;

const CLSID_EventObjectChange2_Value = @import("../zig.zig").Guid.initString("BB07BACD-CD56-4E63-A8FF-CBF0355FB9F4");
pub const CLSID_EventObjectChange2 = &CLSID_EventObjectChange2_Value;

const IID_IEventSystem_Value = @import("../zig.zig").Guid.initString("4E14FB9F-2E22-11D1-9964-00C04FBBB345");
pub const IID_IEventSystem = &IID_IEventSystem_Value;
pub const IEventSystem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Query: fn(
            self: *const IEventSystem,
            progID: BSTR,
            queryCriteria: BSTR,
            errorIndex: *i32,
            ppInterface: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Store: fn(
            self: *const IEventSystem,
            ProgID: BSTR,
            pInterface: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IEventSystem,
            progID: BSTR,
            queryCriteria: BSTR,
            errorIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EventObjectChangeEventClassID: fn(
            self: *const IEventSystem,
            pbstrEventClassID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryS: fn(
            self: *const IEventSystem,
            progID: BSTR,
            queryCriteria: BSTR,
            ppInterface: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveS: fn(
            self: *const IEventSystem,
            progID: BSTR,
            queryCriteria: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSystem_Query(self: *const T, progID: BSTR, queryCriteria: BSTR, errorIndex: *i32, ppInterface: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSystem.VTable, self.vtable).Query(@ptrCast(*const IEventSystem, self), progID, queryCriteria, errorIndex, ppInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSystem_Store(self: *const T, ProgID: BSTR, pInterface: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSystem.VTable, self.vtable).Store(@ptrCast(*const IEventSystem, self), ProgID, pInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSystem_Remove(self: *const T, progID: BSTR, queryCriteria: BSTR, errorIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSystem.VTable, self.vtable).Remove(@ptrCast(*const IEventSystem, self), progID, queryCriteria, errorIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSystem_get_EventObjectChangeEventClassID(self: *const T, pbstrEventClassID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSystem.VTable, self.vtable).get_EventObjectChangeEventClassID(@ptrCast(*const IEventSystem, self), pbstrEventClassID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSystem_QueryS(self: *const T, progID: BSTR, queryCriteria: BSTR, ppInterface: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSystem.VTable, self.vtable).QueryS(@ptrCast(*const IEventSystem, self), progID, queryCriteria, ppInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSystem_RemoveS(self: *const T, progID: BSTR, queryCriteria: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSystem.VTable, self.vtable).RemoveS(@ptrCast(*const IEventSystem, self), progID, queryCriteria);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEventClass_Value = @import("../zig.zig").Guid.initString("FB2B72A0-7A68-11D1-88F9-0080C7D771BF");
pub const IID_IEventClass = &IID_IEventClass_Value;
pub const IEventClass = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_EventClassID: fn(
            self: *const IEventClass,
            pbstrEventClassID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EventClassID: fn(
            self: *const IEventClass,
            bstrEventClassID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EventClassName: fn(
            self: *const IEventClass,
            pbstrEventClassName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EventClassName: fn(
            self: *const IEventClass,
            bstrEventClassName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OwnerSID: fn(
            self: *const IEventClass,
            pbstrOwnerSID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_OwnerSID: fn(
            self: *const IEventClass,
            bstrOwnerSID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FiringInterfaceID: fn(
            self: *const IEventClass,
            pbstrFiringInterfaceID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_FiringInterfaceID: fn(
            self: *const IEventClass,
            bstrFiringInterfaceID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IEventClass,
            pbstrDescription: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Description: fn(
            self: *const IEventClass,
            bstrDescription: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CustomConfigCLSID: fn(
            self: *const IEventClass,
            pbstrCustomConfigCLSID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_CustomConfigCLSID: fn(
            self: *const IEventClass,
            bstrCustomConfigCLSID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TypeLib: fn(
            self: *const IEventClass,
            pbstrTypeLib: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_TypeLib: fn(
            self: *const IEventClass,
            bstrTypeLib: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_get_EventClassID(self: *const T, pbstrEventClassID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).get_EventClassID(@ptrCast(*const IEventClass, self), pbstrEventClassID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_put_EventClassID(self: *const T, bstrEventClassID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).put_EventClassID(@ptrCast(*const IEventClass, self), bstrEventClassID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_get_EventClassName(self: *const T, pbstrEventClassName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).get_EventClassName(@ptrCast(*const IEventClass, self), pbstrEventClassName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_put_EventClassName(self: *const T, bstrEventClassName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).put_EventClassName(@ptrCast(*const IEventClass, self), bstrEventClassName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_get_OwnerSID(self: *const T, pbstrOwnerSID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).get_OwnerSID(@ptrCast(*const IEventClass, self), pbstrOwnerSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_put_OwnerSID(self: *const T, bstrOwnerSID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).put_OwnerSID(@ptrCast(*const IEventClass, self), bstrOwnerSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_get_FiringInterfaceID(self: *const T, pbstrFiringInterfaceID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).get_FiringInterfaceID(@ptrCast(*const IEventClass, self), pbstrFiringInterfaceID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_put_FiringInterfaceID(self: *const T, bstrFiringInterfaceID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).put_FiringInterfaceID(@ptrCast(*const IEventClass, self), bstrFiringInterfaceID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_get_Description(self: *const T, pbstrDescription: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).get_Description(@ptrCast(*const IEventClass, self), pbstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_put_Description(self: *const T, bstrDescription: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).put_Description(@ptrCast(*const IEventClass, self), bstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_get_CustomConfigCLSID(self: *const T, pbstrCustomConfigCLSID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).get_CustomConfigCLSID(@ptrCast(*const IEventClass, self), pbstrCustomConfigCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_put_CustomConfigCLSID(self: *const T, bstrCustomConfigCLSID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).put_CustomConfigCLSID(@ptrCast(*const IEventClass, self), bstrCustomConfigCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_get_TypeLib(self: *const T, pbstrTypeLib: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).get_TypeLib(@ptrCast(*const IEventClass, self), pbstrTypeLib);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass_put_TypeLib(self: *const T, bstrTypeLib: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass.VTable, self.vtable).put_TypeLib(@ptrCast(*const IEventClass, self), bstrTypeLib);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEventClass2_Value = @import("../zig.zig").Guid.initString("FB2B72A1-7A68-11D1-88F9-0080C7D771BF");
pub const IID_IEventClass2 = &IID_IEventClass2_Value;
pub const IEventClass2 = extern struct {
    pub const VTable = extern struct {
        base: IEventClass.VTable,
        get_PublisherID: fn(
            self: *const IEventClass2,
            pbstrPublisherID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PublisherID: fn(
            self: *const IEventClass2,
            bstrPublisherID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MultiInterfacePublisherFilterCLSID: fn(
            self: *const IEventClass2,
            pbstrPubFilCLSID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MultiInterfacePublisherFilterCLSID: fn(
            self: *const IEventClass2,
            bstrPubFilCLSID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AllowInprocActivation: fn(
            self: *const IEventClass2,
            pfAllowInprocActivation: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AllowInprocActivation: fn(
            self: *const IEventClass2,
            fAllowInprocActivation: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FireInParallel: fn(
            self: *const IEventClass2,
            pfFireInParallel: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_FireInParallel: fn(
            self: *const IEventClass2,
            fFireInParallel: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IEventClass.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass2_get_PublisherID(self: *const T, pbstrPublisherID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass2.VTable, self.vtable).get_PublisherID(@ptrCast(*const IEventClass2, self), pbstrPublisherID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass2_put_PublisherID(self: *const T, bstrPublisherID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass2.VTable, self.vtable).put_PublisherID(@ptrCast(*const IEventClass2, self), bstrPublisherID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass2_get_MultiInterfacePublisherFilterCLSID(self: *const T, pbstrPubFilCLSID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass2.VTable, self.vtable).get_MultiInterfacePublisherFilterCLSID(@ptrCast(*const IEventClass2, self), pbstrPubFilCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass2_put_MultiInterfacePublisherFilterCLSID(self: *const T, bstrPubFilCLSID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass2.VTable, self.vtable).put_MultiInterfacePublisherFilterCLSID(@ptrCast(*const IEventClass2, self), bstrPubFilCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass2_get_AllowInprocActivation(self: *const T, pfAllowInprocActivation: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass2.VTable, self.vtable).get_AllowInprocActivation(@ptrCast(*const IEventClass2, self), pfAllowInprocActivation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass2_put_AllowInprocActivation(self: *const T, fAllowInprocActivation: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass2.VTable, self.vtable).put_AllowInprocActivation(@ptrCast(*const IEventClass2, self), fAllowInprocActivation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass2_get_FireInParallel(self: *const T, pfFireInParallel: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass2.VTable, self.vtable).get_FireInParallel(@ptrCast(*const IEventClass2, self), pfFireInParallel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventClass2_put_FireInParallel(self: *const T, fFireInParallel: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventClass2.VTable, self.vtable).put_FireInParallel(@ptrCast(*const IEventClass2, self), fFireInParallel);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEventSubscription_Value = @import("../zig.zig").Guid.initString("4A6B0E15-2E38-11D1-9965-00C04FBBB345");
pub const IID_IEventSubscription = &IID_IEventSubscription_Value;
pub const IEventSubscription = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_SubscriptionID: fn(
            self: *const IEventSubscription,
            pbstrSubscriptionID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SubscriptionID: fn(
            self: *const IEventSubscription,
            bstrSubscriptionID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SubscriptionName: fn(
            self: *const IEventSubscription,
            pbstrSubscriptionName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SubscriptionName: fn(
            self: *const IEventSubscription,
            bstrSubscriptionName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PublisherID: fn(
            self: *const IEventSubscription,
            pbstrPublisherID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PublisherID: fn(
            self: *const IEventSubscription,
            bstrPublisherID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_EventClassID: fn(
            self: *const IEventSubscription,
            pbstrEventClassID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_EventClassID: fn(
            self: *const IEventSubscription,
            bstrEventClassID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MethodName: fn(
            self: *const IEventSubscription,
            pbstrMethodName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MethodName: fn(
            self: *const IEventSubscription,
            bstrMethodName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SubscriberCLSID: fn(
            self: *const IEventSubscription,
            pbstrSubscriberCLSID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SubscriberCLSID: fn(
            self: *const IEventSubscription,
            bstrSubscriberCLSID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SubscriberInterface: fn(
            self: *const IEventSubscription,
            ppSubscriberInterface: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_SubscriberInterface: fn(
            self: *const IEventSubscription,
            pSubscriberInterface: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PerUser: fn(
            self: *const IEventSubscription,
            pfPerUser: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_PerUser: fn(
            self: *const IEventSubscription,
            fPerUser: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OwnerSID: fn(
            self: *const IEventSubscription,
            pbstrOwnerSID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_OwnerSID: fn(
            self: *const IEventSubscription,
            bstrOwnerSID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Enabled: fn(
            self: *const IEventSubscription,
            pfEnabled: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Enabled: fn(
            self: *const IEventSubscription,
            fEnabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Description: fn(
            self: *const IEventSubscription,
            pbstrDescription: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Description: fn(
            self: *const IEventSubscription,
            bstrDescription: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MachineName: fn(
            self: *const IEventSubscription,
            pbstrMachineName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MachineName: fn(
            self: *const IEventSubscription,
            bstrMachineName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPublisherProperty: fn(
            self: *const IEventSubscription,
            bstrPropertyName: BSTR,
            propertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutPublisherProperty: fn(
            self: *const IEventSubscription,
            bstrPropertyName: BSTR,
            propertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemovePublisherProperty: fn(
            self: *const IEventSubscription,
            bstrPropertyName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPublisherPropertyCollection: fn(
            self: *const IEventSubscription,
            collection: **IEventObjectCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubscriberProperty: fn(
            self: *const IEventSubscription,
            bstrPropertyName: BSTR,
            propertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutSubscriberProperty: fn(
            self: *const IEventSubscription,
            bstrPropertyName: BSTR,
            propertyValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveSubscriberProperty: fn(
            self: *const IEventSubscription,
            bstrPropertyName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubscriberPropertyCollection: fn(
            self: *const IEventSubscription,
            collection: **IEventObjectCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_InterfaceID: fn(
            self: *const IEventSubscription,
            pbstrInterfaceID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_InterfaceID: fn(
            self: *const IEventSubscription,
            bstrInterfaceID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_SubscriptionID(self: *const T, pbstrSubscriptionID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_SubscriptionID(@ptrCast(*const IEventSubscription, self), pbstrSubscriptionID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_SubscriptionID(self: *const T, bstrSubscriptionID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_SubscriptionID(@ptrCast(*const IEventSubscription, self), bstrSubscriptionID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_SubscriptionName(self: *const T, pbstrSubscriptionName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_SubscriptionName(@ptrCast(*const IEventSubscription, self), pbstrSubscriptionName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_SubscriptionName(self: *const T, bstrSubscriptionName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_SubscriptionName(@ptrCast(*const IEventSubscription, self), bstrSubscriptionName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_PublisherID(self: *const T, pbstrPublisherID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_PublisherID(@ptrCast(*const IEventSubscription, self), pbstrPublisherID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_PublisherID(self: *const T, bstrPublisherID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_PublisherID(@ptrCast(*const IEventSubscription, self), bstrPublisherID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_EventClassID(self: *const T, pbstrEventClassID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_EventClassID(@ptrCast(*const IEventSubscription, self), pbstrEventClassID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_EventClassID(self: *const T, bstrEventClassID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_EventClassID(@ptrCast(*const IEventSubscription, self), bstrEventClassID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_MethodName(self: *const T, pbstrMethodName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_MethodName(@ptrCast(*const IEventSubscription, self), pbstrMethodName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_MethodName(self: *const T, bstrMethodName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_MethodName(@ptrCast(*const IEventSubscription, self), bstrMethodName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_SubscriberCLSID(self: *const T, pbstrSubscriberCLSID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_SubscriberCLSID(@ptrCast(*const IEventSubscription, self), pbstrSubscriberCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_SubscriberCLSID(self: *const T, bstrSubscriberCLSID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_SubscriberCLSID(@ptrCast(*const IEventSubscription, self), bstrSubscriberCLSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_SubscriberInterface(self: *const T, ppSubscriberInterface: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_SubscriberInterface(@ptrCast(*const IEventSubscription, self), ppSubscriberInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_SubscriberInterface(self: *const T, pSubscriberInterface: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_SubscriberInterface(@ptrCast(*const IEventSubscription, self), pSubscriberInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_PerUser(self: *const T, pfPerUser: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_PerUser(@ptrCast(*const IEventSubscription, self), pfPerUser);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_PerUser(self: *const T, fPerUser: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_PerUser(@ptrCast(*const IEventSubscription, self), fPerUser);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_OwnerSID(self: *const T, pbstrOwnerSID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_OwnerSID(@ptrCast(*const IEventSubscription, self), pbstrOwnerSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_OwnerSID(self: *const T, bstrOwnerSID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_OwnerSID(@ptrCast(*const IEventSubscription, self), bstrOwnerSID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_Enabled(self: *const T, pfEnabled: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_Enabled(@ptrCast(*const IEventSubscription, self), pfEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_Enabled(self: *const T, fEnabled: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_Enabled(@ptrCast(*const IEventSubscription, self), fEnabled);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_Description(self: *const T, pbstrDescription: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_Description(@ptrCast(*const IEventSubscription, self), pbstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_Description(self: *const T, bstrDescription: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_Description(@ptrCast(*const IEventSubscription, self), bstrDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_MachineName(self: *const T, pbstrMachineName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_MachineName(@ptrCast(*const IEventSubscription, self), pbstrMachineName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_MachineName(self: *const T, bstrMachineName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_MachineName(@ptrCast(*const IEventSubscription, self), bstrMachineName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_GetPublisherProperty(self: *const T, bstrPropertyName: BSTR, propertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).GetPublisherProperty(@ptrCast(*const IEventSubscription, self), bstrPropertyName, propertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_PutPublisherProperty(self: *const T, bstrPropertyName: BSTR, propertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).PutPublisherProperty(@ptrCast(*const IEventSubscription, self), bstrPropertyName, propertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_RemovePublisherProperty(self: *const T, bstrPropertyName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).RemovePublisherProperty(@ptrCast(*const IEventSubscription, self), bstrPropertyName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_GetPublisherPropertyCollection(self: *const T, collection: **IEventObjectCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).GetPublisherPropertyCollection(@ptrCast(*const IEventSubscription, self), collection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_GetSubscriberProperty(self: *const T, bstrPropertyName: BSTR, propertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).GetSubscriberProperty(@ptrCast(*const IEventSubscription, self), bstrPropertyName, propertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_PutSubscriberProperty(self: *const T, bstrPropertyName: BSTR, propertyValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).PutSubscriberProperty(@ptrCast(*const IEventSubscription, self), bstrPropertyName, propertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_RemoveSubscriberProperty(self: *const T, bstrPropertyName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).RemoveSubscriberProperty(@ptrCast(*const IEventSubscription, self), bstrPropertyName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_GetSubscriberPropertyCollection(self: *const T, collection: **IEventObjectCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).GetSubscriberPropertyCollection(@ptrCast(*const IEventSubscription, self), collection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_get_InterfaceID(self: *const T, pbstrInterfaceID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).get_InterfaceID(@ptrCast(*const IEventSubscription, self), pbstrInterfaceID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventSubscription_put_InterfaceID(self: *const T, bstrInterfaceID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventSubscription.VTable, self.vtable).put_InterfaceID(@ptrCast(*const IEventSubscription, self), bstrInterfaceID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IFiringControl_Value = @import("../zig.zig").Guid.initString("E0498C93-4EFE-11D1-9971-00C04FBBB345");
pub const IID_IFiringControl = &IID_IFiringControl_Value;
pub const IFiringControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        FireSubscription: fn(
            self: *const IFiringControl,
            subscription: *IEventSubscription,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IFiringControl_FireSubscription(self: *const T, subscription: *IEventSubscription) callconv(.Inline) HRESULT {
            return @ptrCast(*const IFiringControl.VTable, self.vtable).FireSubscription(@ptrCast(*const IFiringControl, self), subscription);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPublisherFilter_Value = @import("../zig.zig").Guid.initString("465E5CC0-7B26-11D1-88FB-0080C7D771BF");
pub const IID_IPublisherFilter = &IID_IPublisherFilter_Value;
pub const IPublisherFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IPublisherFilter,
            methodName: BSTR,
            dispUserDefined: *IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareToFire: fn(
            self: *const IPublisherFilter,
            methodName: BSTR,
            firingControl: *IFiringControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPublisherFilter_Initialize(self: *const T, methodName: BSTR, dispUserDefined: *IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPublisherFilter.VTable, self.vtable).Initialize(@ptrCast(*const IPublisherFilter, self), methodName, dispUserDefined);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPublisherFilter_PrepareToFire(self: *const T, methodName: BSTR, firingControl: *IFiringControl) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPublisherFilter.VTable, self.vtable).PrepareToFire(@ptrCast(*const IPublisherFilter, self), methodName, firingControl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IMultiInterfacePublisherFilter_Value = @import("../zig.zig").Guid.initString("465E5CC1-7B26-11D1-88FB-0080C7D771BF");
pub const IID_IMultiInterfacePublisherFilter = &IID_IMultiInterfacePublisherFilter_Value;
pub const IMultiInterfacePublisherFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IMultiInterfacePublisherFilter,
            pEIC: *IMultiInterfaceEventControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareToFire: fn(
            self: *const IMultiInterfacePublisherFilter,
            iid: *const Guid,
            methodName: BSTR,
            firingControl: *IFiringControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMultiInterfacePublisherFilter_Initialize(self: *const T, pEIC: *IMultiInterfaceEventControl) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMultiInterfacePublisherFilter.VTable, self.vtable).Initialize(@ptrCast(*const IMultiInterfacePublisherFilter, self), pEIC);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMultiInterfacePublisherFilter_PrepareToFire(self: *const T, iid: *const Guid, methodName: BSTR, firingControl: *IFiringControl) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMultiInterfacePublisherFilter.VTable, self.vtable).PrepareToFire(@ptrCast(*const IMultiInterfacePublisherFilter, self), iid, methodName, firingControl);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEventObjectChange_Value = @import("../zig.zig").Guid.initString("F4A07D70-2E25-11D1-9964-00C04FBBB345");
pub const IID_IEventObjectChange = &IID_IEventObjectChange_Value;
pub const IEventObjectChange = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ChangedSubscription: fn(
            self: *const IEventObjectChange,
            changeType: EOC_ChangeType,
            bstrSubscriptionID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangedEventClass: fn(
            self: *const IEventObjectChange,
            changeType: EOC_ChangeType,
            bstrEventClassID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangedPublisher: fn(
            self: *const IEventObjectChange,
            changeType: EOC_ChangeType,
            bstrPublisherID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventObjectChange_ChangedSubscription(self: *const T, changeType: EOC_ChangeType, bstrSubscriptionID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventObjectChange.VTable, self.vtable).ChangedSubscription(@ptrCast(*const IEventObjectChange, self), changeType, bstrSubscriptionID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventObjectChange_ChangedEventClass(self: *const T, changeType: EOC_ChangeType, bstrEventClassID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventObjectChange.VTable, self.vtable).ChangedEventClass(@ptrCast(*const IEventObjectChange, self), changeType, bstrEventClassID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventObjectChange_ChangedPublisher(self: *const T, changeType: EOC_ChangeType, bstrPublisherID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventObjectChange.VTable, self.vtable).ChangedPublisher(@ptrCast(*const IEventObjectChange, self), changeType, bstrPublisherID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const COMEVENTSYSCHANGEINFO = extern struct {
    cbSize: u32,
    changeType: EOC_ChangeType,
    objectId: BSTR,
    partitionId: BSTR,
    applicationId: BSTR,
    reserved: [10]Guid,
};

const IID_IEventObjectChange2_Value = @import("../zig.zig").Guid.initString("7701A9C3-BD68-438F-83E0-67BF4F53A422");
pub const IID_IEventObjectChange2 = &IID_IEventObjectChange2_Value;
pub const IEventObjectChange2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ChangedSubscription: fn(
            self: *const IEventObjectChange2,
            pInfo: *COMEVENTSYSCHANGEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangedEventClass: fn(
            self: *const IEventObjectChange2,
            pInfo: *COMEVENTSYSCHANGEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventObjectChange2_ChangedSubscription(self: *const T, pInfo: *COMEVENTSYSCHANGEINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventObjectChange2.VTable, self.vtable).ChangedSubscription(@ptrCast(*const IEventObjectChange2, self), pInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventObjectChange2_ChangedEventClass(self: *const T, pInfo: *COMEVENTSYSCHANGEINFO) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventObjectChange2.VTable, self.vtable).ChangedEventClass(@ptrCast(*const IEventObjectChange2, self), pInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumEventObject_Value = @import("../zig.zig").Guid.initString("F4A07D63-2E25-11D1-9964-00C04FBBB345");
pub const IID_IEnumEventObject = &IID_IEnumEventObject_Value;
pub const IEnumEventObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Clone: fn(
            self: *const IEnumEventObject,
            ppInterface: **IEnumEventObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: fn(
            self: *const IEnumEventObject,
            cReqElem: u32,
            ppInterface: [*]*IUnknown,
            cRetElem: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumEventObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumEventObject,
            cSkipElem: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumEventObject_Clone(self: *const T, ppInterface: **IEnumEventObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumEventObject.VTable, self.vtable).Clone(@ptrCast(*const IEnumEventObject, self), ppInterface);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumEventObject_Next(self: *const T, cReqElem: u32, ppInterface: [*]*IUnknown, cRetElem: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumEventObject.VTable, self.vtable).Next(@ptrCast(*const IEnumEventObject, self), cReqElem, ppInterface, cRetElem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumEventObject_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumEventObject.VTable, self.vtable).Reset(@ptrCast(*const IEnumEventObject, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumEventObject_Skip(self: *const T, cSkipElem: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumEventObject.VTable, self.vtable).Skip(@ptrCast(*const IEnumEventObject, self), cSkipElem);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEventObjectCollection_Value = @import("../zig.zig").Guid.initString("F89AC270-D4EB-11D1-B682-00805FC79216");
pub const IID_IEventObjectCollection = &IID_IEventObjectCollection_Value;
pub const IEventObjectCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get__NewEnum: fn(
            self: *const IEventObjectCollection,
            ppUnkEnum: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const IEventObjectCollection,
            objectID: BSTR,
            pItem: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NewEnum: fn(
            self: *const IEventObjectCollection,
            ppEnum: **IEnumEventObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Count: fn(
            self: *const IEventObjectCollection,
            pCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IEventObjectCollection,
            item: *VARIANT,
            objectID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: fn(
            self: *const IEventObjectCollection,
            objectID: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventObjectCollection_get__NewEnum(self: *const T, ppUnkEnum: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventObjectCollection.VTable, self.vtable).get__NewEnum(@ptrCast(*const IEventObjectCollection, self), ppUnkEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventObjectCollection_get_Item(self: *const T, objectID: BSTR, pItem: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventObjectCollection.VTable, self.vtable).get_Item(@ptrCast(*const IEventObjectCollection, self), objectID, pItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventObjectCollection_get_NewEnum(self: *const T, ppEnum: **IEnumEventObject) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventObjectCollection.VTable, self.vtable).get_NewEnum(@ptrCast(*const IEventObjectCollection, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventObjectCollection_get_Count(self: *const T, pCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventObjectCollection.VTable, self.vtable).get_Count(@ptrCast(*const IEventObjectCollection, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventObjectCollection_Add(self: *const T, item: *VARIANT, objectID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventObjectCollection.VTable, self.vtable).Add(@ptrCast(*const IEventObjectCollection, self), item, objectID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventObjectCollection_Remove(self: *const T, objectID: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventObjectCollection.VTable, self.vtable).Remove(@ptrCast(*const IEventObjectCollection, self), objectID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEventControl_Value = @import("../zig.zig").Guid.initString("0343E2F4-86F6-11D1-B760-00C04FB926AF");
pub const IID_IEventControl = &IID_IEventControl_Value;
pub const IEventControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetPublisherFilter: fn(
            self: *const IEventControl,
            methodName: BSTR,
            pPublisherFilter: *IPublisherFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AllowInprocActivation: fn(
            self: *const IEventControl,
            pfAllowInprocActivation: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AllowInprocActivation: fn(
            self: *const IEventControl,
            fAllowInprocActivation: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubscriptions: fn(
            self: *const IEventControl,
            methodName: BSTR,
            optionalCriteria: BSTR,
            optionalErrorIndex: *i32,
            ppCollection: **IEventObjectCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultQuery: fn(
            self: *const IEventControl,
            methodName: BSTR,
            criteria: BSTR,
            errorIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventControl_SetPublisherFilter(self: *const T, methodName: BSTR, pPublisherFilter: *IPublisherFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventControl.VTable, self.vtable).SetPublisherFilter(@ptrCast(*const IEventControl, self), methodName, pPublisherFilter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventControl_get_AllowInprocActivation(self: *const T, pfAllowInprocActivation: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventControl.VTable, self.vtable).get_AllowInprocActivation(@ptrCast(*const IEventControl, self), pfAllowInprocActivation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventControl_put_AllowInprocActivation(self: *const T, fAllowInprocActivation: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventControl.VTable, self.vtable).put_AllowInprocActivation(@ptrCast(*const IEventControl, self), fAllowInprocActivation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventControl_GetSubscriptions(self: *const T, methodName: BSTR, optionalCriteria: BSTR, optionalErrorIndex: *i32, ppCollection: **IEventObjectCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventControl.VTable, self.vtable).GetSubscriptions(@ptrCast(*const IEventControl, self), methodName, optionalCriteria, optionalErrorIndex, ppCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEventControl_SetDefaultQuery(self: *const T, methodName: BSTR, criteria: BSTR, errorIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEventControl.VTable, self.vtable).SetDefaultQuery(@ptrCast(*const IEventControl, self), methodName, criteria, errorIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IMultiInterfaceEventControl_Value = @import("../zig.zig").Guid.initString("0343E2F5-86F6-11D1-B760-00C04FB926AF");
pub const IID_IMultiInterfaceEventControl = &IID_IMultiInterfaceEventControl_Value;
pub const IMultiInterfaceEventControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetMultiInterfacePublisherFilter: fn(
            self: *const IMultiInterfaceEventControl,
            classFilter: *IMultiInterfacePublisherFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubscriptions: fn(
            self: *const IMultiInterfaceEventControl,
            eventIID: *const Guid,
            bstrMethodName: BSTR,
            optionalCriteria: BSTR,
            optionalErrorIndex: *i32,
            ppCollection: **IEventObjectCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultQuery: fn(
            self: *const IMultiInterfaceEventControl,
            eventIID: *const Guid,
            bstrMethodName: BSTR,
            bstrCriteria: BSTR,
            errorIndex: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AllowInprocActivation: fn(
            self: *const IMultiInterfaceEventControl,
            pfAllowInprocActivation: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_AllowInprocActivation: fn(
            self: *const IMultiInterfaceEventControl,
            fAllowInprocActivation: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FireInParallel: fn(
            self: *const IMultiInterfaceEventControl,
            pfFireInParallel: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_FireInParallel: fn(
            self: *const IMultiInterfaceEventControl,
            fFireInParallel: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMultiInterfaceEventControl_SetMultiInterfacePublisherFilter(self: *const T, classFilter: *IMultiInterfacePublisherFilter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMultiInterfaceEventControl.VTable, self.vtable).SetMultiInterfacePublisherFilter(@ptrCast(*const IMultiInterfaceEventControl, self), classFilter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMultiInterfaceEventControl_GetSubscriptions(self: *const T, eventIID: *const Guid, bstrMethodName: BSTR, optionalCriteria: BSTR, optionalErrorIndex: *i32, ppCollection: **IEventObjectCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMultiInterfaceEventControl.VTable, self.vtable).GetSubscriptions(@ptrCast(*const IMultiInterfaceEventControl, self), eventIID, bstrMethodName, optionalCriteria, optionalErrorIndex, ppCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMultiInterfaceEventControl_SetDefaultQuery(self: *const T, eventIID: *const Guid, bstrMethodName: BSTR, bstrCriteria: BSTR, errorIndex: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMultiInterfaceEventControl.VTable, self.vtable).SetDefaultQuery(@ptrCast(*const IMultiInterfaceEventControl, self), eventIID, bstrMethodName, bstrCriteria, errorIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMultiInterfaceEventControl_get_AllowInprocActivation(self: *const T, pfAllowInprocActivation: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMultiInterfaceEventControl.VTable, self.vtable).get_AllowInprocActivation(@ptrCast(*const IMultiInterfaceEventControl, self), pfAllowInprocActivation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMultiInterfaceEventControl_put_AllowInprocActivation(self: *const T, fAllowInprocActivation: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMultiInterfaceEventControl.VTable, self.vtable).put_AllowInprocActivation(@ptrCast(*const IMultiInterfaceEventControl, self), fAllowInprocActivation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMultiInterfaceEventControl_get_FireInParallel(self: *const T, pfFireInParallel: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMultiInterfaceEventControl.VTable, self.vtable).get_FireInParallel(@ptrCast(*const IMultiInterfaceEventControl, self), pfFireInParallel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMultiInterfaceEventControl_put_FireInParallel(self: *const T, fFireInParallel: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMultiInterfaceEventControl.VTable, self.vtable).put_FireInParallel(@ptrCast(*const IMultiInterfaceEventControl, self), fFireInParallel);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IDontSupportEventSubscription_Value = @import("../zig.zig").Guid.initString("784121F1-62A6-4B89-855F-D65F296DE83A");
pub const IID_IDontSupportEventSubscription = &IID_IDontSupportEventSubscription_Value;
pub const IDontSupportEventSubscription = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (9)
//--------------------------------------------------------------------------------
pub extern "comsvcs" fn CoCreateActivity(
    pIUnknown: *IUnknown,
    riid: *const Guid,
    ppObj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "comsvcs" fn CoEnterServiceDomain(
    pConfigObject: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "comsvcs" fn CoLeaveServiceDomain(
    pUnkStatus: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "comsvcs" fn GetManagedExtensions(
    dwExts: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "comsvcs" fn SafeRef(
    rid: *const Guid,
    pUnk: *IUnknown,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "comsvcs" fn RecycleSurrogate(
    lReasonCode: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "comsvcs" fn MTSCreateActivity(
    riid: *const Guid,
    ppobj: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "MTxDM" fn GetDispenserManager(
    param0: **IDispenserManager,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "OLE32" fn CoGetDefaultContext(
    aptType: APTTYPE,
    riid: *const Guid,
    ppv: **c_void,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (17)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const IDispatch = @import("automation.zig").IDispatch;
const SAFEARRAY = @import("automation.zig").SAFEARRAY;
const FILETIME = @import("windows_programming.zig").FILETIME;
const PWSTR = @import("system_services.zig").PWSTR;
const BLOB = @import("win_sock.zig").BLOB;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const BSTR = @import("automation.zig").BSTR;
const PSTR = @import("system_services.zig").PSTR;
const EOC_ChangeType = @import("com.zig").EOC_ChangeType;
const BOOL = @import("system_services.zig").BOOL;
const APTTYPE = @import("com.zig").APTTYPE;
const IClassFactory = @import("com.zig").IClassFactory;
const VARIANT = @import("automation.zig").VARIANT;
const IMoniker = @import("com.zig").IMoniker;
const HANDLE = @import("system_services.zig").HANDLE;

test {
    const constant_export_count = 0;
    const type_export_count = 282;
    const enum_value_export_count = 417;
    const com_iface_id_export_count = 199;
    const com_class_id_export_count = 38;
    const func_export_count = 9;
    const unicode_alias_count = 0;
    const import_count = 17;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

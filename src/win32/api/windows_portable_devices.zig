//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (74)
//--------------------------------------------------------------------------------
pub const DELETE_OBJECT_OPTIONS = extern enum(i32) {
    PORTABLE_DEVICE_DELETE_NO_RECURSION = 0,
    PORTABLE_DEVICE_DELETE_WITH_RECURSION = 1,
};
pub const PORTABLE_DEVICE_DELETE_NO_RECURSION = DELETE_OBJECT_OPTIONS.PORTABLE_DEVICE_DELETE_NO_RECURSION;
pub const PORTABLE_DEVICE_DELETE_WITH_RECURSION = DELETE_OBJECT_OPTIONS.PORTABLE_DEVICE_DELETE_WITH_RECURSION;

pub const WPD_DEVICE_TYPES = extern enum(i32) {
    WPD_DEVICE_TYPE_GENERIC = 0,
    WPD_DEVICE_TYPE_CAMERA = 1,
    WPD_DEVICE_TYPE_MEDIA_PLAYER = 2,
    WPD_DEVICE_TYPE_PHONE = 3,
    WPD_DEVICE_TYPE_VIDEO = 4,
    WPD_DEVICE_TYPE_PERSONAL_INFORMATION_MANAGER = 5,
    WPD_DEVICE_TYPE_AUDIO_RECORDER = 6,
};
pub const WPD_DEVICE_TYPE_GENERIC = WPD_DEVICE_TYPES.WPD_DEVICE_TYPE_GENERIC;
pub const WPD_DEVICE_TYPE_CAMERA = WPD_DEVICE_TYPES.WPD_DEVICE_TYPE_CAMERA;
pub const WPD_DEVICE_TYPE_MEDIA_PLAYER = WPD_DEVICE_TYPES.WPD_DEVICE_TYPE_MEDIA_PLAYER;
pub const WPD_DEVICE_TYPE_PHONE = WPD_DEVICE_TYPES.WPD_DEVICE_TYPE_PHONE;
pub const WPD_DEVICE_TYPE_VIDEO = WPD_DEVICE_TYPES.WPD_DEVICE_TYPE_VIDEO;
pub const WPD_DEVICE_TYPE_PERSONAL_INFORMATION_MANAGER = WPD_DEVICE_TYPES.WPD_DEVICE_TYPE_PERSONAL_INFORMATION_MANAGER;
pub const WPD_DEVICE_TYPE_AUDIO_RECORDER = WPD_DEVICE_TYPES.WPD_DEVICE_TYPE_AUDIO_RECORDER;

pub const WpdAttributeForm = extern enum(i32) {
    WPD_PROPERTY_ATTRIBUTE_FORM_UNSPECIFIED = 0,
    WPD_PROPERTY_ATTRIBUTE_FORM_RANGE = 1,
    WPD_PROPERTY_ATTRIBUTE_FORM_ENUMERATION = 2,
    WPD_PROPERTY_ATTRIBUTE_FORM_REGULAR_EXPRESSION = 3,
    WPD_PROPERTY_ATTRIBUTE_FORM_OBJECT_IDENTIFIER = 4,
};
pub const WPD_PROPERTY_ATTRIBUTE_FORM_UNSPECIFIED = WpdAttributeForm.WPD_PROPERTY_ATTRIBUTE_FORM_UNSPECIFIED;
pub const WPD_PROPERTY_ATTRIBUTE_FORM_RANGE = WpdAttributeForm.WPD_PROPERTY_ATTRIBUTE_FORM_RANGE;
pub const WPD_PROPERTY_ATTRIBUTE_FORM_ENUMERATION = WpdAttributeForm.WPD_PROPERTY_ATTRIBUTE_FORM_ENUMERATION;
pub const WPD_PROPERTY_ATTRIBUTE_FORM_REGULAR_EXPRESSION = WpdAttributeForm.WPD_PROPERTY_ATTRIBUTE_FORM_REGULAR_EXPRESSION;
pub const WPD_PROPERTY_ATTRIBUTE_FORM_OBJECT_IDENTIFIER = WpdAttributeForm.WPD_PROPERTY_ATTRIBUTE_FORM_OBJECT_IDENTIFIER;

pub const WpdParameterAttributeForm = extern enum(i32) {
    WPD_PARAMETER_ATTRIBUTE_FORM_UNSPECIFIED = 0,
    WPD_PARAMETER_ATTRIBUTE_FORM_RANGE = 1,
    WPD_PARAMETER_ATTRIBUTE_FORM_ENUMERATION = 2,
    WPD_PARAMETER_ATTRIBUTE_FORM_REGULAR_EXPRESSION = 3,
    WPD_PARAMETER_ATTRIBUTE_FORM_OBJECT_IDENTIFIER = 4,
};
pub const WPD_PARAMETER_ATTRIBUTE_FORM_UNSPECIFIED = WpdParameterAttributeForm.WPD_PARAMETER_ATTRIBUTE_FORM_UNSPECIFIED;
pub const WPD_PARAMETER_ATTRIBUTE_FORM_RANGE = WpdParameterAttributeForm.WPD_PARAMETER_ATTRIBUTE_FORM_RANGE;
pub const WPD_PARAMETER_ATTRIBUTE_FORM_ENUMERATION = WpdParameterAttributeForm.WPD_PARAMETER_ATTRIBUTE_FORM_ENUMERATION;
pub const WPD_PARAMETER_ATTRIBUTE_FORM_REGULAR_EXPRESSION = WpdParameterAttributeForm.WPD_PARAMETER_ATTRIBUTE_FORM_REGULAR_EXPRESSION;
pub const WPD_PARAMETER_ATTRIBUTE_FORM_OBJECT_IDENTIFIER = WpdParameterAttributeForm.WPD_PARAMETER_ATTRIBUTE_FORM_OBJECT_IDENTIFIER;

pub const WPD_DEVICE_TRANSPORTS = extern enum(i32) {
    WPD_DEVICE_TRANSPORT_UNSPECIFIED = 0,
    WPD_DEVICE_TRANSPORT_USB = 1,
    WPD_DEVICE_TRANSPORT_IP = 2,
    WPD_DEVICE_TRANSPORT_BLUETOOTH = 3,
};
pub const WPD_DEVICE_TRANSPORT_UNSPECIFIED = WPD_DEVICE_TRANSPORTS.WPD_DEVICE_TRANSPORT_UNSPECIFIED;
pub const WPD_DEVICE_TRANSPORT_USB = WPD_DEVICE_TRANSPORTS.WPD_DEVICE_TRANSPORT_USB;
pub const WPD_DEVICE_TRANSPORT_IP = WPD_DEVICE_TRANSPORTS.WPD_DEVICE_TRANSPORT_IP;
pub const WPD_DEVICE_TRANSPORT_BLUETOOTH = WPD_DEVICE_TRANSPORTS.WPD_DEVICE_TRANSPORT_BLUETOOTH;

pub const WPD_STORAGE_TYPE_VALUES = extern enum(i32) {
    WPD_STORAGE_TYPE_UNDEFINED = 0,
    WPD_STORAGE_TYPE_FIXED_ROM = 1,
    WPD_STORAGE_TYPE_REMOVABLE_ROM = 2,
    WPD_STORAGE_TYPE_FIXED_RAM = 3,
    WPD_STORAGE_TYPE_REMOVABLE_RAM = 4,
};
pub const WPD_STORAGE_TYPE_UNDEFINED = WPD_STORAGE_TYPE_VALUES.WPD_STORAGE_TYPE_UNDEFINED;
pub const WPD_STORAGE_TYPE_FIXED_ROM = WPD_STORAGE_TYPE_VALUES.WPD_STORAGE_TYPE_FIXED_ROM;
pub const WPD_STORAGE_TYPE_REMOVABLE_ROM = WPD_STORAGE_TYPE_VALUES.WPD_STORAGE_TYPE_REMOVABLE_ROM;
pub const WPD_STORAGE_TYPE_FIXED_RAM = WPD_STORAGE_TYPE_VALUES.WPD_STORAGE_TYPE_FIXED_RAM;
pub const WPD_STORAGE_TYPE_REMOVABLE_RAM = WPD_STORAGE_TYPE_VALUES.WPD_STORAGE_TYPE_REMOVABLE_RAM;

pub const WPD_STORAGE_ACCESS_CAPABILITY_VALUES = extern enum(i32) {
    WPD_STORAGE_ACCESS_CAPABILITY_READWRITE = 0,
    WPD_STORAGE_ACCESS_CAPABILITY_READ_ONLY_WITHOUT_OBJECT_DELETION = 1,
    WPD_STORAGE_ACCESS_CAPABILITY_READ_ONLY_WITH_OBJECT_DELETION = 2,
};
pub const WPD_STORAGE_ACCESS_CAPABILITY_READWRITE = WPD_STORAGE_ACCESS_CAPABILITY_VALUES.WPD_STORAGE_ACCESS_CAPABILITY_READWRITE;
pub const WPD_STORAGE_ACCESS_CAPABILITY_READ_ONLY_WITHOUT_OBJECT_DELETION = WPD_STORAGE_ACCESS_CAPABILITY_VALUES.WPD_STORAGE_ACCESS_CAPABILITY_READ_ONLY_WITHOUT_OBJECT_DELETION;
pub const WPD_STORAGE_ACCESS_CAPABILITY_READ_ONLY_WITH_OBJECT_DELETION = WPD_STORAGE_ACCESS_CAPABILITY_VALUES.WPD_STORAGE_ACCESS_CAPABILITY_READ_ONLY_WITH_OBJECT_DELETION;

pub const WPD_SMS_ENCODING_TYPES = extern enum(i32) {
    SMS_ENCODING_7_BIT = 0,
    SMS_ENCODING_8_BIT = 1,
    SMS_ENCODING_UTF_16 = 2,
};
pub const SMS_ENCODING_7_BIT = WPD_SMS_ENCODING_TYPES.SMS_ENCODING_7_BIT;
pub const SMS_ENCODING_8_BIT = WPD_SMS_ENCODING_TYPES.SMS_ENCODING_8_BIT;
pub const SMS_ENCODING_UTF_16 = WPD_SMS_ENCODING_TYPES.SMS_ENCODING_UTF_16;

pub const SMS_MESSAGE_TYPES = extern enum(i32) {
    SMS_TEXT_MESSAGE = 0,
    SMS_BINARY_MESSAGE = 1,
};
pub const SMS_TEXT_MESSAGE = SMS_MESSAGE_TYPES.SMS_TEXT_MESSAGE;
pub const SMS_BINARY_MESSAGE = SMS_MESSAGE_TYPES.SMS_BINARY_MESSAGE;

pub const WPD_POWER_SOURCES = extern enum(i32) {
    WPD_POWER_SOURCE_BATTERY = 0,
    WPD_POWER_SOURCE_EXTERNAL = 1,
};
pub const WPD_POWER_SOURCE_BATTERY = WPD_POWER_SOURCES.WPD_POWER_SOURCE_BATTERY;
pub const WPD_POWER_SOURCE_EXTERNAL = WPD_POWER_SOURCES.WPD_POWER_SOURCE_EXTERNAL;

pub const WPD_WHITE_BALANCE_SETTINGS = extern enum(i32) {
    WPD_WHITE_BALANCE_UNDEFINED = 0,
    WPD_WHITE_BALANCE_MANUAL = 1,
    WPD_WHITE_BALANCE_AUTOMATIC = 2,
    WPD_WHITE_BALANCE_ONE_PUSH_AUTOMATIC = 3,
    WPD_WHITE_BALANCE_DAYLIGHT = 4,
    WPD_WHITE_BALANCE_FLORESCENT = 5,
    WPD_WHITE_BALANCE_TUNGSTEN = 6,
    WPD_WHITE_BALANCE_FLASH = 7,
};
pub const WPD_WHITE_BALANCE_UNDEFINED = WPD_WHITE_BALANCE_SETTINGS.WPD_WHITE_BALANCE_UNDEFINED;
pub const WPD_WHITE_BALANCE_MANUAL = WPD_WHITE_BALANCE_SETTINGS.WPD_WHITE_BALANCE_MANUAL;
pub const WPD_WHITE_BALANCE_AUTOMATIC = WPD_WHITE_BALANCE_SETTINGS.WPD_WHITE_BALANCE_AUTOMATIC;
pub const WPD_WHITE_BALANCE_ONE_PUSH_AUTOMATIC = WPD_WHITE_BALANCE_SETTINGS.WPD_WHITE_BALANCE_ONE_PUSH_AUTOMATIC;
pub const WPD_WHITE_BALANCE_DAYLIGHT = WPD_WHITE_BALANCE_SETTINGS.WPD_WHITE_BALANCE_DAYLIGHT;
pub const WPD_WHITE_BALANCE_FLORESCENT = WPD_WHITE_BALANCE_SETTINGS.WPD_WHITE_BALANCE_FLORESCENT;
pub const WPD_WHITE_BALANCE_TUNGSTEN = WPD_WHITE_BALANCE_SETTINGS.WPD_WHITE_BALANCE_TUNGSTEN;
pub const WPD_WHITE_BALANCE_FLASH = WPD_WHITE_BALANCE_SETTINGS.WPD_WHITE_BALANCE_FLASH;

pub const WPD_FOCUS_MODES = extern enum(i32) {
    WPD_FOCUS_UNDEFINED = 0,
    WPD_FOCUS_MANUAL = 1,
    WPD_FOCUS_AUTOMATIC = 2,
    WPD_FOCUS_AUTOMATIC_MACRO = 3,
};
pub const WPD_FOCUS_UNDEFINED = WPD_FOCUS_MODES.WPD_FOCUS_UNDEFINED;
pub const WPD_FOCUS_MANUAL = WPD_FOCUS_MODES.WPD_FOCUS_MANUAL;
pub const WPD_FOCUS_AUTOMATIC = WPD_FOCUS_MODES.WPD_FOCUS_AUTOMATIC;
pub const WPD_FOCUS_AUTOMATIC_MACRO = WPD_FOCUS_MODES.WPD_FOCUS_AUTOMATIC_MACRO;

pub const WPD_EXPOSURE_METERING_MODES = extern enum(i32) {
    WPD_EXPOSURE_METERING_MODE_UNDEFINED = 0,
    WPD_EXPOSURE_METERING_MODE_AVERAGE = 1,
    WPD_EXPOSURE_METERING_MODE_CENTER_WEIGHTED_AVERAGE = 2,
    WPD_EXPOSURE_METERING_MODE_MULTI_SPOT = 3,
    WPD_EXPOSURE_METERING_MODE_CENTER_SPOT = 4,
};
pub const WPD_EXPOSURE_METERING_MODE_UNDEFINED = WPD_EXPOSURE_METERING_MODES.WPD_EXPOSURE_METERING_MODE_UNDEFINED;
pub const WPD_EXPOSURE_METERING_MODE_AVERAGE = WPD_EXPOSURE_METERING_MODES.WPD_EXPOSURE_METERING_MODE_AVERAGE;
pub const WPD_EXPOSURE_METERING_MODE_CENTER_WEIGHTED_AVERAGE = WPD_EXPOSURE_METERING_MODES.WPD_EXPOSURE_METERING_MODE_CENTER_WEIGHTED_AVERAGE;
pub const WPD_EXPOSURE_METERING_MODE_MULTI_SPOT = WPD_EXPOSURE_METERING_MODES.WPD_EXPOSURE_METERING_MODE_MULTI_SPOT;
pub const WPD_EXPOSURE_METERING_MODE_CENTER_SPOT = WPD_EXPOSURE_METERING_MODES.WPD_EXPOSURE_METERING_MODE_CENTER_SPOT;

pub const WPD_FLASH_MODES = extern enum(i32) {
    WPD_FLASH_MODE_UNDEFINED = 0,
    WPD_FLASH_MODE_AUTO = 1,
    WPD_FLASH_MODE_OFF = 2,
    WPD_FLASH_MODE_FILL = 3,
    WPD_FLASH_MODE_RED_EYE_AUTO = 4,
    WPD_FLASH_MODE_RED_EYE_FILL = 5,
    WPD_FLASH_MODE_EXTERNAL_SYNC = 6,
};
pub const WPD_FLASH_MODE_UNDEFINED = WPD_FLASH_MODES.WPD_FLASH_MODE_UNDEFINED;
pub const WPD_FLASH_MODE_AUTO = WPD_FLASH_MODES.WPD_FLASH_MODE_AUTO;
pub const WPD_FLASH_MODE_OFF = WPD_FLASH_MODES.WPD_FLASH_MODE_OFF;
pub const WPD_FLASH_MODE_FILL = WPD_FLASH_MODES.WPD_FLASH_MODE_FILL;
pub const WPD_FLASH_MODE_RED_EYE_AUTO = WPD_FLASH_MODES.WPD_FLASH_MODE_RED_EYE_AUTO;
pub const WPD_FLASH_MODE_RED_EYE_FILL = WPD_FLASH_MODES.WPD_FLASH_MODE_RED_EYE_FILL;
pub const WPD_FLASH_MODE_EXTERNAL_SYNC = WPD_FLASH_MODES.WPD_FLASH_MODE_EXTERNAL_SYNC;

pub const WPD_EXPOSURE_PROGRAM_MODES = extern enum(i32) {
    WPD_EXPOSURE_PROGRAM_MODE_UNDEFINED = 0,
    WPD_EXPOSURE_PROGRAM_MODE_MANUAL = 1,
    WPD_EXPOSURE_PROGRAM_MODE_AUTO = 2,
    WPD_EXPOSURE_PROGRAM_MODE_APERTURE_PRIORITY = 3,
    WPD_EXPOSURE_PROGRAM_MODE_SHUTTER_PRIORITY = 4,
    WPD_EXPOSURE_PROGRAM_MODE_CREATIVE = 5,
    WPD_EXPOSURE_PROGRAM_MODE_ACTION = 6,
    WPD_EXPOSURE_PROGRAM_MODE_PORTRAIT = 7,
};
pub const WPD_EXPOSURE_PROGRAM_MODE_UNDEFINED = WPD_EXPOSURE_PROGRAM_MODES.WPD_EXPOSURE_PROGRAM_MODE_UNDEFINED;
pub const WPD_EXPOSURE_PROGRAM_MODE_MANUAL = WPD_EXPOSURE_PROGRAM_MODES.WPD_EXPOSURE_PROGRAM_MODE_MANUAL;
pub const WPD_EXPOSURE_PROGRAM_MODE_AUTO = WPD_EXPOSURE_PROGRAM_MODES.WPD_EXPOSURE_PROGRAM_MODE_AUTO;
pub const WPD_EXPOSURE_PROGRAM_MODE_APERTURE_PRIORITY = WPD_EXPOSURE_PROGRAM_MODES.WPD_EXPOSURE_PROGRAM_MODE_APERTURE_PRIORITY;
pub const WPD_EXPOSURE_PROGRAM_MODE_SHUTTER_PRIORITY = WPD_EXPOSURE_PROGRAM_MODES.WPD_EXPOSURE_PROGRAM_MODE_SHUTTER_PRIORITY;
pub const WPD_EXPOSURE_PROGRAM_MODE_CREATIVE = WPD_EXPOSURE_PROGRAM_MODES.WPD_EXPOSURE_PROGRAM_MODE_CREATIVE;
pub const WPD_EXPOSURE_PROGRAM_MODE_ACTION = WPD_EXPOSURE_PROGRAM_MODES.WPD_EXPOSURE_PROGRAM_MODE_ACTION;
pub const WPD_EXPOSURE_PROGRAM_MODE_PORTRAIT = WPD_EXPOSURE_PROGRAM_MODES.WPD_EXPOSURE_PROGRAM_MODE_PORTRAIT;

pub const WPD_CAPTURE_MODES = extern enum(i32) {
    WPD_CAPTURE_MODE_UNDEFINED = 0,
    WPD_CAPTURE_MODE_NORMAL = 1,
    WPD_CAPTURE_MODE_BURST = 2,
    WPD_CAPTURE_MODE_TIMELAPSE = 3,
};
pub const WPD_CAPTURE_MODE_UNDEFINED = WPD_CAPTURE_MODES.WPD_CAPTURE_MODE_UNDEFINED;
pub const WPD_CAPTURE_MODE_NORMAL = WPD_CAPTURE_MODES.WPD_CAPTURE_MODE_NORMAL;
pub const WPD_CAPTURE_MODE_BURST = WPD_CAPTURE_MODES.WPD_CAPTURE_MODE_BURST;
pub const WPD_CAPTURE_MODE_TIMELAPSE = WPD_CAPTURE_MODES.WPD_CAPTURE_MODE_TIMELAPSE;

pub const WPD_EFFECT_MODES = extern enum(i32) {
    WPD_EFFECT_MODE_UNDEFINED = 0,
    WPD_EFFECT_MODE_COLOR = 1,
    WPD_EFFECT_MODE_BLACK_AND_WHITE = 2,
    WPD_EFFECT_MODE_SEPIA = 3,
};
pub const WPD_EFFECT_MODE_UNDEFINED = WPD_EFFECT_MODES.WPD_EFFECT_MODE_UNDEFINED;
pub const WPD_EFFECT_MODE_COLOR = WPD_EFFECT_MODES.WPD_EFFECT_MODE_COLOR;
pub const WPD_EFFECT_MODE_BLACK_AND_WHITE = WPD_EFFECT_MODES.WPD_EFFECT_MODE_BLACK_AND_WHITE;
pub const WPD_EFFECT_MODE_SEPIA = WPD_EFFECT_MODES.WPD_EFFECT_MODE_SEPIA;

pub const WPD_FOCUS_METERING_MODES = extern enum(i32) {
    WPD_FOCUS_METERING_MODE_UNDEFINED = 0,
    WPD_FOCUS_METERING_MODE_CENTER_SPOT = 1,
    WPD_FOCUS_METERING_MODE_MULTI_SPOT = 2,
};
pub const WPD_FOCUS_METERING_MODE_UNDEFINED = WPD_FOCUS_METERING_MODES.WPD_FOCUS_METERING_MODE_UNDEFINED;
pub const WPD_FOCUS_METERING_MODE_CENTER_SPOT = WPD_FOCUS_METERING_MODES.WPD_FOCUS_METERING_MODE_CENTER_SPOT;
pub const WPD_FOCUS_METERING_MODE_MULTI_SPOT = WPD_FOCUS_METERING_MODES.WPD_FOCUS_METERING_MODE_MULTI_SPOT;

pub const WPD_BITRATE_TYPES = extern enum(i32) {
    WPD_BITRATE_TYPE_UNUSED = 0,
    WPD_BITRATE_TYPE_DISCRETE = 1,
    WPD_BITRATE_TYPE_VARIABLE = 2,
    WPD_BITRATE_TYPE_FREE = 3,
};
pub const WPD_BITRATE_TYPE_UNUSED = WPD_BITRATE_TYPES.WPD_BITRATE_TYPE_UNUSED;
pub const WPD_BITRATE_TYPE_DISCRETE = WPD_BITRATE_TYPES.WPD_BITRATE_TYPE_DISCRETE;
pub const WPD_BITRATE_TYPE_VARIABLE = WPD_BITRATE_TYPES.WPD_BITRATE_TYPE_VARIABLE;
pub const WPD_BITRATE_TYPE_FREE = WPD_BITRATE_TYPES.WPD_BITRATE_TYPE_FREE;

pub const WPD_META_GENRES = extern enum(i32) {
    WPD_META_GENRE_UNUSED = 0,
    WPD_META_GENRE_GENERIC_MUSIC_AUDIO_FILE = 1,
    WPD_META_GENRE_GENERIC_NON_MUSIC_AUDIO_FILE = 17,
    WPD_META_GENRE_SPOKEN_WORD_AUDIO_BOOK_FILES = 18,
    WPD_META_GENRE_SPOKEN_WORD_FILES_NON_AUDIO_BOOK = 19,
    WPD_META_GENRE_SPOKEN_WORD_NEWS = 20,
    WPD_META_GENRE_SPOKEN_WORD_TALK_SHOWS = 21,
    WPD_META_GENRE_GENERIC_VIDEO_FILE = 33,
    WPD_META_GENRE_NEWS_VIDEO_FILE = 34,
    WPD_META_GENRE_MUSIC_VIDEO_FILE = 35,
    WPD_META_GENRE_HOME_VIDEO_FILE = 36,
    WPD_META_GENRE_FEATURE_FILM_VIDEO_FILE = 37,
    WPD_META_GENRE_TELEVISION_VIDEO_FILE = 38,
    WPD_META_GENRE_TRAINING_EDUCATIONAL_VIDEO_FILE = 39,
    WPD_META_GENRE_PHOTO_MONTAGE_VIDEO_FILE = 40,
    WPD_META_GENRE_GENERIC_NON_AUDIO_NON_VIDEO = 48,
    WPD_META_GENRE_AUDIO_PODCAST = 64,
    WPD_META_GENRE_VIDEO_PODCAST = 65,
    WPD_META_GENRE_MIXED_PODCAST = 66,
};
pub const WPD_META_GENRE_UNUSED = WPD_META_GENRES.WPD_META_GENRE_UNUSED;
pub const WPD_META_GENRE_GENERIC_MUSIC_AUDIO_FILE = WPD_META_GENRES.WPD_META_GENRE_GENERIC_MUSIC_AUDIO_FILE;
pub const WPD_META_GENRE_GENERIC_NON_MUSIC_AUDIO_FILE = WPD_META_GENRES.WPD_META_GENRE_GENERIC_NON_MUSIC_AUDIO_FILE;
pub const WPD_META_GENRE_SPOKEN_WORD_AUDIO_BOOK_FILES = WPD_META_GENRES.WPD_META_GENRE_SPOKEN_WORD_AUDIO_BOOK_FILES;
pub const WPD_META_GENRE_SPOKEN_WORD_FILES_NON_AUDIO_BOOK = WPD_META_GENRES.WPD_META_GENRE_SPOKEN_WORD_FILES_NON_AUDIO_BOOK;
pub const WPD_META_GENRE_SPOKEN_WORD_NEWS = WPD_META_GENRES.WPD_META_GENRE_SPOKEN_WORD_NEWS;
pub const WPD_META_GENRE_SPOKEN_WORD_TALK_SHOWS = WPD_META_GENRES.WPD_META_GENRE_SPOKEN_WORD_TALK_SHOWS;
pub const WPD_META_GENRE_GENERIC_VIDEO_FILE = WPD_META_GENRES.WPD_META_GENRE_GENERIC_VIDEO_FILE;
pub const WPD_META_GENRE_NEWS_VIDEO_FILE = WPD_META_GENRES.WPD_META_GENRE_NEWS_VIDEO_FILE;
pub const WPD_META_GENRE_MUSIC_VIDEO_FILE = WPD_META_GENRES.WPD_META_GENRE_MUSIC_VIDEO_FILE;
pub const WPD_META_GENRE_HOME_VIDEO_FILE = WPD_META_GENRES.WPD_META_GENRE_HOME_VIDEO_FILE;
pub const WPD_META_GENRE_FEATURE_FILM_VIDEO_FILE = WPD_META_GENRES.WPD_META_GENRE_FEATURE_FILM_VIDEO_FILE;
pub const WPD_META_GENRE_TELEVISION_VIDEO_FILE = WPD_META_GENRES.WPD_META_GENRE_TELEVISION_VIDEO_FILE;
pub const WPD_META_GENRE_TRAINING_EDUCATIONAL_VIDEO_FILE = WPD_META_GENRES.WPD_META_GENRE_TRAINING_EDUCATIONAL_VIDEO_FILE;
pub const WPD_META_GENRE_PHOTO_MONTAGE_VIDEO_FILE = WPD_META_GENRES.WPD_META_GENRE_PHOTO_MONTAGE_VIDEO_FILE;
pub const WPD_META_GENRE_GENERIC_NON_AUDIO_NON_VIDEO = WPD_META_GENRES.WPD_META_GENRE_GENERIC_NON_AUDIO_NON_VIDEO;
pub const WPD_META_GENRE_AUDIO_PODCAST = WPD_META_GENRES.WPD_META_GENRE_AUDIO_PODCAST;
pub const WPD_META_GENRE_VIDEO_PODCAST = WPD_META_GENRES.WPD_META_GENRE_VIDEO_PODCAST;
pub const WPD_META_GENRE_MIXED_PODCAST = WPD_META_GENRES.WPD_META_GENRE_MIXED_PODCAST;

pub const WPD_CROPPED_STATUS_VALUES = extern enum(i32) {
    WPD_CROPPED_STATUS_NOT_CROPPED = 0,
    WPD_CROPPED_STATUS_CROPPED = 1,
    WPD_CROPPED_STATUS_SHOULD_NOT_BE_CROPPED = 2,
};
pub const WPD_CROPPED_STATUS_NOT_CROPPED = WPD_CROPPED_STATUS_VALUES.WPD_CROPPED_STATUS_NOT_CROPPED;
pub const WPD_CROPPED_STATUS_CROPPED = WPD_CROPPED_STATUS_VALUES.WPD_CROPPED_STATUS_CROPPED;
pub const WPD_CROPPED_STATUS_SHOULD_NOT_BE_CROPPED = WPD_CROPPED_STATUS_VALUES.WPD_CROPPED_STATUS_SHOULD_NOT_BE_CROPPED;

pub const WPD_COLOR_CORRECTED_STATUS_VALUES = extern enum(i32) {
    WPD_COLOR_CORRECTED_STATUS_NOT_CORRECTED = 0,
    WPD_COLOR_CORRECTED_STATUS_CORRECTED = 1,
    WPD_COLOR_CORRECTED_STATUS_SHOULD_NOT_BE_CORRECTED = 2,
};
pub const WPD_COLOR_CORRECTED_STATUS_NOT_CORRECTED = WPD_COLOR_CORRECTED_STATUS_VALUES.WPD_COLOR_CORRECTED_STATUS_NOT_CORRECTED;
pub const WPD_COLOR_CORRECTED_STATUS_CORRECTED = WPD_COLOR_CORRECTED_STATUS_VALUES.WPD_COLOR_CORRECTED_STATUS_CORRECTED;
pub const WPD_COLOR_CORRECTED_STATUS_SHOULD_NOT_BE_CORRECTED = WPD_COLOR_CORRECTED_STATUS_VALUES.WPD_COLOR_CORRECTED_STATUS_SHOULD_NOT_BE_CORRECTED;

pub const WPD_VIDEO_SCAN_TYPES = extern enum(i32) {
    WPD_VIDEO_SCAN_TYPE_UNUSED = 0,
    WPD_VIDEO_SCAN_TYPE_PROGRESSIVE = 1,
    WPD_VIDEO_SCAN_TYPE_FIELD_INTERLEAVED_UPPER_FIRST = 2,
    WPD_VIDEO_SCAN_TYPE_FIELD_INTERLEAVED_LOWER_FIRST = 3,
    WPD_VIDEO_SCAN_TYPE_FIELD_SINGLE_UPPER_FIRST = 4,
    WPD_VIDEO_SCAN_TYPE_FIELD_SINGLE_LOWER_FIRST = 5,
    WPD_VIDEO_SCAN_TYPE_MIXED_INTERLACE = 6,
    WPD_VIDEO_SCAN_TYPE_MIXED_INTERLACE_AND_PROGRESSIVE = 7,
};
pub const WPD_VIDEO_SCAN_TYPE_UNUSED = WPD_VIDEO_SCAN_TYPES.WPD_VIDEO_SCAN_TYPE_UNUSED;
pub const WPD_VIDEO_SCAN_TYPE_PROGRESSIVE = WPD_VIDEO_SCAN_TYPES.WPD_VIDEO_SCAN_TYPE_PROGRESSIVE;
pub const WPD_VIDEO_SCAN_TYPE_FIELD_INTERLEAVED_UPPER_FIRST = WPD_VIDEO_SCAN_TYPES.WPD_VIDEO_SCAN_TYPE_FIELD_INTERLEAVED_UPPER_FIRST;
pub const WPD_VIDEO_SCAN_TYPE_FIELD_INTERLEAVED_LOWER_FIRST = WPD_VIDEO_SCAN_TYPES.WPD_VIDEO_SCAN_TYPE_FIELD_INTERLEAVED_LOWER_FIRST;
pub const WPD_VIDEO_SCAN_TYPE_FIELD_SINGLE_UPPER_FIRST = WPD_VIDEO_SCAN_TYPES.WPD_VIDEO_SCAN_TYPE_FIELD_SINGLE_UPPER_FIRST;
pub const WPD_VIDEO_SCAN_TYPE_FIELD_SINGLE_LOWER_FIRST = WPD_VIDEO_SCAN_TYPES.WPD_VIDEO_SCAN_TYPE_FIELD_SINGLE_LOWER_FIRST;
pub const WPD_VIDEO_SCAN_TYPE_MIXED_INTERLACE = WPD_VIDEO_SCAN_TYPES.WPD_VIDEO_SCAN_TYPE_MIXED_INTERLACE;
pub const WPD_VIDEO_SCAN_TYPE_MIXED_INTERLACE_AND_PROGRESSIVE = WPD_VIDEO_SCAN_TYPES.WPD_VIDEO_SCAN_TYPE_MIXED_INTERLACE_AND_PROGRESSIVE;

pub const WPD_OPERATION_STATES = extern enum(i32) {
    WPD_OPERATION_STATE_UNSPECIFIED = 0,
    WPD_OPERATION_STATE_STARTED = 1,
    WPD_OPERATION_STATE_RUNNING = 2,
    WPD_OPERATION_STATE_PAUSED = 3,
    WPD_OPERATION_STATE_CANCELLED = 4,
    WPD_OPERATION_STATE_FINISHED = 5,
    WPD_OPERATION_STATE_ABORTED = 6,
};
pub const WPD_OPERATION_STATE_UNSPECIFIED = WPD_OPERATION_STATES.WPD_OPERATION_STATE_UNSPECIFIED;
pub const WPD_OPERATION_STATE_STARTED = WPD_OPERATION_STATES.WPD_OPERATION_STATE_STARTED;
pub const WPD_OPERATION_STATE_RUNNING = WPD_OPERATION_STATES.WPD_OPERATION_STATE_RUNNING;
pub const WPD_OPERATION_STATE_PAUSED = WPD_OPERATION_STATES.WPD_OPERATION_STATE_PAUSED;
pub const WPD_OPERATION_STATE_CANCELLED = WPD_OPERATION_STATES.WPD_OPERATION_STATE_CANCELLED;
pub const WPD_OPERATION_STATE_FINISHED = WPD_OPERATION_STATES.WPD_OPERATION_STATE_FINISHED;
pub const WPD_OPERATION_STATE_ABORTED = WPD_OPERATION_STATES.WPD_OPERATION_STATE_ABORTED;

pub const WPD_SECTION_DATA_UNITS_VALUES = extern enum(i32) {
    WPD_SECTION_DATA_UNITS_BYTES = 0,
    WPD_SECTION_DATA_UNITS_MILLISECONDS = 1,
};
pub const WPD_SECTION_DATA_UNITS_BYTES = WPD_SECTION_DATA_UNITS_VALUES.WPD_SECTION_DATA_UNITS_BYTES;
pub const WPD_SECTION_DATA_UNITS_MILLISECONDS = WPD_SECTION_DATA_UNITS_VALUES.WPD_SECTION_DATA_UNITS_MILLISECONDS;

pub const WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPES = extern enum(i32) {
    WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPE_OBJECT = 0,
    WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPE_RESOURCE = 1,
};
pub const WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPE_OBJECT = WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPES.WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPE_OBJECT;
pub const WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPE_RESOURCE = WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPES.WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPE_RESOURCE;

pub const WPD_COMMAND_ACCESS_TYPES = extern enum(i32) {
    WPD_COMMAND_ACCESS_READ = 1,
    WPD_COMMAND_ACCESS_READWRITE = 3,
    WPD_COMMAND_ACCESS_FROM_PROPERTY_WITH_STGM_ACCESS = 4,
    WPD_COMMAND_ACCESS_FROM_PROPERTY_WITH_FILE_ACCESS = 8,
    WPD_COMMAND_ACCESS_FROM_ATTRIBUTE_WITH_METHOD_ACCESS = 16,
};
pub const WPD_COMMAND_ACCESS_READ = WPD_COMMAND_ACCESS_TYPES.WPD_COMMAND_ACCESS_READ;
pub const WPD_COMMAND_ACCESS_READWRITE = WPD_COMMAND_ACCESS_TYPES.WPD_COMMAND_ACCESS_READWRITE;
pub const WPD_COMMAND_ACCESS_FROM_PROPERTY_WITH_STGM_ACCESS = WPD_COMMAND_ACCESS_TYPES.WPD_COMMAND_ACCESS_FROM_PROPERTY_WITH_STGM_ACCESS;
pub const WPD_COMMAND_ACCESS_FROM_PROPERTY_WITH_FILE_ACCESS = WPD_COMMAND_ACCESS_TYPES.WPD_COMMAND_ACCESS_FROM_PROPERTY_WITH_FILE_ACCESS;
pub const WPD_COMMAND_ACCESS_FROM_ATTRIBUTE_WITH_METHOD_ACCESS = WPD_COMMAND_ACCESS_TYPES.WPD_COMMAND_ACCESS_FROM_ATTRIBUTE_WITH_METHOD_ACCESS;

pub const WPD_SERVICE_INHERITANCE_TYPES = extern enum(i32) {
    WPD_SERVICE_INHERITANCE_IMPLEMENTATION = 0,
};
pub const WPD_SERVICE_INHERITANCE_IMPLEMENTATION = WPD_SERVICE_INHERITANCE_TYPES.WPD_SERVICE_INHERITANCE_IMPLEMENTATION;

pub const WPD_PARAMETER_USAGE_TYPES = extern enum(i32) {
    WPD_PARAMETER_USAGE_RETURN = 0,
    WPD_PARAMETER_USAGE_IN = 1,
    WPD_PARAMETER_USAGE_OUT = 2,
    WPD_PARAMETER_USAGE_INOUT = 3,
};
pub const WPD_PARAMETER_USAGE_RETURN = WPD_PARAMETER_USAGE_TYPES.WPD_PARAMETER_USAGE_RETURN;
pub const WPD_PARAMETER_USAGE_IN = WPD_PARAMETER_USAGE_TYPES.WPD_PARAMETER_USAGE_IN;
pub const WPD_PARAMETER_USAGE_OUT = WPD_PARAMETER_USAGE_TYPES.WPD_PARAMETER_USAGE_OUT;
pub const WPD_PARAMETER_USAGE_INOUT = WPD_PARAMETER_USAGE_TYPES.WPD_PARAMETER_USAGE_INOUT;

pub const WPD_COMMAND_ACCESS_LOOKUP_ENTRY = extern struct {
    Command: PROPERTYKEY,
    AccessType: u32,
    AccessProperty: PROPERTYKEY,
};

const CLSID_WpdSerializer_Value = @import("../zig.zig").Guid.initString("0B91A74B-AD7C-4A9D-B563-29EEF9167172");
pub const CLSID_WpdSerializer = &CLSID_WpdSerializer_Value;

const CLSID_PortableDeviceValues_Value = @import("../zig.zig").Guid.initString("0C15D503-D017-47CE-9016-7B3F978721CC");
pub const CLSID_PortableDeviceValues = &CLSID_PortableDeviceValues_Value;

const CLSID_PortableDeviceKeyCollection_Value = @import("../zig.zig").Guid.initString("DE2D022D-2480-43BE-97F0-D1FA2CF98F4F");
pub const CLSID_PortableDeviceKeyCollection = &CLSID_PortableDeviceKeyCollection_Value;

const CLSID_PortableDevicePropVariantCollection_Value = @import("../zig.zig").Guid.initString("08A99E2F-6D6D-4B80-AF5A-BAF2BCBE4CB9");
pub const CLSID_PortableDevicePropVariantCollection = &CLSID_PortableDevicePropVariantCollection_Value;

const CLSID_PortableDeviceValuesCollection_Value = @import("../zig.zig").Guid.initString("3882134D-14CF-4220-9CB4-435F86D83F60");
pub const CLSID_PortableDeviceValuesCollection = &CLSID_PortableDeviceValuesCollection_Value;

pub const WPD_STREAM_UNITS = extern enum(i32) {
    BYTES = 0,
    FRAMES = 1,
    ROWS = 2,
    MILLISECONDS = 4,
    MICROSECONDS = 8,
};
pub const WPD_STREAM_UNITS_BYTES = WPD_STREAM_UNITS.BYTES;
pub const WPD_STREAM_UNITS_FRAMES = WPD_STREAM_UNITS.FRAMES;
pub const WPD_STREAM_UNITS_ROWS = WPD_STREAM_UNITS.ROWS;
pub const WPD_STREAM_UNITS_MILLISECONDS = WPD_STREAM_UNITS.MILLISECONDS;
pub const WPD_STREAM_UNITS_MICROSECONDS = WPD_STREAM_UNITS.MICROSECONDS;

const IID_IWpdSerializer_Value = @import("../zig.zig").Guid.initString("B32F4002-BB27-45FF-AF4F-06631C1E8DAD");
pub const IID_IWpdSerializer = &IID_IWpdSerializer_Value;
pub const IWpdSerializer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIPortableDeviceValuesFromBuffer: fn(
            self: *const IWpdSerializer,
            pBuffer: [*:0]u8,
            dwInputBufferLength: u32,
            ppParams: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteIPortableDeviceValuesToBuffer: fn(
            self: *const IWpdSerializer,
            dwOutputBufferLength: u32,
            pResults: *IPortableDeviceValues,
            pBuffer: [*:0]u8,
            pdwBytesWritten: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferFromIPortableDeviceValues: fn(
            self: *const IWpdSerializer,
            pSource: *IPortableDeviceValues,
            ppBuffer: [*]*u8,
            pdwBufferSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSerializedSize: fn(
            self: *const IWpdSerializer,
            pSource: *IPortableDeviceValues,
            pdwSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWpdSerializer_GetIPortableDeviceValuesFromBuffer(self: *const T, pBuffer: [*:0]u8, dwInputBufferLength: u32, ppParams: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWpdSerializer.VTable, self.vtable).GetIPortableDeviceValuesFromBuffer(@ptrCast(*const IWpdSerializer, self), pBuffer, dwInputBufferLength, ppParams);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWpdSerializer_WriteIPortableDeviceValuesToBuffer(self: *const T, dwOutputBufferLength: u32, pResults: *IPortableDeviceValues, pBuffer: [*:0]u8, pdwBytesWritten: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWpdSerializer.VTable, self.vtable).WriteIPortableDeviceValuesToBuffer(@ptrCast(*const IWpdSerializer, self), dwOutputBufferLength, pResults, pBuffer, pdwBytesWritten);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWpdSerializer_GetBufferFromIPortableDeviceValues(self: *const T, pSource: *IPortableDeviceValues, ppBuffer: [*]*u8, pdwBufferSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWpdSerializer.VTable, self.vtable).GetBufferFromIPortableDeviceValues(@ptrCast(*const IWpdSerializer, self), pSource, ppBuffer, pdwBufferSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWpdSerializer_GetSerializedSize(self: *const T, pSource: *IPortableDeviceValues, pdwSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWpdSerializer.VTable, self.vtable).GetSerializedSize(@ptrCast(*const IWpdSerializer, self), pSource, pdwSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceValues_Value = @import("../zig.zig").Guid.initString("6848F6F2-3155-4F86-B6F5-263EEEAB3143");
pub const IID_IPortableDeviceValues = &IID_IPortableDeviceValues_Value;
pub const IPortableDeviceValues = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IPortableDeviceValues,
            pcelt: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IPortableDeviceValues,
            index: u32,
            pKey: *PROPERTYKEY,
            pValue: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStringValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            Value: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnsignedIntegerValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            Value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnsignedIntegerValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignedIntegerValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            Value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignedIntegerValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnsignedLargeIntegerValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            Value: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnsignedLargeIntegerValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignedLargeIntegerValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            Value: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignedLargeIntegerValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFloatValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            Value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFloatValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetErrorValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            Value: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKeyValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            Value: *const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBoolValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            Value: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBoolValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIUnknownValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIUnknownValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            ppValue: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGuidValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            Value: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGuidValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBufferValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: [*:0]u8,
            cbValue: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            ppValue: [*]*u8,
            pcbValue: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIPortableDeviceValuesValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIPortableDeviceValuesValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            ppValue: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIPortableDevicePropVariantCollectionValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIPortableDevicePropVariantCollectionValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            ppValue: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIPortableDeviceKeyCollectionValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIPortableDeviceKeyCollectionValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            ppValue: **IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIPortableDeviceValuesCollectionValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            pValue: *IPortableDeviceValuesCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIPortableDeviceValuesCollectionValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
            ppValue: **IPortableDeviceValuesCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveValue: fn(
            self: *const IPortableDeviceValues,
            key: *const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyValuesFromPropertyStore: fn(
            self: *const IPortableDeviceValues,
            pStore: *IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyValuesToPropertyStore: fn(
            self: *const IPortableDeviceValues,
            pStore: *IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetCount(self: *const T, pcelt: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetCount(@ptrCast(*const IPortableDeviceValues, self), pcelt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetAt(self: *const T, index: u32, pKey: *PROPERTYKEY, pValue: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetAt(@ptrCast(*const IPortableDeviceValues, self), index, pKey, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetValue(self: *const T, key: *const PROPERTYKEY, pValue: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetValue(self: *const T, key: *const PROPERTYKEY, pValue: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetStringValue(self: *const T, key: *const PROPERTYKEY, Value: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetStringValue(@ptrCast(*const IPortableDeviceValues, self), key, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetStringValue(self: *const T, key: *const PROPERTYKEY, pValue: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetStringValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetUnsignedIntegerValue(self: *const T, key: *const PROPERTYKEY, Value: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetUnsignedIntegerValue(@ptrCast(*const IPortableDeviceValues, self), key, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetUnsignedIntegerValue(self: *const T, key: *const PROPERTYKEY, pValue: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetUnsignedIntegerValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetSignedIntegerValue(self: *const T, key: *const PROPERTYKEY, Value: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetSignedIntegerValue(@ptrCast(*const IPortableDeviceValues, self), key, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetSignedIntegerValue(self: *const T, key: *const PROPERTYKEY, pValue: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetSignedIntegerValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetUnsignedLargeIntegerValue(self: *const T, key: *const PROPERTYKEY, Value: u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetUnsignedLargeIntegerValue(@ptrCast(*const IPortableDeviceValues, self), key, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetUnsignedLargeIntegerValue(self: *const T, key: *const PROPERTYKEY, pValue: *u64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetUnsignedLargeIntegerValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetSignedLargeIntegerValue(self: *const T, key: *const PROPERTYKEY, Value: i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetSignedLargeIntegerValue(@ptrCast(*const IPortableDeviceValues, self), key, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetSignedLargeIntegerValue(self: *const T, key: *const PROPERTYKEY, pValue: *i64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetSignedLargeIntegerValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetFloatValue(self: *const T, key: *const PROPERTYKEY, Value: f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetFloatValue(@ptrCast(*const IPortableDeviceValues, self), key, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetFloatValue(self: *const T, key: *const PROPERTYKEY, pValue: *f32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetFloatValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetErrorValue(self: *const T, key: *const PROPERTYKEY, Value: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetErrorValue(@ptrCast(*const IPortableDeviceValues, self), key, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetErrorValue(self: *const T, key: *const PROPERTYKEY, pValue: *HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetErrorValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetKeyValue(self: *const T, key: *const PROPERTYKEY, Value: *const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetKeyValue(@ptrCast(*const IPortableDeviceValues, self), key, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetKeyValue(self: *const T, key: *const PROPERTYKEY, pValue: *PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetKeyValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetBoolValue(self: *const T, key: *const PROPERTYKEY, Value: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetBoolValue(@ptrCast(*const IPortableDeviceValues, self), key, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetBoolValue(self: *const T, key: *const PROPERTYKEY, pValue: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetBoolValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetIUnknownValue(self: *const T, key: *const PROPERTYKEY, pValue: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetIUnknownValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetIUnknownValue(self: *const T, key: *const PROPERTYKEY, ppValue: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetIUnknownValue(@ptrCast(*const IPortableDeviceValues, self), key, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetGuidValue(self: *const T, key: *const PROPERTYKEY, Value: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetGuidValue(@ptrCast(*const IPortableDeviceValues, self), key, Value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetGuidValue(self: *const T, key: *const PROPERTYKEY, pValue: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetGuidValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetBufferValue(self: *const T, key: *const PROPERTYKEY, pValue: [*:0]u8, cbValue: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetBufferValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue, cbValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetBufferValue(self: *const T, key: *const PROPERTYKEY, ppValue: [*]*u8, pcbValue: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetBufferValue(@ptrCast(*const IPortableDeviceValues, self), key, ppValue, pcbValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetIPortableDeviceValuesValue(self: *const T, key: *const PROPERTYKEY, pValue: *IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetIPortableDeviceValuesValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetIPortableDeviceValuesValue(self: *const T, key: *const PROPERTYKEY, ppValue: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetIPortableDeviceValuesValue(@ptrCast(*const IPortableDeviceValues, self), key, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetIPortableDevicePropVariantCollectionValue(self: *const T, key: *const PROPERTYKEY, pValue: *IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetIPortableDevicePropVariantCollectionValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetIPortableDevicePropVariantCollectionValue(self: *const T, key: *const PROPERTYKEY, ppValue: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetIPortableDevicePropVariantCollectionValue(@ptrCast(*const IPortableDeviceValues, self), key, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetIPortableDeviceKeyCollectionValue(self: *const T, key: *const PROPERTYKEY, pValue: *IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetIPortableDeviceKeyCollectionValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetIPortableDeviceKeyCollectionValue(self: *const T, key: *const PROPERTYKEY, ppValue: **IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetIPortableDeviceKeyCollectionValue(@ptrCast(*const IPortableDeviceValues, self), key, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_SetIPortableDeviceValuesCollectionValue(self: *const T, key: *const PROPERTYKEY, pValue: *IPortableDeviceValuesCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).SetIPortableDeviceValuesCollectionValue(@ptrCast(*const IPortableDeviceValues, self), key, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_GetIPortableDeviceValuesCollectionValue(self: *const T, key: *const PROPERTYKEY, ppValue: **IPortableDeviceValuesCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).GetIPortableDeviceValuesCollectionValue(@ptrCast(*const IPortableDeviceValues, self), key, ppValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_RemoveValue(self: *const T, key: *const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).RemoveValue(@ptrCast(*const IPortableDeviceValues, self), key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_CopyValuesFromPropertyStore(self: *const T, pStore: *IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).CopyValuesFromPropertyStore(@ptrCast(*const IPortableDeviceValues, self), pStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_CopyValuesToPropertyStore(self: *const T, pStore: *IPropertyStore) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).CopyValuesToPropertyStore(@ptrCast(*const IPortableDeviceValues, self), pStore);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValues_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValues.VTable, self.vtable).Clear(@ptrCast(*const IPortableDeviceValues, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceKeyCollection_Value = @import("../zig.zig").Guid.initString("DADA2357-E0AD-492E-98DB-DD61C53BA353");
pub const IID_IPortableDeviceKeyCollection = &IID_IPortableDeviceKeyCollection_Value;
pub const IPortableDeviceKeyCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IPortableDeviceKeyCollection,
            pcElems: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IPortableDeviceKeyCollection,
            dwIndex: u32,
            pKey: *PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IPortableDeviceKeyCollection,
            Key: *const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IPortableDeviceKeyCollection,
            dwIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceKeyCollection_GetCount(self: *const T, pcElems: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceKeyCollection.VTable, self.vtable).GetCount(@ptrCast(*const IPortableDeviceKeyCollection, self), pcElems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceKeyCollection_GetAt(self: *const T, dwIndex: u32, pKey: *PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceKeyCollection.VTable, self.vtable).GetAt(@ptrCast(*const IPortableDeviceKeyCollection, self), dwIndex, pKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceKeyCollection_Add(self: *const T, Key: *const PROPERTYKEY) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceKeyCollection.VTable, self.vtable).Add(@ptrCast(*const IPortableDeviceKeyCollection, self), Key);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceKeyCollection_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceKeyCollection.VTable, self.vtable).Clear(@ptrCast(*const IPortableDeviceKeyCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceKeyCollection_RemoveAt(self: *const T, dwIndex: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceKeyCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IPortableDeviceKeyCollection, self), dwIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDevicePropVariantCollection_Value = @import("../zig.zig").Guid.initString("89B2E422-4F1B-4316-BCEF-A44AFEA83EB3");
pub const IID_IPortableDevicePropVariantCollection = &IID_IPortableDevicePropVariantCollection_Value;
pub const IPortableDevicePropVariantCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IPortableDevicePropVariantCollection,
            pcElems: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IPortableDevicePropVariantCollection,
            dwIndex: u32,
            pValue: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IPortableDevicePropVariantCollection,
            pValue: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: fn(
            self: *const IPortableDevicePropVariantCollection,
            pvt: *u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangeType: fn(
            self: *const IPortableDevicePropVariantCollection,
            vt: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IPortableDevicePropVariantCollection,
            dwIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropVariantCollection_GetCount(self: *const T, pcElems: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropVariantCollection.VTable, self.vtable).GetCount(@ptrCast(*const IPortableDevicePropVariantCollection, self), pcElems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropVariantCollection_GetAt(self: *const T, dwIndex: u32, pValue: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropVariantCollection.VTable, self.vtable).GetAt(@ptrCast(*const IPortableDevicePropVariantCollection, self), dwIndex, pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropVariantCollection_Add(self: *const T, pValue: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropVariantCollection.VTable, self.vtable).Add(@ptrCast(*const IPortableDevicePropVariantCollection, self), pValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropVariantCollection_GetType(self: *const T, pvt: *u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropVariantCollection.VTable, self.vtable).GetType(@ptrCast(*const IPortableDevicePropVariantCollection, self), pvt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropVariantCollection_ChangeType(self: *const T, vt: u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropVariantCollection.VTable, self.vtable).ChangeType(@ptrCast(*const IPortableDevicePropVariantCollection, self), vt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropVariantCollection_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropVariantCollection.VTable, self.vtable).Clear(@ptrCast(*const IPortableDevicePropVariantCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropVariantCollection_RemoveAt(self: *const T, dwIndex: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropVariantCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IPortableDevicePropVariantCollection, self), dwIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceValuesCollection_Value = @import("../zig.zig").Guid.initString("6E3F2D79-4E07-48C4-8208-D8C2E5AF4A99");
pub const IID_IPortableDeviceValuesCollection = &IID_IPortableDeviceValuesCollection_Value;
pub const IPortableDeviceValuesCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: fn(
            self: *const IPortableDeviceValuesCollection,
            pcElems: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: fn(
            self: *const IPortableDeviceValuesCollection,
            dwIndex: u32,
            ppValues: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IPortableDeviceValuesCollection,
            pValues: *IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: fn(
            self: *const IPortableDeviceValuesCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: fn(
            self: *const IPortableDeviceValuesCollection,
            dwIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValuesCollection_GetCount(self: *const T, pcElems: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValuesCollection.VTable, self.vtable).GetCount(@ptrCast(*const IPortableDeviceValuesCollection, self), pcElems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValuesCollection_GetAt(self: *const T, dwIndex: u32, ppValues: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValuesCollection.VTable, self.vtable).GetAt(@ptrCast(*const IPortableDeviceValuesCollection, self), dwIndex, ppValues);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValuesCollection_Add(self: *const T, pValues: *IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValuesCollection.VTable, self.vtable).Add(@ptrCast(*const IPortableDeviceValuesCollection, self), pValues);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValuesCollection_Clear(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValuesCollection.VTable, self.vtable).Clear(@ptrCast(*const IPortableDeviceValuesCollection, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceValuesCollection_RemoveAt(self: *const T, dwIndex: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceValuesCollection.VTable, self.vtable).RemoveAt(@ptrCast(*const IPortableDeviceValuesCollection, self), dwIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_PortableDevice_Value = @import("../zig.zig").Guid.initString("728A21C5-3D9E-48D7-9810-864848F0F404");
pub const CLSID_PortableDevice = &CLSID_PortableDevice_Value;

const CLSID_PortableDeviceManager_Value = @import("../zig.zig").Guid.initString("0AF10CEC-2ECD-4B92-9581-34F6AE0637F3");
pub const CLSID_PortableDeviceManager = &CLSID_PortableDeviceManager_Value;

const CLSID_PortableDeviceService_Value = @import("../zig.zig").Guid.initString("EF5DB4C2-9312-422C-9152-411CD9C4DD84");
pub const CLSID_PortableDeviceService = &CLSID_PortableDeviceService_Value;

const CLSID_PortableDeviceDispatchFactory_Value = @import("../zig.zig").Guid.initString("43232233-8338-4658-AE01-0B4AE830B6B0");
pub const CLSID_PortableDeviceDispatchFactory = &CLSID_PortableDeviceDispatchFactory_Value;

const CLSID_PortableDeviceFTM_Value = @import("../zig.zig").Guid.initString("F7C0039A-4762-488A-B4B3-760EF9A1BA9B");
pub const CLSID_PortableDeviceFTM = &CLSID_PortableDeviceFTM_Value;

const CLSID_PortableDeviceServiceFTM_Value = @import("../zig.zig").Guid.initString("1649B154-C794-497A-9B03-F3F0121302F3");
pub const CLSID_PortableDeviceServiceFTM = &CLSID_PortableDeviceServiceFTM_Value;

const CLSID_PortableDeviceWebControl_Value = @import("../zig.zig").Guid.initString("186DD02C-2DEC-41B5-A7D4-B59056FADE51");
pub const CLSID_PortableDeviceWebControl = &CLSID_PortableDeviceWebControl_Value;

const IID_IPortableDeviceManager_Value = @import("../zig.zig").Guid.initString("A1567595-4C2F-4574-A6FA-ECEF917B9A40");
pub const IID_IPortableDeviceManager = &IID_IPortableDeviceManager_Value;
pub const IPortableDeviceManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDevices: fn(
            self: *const IPortableDeviceManager,
            pPnPDeviceIDs: *PWSTR,
            pcPnPDeviceIDs: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshDeviceList: fn(
            self: *const IPortableDeviceManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceFriendlyName: fn(
            self: *const IPortableDeviceManager,
            pszPnPDeviceID: [*:0]const u16,
            pDeviceFriendlyName: PWSTR,
            pcchDeviceFriendlyName: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceDescription: fn(
            self: *const IPortableDeviceManager,
            pszPnPDeviceID: [*:0]const u16,
            pDeviceDescription: PWSTR,
            pcchDeviceDescription: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceManufacturer: fn(
            self: *const IPortableDeviceManager,
            pszPnPDeviceID: [*:0]const u16,
            pDeviceManufacturer: PWSTR,
            pcchDeviceManufacturer: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceProperty: fn(
            self: *const IPortableDeviceManager,
            pszPnPDeviceID: [*:0]const u16,
            pszDevicePropertyName: [*:0]const u16,
            pData: *u8,
            pcbData: *u32,
            pdwType: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivateDevices: fn(
            self: *const IPortableDeviceManager,
            pPnPDeviceIDs: *PWSTR,
            pcPnPDeviceIDs: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceManager_GetDevices(self: *const T, pPnPDeviceIDs: *PWSTR, pcPnPDeviceIDs: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceManager.VTable, self.vtable).GetDevices(@ptrCast(*const IPortableDeviceManager, self), pPnPDeviceIDs, pcPnPDeviceIDs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceManager_RefreshDeviceList(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceManager.VTable, self.vtable).RefreshDeviceList(@ptrCast(*const IPortableDeviceManager, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceManager_GetDeviceFriendlyName(self: *const T, pszPnPDeviceID: [*:0]const u16, pDeviceFriendlyName: PWSTR, pcchDeviceFriendlyName: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceManager.VTable, self.vtable).GetDeviceFriendlyName(@ptrCast(*const IPortableDeviceManager, self), pszPnPDeviceID, pDeviceFriendlyName, pcchDeviceFriendlyName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceManager_GetDeviceDescription(self: *const T, pszPnPDeviceID: [*:0]const u16, pDeviceDescription: PWSTR, pcchDeviceDescription: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceManager.VTable, self.vtable).GetDeviceDescription(@ptrCast(*const IPortableDeviceManager, self), pszPnPDeviceID, pDeviceDescription, pcchDeviceDescription);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceManager_GetDeviceManufacturer(self: *const T, pszPnPDeviceID: [*:0]const u16, pDeviceManufacturer: PWSTR, pcchDeviceManufacturer: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceManager.VTable, self.vtable).GetDeviceManufacturer(@ptrCast(*const IPortableDeviceManager, self), pszPnPDeviceID, pDeviceManufacturer, pcchDeviceManufacturer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceManager_GetDeviceProperty(self: *const T, pszPnPDeviceID: [*:0]const u16, pszDevicePropertyName: [*:0]const u16, pData: *u8, pcbData: *u32, pdwType: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceManager.VTable, self.vtable).GetDeviceProperty(@ptrCast(*const IPortableDeviceManager, self), pszPnPDeviceID, pszDevicePropertyName, pData, pcbData, pdwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceManager_GetPrivateDevices(self: *const T, pPnPDeviceIDs: *PWSTR, pcPnPDeviceIDs: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceManager.VTable, self.vtable).GetPrivateDevices(@ptrCast(*const IPortableDeviceManager, self), pPnPDeviceIDs, pcPnPDeviceIDs);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDevice_Value = @import("../zig.zig").Guid.initString("625E2DF8-6392-4CF0-9AD1-3CFA5F17775C");
pub const IID_IPortableDevice = &IID_IPortableDevice_Value;
pub const IPortableDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: fn(
            self: *const IPortableDevice,
            pszPnPDeviceID: [*:0]const u16,
            pClientInfo: *IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendCommand: fn(
            self: *const IPortableDevice,
            dwFlags: u32,
            pParameters: *IPortableDeviceValues,
            ppResults: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Content: fn(
            self: *const IPortableDevice,
            ppContent: **IPortableDeviceContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Capabilities: fn(
            self: *const IPortableDevice,
            ppCapabilities: **IPortableDeviceCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IPortableDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IPortableDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: fn(
            self: *const IPortableDevice,
            dwFlags: u32,
            pCallback: *IPortableDeviceEventCallback,
            pParameters: *IPortableDeviceValues,
            ppszCookie: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const IPortableDevice,
            pszCookie: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPnPDeviceID: fn(
            self: *const IPortableDevice,
            ppszPnPDeviceID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevice_Open(self: *const T, pszPnPDeviceID: [*:0]const u16, pClientInfo: *IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevice.VTable, self.vtable).Open(@ptrCast(*const IPortableDevice, self), pszPnPDeviceID, pClientInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevice_SendCommand(self: *const T, dwFlags: u32, pParameters: *IPortableDeviceValues, ppResults: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevice.VTable, self.vtable).SendCommand(@ptrCast(*const IPortableDevice, self), dwFlags, pParameters, ppResults);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevice_Content(self: *const T, ppContent: **IPortableDeviceContent) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevice.VTable, self.vtable).Content(@ptrCast(*const IPortableDevice, self), ppContent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevice_Capabilities(self: *const T, ppCapabilities: **IPortableDeviceCapabilities) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevice.VTable, self.vtable).Capabilities(@ptrCast(*const IPortableDevice, self), ppCapabilities);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevice_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevice.VTable, self.vtable).Cancel(@ptrCast(*const IPortableDevice, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevice_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevice.VTable, self.vtable).Close(@ptrCast(*const IPortableDevice, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevice_Advise(self: *const T, dwFlags: u32, pCallback: *IPortableDeviceEventCallback, pParameters: *IPortableDeviceValues, ppszCookie: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevice.VTable, self.vtable).Advise(@ptrCast(*const IPortableDevice, self), dwFlags, pCallback, pParameters, ppszCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevice_Unadvise(self: *const T, pszCookie: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevice.VTable, self.vtable).Unadvise(@ptrCast(*const IPortableDevice, self), pszCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevice_GetPnPDeviceID(self: *const T, ppszPnPDeviceID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevice.VTable, self.vtable).GetPnPDeviceID(@ptrCast(*const IPortableDevice, self), ppszPnPDeviceID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceContent_Value = @import("../zig.zig").Guid.initString("6A96ED84-7C73-4480-9938-BF5AF477D426");
pub const IID_IPortableDeviceContent = &IID_IPortableDeviceContent_Value;
pub const IPortableDeviceContent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumObjects: fn(
            self: *const IPortableDeviceContent,
            dwFlags: u32,
            pszParentObjectID: [*:0]const u16,
            pFilter: *IPortableDeviceValues,
            ppEnum: **IEnumPortableDeviceObjectIDs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Properties: fn(
            self: *const IPortableDeviceContent,
            ppProperties: **IPortableDeviceProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Transfer: fn(
            self: *const IPortableDeviceContent,
            ppResources: **IPortableDeviceResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateObjectWithPropertiesOnly: fn(
            self: *const IPortableDeviceContent,
            pValues: *IPortableDeviceValues,
            ppszObjectID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateObjectWithPropertiesAndData: fn(
            self: *const IPortableDeviceContent,
            pValues: *IPortableDeviceValues,
            ppData: **IStream,
            pdwOptimalWriteBufferSize: *u32,
            ppszCookie: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IPortableDeviceContent,
            dwOptions: u32,
            pObjectIDs: *IPortableDevicePropVariantCollection,
            ppResults: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectIDsFromPersistentUniqueIDs: fn(
            self: *const IPortableDeviceContent,
            pPersistentUniqueIDs: *IPortableDevicePropVariantCollection,
            ppObjectIDs: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IPortableDeviceContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: fn(
            self: *const IPortableDeviceContent,
            pObjectIDs: *IPortableDevicePropVariantCollection,
            pszDestinationFolderObjectID: [*:0]const u16,
            ppResults: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Copy: fn(
            self: *const IPortableDeviceContent,
            pObjectIDs: *IPortableDevicePropVariantCollection,
            pszDestinationFolderObjectID: [*:0]const u16,
            ppResults: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceContent_EnumObjects(self: *const T, dwFlags: u32, pszParentObjectID: [*:0]const u16, pFilter: *IPortableDeviceValues, ppEnum: **IEnumPortableDeviceObjectIDs) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceContent.VTable, self.vtable).EnumObjects(@ptrCast(*const IPortableDeviceContent, self), dwFlags, pszParentObjectID, pFilter, ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceContent_Properties(self: *const T, ppProperties: **IPortableDeviceProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceContent.VTable, self.vtable).Properties(@ptrCast(*const IPortableDeviceContent, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceContent_Transfer(self: *const T, ppResources: **IPortableDeviceResources) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceContent.VTable, self.vtable).Transfer(@ptrCast(*const IPortableDeviceContent, self), ppResources);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceContent_CreateObjectWithPropertiesOnly(self: *const T, pValues: *IPortableDeviceValues, ppszObjectID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceContent.VTable, self.vtable).CreateObjectWithPropertiesOnly(@ptrCast(*const IPortableDeviceContent, self), pValues, ppszObjectID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceContent_CreateObjectWithPropertiesAndData(self: *const T, pValues: *IPortableDeviceValues, ppData: **IStream, pdwOptimalWriteBufferSize: *u32, ppszCookie: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceContent.VTable, self.vtable).CreateObjectWithPropertiesAndData(@ptrCast(*const IPortableDeviceContent, self), pValues, ppData, pdwOptimalWriteBufferSize, ppszCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceContent_Delete(self: *const T, dwOptions: u32, pObjectIDs: *IPortableDevicePropVariantCollection, ppResults: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceContent.VTable, self.vtable).Delete(@ptrCast(*const IPortableDeviceContent, self), dwOptions, pObjectIDs, ppResults);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceContent_GetObjectIDsFromPersistentUniqueIDs(self: *const T, pPersistentUniqueIDs: *IPortableDevicePropVariantCollection, ppObjectIDs: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceContent.VTable, self.vtable).GetObjectIDsFromPersistentUniqueIDs(@ptrCast(*const IPortableDeviceContent, self), pPersistentUniqueIDs, ppObjectIDs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceContent_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceContent.VTable, self.vtable).Cancel(@ptrCast(*const IPortableDeviceContent, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceContent_Move(self: *const T, pObjectIDs: *IPortableDevicePropVariantCollection, pszDestinationFolderObjectID: [*:0]const u16, ppResults: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceContent.VTable, self.vtable).Move(@ptrCast(*const IPortableDeviceContent, self), pObjectIDs, pszDestinationFolderObjectID, ppResults);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceContent_Copy(self: *const T, pObjectIDs: *IPortableDevicePropVariantCollection, pszDestinationFolderObjectID: [*:0]const u16, ppResults: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceContent.VTable, self.vtable).Copy(@ptrCast(*const IPortableDeviceContent, self), pObjectIDs, pszDestinationFolderObjectID, ppResults);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceContent2_Value = @import("../zig.zig").Guid.initString("9B4ADD96-F6BF-4034-8708-ECA72BF10554");
pub const IID_IPortableDeviceContent2 = &IID_IPortableDeviceContent2_Value;
pub const IPortableDeviceContent2 = extern struct {
    pub const VTable = extern struct {
        base: IPortableDeviceContent.VTable,
        UpdateObjectWithPropertiesAndData: fn(
            self: *const IPortableDeviceContent2,
            pszObjectID: [*:0]const u16,
            pProperties: *IPortableDeviceValues,
            ppData: **IStream,
            pdwOptimalWriteBufferSize: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPortableDeviceContent.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceContent2_UpdateObjectWithPropertiesAndData(self: *const T, pszObjectID: [*:0]const u16, pProperties: *IPortableDeviceValues, ppData: **IStream, pdwOptimalWriteBufferSize: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceContent2.VTable, self.vtable).UpdateObjectWithPropertiesAndData(@ptrCast(*const IPortableDeviceContent2, self), pszObjectID, pProperties, ppData, pdwOptimalWriteBufferSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumPortableDeviceObjectIDs_Value = @import("../zig.zig").Guid.initString("10ECE955-CF41-4728-BFA0-41EEDF1BBF19");
pub const IID_IEnumPortableDeviceObjectIDs = &IID_IEnumPortableDeviceObjectIDs_Value;
pub const IEnumPortableDeviceObjectIDs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumPortableDeviceObjectIDs,
            cObjects: u32,
            pObjIDs: [*]PWSTR,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumPortableDeviceObjectIDs,
            cObjects: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumPortableDeviceObjectIDs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumPortableDeviceObjectIDs,
            ppEnum: **IEnumPortableDeviceObjectIDs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IEnumPortableDeviceObjectIDs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumPortableDeviceObjectIDs_Next(self: *const T, cObjects: u32, pObjIDs: [*]PWSTR, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumPortableDeviceObjectIDs.VTable, self.vtable).Next(@ptrCast(*const IEnumPortableDeviceObjectIDs, self), cObjects, pObjIDs, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumPortableDeviceObjectIDs_Skip(self: *const T, cObjects: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumPortableDeviceObjectIDs.VTable, self.vtable).Skip(@ptrCast(*const IEnumPortableDeviceObjectIDs, self), cObjects);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumPortableDeviceObjectIDs_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumPortableDeviceObjectIDs.VTable, self.vtable).Reset(@ptrCast(*const IEnumPortableDeviceObjectIDs, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumPortableDeviceObjectIDs_Clone(self: *const T, ppEnum: **IEnumPortableDeviceObjectIDs) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumPortableDeviceObjectIDs.VTable, self.vtable).Clone(@ptrCast(*const IEnumPortableDeviceObjectIDs, self), ppEnum);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumPortableDeviceObjectIDs_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumPortableDeviceObjectIDs.VTable, self.vtable).Cancel(@ptrCast(*const IEnumPortableDeviceObjectIDs, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceProperties_Value = @import("../zig.zig").Guid.initString("7F6D695C-03DF-4439-A809-59266BEEE3A6");
pub const IID_IPortableDeviceProperties = &IID_IPortableDeviceProperties_Value;
pub const IPortableDeviceProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSupportedProperties: fn(
            self: *const IPortableDeviceProperties,
            pszObjectID: [*:0]const u16,
            ppKeys: **IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyAttributes: fn(
            self: *const IPortableDeviceProperties,
            pszObjectID: [*:0]const u16,
            Key: *const PROPERTYKEY,
            ppAttributes: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValues: fn(
            self: *const IPortableDeviceProperties,
            pszObjectID: [*:0]const u16,
            pKeys: *IPortableDeviceKeyCollection,
            ppValues: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValues: fn(
            self: *const IPortableDeviceProperties,
            pszObjectID: [*:0]const u16,
            pValues: *IPortableDeviceValues,
            ppResults: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IPortableDeviceProperties,
            pszObjectID: [*:0]const u16,
            pKeys: *IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IPortableDeviceProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceProperties_GetSupportedProperties(self: *const T, pszObjectID: [*:0]const u16, ppKeys: **IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceProperties.VTable, self.vtable).GetSupportedProperties(@ptrCast(*const IPortableDeviceProperties, self), pszObjectID, ppKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceProperties_GetPropertyAttributes(self: *const T, pszObjectID: [*:0]const u16, Key: *const PROPERTYKEY, ppAttributes: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceProperties.VTable, self.vtable).GetPropertyAttributes(@ptrCast(*const IPortableDeviceProperties, self), pszObjectID, Key, ppAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceProperties_GetValues(self: *const T, pszObjectID: [*:0]const u16, pKeys: *IPortableDeviceKeyCollection, ppValues: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceProperties.VTable, self.vtable).GetValues(@ptrCast(*const IPortableDeviceProperties, self), pszObjectID, pKeys, ppValues);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceProperties_SetValues(self: *const T, pszObjectID: [*:0]const u16, pValues: *IPortableDeviceValues, ppResults: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceProperties.VTable, self.vtable).SetValues(@ptrCast(*const IPortableDeviceProperties, self), pszObjectID, pValues, ppResults);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceProperties_Delete(self: *const T, pszObjectID: [*:0]const u16, pKeys: *IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceProperties.VTable, self.vtable).Delete(@ptrCast(*const IPortableDeviceProperties, self), pszObjectID, pKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceProperties_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceProperties.VTable, self.vtable).Cancel(@ptrCast(*const IPortableDeviceProperties, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceResources_Value = @import("../zig.zig").Guid.initString("FD8878AC-D841-4D17-891C-E6829CDB6934");
pub const IID_IPortableDeviceResources = &IID_IPortableDeviceResources_Value;
pub const IPortableDeviceResources = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSupportedResources: fn(
            self: *const IPortableDeviceResources,
            pszObjectID: [*:0]const u16,
            ppKeys: **IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResourceAttributes: fn(
            self: *const IPortableDeviceResources,
            pszObjectID: [*:0]const u16,
            Key: *const PROPERTYKEY,
            ppResourceAttributes: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: fn(
            self: *const IPortableDeviceResources,
            pszObjectID: [*:0]const u16,
            Key: *const PROPERTYKEY,
            dwMode: u32,
            pdwOptimalBufferSize: *u32,
            ppStream: **IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const IPortableDeviceResources,
            pszObjectID: [*:0]const u16,
            pKeys: *IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IPortableDeviceResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateResource: fn(
            self: *const IPortableDeviceResources,
            pResourceAttributes: *IPortableDeviceValues,
            ppData: **IStream,
            pdwOptimalWriteBufferSize: *u32,
            ppszCookie: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceResources_GetSupportedResources(self: *const T, pszObjectID: [*:0]const u16, ppKeys: **IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceResources.VTable, self.vtable).GetSupportedResources(@ptrCast(*const IPortableDeviceResources, self), pszObjectID, ppKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceResources_GetResourceAttributes(self: *const T, pszObjectID: [*:0]const u16, Key: *const PROPERTYKEY, ppResourceAttributes: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceResources.VTable, self.vtable).GetResourceAttributes(@ptrCast(*const IPortableDeviceResources, self), pszObjectID, Key, ppResourceAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceResources_GetStream(self: *const T, pszObjectID: [*:0]const u16, Key: *const PROPERTYKEY, dwMode: u32, pdwOptimalBufferSize: *u32, ppStream: **IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceResources.VTable, self.vtable).GetStream(@ptrCast(*const IPortableDeviceResources, self), pszObjectID, Key, dwMode, pdwOptimalBufferSize, ppStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceResources_Delete(self: *const T, pszObjectID: [*:0]const u16, pKeys: *IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceResources.VTable, self.vtable).Delete(@ptrCast(*const IPortableDeviceResources, self), pszObjectID, pKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceResources_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceResources.VTable, self.vtable).Cancel(@ptrCast(*const IPortableDeviceResources, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceResources_CreateResource(self: *const T, pResourceAttributes: *IPortableDeviceValues, ppData: **IStream, pdwOptimalWriteBufferSize: *u32, ppszCookie: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceResources.VTable, self.vtable).CreateResource(@ptrCast(*const IPortableDeviceResources, self), pResourceAttributes, ppData, pdwOptimalWriteBufferSize, ppszCookie);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceCapabilities_Value = @import("../zig.zig").Guid.initString("2C8C6DBF-E3DC-4061-BECC-8542E810D126");
pub const IID_IPortableDeviceCapabilities = &IID_IPortableDeviceCapabilities_Value;
pub const IPortableDeviceCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSupportedCommands: fn(
            self: *const IPortableDeviceCapabilities,
            ppCommands: **IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommandOptions: fn(
            self: *const IPortableDeviceCapabilities,
            Command: *const PROPERTYKEY,
            ppOptions: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFunctionalCategories: fn(
            self: *const IPortableDeviceCapabilities,
            ppCategories: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFunctionalObjects: fn(
            self: *const IPortableDeviceCapabilities,
            Category: *const Guid,
            ppObjectIDs: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedContentTypes: fn(
            self: *const IPortableDeviceCapabilities,
            Category: *const Guid,
            ppContentTypes: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedFormats: fn(
            self: *const IPortableDeviceCapabilities,
            ContentType: *const Guid,
            ppFormats: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedFormatProperties: fn(
            self: *const IPortableDeviceCapabilities,
            Format: *const Guid,
            ppKeys: **IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFixedPropertyAttributes: fn(
            self: *const IPortableDeviceCapabilities,
            Format: *const Guid,
            Key: *const PROPERTYKEY,
            ppAttributes: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IPortableDeviceCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedEvents: fn(
            self: *const IPortableDeviceCapabilities,
            ppEvents: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventOptions: fn(
            self: *const IPortableDeviceCapabilities,
            Event: *const Guid,
            ppOptions: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceCapabilities_GetSupportedCommands(self: *const T, ppCommands: **IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceCapabilities.VTable, self.vtable).GetSupportedCommands(@ptrCast(*const IPortableDeviceCapabilities, self), ppCommands);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceCapabilities_GetCommandOptions(self: *const T, Command: *const PROPERTYKEY, ppOptions: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceCapabilities.VTable, self.vtable).GetCommandOptions(@ptrCast(*const IPortableDeviceCapabilities, self), Command, ppOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceCapabilities_GetFunctionalCategories(self: *const T, ppCategories: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceCapabilities.VTable, self.vtable).GetFunctionalCategories(@ptrCast(*const IPortableDeviceCapabilities, self), ppCategories);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceCapabilities_GetFunctionalObjects(self: *const T, Category: *const Guid, ppObjectIDs: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceCapabilities.VTable, self.vtable).GetFunctionalObjects(@ptrCast(*const IPortableDeviceCapabilities, self), Category, ppObjectIDs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceCapabilities_GetSupportedContentTypes(self: *const T, Category: *const Guid, ppContentTypes: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceCapabilities.VTable, self.vtable).GetSupportedContentTypes(@ptrCast(*const IPortableDeviceCapabilities, self), Category, ppContentTypes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceCapabilities_GetSupportedFormats(self: *const T, ContentType: *const Guid, ppFormats: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceCapabilities.VTable, self.vtable).GetSupportedFormats(@ptrCast(*const IPortableDeviceCapabilities, self), ContentType, ppFormats);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceCapabilities_GetSupportedFormatProperties(self: *const T, Format: *const Guid, ppKeys: **IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceCapabilities.VTable, self.vtable).GetSupportedFormatProperties(@ptrCast(*const IPortableDeviceCapabilities, self), Format, ppKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceCapabilities_GetFixedPropertyAttributes(self: *const T, Format: *const Guid, Key: *const PROPERTYKEY, ppAttributes: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceCapabilities.VTable, self.vtable).GetFixedPropertyAttributes(@ptrCast(*const IPortableDeviceCapabilities, self), Format, Key, ppAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceCapabilities_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceCapabilities.VTable, self.vtable).Cancel(@ptrCast(*const IPortableDeviceCapabilities, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceCapabilities_GetSupportedEvents(self: *const T, ppEvents: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceCapabilities.VTable, self.vtable).GetSupportedEvents(@ptrCast(*const IPortableDeviceCapabilities, self), ppEvents);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceCapabilities_GetEventOptions(self: *const T, Event: *const Guid, ppOptions: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceCapabilities.VTable, self.vtable).GetEventOptions(@ptrCast(*const IPortableDeviceCapabilities, self), Event, ppOptions);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceEventCallback_Value = @import("../zig.zig").Guid.initString("A8792A31-F385-493C-A893-40F64EB45F6E");
pub const IID_IPortableDeviceEventCallback = &IID_IPortableDeviceEventCallback_Value;
pub const IPortableDeviceEventCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnEvent: fn(
            self: *const IPortableDeviceEventCallback,
            pEventParameters: *IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceEventCallback_OnEvent(self: *const T, pEventParameters: *IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceEventCallback.VTable, self.vtable).OnEvent(@ptrCast(*const IPortableDeviceEventCallback, self), pEventParameters);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceDataStream_Value = @import("../zig.zig").Guid.initString("88E04DB3-1012-4D64-9996-F703A950D3F4");
pub const IID_IPortableDeviceDataStream = &IID_IPortableDeviceDataStream_Value;
pub const IPortableDeviceDataStream = extern struct {
    pub const VTable = extern struct {
        base: IStream.VTable,
        GetObjectID: fn(
            self: *const IPortableDeviceDataStream,
            ppszObjectID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IPortableDeviceDataStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IStream.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceDataStream_GetObjectID(self: *const T, ppszObjectID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceDataStream.VTable, self.vtable).GetObjectID(@ptrCast(*const IPortableDeviceDataStream, self), ppszObjectID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceDataStream_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceDataStream.VTable, self.vtable).Cancel(@ptrCast(*const IPortableDeviceDataStream, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceUnitsStream_Value = @import("../zig.zig").Guid.initString("5E98025F-BFC4-47A2-9A5F-BC900A507C67");
pub const IID_IPortableDeviceUnitsStream = &IID_IPortableDeviceUnitsStream_Value;
pub const IPortableDeviceUnitsStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SeekInUnits: fn(
            self: *const IPortableDeviceUnitsStream,
            dlibMove: LARGE_INTEGER,
            units: WPD_STREAM_UNITS,
            dwOrigin: u32,
            plibNewPosition: ?*ULARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IPortableDeviceUnitsStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceUnitsStream_SeekInUnits(self: *const T, dlibMove: LARGE_INTEGER, units: WPD_STREAM_UNITS, dwOrigin: u32, plibNewPosition: ?*ULARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceUnitsStream.VTable, self.vtable).SeekInUnits(@ptrCast(*const IPortableDeviceUnitsStream, self), dlibMove, units, dwOrigin, plibNewPosition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceUnitsStream_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceUnitsStream.VTable, self.vtable).Cancel(@ptrCast(*const IPortableDeviceUnitsStream, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDevicePropertiesBulk_Value = @import("../zig.zig").Guid.initString("482B05C0-4056-44ED-9E0F-5E23B009DA93");
pub const IID_IPortableDevicePropertiesBulk = &IID_IPortableDevicePropertiesBulk_Value;
pub const IPortableDevicePropertiesBulk = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueueGetValuesByObjectList: fn(
            self: *const IPortableDevicePropertiesBulk,
            pObjectIDs: *IPortableDevicePropVariantCollection,
            pKeys: *IPortableDeviceKeyCollection,
            pCallback: *IPortableDevicePropertiesBulkCallback,
            pContext: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueueGetValuesByObjectFormat: fn(
            self: *const IPortableDevicePropertiesBulk,
            pguidObjectFormat: *const Guid,
            pszParentObjectID: [*:0]const u16,
            dwDepth: u32,
            pKeys: *IPortableDeviceKeyCollection,
            pCallback: *IPortableDevicePropertiesBulkCallback,
            pContext: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueueSetValuesByObjectList: fn(
            self: *const IPortableDevicePropertiesBulk,
            pObjectValues: *IPortableDeviceValuesCollection,
            pCallback: *IPortableDevicePropertiesBulkCallback,
            pContext: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: fn(
            self: *const IPortableDevicePropertiesBulk,
            pContext: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IPortableDevicePropertiesBulk,
            pContext: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropertiesBulk_QueueGetValuesByObjectList(self: *const T, pObjectIDs: *IPortableDevicePropVariantCollection, pKeys: *IPortableDeviceKeyCollection, pCallback: *IPortableDevicePropertiesBulkCallback, pContext: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropertiesBulk.VTable, self.vtable).QueueGetValuesByObjectList(@ptrCast(*const IPortableDevicePropertiesBulk, self), pObjectIDs, pKeys, pCallback, pContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropertiesBulk_QueueGetValuesByObjectFormat(self: *const T, pguidObjectFormat: *const Guid, pszParentObjectID: [*:0]const u16, dwDepth: u32, pKeys: *IPortableDeviceKeyCollection, pCallback: *IPortableDevicePropertiesBulkCallback, pContext: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropertiesBulk.VTable, self.vtable).QueueGetValuesByObjectFormat(@ptrCast(*const IPortableDevicePropertiesBulk, self), pguidObjectFormat, pszParentObjectID, dwDepth, pKeys, pCallback, pContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropertiesBulk_QueueSetValuesByObjectList(self: *const T, pObjectValues: *IPortableDeviceValuesCollection, pCallback: *IPortableDevicePropertiesBulkCallback, pContext: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropertiesBulk.VTable, self.vtable).QueueSetValuesByObjectList(@ptrCast(*const IPortableDevicePropertiesBulk, self), pObjectValues, pCallback, pContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropertiesBulk_Start(self: *const T, pContext: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropertiesBulk.VTable, self.vtable).Start(@ptrCast(*const IPortableDevicePropertiesBulk, self), pContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropertiesBulk_Cancel(self: *const T, pContext: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropertiesBulk.VTable, self.vtable).Cancel(@ptrCast(*const IPortableDevicePropertiesBulk, self), pContext);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDevicePropertiesBulkCallback_Value = @import("../zig.zig").Guid.initString("9DEACB80-11E8-40E3-A9F3-F557986A7845");
pub const IID_IPortableDevicePropertiesBulkCallback = &IID_IPortableDevicePropertiesBulkCallback_Value;
pub const IPortableDevicePropertiesBulkCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStart: fn(
            self: *const IPortableDevicePropertiesBulkCallback,
            pContext: *const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnProgress: fn(
            self: *const IPortableDevicePropertiesBulkCallback,
            pContext: *const Guid,
            pResults: *IPortableDeviceValuesCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEnd: fn(
            self: *const IPortableDevicePropertiesBulkCallback,
            pContext: *const Guid,
            hrStatus: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropertiesBulkCallback_OnStart(self: *const T, pContext: *const Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropertiesBulkCallback.VTable, self.vtable).OnStart(@ptrCast(*const IPortableDevicePropertiesBulkCallback, self), pContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropertiesBulkCallback_OnProgress(self: *const T, pContext: *const Guid, pResults: *IPortableDeviceValuesCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropertiesBulkCallback.VTable, self.vtable).OnProgress(@ptrCast(*const IPortableDevicePropertiesBulkCallback, self), pContext, pResults);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDevicePropertiesBulkCallback_OnEnd(self: *const T, pContext: *const Guid, hrStatus: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDevicePropertiesBulkCallback.VTable, self.vtable).OnEnd(@ptrCast(*const IPortableDevicePropertiesBulkCallback, self), pContext, hrStatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceServiceManager_Value = @import("../zig.zig").Guid.initString("A8ABC4E9-A84A-47A9-80B3-C5D9B172A961");
pub const IID_IPortableDeviceServiceManager = &IID_IPortableDeviceServiceManager_Value;
pub const IPortableDeviceServiceManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDeviceServices: fn(
            self: *const IPortableDeviceServiceManager,
            pszPnPDeviceID: [*:0]const u16,
            guidServiceCategory: *const Guid,
            pServices: *PWSTR,
            pcServices: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceForService: fn(
            self: *const IPortableDeviceServiceManager,
            pszPnPServiceID: [*:0]const u16,
            ppszPnPDeviceID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceManager_GetDeviceServices(self: *const T, pszPnPDeviceID: [*:0]const u16, guidServiceCategory: *const Guid, pServices: *PWSTR, pcServices: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceManager.VTable, self.vtable).GetDeviceServices(@ptrCast(*const IPortableDeviceServiceManager, self), pszPnPDeviceID, guidServiceCategory, pServices, pcServices);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceManager_GetDeviceForService(self: *const T, pszPnPServiceID: [*:0]const u16, ppszPnPDeviceID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceManager.VTable, self.vtable).GetDeviceForService(@ptrCast(*const IPortableDeviceServiceManager, self), pszPnPServiceID, ppszPnPDeviceID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceService_Value = @import("../zig.zig").Guid.initString("D3BD3A44-D7B5-40A9-98B7-2FA4D01DEC08");
pub const IID_IPortableDeviceService = &IID_IPortableDeviceService_Value;
pub const IPortableDeviceService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: fn(
            self: *const IPortableDeviceService,
            pszPnPServiceID: [*:0]const u16,
            pClientInfo: *IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Capabilities: fn(
            self: *const IPortableDeviceService,
            ppCapabilities: **IPortableDeviceServiceCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Content: fn(
            self: *const IPortableDeviceService,
            ppContent: **IPortableDeviceContent2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Methods: fn(
            self: *const IPortableDeviceService,
            ppMethods: **IPortableDeviceServiceMethods,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IPortableDeviceService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: fn(
            self: *const IPortableDeviceService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServiceObjectID: fn(
            self: *const IPortableDeviceService,
            ppszServiceObjectID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPnPServiceID: fn(
            self: *const IPortableDeviceService,
            ppszPnPServiceID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: fn(
            self: *const IPortableDeviceService,
            dwFlags: u32,
            pCallback: *IPortableDeviceEventCallback,
            pParameters: *IPortableDeviceValues,
            ppszCookie: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: fn(
            self: *const IPortableDeviceService,
            pszCookie: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendCommand: fn(
            self: *const IPortableDeviceService,
            dwFlags: u32,
            pParameters: *IPortableDeviceValues,
            ppResults: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceService_Open(self: *const T, pszPnPServiceID: [*:0]const u16, pClientInfo: *IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceService.VTable, self.vtable).Open(@ptrCast(*const IPortableDeviceService, self), pszPnPServiceID, pClientInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceService_Capabilities(self: *const T, ppCapabilities: **IPortableDeviceServiceCapabilities) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceService.VTable, self.vtable).Capabilities(@ptrCast(*const IPortableDeviceService, self), ppCapabilities);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceService_Content(self: *const T, ppContent: **IPortableDeviceContent2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceService.VTable, self.vtable).Content(@ptrCast(*const IPortableDeviceService, self), ppContent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceService_Methods(self: *const T, ppMethods: **IPortableDeviceServiceMethods) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceService.VTable, self.vtable).Methods(@ptrCast(*const IPortableDeviceService, self), ppMethods);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceService_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceService.VTable, self.vtable).Cancel(@ptrCast(*const IPortableDeviceService, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceService_Close(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceService.VTable, self.vtable).Close(@ptrCast(*const IPortableDeviceService, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceService_GetServiceObjectID(self: *const T, ppszServiceObjectID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceService.VTable, self.vtable).GetServiceObjectID(@ptrCast(*const IPortableDeviceService, self), ppszServiceObjectID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceService_GetPnPServiceID(self: *const T, ppszPnPServiceID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceService.VTable, self.vtable).GetPnPServiceID(@ptrCast(*const IPortableDeviceService, self), ppszPnPServiceID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceService_Advise(self: *const T, dwFlags: u32, pCallback: *IPortableDeviceEventCallback, pParameters: *IPortableDeviceValues, ppszCookie: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceService.VTable, self.vtable).Advise(@ptrCast(*const IPortableDeviceService, self), dwFlags, pCallback, pParameters, ppszCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceService_Unadvise(self: *const T, pszCookie: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceService.VTable, self.vtable).Unadvise(@ptrCast(*const IPortableDeviceService, self), pszCookie);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceService_SendCommand(self: *const T, dwFlags: u32, pParameters: *IPortableDeviceValues, ppResults: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceService.VTable, self.vtable).SendCommand(@ptrCast(*const IPortableDeviceService, self), dwFlags, pParameters, ppResults);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceServiceCapabilities_Value = @import("../zig.zig").Guid.initString("24DBD89D-413E-43E0-BD5B-197F3C56C886");
pub const IID_IPortableDeviceServiceCapabilities = &IID_IPortableDeviceServiceCapabilities_Value;
pub const IPortableDeviceServiceCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSupportedMethods: fn(
            self: *const IPortableDeviceServiceCapabilities,
            ppMethods: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedMethodsByFormat: fn(
            self: *const IPortableDeviceServiceCapabilities,
            Format: *const Guid,
            ppMethods: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMethodAttributes: fn(
            self: *const IPortableDeviceServiceCapabilities,
            Method: *const Guid,
            ppAttributes: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMethodParameterAttributes: fn(
            self: *const IPortableDeviceServiceCapabilities,
            Method: *const Guid,
            Parameter: *const PROPERTYKEY,
            ppAttributes: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedFormats: fn(
            self: *const IPortableDeviceServiceCapabilities,
            ppFormats: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatAttributes: fn(
            self: *const IPortableDeviceServiceCapabilities,
            Format: *const Guid,
            ppAttributes: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedFormatProperties: fn(
            self: *const IPortableDeviceServiceCapabilities,
            Format: *const Guid,
            ppKeys: **IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatPropertyAttributes: fn(
            self: *const IPortableDeviceServiceCapabilities,
            Format: *const Guid,
            Property: *const PROPERTYKEY,
            ppAttributes: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedEvents: fn(
            self: *const IPortableDeviceServiceCapabilities,
            ppEvents: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventAttributes: fn(
            self: *const IPortableDeviceServiceCapabilities,
            Event: *const Guid,
            ppAttributes: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventParameterAttributes: fn(
            self: *const IPortableDeviceServiceCapabilities,
            Event: *const Guid,
            Parameter: *const PROPERTYKEY,
            ppAttributes: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInheritedServices: fn(
            self: *const IPortableDeviceServiceCapabilities,
            dwInheritanceType: u32,
            ppServices: **IPortableDevicePropVariantCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatRenderingProfiles: fn(
            self: *const IPortableDeviceServiceCapabilities,
            Format: *const Guid,
            ppRenderingProfiles: **IPortableDeviceValuesCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedCommands: fn(
            self: *const IPortableDeviceServiceCapabilities,
            ppCommands: **IPortableDeviceKeyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommandOptions: fn(
            self: *const IPortableDeviceServiceCapabilities,
            Command: *const PROPERTYKEY,
            ppOptions: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IPortableDeviceServiceCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetSupportedMethods(self: *const T, ppMethods: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetSupportedMethods(@ptrCast(*const IPortableDeviceServiceCapabilities, self), ppMethods);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetSupportedMethodsByFormat(self: *const T, Format: *const Guid, ppMethods: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetSupportedMethodsByFormat(@ptrCast(*const IPortableDeviceServiceCapabilities, self), Format, ppMethods);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetMethodAttributes(self: *const T, Method: *const Guid, ppAttributes: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetMethodAttributes(@ptrCast(*const IPortableDeviceServiceCapabilities, self), Method, ppAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetMethodParameterAttributes(self: *const T, Method: *const Guid, Parameter: *const PROPERTYKEY, ppAttributes: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetMethodParameterAttributes(@ptrCast(*const IPortableDeviceServiceCapabilities, self), Method, Parameter, ppAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetSupportedFormats(self: *const T, ppFormats: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetSupportedFormats(@ptrCast(*const IPortableDeviceServiceCapabilities, self), ppFormats);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetFormatAttributes(self: *const T, Format: *const Guid, ppAttributes: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetFormatAttributes(@ptrCast(*const IPortableDeviceServiceCapabilities, self), Format, ppAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetSupportedFormatProperties(self: *const T, Format: *const Guid, ppKeys: **IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetSupportedFormatProperties(@ptrCast(*const IPortableDeviceServiceCapabilities, self), Format, ppKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetFormatPropertyAttributes(self: *const T, Format: *const Guid, Property: *const PROPERTYKEY, ppAttributes: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetFormatPropertyAttributes(@ptrCast(*const IPortableDeviceServiceCapabilities, self), Format, Property, ppAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetSupportedEvents(self: *const T, ppEvents: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetSupportedEvents(@ptrCast(*const IPortableDeviceServiceCapabilities, self), ppEvents);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetEventAttributes(self: *const T, Event: *const Guid, ppAttributes: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetEventAttributes(@ptrCast(*const IPortableDeviceServiceCapabilities, self), Event, ppAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetEventParameterAttributes(self: *const T, Event: *const Guid, Parameter: *const PROPERTYKEY, ppAttributes: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetEventParameterAttributes(@ptrCast(*const IPortableDeviceServiceCapabilities, self), Event, Parameter, ppAttributes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetInheritedServices(self: *const T, dwInheritanceType: u32, ppServices: **IPortableDevicePropVariantCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetInheritedServices(@ptrCast(*const IPortableDeviceServiceCapabilities, self), dwInheritanceType, ppServices);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetFormatRenderingProfiles(self: *const T, Format: *const Guid, ppRenderingProfiles: **IPortableDeviceValuesCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetFormatRenderingProfiles(@ptrCast(*const IPortableDeviceServiceCapabilities, self), Format, ppRenderingProfiles);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetSupportedCommands(self: *const T, ppCommands: **IPortableDeviceKeyCollection) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetSupportedCommands(@ptrCast(*const IPortableDeviceServiceCapabilities, self), ppCommands);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_GetCommandOptions(self: *const T, Command: *const PROPERTYKEY, ppOptions: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).GetCommandOptions(@ptrCast(*const IPortableDeviceServiceCapabilities, self), Command, ppOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceCapabilities_Cancel(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceCapabilities.VTable, self.vtable).Cancel(@ptrCast(*const IPortableDeviceServiceCapabilities, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceServiceMethods_Value = @import("../zig.zig").Guid.initString("E20333C9-FD34-412D-A381-CC6F2D820DF7");
pub const IID_IPortableDeviceServiceMethods = &IID_IPortableDeviceServiceMethods_Value;
pub const IPortableDeviceServiceMethods = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Invoke: fn(
            self: *const IPortableDeviceServiceMethods,
            Method: *const Guid,
            pParameters: *IPortableDeviceValues,
            ppResults: **IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeAsync: fn(
            self: *const IPortableDeviceServiceMethods,
            Method: *const Guid,
            pParameters: *IPortableDeviceValues,
            pCallback: *IPortableDeviceServiceMethodCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IPortableDeviceServiceMethods,
            pCallback: *IPortableDeviceServiceMethodCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceMethods_Invoke(self: *const T, Method: *const Guid, pParameters: *IPortableDeviceValues, ppResults: **IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceMethods.VTable, self.vtable).Invoke(@ptrCast(*const IPortableDeviceServiceMethods, self), Method, pParameters, ppResults);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceMethods_InvokeAsync(self: *const T, Method: *const Guid, pParameters: *IPortableDeviceValues, pCallback: *IPortableDeviceServiceMethodCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceMethods.VTable, self.vtable).InvokeAsync(@ptrCast(*const IPortableDeviceServiceMethods, self), Method, pParameters, pCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceMethods_Cancel(self: *const T, pCallback: *IPortableDeviceServiceMethodCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceMethods.VTable, self.vtable).Cancel(@ptrCast(*const IPortableDeviceServiceMethods, self), pCallback);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceServiceMethodCallback_Value = @import("../zig.zig").Guid.initString("C424233C-AFCE-4828-A756-7ED7A2350083");
pub const IID_IPortableDeviceServiceMethodCallback = &IID_IPortableDeviceServiceMethodCallback_Value;
pub const IPortableDeviceServiceMethodCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnComplete: fn(
            self: *const IPortableDeviceServiceMethodCallback,
            hrStatus: HRESULT,
            pResults: *IPortableDeviceValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceMethodCallback_OnComplete(self: *const T, hrStatus: HRESULT, pResults: *IPortableDeviceValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceMethodCallback.VTable, self.vtable).OnComplete(@ptrCast(*const IPortableDeviceServiceMethodCallback, self), hrStatus, pResults);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceServiceActivation_Value = @import("../zig.zig").Guid.initString("E56B0534-D9B9-425C-9B99-75F97CB3D7C8");
pub const IID_IPortableDeviceServiceActivation = &IID_IPortableDeviceServiceActivation_Value;
pub const IPortableDeviceServiceActivation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OpenAsync: fn(
            self: *const IPortableDeviceServiceActivation,
            pszPnPServiceID: [*:0]const u16,
            pClientInfo: *IPortableDeviceValues,
            pCallback: *IPortableDeviceServiceOpenCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelOpenAsync: fn(
            self: *const IPortableDeviceServiceActivation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceActivation_OpenAsync(self: *const T, pszPnPServiceID: [*:0]const u16, pClientInfo: *IPortableDeviceValues, pCallback: *IPortableDeviceServiceOpenCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceActivation.VTable, self.vtable).OpenAsync(@ptrCast(*const IPortableDeviceServiceActivation, self), pszPnPServiceID, pClientInfo, pCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceActivation_CancelOpenAsync(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceActivation.VTable, self.vtable).CancelOpenAsync(@ptrCast(*const IPortableDeviceServiceActivation, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceServiceOpenCallback_Value = @import("../zig.zig").Guid.initString("BCED49C8-8EFE-41ED-960B-61313ABD47A9");
pub const IID_IPortableDeviceServiceOpenCallback = &IID_IPortableDeviceServiceOpenCallback_Value;
pub const IPortableDeviceServiceOpenCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnComplete: fn(
            self: *const IPortableDeviceServiceOpenCallback,
            hrStatus: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceServiceOpenCallback_OnComplete(self: *const T, hrStatus: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceServiceOpenCallback.VTable, self.vtable).OnComplete(@ptrCast(*const IPortableDeviceServiceOpenCallback, self), hrStatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceDispatchFactory_Value = @import("../zig.zig").Guid.initString("5E1EAFC3-E3D7-4132-96FA-759C0F9D1E0F");
pub const IID_IPortableDeviceDispatchFactory = &IID_IPortableDeviceDispatchFactory_Value;
pub const IPortableDeviceDispatchFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDeviceDispatch: fn(
            self: *const IPortableDeviceDispatchFactory,
            pszPnPDeviceID: [*:0]const u16,
            ppDeviceDispatch: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceDispatchFactory_GetDeviceDispatch(self: *const T, pszPnPDeviceID: [*:0]const u16, ppDeviceDispatch: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceDispatchFactory.VTable, self.vtable).GetDeviceDispatch(@ptrCast(*const IPortableDeviceDispatchFactory, self), pszPnPDeviceID, ppDeviceDispatch);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceWebControl_Value = @import("../zig.zig").Guid.initString("94FC7953-5CA1-483A-8AEE-DF52E7747D00");
pub const IID_IPortableDeviceWebControl = &IID_IPortableDeviceWebControl_Value;
pub const IPortableDeviceWebControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetDeviceFromId: fn(
            self: *const IPortableDeviceWebControl,
            deviceId: BSTR,
            ppDevice: **IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceFromIdAsync: fn(
            self: *const IPortableDeviceWebControl,
            deviceId: BSTR,
            pCompletionHandler: *IDispatch,
            pErrorHandler: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceWebControl_GetDeviceFromId(self: *const T, deviceId: BSTR, ppDevice: **IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceWebControl.VTable, self.vtable).GetDeviceFromId(@ptrCast(*const IPortableDeviceWebControl, self), deviceId, ppDevice);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceWebControl_GetDeviceFromIdAsync(self: *const T, deviceId: BSTR, pCompletionHandler: *IDispatch, pErrorHandler: ?*IDispatch) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceWebControl.VTable, self.vtable).GetDeviceFromIdAsync(@ptrCast(*const IPortableDeviceWebControl, self), deviceId, pCompletionHandler, pErrorHandler);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_EnumBthMtpConnectors_Value = @import("../zig.zig").Guid.initString("A1570149-E645-4F43-8B0D-409B061DB2FC");
pub const CLSID_EnumBthMtpConnectors = &CLSID_EnumBthMtpConnectors_Value;

const IID_IEnumPortableDeviceConnectors_Value = @import("../zig.zig").Guid.initString("BFDEF549-9247-454F-BD82-06FE80853FAA");
pub const IID_IEnumPortableDeviceConnectors = &IID_IEnumPortableDeviceConnectors_Value;
pub const IEnumPortableDeviceConnectors = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IEnumPortableDeviceConnectors,
            cRequested: u32,
            pConnectors: [*]*IPortableDeviceConnector,
            pcFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IEnumPortableDeviceConnectors,
            cConnectors: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IEnumPortableDeviceConnectors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IEnumPortableDeviceConnectors,
            ppEnum: **IEnumPortableDeviceConnectors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumPortableDeviceConnectors_Next(self: *const T, cRequested: u32, pConnectors: [*]*IPortableDeviceConnector, pcFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumPortableDeviceConnectors.VTable, self.vtable).Next(@ptrCast(*const IEnumPortableDeviceConnectors, self), cRequested, pConnectors, pcFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumPortableDeviceConnectors_Skip(self: *const T, cConnectors: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumPortableDeviceConnectors.VTable, self.vtable).Skip(@ptrCast(*const IEnumPortableDeviceConnectors, self), cConnectors);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumPortableDeviceConnectors_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumPortableDeviceConnectors.VTable, self.vtable).Reset(@ptrCast(*const IEnumPortableDeviceConnectors, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IEnumPortableDeviceConnectors_Clone(self: *const T, ppEnum: **IEnumPortableDeviceConnectors) callconv(.Inline) HRESULT {
            return @ptrCast(*const IEnumPortableDeviceConnectors.VTable, self.vtable).Clone(@ptrCast(*const IEnumPortableDeviceConnectors, self), ppEnum);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IPortableDeviceConnector_Value = @import("../zig.zig").Guid.initString("625E2DF8-6392-4CF0-9AD1-3CFA5F17775C");
pub const IID_IPortableDeviceConnector = &IID_IPortableDeviceConnector_Value;
pub const IPortableDeviceConnector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Connect: fn(
            self: *const IPortableDeviceConnector,
            pCallback: *IConnectionRequestCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: fn(
            self: *const IPortableDeviceConnector,
            pCallback: *IConnectionRequestCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: fn(
            self: *const IPortableDeviceConnector,
            pCallback: *IConnectionRequestCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: fn(
            self: *const IPortableDeviceConnector,
            pPropertyKey: *const DEVPROPKEY,
            pPropertyType: *u32,
            ppData: [*]*u8,
            pcbData: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: fn(
            self: *const IPortableDeviceConnector,
            pPropertyKey: *const DEVPROPKEY,
            PropertyType: u32,
            pData: [*:0]const u8,
            cbData: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPnPID: fn(
            self: *const IPortableDeviceConnector,
            ppwszPnPID: *PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceConnector_Connect(self: *const T, pCallback: *IConnectionRequestCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceConnector.VTable, self.vtable).Connect(@ptrCast(*const IPortableDeviceConnector, self), pCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceConnector_Disconnect(self: *const T, pCallback: *IConnectionRequestCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceConnector.VTable, self.vtable).Disconnect(@ptrCast(*const IPortableDeviceConnector, self), pCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceConnector_Cancel(self: *const T, pCallback: *IConnectionRequestCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceConnector.VTable, self.vtable).Cancel(@ptrCast(*const IPortableDeviceConnector, self), pCallback);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceConnector_GetProperty(self: *const T, pPropertyKey: *const DEVPROPKEY, pPropertyType: *u32, ppData: [*]*u8, pcbData: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceConnector.VTable, self.vtable).GetProperty(@ptrCast(*const IPortableDeviceConnector, self), pPropertyKey, pPropertyType, ppData, pcbData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceConnector_SetProperty(self: *const T, pPropertyKey: *const DEVPROPKEY, PropertyType: u32, pData: [*:0]const u8, cbData: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceConnector.VTable, self.vtable).SetProperty(@ptrCast(*const IPortableDeviceConnector, self), pPropertyKey, PropertyType, pData, cbData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IPortableDeviceConnector_GetPnPID(self: *const T, ppwszPnPID: *PWSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IPortableDeviceConnector.VTable, self.vtable).GetPnPID(@ptrCast(*const IPortableDeviceConnector, self), ppwszPnPID);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IConnectionRequestCallback_Value = @import("../zig.zig").Guid.initString("272C9AE0-7161-4AE0-91BD-9F448EE9C427");
pub const IID_IConnectionRequestCallback = &IID_IConnectionRequestCallback_Value;
pub const IConnectionRequestCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnComplete: fn(
            self: *const IConnectionRequestCallback,
            hrStatus: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IConnectionRequestCallback_OnComplete(self: *const T, hrStatus: HRESULT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IConnectionRequestCallback.VTable, self.vtable).OnComplete(@ptrCast(*const IConnectionRequestCallback, self), hrStatus);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (14)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const IStream = @import("structured_storage.zig").IStream;
const ULARGE_INTEGER = @import("system_services.zig").ULARGE_INTEGER;
const PWSTR = @import("system_services.zig").PWSTR;
const IDispatch = @import("automation.zig").IDispatch;
const DEVPROPKEY = @import("system_services.zig").DEVPROPKEY;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const PROPVARIANT = @import("structured_storage.zig").PROPVARIANT;
const BSTR = @import("automation.zig").BSTR;
const BOOL = @import("system_services.zig").BOOL;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const PROPERTYKEY = @import("windows_properties_system.zig").PROPERTYKEY;
const IPropertyStore = @import("audio.zig").IPropertyStore;

test {
    const constant_export_count = 0;
    const type_export_count = 61;
    const enum_value_export_count = 144;
    const com_iface_id_export_count = 30;
    const com_class_id_export_count = 13;
    const func_export_count = 0;
    const unicode_alias_count = 0;
    const import_count = 14;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

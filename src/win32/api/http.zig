//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (135)
//--------------------------------------------------------------------------------
pub const HTTP_SERVER_PROPERTY = extern enum(i32) {
    HttpServerAuthenticationProperty = 0,
    HttpServerLoggingProperty = 1,
    HttpServerQosProperty = 2,
    HttpServerTimeoutsProperty = 3,
    HttpServerQueueLengthProperty = 4,
    HttpServerStateProperty = 5,
    HttpServer503VerbosityProperty = 6,
    HttpServerBindingProperty = 7,
    HttpServerExtendedAuthenticationProperty = 8,
    HttpServerListenEndpointProperty = 9,
    HttpServerChannelBindProperty = 10,
    HttpServerProtectionLevelProperty = 11,
};
pub const HttpServerAuthenticationProperty = HTTP_SERVER_PROPERTY.HttpServerAuthenticationProperty;
pub const HttpServerLoggingProperty = HTTP_SERVER_PROPERTY.HttpServerLoggingProperty;
pub const HttpServerQosProperty = HTTP_SERVER_PROPERTY.HttpServerQosProperty;
pub const HttpServerTimeoutsProperty = HTTP_SERVER_PROPERTY.HttpServerTimeoutsProperty;
pub const HttpServerQueueLengthProperty = HTTP_SERVER_PROPERTY.HttpServerQueueLengthProperty;
pub const HttpServerStateProperty = HTTP_SERVER_PROPERTY.HttpServerStateProperty;
pub const HttpServer503VerbosityProperty = HTTP_SERVER_PROPERTY.HttpServer503VerbosityProperty;
pub const HttpServerBindingProperty = HTTP_SERVER_PROPERTY.HttpServerBindingProperty;
pub const HttpServerExtendedAuthenticationProperty = HTTP_SERVER_PROPERTY.HttpServerExtendedAuthenticationProperty;
pub const HttpServerListenEndpointProperty = HTTP_SERVER_PROPERTY.HttpServerListenEndpointProperty;
pub const HttpServerChannelBindProperty = HTTP_SERVER_PROPERTY.HttpServerChannelBindProperty;
pub const HttpServerProtectionLevelProperty = HTTP_SERVER_PROPERTY.HttpServerProtectionLevelProperty;

pub const HTTP_PROPERTY_FLAGS = extern struct {
    _bitfield: u32,
};

pub const HTTP_ENABLED_STATE = extern enum(i32) {
    HttpEnabledStateActive = 0,
    HttpEnabledStateInactive = 1,
};
pub const HttpEnabledStateActive = HTTP_ENABLED_STATE.HttpEnabledStateActive;
pub const HttpEnabledStateInactive = HTTP_ENABLED_STATE.HttpEnabledStateInactive;

pub const HTTP_STATE_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    State: HTTP_ENABLED_STATE,
};

pub const HTTP_503_RESPONSE_VERBOSITY = extern enum(i32) {
    Http503ResponseVerbosityBasic = 0,
    Http503ResponseVerbosityLimited = 1,
    Http503ResponseVerbosityFull = 2,
};
pub const Http503ResponseVerbosityBasic = HTTP_503_RESPONSE_VERBOSITY.Http503ResponseVerbosityBasic;
pub const Http503ResponseVerbosityLimited = HTTP_503_RESPONSE_VERBOSITY.Http503ResponseVerbosityLimited;
pub const Http503ResponseVerbosityFull = HTTP_503_RESPONSE_VERBOSITY.Http503ResponseVerbosityFull;

pub const HTTP_QOS_SETTING_TYPE = extern enum(i32) {
    HttpQosSettingTypeBandwidth = 0,
    HttpQosSettingTypeConnectionLimit = 1,
    HttpQosSettingTypeFlowRate = 2,
};
pub const HttpQosSettingTypeBandwidth = HTTP_QOS_SETTING_TYPE.HttpQosSettingTypeBandwidth;
pub const HttpQosSettingTypeConnectionLimit = HTTP_QOS_SETTING_TYPE.HttpQosSettingTypeConnectionLimit;
pub const HttpQosSettingTypeFlowRate = HTTP_QOS_SETTING_TYPE.HttpQosSettingTypeFlowRate;

pub const HTTP_QOS_SETTING_INFO = extern struct {
    QosType: HTTP_QOS_SETTING_TYPE,
    QosSetting: *c_void,
};

pub const HTTP_CONNECTION_LIMIT_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    MaxConnections: u32,
};

pub const HTTP_BANDWIDTH_LIMIT_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    MaxBandwidth: u32,
};

pub const HTTP_FLOWRATE_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    MaxBandwidth: u32,
    MaxPeakBandwidth: u32,
    BurstSize: u32,
};

pub const HTTP_SERVICE_CONFIG_TIMEOUT_KEY = extern enum(i32) {
    IdleConnectionTimeout = 0,
    HeaderWaitTimeout = 1,
};
pub const IdleConnectionTimeout = HTTP_SERVICE_CONFIG_TIMEOUT_KEY.IdleConnectionTimeout;
pub const HeaderWaitTimeout = HTTP_SERVICE_CONFIG_TIMEOUT_KEY.HeaderWaitTimeout;

pub const HTTP_SERVICE_CONFIG_TIMEOUT_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_TIMEOUT_KEY,
    ParamDesc: u16,
};

pub const HTTP_TIMEOUT_LIMIT_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    EntityBody: u16,
    DrainEntityBody: u16,
    RequestQueue: u16,
    IdleConnection: u16,
    HeaderWait: u16,
    MinSendRate: u32,
};

pub const HTTP_SERVICE_CONFIG_SETTING_KEY = extern enum(i32) {
    HttpNone = 0,
    HttpTlsThrottle = 1,
};
pub const HttpNone = HTTP_SERVICE_CONFIG_SETTING_KEY.HttpNone;
pub const HttpTlsThrottle = HTTP_SERVICE_CONFIG_SETTING_KEY.HttpTlsThrottle;

pub const HTTP_SERVICE_CONFIG_SETTING_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SETTING_KEY,
    ParamDesc: u32,
};

pub const HTTP_LISTEN_ENDPOINT_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    EnableSharing: u8,
};

pub const HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS = extern struct {
    DomainNameLength: u16,
    DomainName: PWSTR,
    RealmLength: u16,
    Realm: PWSTR,
};

pub const HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS = extern struct {
    RealmLength: u16,
    Realm: PWSTR,
};

pub const HTTP_SERVER_AUTHENTICATION_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    AuthSchemes: u32,
    ReceiveMutualAuth: u8,
    ReceiveContextHandle: u8,
    DisableNTLMCredentialCaching: u8,
    ExFlags: u8,
    DigestParams: HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS,
    BasicParams: HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS,
};

pub const HTTP_SERVICE_BINDING_TYPE = extern enum(i32) {
    HttpServiceBindingTypeNone = 0,
    HttpServiceBindingTypeW = 1,
    HttpServiceBindingTypeA = 2,
};
pub const HttpServiceBindingTypeNone = HTTP_SERVICE_BINDING_TYPE.HttpServiceBindingTypeNone;
pub const HttpServiceBindingTypeW = HTTP_SERVICE_BINDING_TYPE.HttpServiceBindingTypeW;
pub const HttpServiceBindingTypeA = HTTP_SERVICE_BINDING_TYPE.HttpServiceBindingTypeA;

pub const HTTP_SERVICE_BINDING_BASE = extern struct {
    Type: HTTP_SERVICE_BINDING_TYPE,
};

pub const HTTP_SERVICE_BINDING_A = extern struct {
    Base: HTTP_SERVICE_BINDING_BASE,
    Buffer: [*]u8,
    BufferSize: u32,
};

pub const HTTP_SERVICE_BINDING_W = extern struct {
    Base: HTTP_SERVICE_BINDING_BASE,
    Buffer: [*]u16,
    BufferSize: u32,
};

pub const HTTP_AUTHENTICATION_HARDENING_LEVELS = extern enum(i32) {
    HttpAuthenticationHardeningLegacy = 0,
    HttpAuthenticationHardeningMedium = 1,
    HttpAuthenticationHardeningStrict = 2,
};
pub const HttpAuthenticationHardeningLegacy = HTTP_AUTHENTICATION_HARDENING_LEVELS.HttpAuthenticationHardeningLegacy;
pub const HttpAuthenticationHardeningMedium = HTTP_AUTHENTICATION_HARDENING_LEVELS.HttpAuthenticationHardeningMedium;
pub const HttpAuthenticationHardeningStrict = HTTP_AUTHENTICATION_HARDENING_LEVELS.HttpAuthenticationHardeningStrict;

pub const HTTP_CHANNEL_BIND_INFO = extern struct {
    Hardening: HTTP_AUTHENTICATION_HARDENING_LEVELS,
    Flags: u32,
    ServiceNames: **HTTP_SERVICE_BINDING_BASE,
    NumberOfServiceNames: u32,
};

pub const HTTP_REQUEST_CHANNEL_BIND_STATUS = extern struct {
    ServiceName: *HTTP_SERVICE_BINDING_BASE,
    ChannelToken: *u8,
    ChannelTokenSize: u32,
    Flags: u32,
};

pub const HTTP_REQUEST_TOKEN_BINDING_INFO = extern struct {
    TokenBinding: *u8,
    TokenBindingSize: u32,
    EKM: *u8,
    EKMSize: u32,
    KeyType: u8,
};

pub const HTTP_LOGGING_TYPE = extern enum(i32) {
    HttpLoggingTypeW3C = 0,
    HttpLoggingTypeIIS = 1,
    HttpLoggingTypeNCSA = 2,
    HttpLoggingTypeRaw = 3,
};
pub const HttpLoggingTypeW3C = HTTP_LOGGING_TYPE.HttpLoggingTypeW3C;
pub const HttpLoggingTypeIIS = HTTP_LOGGING_TYPE.HttpLoggingTypeIIS;
pub const HttpLoggingTypeNCSA = HTTP_LOGGING_TYPE.HttpLoggingTypeNCSA;
pub const HttpLoggingTypeRaw = HTTP_LOGGING_TYPE.HttpLoggingTypeRaw;

pub const HTTP_LOGGING_ROLLOVER_TYPE = extern enum(i32) {
    HttpLoggingRolloverSize = 0,
    HttpLoggingRolloverDaily = 1,
    HttpLoggingRolloverWeekly = 2,
    HttpLoggingRolloverMonthly = 3,
    HttpLoggingRolloverHourly = 4,
};
pub const HttpLoggingRolloverSize = HTTP_LOGGING_ROLLOVER_TYPE.HttpLoggingRolloverSize;
pub const HttpLoggingRolloverDaily = HTTP_LOGGING_ROLLOVER_TYPE.HttpLoggingRolloverDaily;
pub const HttpLoggingRolloverWeekly = HTTP_LOGGING_ROLLOVER_TYPE.HttpLoggingRolloverWeekly;
pub const HttpLoggingRolloverMonthly = HTTP_LOGGING_ROLLOVER_TYPE.HttpLoggingRolloverMonthly;
pub const HttpLoggingRolloverHourly = HTTP_LOGGING_ROLLOVER_TYPE.HttpLoggingRolloverHourly;

pub const HTTP_LOGGING_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    LoggingFlags: u32,
    SoftwareName: [*:0]const u16,
    SoftwareNameLength: u16,
    DirectoryNameLength: u16,
    DirectoryName: [*:0]const u16,
    Format: HTTP_LOGGING_TYPE,
    Fields: u32,
    pExtFields: *c_void,
    NumOfExtFields: u16,
    MaxRecordSize: u16,
    RolloverType: HTTP_LOGGING_ROLLOVER_TYPE,
    RolloverSize: u32,
    pSecurityDescriptor: *c_void,
};

pub const HTTP_BINDING_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    RequestQueueHandle: HANDLE,
};

pub const HTTP_PROTECTION_LEVEL_TYPE = extern enum(i32) {
    HttpProtectionLevelUnrestricted = 0,
    HttpProtectionLevelEdgeRestricted = 1,
    HttpProtectionLevelRestricted = 2,
};
pub const HttpProtectionLevelUnrestricted = HTTP_PROTECTION_LEVEL_TYPE.HttpProtectionLevelUnrestricted;
pub const HttpProtectionLevelEdgeRestricted = HTTP_PROTECTION_LEVEL_TYPE.HttpProtectionLevelEdgeRestricted;
pub const HttpProtectionLevelRestricted = HTTP_PROTECTION_LEVEL_TYPE.HttpProtectionLevelRestricted;

pub const HTTP_PROTECTION_LEVEL_INFO = extern struct {
    Flags: HTTP_PROPERTY_FLAGS,
    Level: HTTP_PROTECTION_LEVEL_TYPE,
};

pub const HTTP_BYTE_RANGE = extern struct {
    StartingOffset: ULARGE_INTEGER,
    Length: ULARGE_INTEGER,
};

pub const HTTP_VERSION = extern struct {
    MajorVersion: u16,
    MinorVersion: u16,
};

pub const _HTTP_URI_SCHEME = extern enum(i32) {
    HttpSchemeHttp = 0,
    HttpSchemeHttps = 1,
    HttpSchemeMaximum = 2,
};
pub const HttpSchemeHttp = _HTTP_URI_SCHEME.HttpSchemeHttp;
pub const HttpSchemeHttps = _HTTP_URI_SCHEME.HttpSchemeHttps;
pub const HttpSchemeMaximum = _HTTP_URI_SCHEME.HttpSchemeMaximum;

pub const HTTP_VERB = extern enum(i32) {
    HttpVerbUnparsed = 0,
    HttpVerbUnknown = 1,
    HttpVerbInvalid = 2,
    HttpVerbOPTIONS = 3,
    HttpVerbGET = 4,
    HttpVerbHEAD = 5,
    HttpVerbPOST = 6,
    HttpVerbPUT = 7,
    HttpVerbDELETE = 8,
    HttpVerbTRACE = 9,
    HttpVerbCONNECT = 10,
    HttpVerbTRACK = 11,
    HttpVerbMOVE = 12,
    HttpVerbCOPY = 13,
    HttpVerbPROPFIND = 14,
    HttpVerbPROPPATCH = 15,
    HttpVerbMKCOL = 16,
    HttpVerbLOCK = 17,
    HttpVerbUNLOCK = 18,
    HttpVerbSEARCH = 19,
    HttpVerbMaximum = 20,
};
pub const HttpVerbUnparsed = HTTP_VERB.HttpVerbUnparsed;
pub const HttpVerbUnknown = HTTP_VERB.HttpVerbUnknown;
pub const HttpVerbInvalid = HTTP_VERB.HttpVerbInvalid;
pub const HttpVerbOPTIONS = HTTP_VERB.HttpVerbOPTIONS;
pub const HttpVerbGET = HTTP_VERB.HttpVerbGET;
pub const HttpVerbHEAD = HTTP_VERB.HttpVerbHEAD;
pub const HttpVerbPOST = HTTP_VERB.HttpVerbPOST;
pub const HttpVerbPUT = HTTP_VERB.HttpVerbPUT;
pub const HttpVerbDELETE = HTTP_VERB.HttpVerbDELETE;
pub const HttpVerbTRACE = HTTP_VERB.HttpVerbTRACE;
pub const HttpVerbCONNECT = HTTP_VERB.HttpVerbCONNECT;
pub const HttpVerbTRACK = HTTP_VERB.HttpVerbTRACK;
pub const HttpVerbMOVE = HTTP_VERB.HttpVerbMOVE;
pub const HttpVerbCOPY = HTTP_VERB.HttpVerbCOPY;
pub const HttpVerbPROPFIND = HTTP_VERB.HttpVerbPROPFIND;
pub const HttpVerbPROPPATCH = HTTP_VERB.HttpVerbPROPPATCH;
pub const HttpVerbMKCOL = HTTP_VERB.HttpVerbMKCOL;
pub const HttpVerbLOCK = HTTP_VERB.HttpVerbLOCK;
pub const HttpVerbUNLOCK = HTTP_VERB.HttpVerbUNLOCK;
pub const HttpVerbSEARCH = HTTP_VERB.HttpVerbSEARCH;
pub const HttpVerbMaximum = HTTP_VERB.HttpVerbMaximum;

pub const HTTP_HEADER_ID = extern enum(i32) {
    HttpHeaderCacheControl = 0,
    HttpHeaderConnection = 1,
    HttpHeaderDate = 2,
    HttpHeaderKeepAlive = 3,
    HttpHeaderPragma = 4,
    HttpHeaderTrailer = 5,
    HttpHeaderTransferEncoding = 6,
    HttpHeaderUpgrade = 7,
    HttpHeaderVia = 8,
    HttpHeaderWarning = 9,
    HttpHeaderAllow = 10,
    HttpHeaderContentLength = 11,
    HttpHeaderContentType = 12,
    HttpHeaderContentEncoding = 13,
    HttpHeaderContentLanguage = 14,
    HttpHeaderContentLocation = 15,
    HttpHeaderContentMd5 = 16,
    HttpHeaderContentRange = 17,
    HttpHeaderExpires = 18,
    HttpHeaderLastModified = 19,
    HttpHeaderAccept = 20,
    HttpHeaderAcceptCharset = 21,
    HttpHeaderAcceptEncoding = 22,
    HttpHeaderAcceptLanguage = 23,
    HttpHeaderAuthorization = 24,
    HttpHeaderCookie = 25,
    HttpHeaderExpect = 26,
    HttpHeaderFrom = 27,
    HttpHeaderHost = 28,
    HttpHeaderIfMatch = 29,
    HttpHeaderIfModifiedSince = 30,
    HttpHeaderIfNoneMatch = 31,
    HttpHeaderIfRange = 32,
    HttpHeaderIfUnmodifiedSince = 33,
    HttpHeaderMaxForwards = 34,
    HttpHeaderProxyAuthorization = 35,
    HttpHeaderReferer = 36,
    HttpHeaderRange = 37,
    HttpHeaderTe = 38,
    HttpHeaderTranslate = 39,
    HttpHeaderUserAgent = 40,
    HttpHeaderRequestMaximum = 41,
    HttpHeaderAcceptRanges = 20,
    HttpHeaderAge = 21,
    HttpHeaderEtag = 22,
    HttpHeaderLocation = 23,
    HttpHeaderProxyAuthenticate = 24,
    HttpHeaderRetryAfter = 25,
    HttpHeaderServer = 26,
    HttpHeaderSetCookie = 27,
    HttpHeaderVary = 28,
    HttpHeaderWwwAuthenticate = 29,
    HttpHeaderResponseMaximum = 30,
    HttpHeaderMaximum = 41,
};
pub const HttpHeaderCacheControl = HTTP_HEADER_ID.HttpHeaderCacheControl;
pub const HttpHeaderConnection = HTTP_HEADER_ID.HttpHeaderConnection;
pub const HttpHeaderDate = HTTP_HEADER_ID.HttpHeaderDate;
pub const HttpHeaderKeepAlive = HTTP_HEADER_ID.HttpHeaderKeepAlive;
pub const HttpHeaderPragma = HTTP_HEADER_ID.HttpHeaderPragma;
pub const HttpHeaderTrailer = HTTP_HEADER_ID.HttpHeaderTrailer;
pub const HttpHeaderTransferEncoding = HTTP_HEADER_ID.HttpHeaderTransferEncoding;
pub const HttpHeaderUpgrade = HTTP_HEADER_ID.HttpHeaderUpgrade;
pub const HttpHeaderVia = HTTP_HEADER_ID.HttpHeaderVia;
pub const HttpHeaderWarning = HTTP_HEADER_ID.HttpHeaderWarning;
pub const HttpHeaderAllow = HTTP_HEADER_ID.HttpHeaderAllow;
pub const HttpHeaderContentLength = HTTP_HEADER_ID.HttpHeaderContentLength;
pub const HttpHeaderContentType = HTTP_HEADER_ID.HttpHeaderContentType;
pub const HttpHeaderContentEncoding = HTTP_HEADER_ID.HttpHeaderContentEncoding;
pub const HttpHeaderContentLanguage = HTTP_HEADER_ID.HttpHeaderContentLanguage;
pub const HttpHeaderContentLocation = HTTP_HEADER_ID.HttpHeaderContentLocation;
pub const HttpHeaderContentMd5 = HTTP_HEADER_ID.HttpHeaderContentMd5;
pub const HttpHeaderContentRange = HTTP_HEADER_ID.HttpHeaderContentRange;
pub const HttpHeaderExpires = HTTP_HEADER_ID.HttpHeaderExpires;
pub const HttpHeaderLastModified = HTTP_HEADER_ID.HttpHeaderLastModified;
pub const HttpHeaderAccept = HTTP_HEADER_ID.HttpHeaderAccept;
pub const HttpHeaderAcceptCharset = HTTP_HEADER_ID.HttpHeaderAcceptCharset;
pub const HttpHeaderAcceptEncoding = HTTP_HEADER_ID.HttpHeaderAcceptEncoding;
pub const HttpHeaderAcceptLanguage = HTTP_HEADER_ID.HttpHeaderAcceptLanguage;
pub const HttpHeaderAuthorization = HTTP_HEADER_ID.HttpHeaderAuthorization;
pub const HttpHeaderCookie = HTTP_HEADER_ID.HttpHeaderCookie;
pub const HttpHeaderExpect = HTTP_HEADER_ID.HttpHeaderExpect;
pub const HttpHeaderFrom = HTTP_HEADER_ID.HttpHeaderFrom;
pub const HttpHeaderHost = HTTP_HEADER_ID.HttpHeaderHost;
pub const HttpHeaderIfMatch = HTTP_HEADER_ID.HttpHeaderIfMatch;
pub const HttpHeaderIfModifiedSince = HTTP_HEADER_ID.HttpHeaderIfModifiedSince;
pub const HttpHeaderIfNoneMatch = HTTP_HEADER_ID.HttpHeaderIfNoneMatch;
pub const HttpHeaderIfRange = HTTP_HEADER_ID.HttpHeaderIfRange;
pub const HttpHeaderIfUnmodifiedSince = HTTP_HEADER_ID.HttpHeaderIfUnmodifiedSince;
pub const HttpHeaderMaxForwards = HTTP_HEADER_ID.HttpHeaderMaxForwards;
pub const HttpHeaderProxyAuthorization = HTTP_HEADER_ID.HttpHeaderProxyAuthorization;
pub const HttpHeaderReferer = HTTP_HEADER_ID.HttpHeaderReferer;
pub const HttpHeaderRange = HTTP_HEADER_ID.HttpHeaderRange;
pub const HttpHeaderTe = HTTP_HEADER_ID.HttpHeaderTe;
pub const HttpHeaderTranslate = HTTP_HEADER_ID.HttpHeaderTranslate;
pub const HttpHeaderUserAgent = HTTP_HEADER_ID.HttpHeaderUserAgent;
pub const HttpHeaderRequestMaximum = HTTP_HEADER_ID.HttpHeaderRequestMaximum;
pub const HttpHeaderAcceptRanges = HTTP_HEADER_ID.HttpHeaderAcceptRanges;
pub const HttpHeaderAge = HTTP_HEADER_ID.HttpHeaderAge;
pub const HttpHeaderEtag = HTTP_HEADER_ID.HttpHeaderEtag;
pub const HttpHeaderLocation = HTTP_HEADER_ID.HttpHeaderLocation;
pub const HttpHeaderProxyAuthenticate = HTTP_HEADER_ID.HttpHeaderProxyAuthenticate;
pub const HttpHeaderRetryAfter = HTTP_HEADER_ID.HttpHeaderRetryAfter;
pub const HttpHeaderServer = HTTP_HEADER_ID.HttpHeaderServer;
pub const HttpHeaderSetCookie = HTTP_HEADER_ID.HttpHeaderSetCookie;
pub const HttpHeaderVary = HTTP_HEADER_ID.HttpHeaderVary;
pub const HttpHeaderWwwAuthenticate = HTTP_HEADER_ID.HttpHeaderWwwAuthenticate;
pub const HttpHeaderResponseMaximum = HTTP_HEADER_ID.HttpHeaderResponseMaximum;
pub const HttpHeaderMaximum = HTTP_HEADER_ID.HttpHeaderMaximum;

pub const HTTP_KNOWN_HEADER = extern struct {
    RawValueLength: u16,
    pRawValue: [*:0]const u8,
};

pub const HTTP_UNKNOWN_HEADER = extern struct {
    NameLength: u16,
    RawValueLength: u16,
    pName: [*:0]const u8,
    pRawValue: [*:0]const u8,
};

pub const HTTP_LOG_DATA_TYPE = extern enum(i32) {
    HttpLogDataTypeFields = 0,
};
pub const HttpLogDataTypeFields = HTTP_LOG_DATA_TYPE.HttpLogDataTypeFields;

pub const HTTP_LOG_DATA = extern struct {
    Type: HTTP_LOG_DATA_TYPE,
};

pub const HTTP_LOG_FIELDS_DATA = extern struct {
    Base: HTTP_LOG_DATA,
    UserNameLength: u16,
    UriStemLength: u16,
    ClientIpLength: u16,
    ServerNameLength: u16,
    ServiceNameLength: u16,
    ServerIpLength: u16,
    MethodLength: u16,
    UriQueryLength: u16,
    HostLength: u16,
    UserAgentLength: u16,
    CookieLength: u16,
    ReferrerLength: u16,
    UserName: [*]u16,
    UriStem: [*]u16,
    ClientIp: [*]u8,
    ServerName: [*]u8,
    ServiceName: [*]u8,
    ServerIp: [*]u8,
    Method: [*]u8,
    UriQuery: [*]u8,
    Host: [*]u8,
    UserAgent: [*]u8,
    Cookie: [*]u8,
    Referrer: [*]u8,
    ServerPort: u16,
    ProtocolStatus: u16,
    Win32Status: u32,
    MethodNum: HTTP_VERB,
    SubStatus: u16,
};

pub const HTTP_DATA_CHUNK_TYPE = extern enum(i32) {
    HttpDataChunkFromMemory = 0,
    HttpDataChunkFromFileHandle = 1,
    HttpDataChunkFromFragmentCache = 2,
    HttpDataChunkFromFragmentCacheEx = 3,
    HttpDataChunkMaximum = 4,
};
pub const HttpDataChunkFromMemory = HTTP_DATA_CHUNK_TYPE.HttpDataChunkFromMemory;
pub const HttpDataChunkFromFileHandle = HTTP_DATA_CHUNK_TYPE.HttpDataChunkFromFileHandle;
pub const HttpDataChunkFromFragmentCache = HTTP_DATA_CHUNK_TYPE.HttpDataChunkFromFragmentCache;
pub const HttpDataChunkFromFragmentCacheEx = HTTP_DATA_CHUNK_TYPE.HttpDataChunkFromFragmentCacheEx;
pub const HttpDataChunkMaximum = HTTP_DATA_CHUNK_TYPE.HttpDataChunkMaximum;

pub const HTTP_DATA_CHUNK = extern struct {
    DataChunkType: HTTP_DATA_CHUNK_TYPE,
    Anonymous: HTTP_DATA_CHUNK._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HTTP_REQUEST_HEADERS = extern struct {
    UnknownHeaderCount: u16,
    pUnknownHeaders: *HTTP_UNKNOWN_HEADER,
    TrailerCount: u16,
    pTrailers: *HTTP_UNKNOWN_HEADER,
    KnownHeaders: [41]HTTP_KNOWN_HEADER,
};

pub const HTTP_RESPONSE_HEADERS = extern struct {
    UnknownHeaderCount: u16,
    pUnknownHeaders: *HTTP_UNKNOWN_HEADER,
    TrailerCount: u16,
    pTrailers: *HTTP_UNKNOWN_HEADER,
    KnownHeaders: [30]HTTP_KNOWN_HEADER,
};

pub const HTTP_DELEGATE_REQUEST_PROPERTY_ID = extern enum(i32) {
    DelegateRequestReservedProperty = 0,
};
pub const DelegateRequestReservedProperty = HTTP_DELEGATE_REQUEST_PROPERTY_ID.DelegateRequestReservedProperty;

pub const HTTP_DELEGATE_REQUEST_PROPERTY_INFO = extern struct {
    ProperyId: HTTP_DELEGATE_REQUEST_PROPERTY_ID,
    PropertyInfoLength: u32,
    PropertyInfo: *c_void,
};

pub const HTTP_TRANSPORT_ADDRESS = extern struct {
    pRemoteAddress: *SOCKADDR,
    pLocalAddress: *SOCKADDR,
};

pub const HTTP_COOKED_URL = extern struct {
    FullUrlLength: u16,
    HostLength: u16,
    AbsPathLength: u16,
    QueryStringLength: u16,
    pFullUrl: [*:0]const u16,
    pHost: [*:0]const u16,
    pAbsPath: [*:0]const u16,
    pQueryString: [*:0]const u16,
};

pub const HTTP_AUTH_STATUS = extern enum(i32) {
    HttpAuthStatusSuccess = 0,
    HttpAuthStatusNotAuthenticated = 1,
    HttpAuthStatusFailure = 2,
};
pub const HttpAuthStatusSuccess = HTTP_AUTH_STATUS.HttpAuthStatusSuccess;
pub const HttpAuthStatusNotAuthenticated = HTTP_AUTH_STATUS.HttpAuthStatusNotAuthenticated;
pub const HttpAuthStatusFailure = HTTP_AUTH_STATUS.HttpAuthStatusFailure;

pub const HTTP_REQUEST_AUTH_TYPE = extern enum(i32) {
    HttpRequestAuthTypeNone = 0,
    HttpRequestAuthTypeBasic = 1,
    HttpRequestAuthTypeDigest = 2,
    HttpRequestAuthTypeNTLM = 3,
    HttpRequestAuthTypeNegotiate = 4,
    HttpRequestAuthTypeKerberos = 5,
};
pub const HttpRequestAuthTypeNone = HTTP_REQUEST_AUTH_TYPE.HttpRequestAuthTypeNone;
pub const HttpRequestAuthTypeBasic = HTTP_REQUEST_AUTH_TYPE.HttpRequestAuthTypeBasic;
pub const HttpRequestAuthTypeDigest = HTTP_REQUEST_AUTH_TYPE.HttpRequestAuthTypeDigest;
pub const HttpRequestAuthTypeNTLM = HTTP_REQUEST_AUTH_TYPE.HttpRequestAuthTypeNTLM;
pub const HttpRequestAuthTypeNegotiate = HTTP_REQUEST_AUTH_TYPE.HttpRequestAuthTypeNegotiate;
pub const HttpRequestAuthTypeKerberos = HTTP_REQUEST_AUTH_TYPE.HttpRequestAuthTypeKerberos;

pub const HTTP_SSL_CLIENT_CERT_INFO = extern struct {
    CertFlags: u32,
    CertEncodedSize: u32,
    pCertEncoded: *u8,
    Token: HANDLE,
    CertDeniedByMapper: u8,
};

pub const HTTP_SSL_INFO = extern struct {
    ServerCertKeySize: u16,
    ConnectionKeySize: u16,
    ServerCertIssuerSize: u32,
    ServerCertSubjectSize: u32,
    pServerCertIssuer: [*:0]const u8,
    pServerCertSubject: [*:0]const u8,
    pClientCertInfo: *HTTP_SSL_CLIENT_CERT_INFO,
    SslClientCertNegotiated: u32,
};

pub const HTTP_SSL_PROTOCOL_INFO = extern struct {
    Protocol: u32,
    CipherType: u32,
    CipherStrength: u32,
    HashType: u32,
    HashStrength: u32,
    KeyExchangeType: u32,
    KeyExchangeStrength: u32,
};

pub const HTTP_REQUEST_SIZING_TYPE = extern enum(i32) {
    HttpRequestSizingTypeTlsHandshakeLeg1ClientData = 0,
    HttpRequestSizingTypeTlsHandshakeLeg1ServerData = 1,
    HttpRequestSizingTypeTlsHandshakeLeg2ClientData = 2,
    HttpRequestSizingTypeTlsHandshakeLeg2ServerData = 3,
    HttpRequestSizingTypeHeaders = 4,
    HttpRequestSizingTypeMax = 5,
};
pub const HttpRequestSizingTypeTlsHandshakeLeg1ClientData = HTTP_REQUEST_SIZING_TYPE.HttpRequestSizingTypeTlsHandshakeLeg1ClientData;
pub const HttpRequestSizingTypeTlsHandshakeLeg1ServerData = HTTP_REQUEST_SIZING_TYPE.HttpRequestSizingTypeTlsHandshakeLeg1ServerData;
pub const HttpRequestSizingTypeTlsHandshakeLeg2ClientData = HTTP_REQUEST_SIZING_TYPE.HttpRequestSizingTypeTlsHandshakeLeg2ClientData;
pub const HttpRequestSizingTypeTlsHandshakeLeg2ServerData = HTTP_REQUEST_SIZING_TYPE.HttpRequestSizingTypeTlsHandshakeLeg2ServerData;
pub const HttpRequestSizingTypeHeaders = HTTP_REQUEST_SIZING_TYPE.HttpRequestSizingTypeHeaders;
pub const HttpRequestSizingTypeMax = HTTP_REQUEST_SIZING_TYPE.HttpRequestSizingTypeMax;

pub const HTTP_REQUEST_SIZING_INFO = extern struct {
    Flags: u64,
    RequestIndex: u32,
    RequestSizingCount: u32,
    RequestSizing: [5]u64,
};

pub const HTTP_REQUEST_TIMING_TYPE = extern enum(i32) {
    HttpRequestTimingTypeConnectionStart = 0,
    HttpRequestTimingTypeDataStart = 1,
    HttpRequestTimingTypeTlsCertificateLoadStart = 2,
    HttpRequestTimingTypeTlsCertificateLoadEnd = 3,
    HttpRequestTimingTypeTlsHandshakeLeg1Start = 4,
    HttpRequestTimingTypeTlsHandshakeLeg1End = 5,
    HttpRequestTimingTypeTlsHandshakeLeg2Start = 6,
    HttpRequestTimingTypeTlsHandshakeLeg2End = 7,
    HttpRequestTimingTypeTlsAttributesQueryStart = 8,
    HttpRequestTimingTypeTlsAttributesQueryEnd = 9,
    HttpRequestTimingTypeTlsClientCertQueryStart = 10,
    HttpRequestTimingTypeTlsClientCertQueryEnd = 11,
    HttpRequestTimingTypeHttp2StreamStart = 12,
    HttpRequestTimingTypeHttp2HeaderDecodeStart = 13,
    HttpRequestTimingTypeHttp2HeaderDecodeEnd = 14,
    HttpRequestTimingTypeRequestHeaderParseStart = 15,
    HttpRequestTimingTypeRequestHeaderParseEnd = 16,
    HttpRequestTimingTypeRequestRoutingStart = 17,
    HttpRequestTimingTypeRequestRoutingEnd = 18,
    HttpRequestTimingTypeRequestQueuedForInspection = 19,
    HttpRequestTimingTypeRequestDeliveredForInspection = 20,
    HttpRequestTimingTypeRequestReturnedAfterInspection = 21,
    HttpRequestTimingTypeRequestQueuedForDelegation = 22,
    HttpRequestTimingTypeRequestDeliveredForDelegation = 23,
    HttpRequestTimingTypeRequestReturnedAfterDelegation = 24,
    HttpRequestTimingTypeRequestQueuedForIO = 25,
    HttpRequestTimingTypeRequestDeliveredForIO = 26,
    HttpRequestTimingTypeHttp3StreamStart = 27,
    HttpRequestTimingTypeHttp3HeaderDecodeStart = 28,
    HttpRequestTimingTypeHttp3HeaderDecodeEnd = 29,
    HttpRequestTimingTypeMax = 30,
};
pub const HttpRequestTimingTypeConnectionStart = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeConnectionStart;
pub const HttpRequestTimingTypeDataStart = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeDataStart;
pub const HttpRequestTimingTypeTlsCertificateLoadStart = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeTlsCertificateLoadStart;
pub const HttpRequestTimingTypeTlsCertificateLoadEnd = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeTlsCertificateLoadEnd;
pub const HttpRequestTimingTypeTlsHandshakeLeg1Start = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeTlsHandshakeLeg1Start;
pub const HttpRequestTimingTypeTlsHandshakeLeg1End = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeTlsHandshakeLeg1End;
pub const HttpRequestTimingTypeTlsHandshakeLeg2Start = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeTlsHandshakeLeg2Start;
pub const HttpRequestTimingTypeTlsHandshakeLeg2End = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeTlsHandshakeLeg2End;
pub const HttpRequestTimingTypeTlsAttributesQueryStart = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeTlsAttributesQueryStart;
pub const HttpRequestTimingTypeTlsAttributesQueryEnd = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeTlsAttributesQueryEnd;
pub const HttpRequestTimingTypeTlsClientCertQueryStart = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeTlsClientCertQueryStart;
pub const HttpRequestTimingTypeTlsClientCertQueryEnd = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeTlsClientCertQueryEnd;
pub const HttpRequestTimingTypeHttp2StreamStart = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeHttp2StreamStart;
pub const HttpRequestTimingTypeHttp2HeaderDecodeStart = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeHttp2HeaderDecodeStart;
pub const HttpRequestTimingTypeHttp2HeaderDecodeEnd = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeHttp2HeaderDecodeEnd;
pub const HttpRequestTimingTypeRequestHeaderParseStart = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeRequestHeaderParseStart;
pub const HttpRequestTimingTypeRequestHeaderParseEnd = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeRequestHeaderParseEnd;
pub const HttpRequestTimingTypeRequestRoutingStart = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeRequestRoutingStart;
pub const HttpRequestTimingTypeRequestRoutingEnd = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeRequestRoutingEnd;
pub const HttpRequestTimingTypeRequestQueuedForInspection = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeRequestQueuedForInspection;
pub const HttpRequestTimingTypeRequestDeliveredForInspection = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeRequestDeliveredForInspection;
pub const HttpRequestTimingTypeRequestReturnedAfterInspection = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeRequestReturnedAfterInspection;
pub const HttpRequestTimingTypeRequestQueuedForDelegation = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeRequestQueuedForDelegation;
pub const HttpRequestTimingTypeRequestDeliveredForDelegation = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeRequestDeliveredForDelegation;
pub const HttpRequestTimingTypeRequestReturnedAfterDelegation = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeRequestReturnedAfterDelegation;
pub const HttpRequestTimingTypeRequestQueuedForIO = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeRequestQueuedForIO;
pub const HttpRequestTimingTypeRequestDeliveredForIO = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeRequestDeliveredForIO;
pub const HttpRequestTimingTypeHttp3StreamStart = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeHttp3StreamStart;
pub const HttpRequestTimingTypeHttp3HeaderDecodeStart = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeHttp3HeaderDecodeStart;
pub const HttpRequestTimingTypeHttp3HeaderDecodeEnd = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeHttp3HeaderDecodeEnd;
pub const HttpRequestTimingTypeMax = HTTP_REQUEST_TIMING_TYPE.HttpRequestTimingTypeMax;

pub const HTTP_REQUEST_TIMING_INFO = extern struct {
    RequestTimingCount: u32,
    RequestTiming: [30]u64,
};

pub const HTTP_REQUEST_INFO_TYPE = extern enum(i32) {
    HttpRequestInfoTypeAuth = 0,
    HttpRequestInfoTypeChannelBind = 1,
    HttpRequestInfoTypeSslProtocol = 2,
    HttpRequestInfoTypeSslTokenBindingDraft = 3,
    HttpRequestInfoTypeSslTokenBinding = 4,
    HttpRequestInfoTypeRequestTiming = 5,
    HttpRequestInfoTypeTcpInfoV0 = 6,
    HttpRequestInfoTypeRequestSizing = 7,
    HttpRequestInfoTypeQuicStats = 8,
    HttpRequestInfoTypeTcpInfoV1 = 9,
};
pub const HttpRequestInfoTypeAuth = HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeAuth;
pub const HttpRequestInfoTypeChannelBind = HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeChannelBind;
pub const HttpRequestInfoTypeSslProtocol = HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeSslProtocol;
pub const HttpRequestInfoTypeSslTokenBindingDraft = HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeSslTokenBindingDraft;
pub const HttpRequestInfoTypeSslTokenBinding = HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeSslTokenBinding;
pub const HttpRequestInfoTypeRequestTiming = HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeRequestTiming;
pub const HttpRequestInfoTypeTcpInfoV0 = HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeTcpInfoV0;
pub const HttpRequestInfoTypeRequestSizing = HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeRequestSizing;
pub const HttpRequestInfoTypeQuicStats = HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeQuicStats;
pub const HttpRequestInfoTypeTcpInfoV1 = HTTP_REQUEST_INFO_TYPE.HttpRequestInfoTypeTcpInfoV1;

pub const HTTP_REQUEST_INFO = extern struct {
    InfoType: HTTP_REQUEST_INFO_TYPE,
    InfoLength: u32,
    pInfo: *c_void,
};

pub const HTTP_REQUEST_AUTH_INFO = extern struct {
    AuthStatus: HTTP_AUTH_STATUS,
    SecStatus: i32,
    Flags: u32,
    AuthType: HTTP_REQUEST_AUTH_TYPE,
    AccessToken: HANDLE,
    ContextAttributes: u32,
    PackedContextLength: u32,
    PackedContextType: u32,
    PackedContext: *c_void,
    MutualAuthDataLength: u32,
    pMutualAuthData: [*]u8,
    PackageNameLength: u16,
    pPackageName: PWSTR,
};

pub const HTTP_REQUEST_V1 = extern struct {
    Flags: u32,
    ConnectionId: u64,
    RequestId: u64,
    UrlContext: u64,
    Version: HTTP_VERSION,
    Verb: HTTP_VERB,
    UnknownVerbLength: u16,
    RawUrlLength: u16,
    pUnknownVerb: [*:0]const u8,
    pRawUrl: [*:0]const u8,
    CookedUrl: HTTP_COOKED_URL,
    Address: HTTP_TRANSPORT_ADDRESS,
    Headers: HTTP_REQUEST_HEADERS,
    BytesReceived: u64,
    EntityChunkCount: u16,
    pEntityChunks: *HTTP_DATA_CHUNK,
    RawConnectionId: u64,
    pSslInfo: *HTTP_SSL_INFO,
};

pub const HTTP_REQUEST_V2 = extern struct {
    __AnonymousBase_http_L1816_C35: HTTP_REQUEST_V1,
    RequestInfoCount: u16,
    pRequestInfo: *HTTP_REQUEST_INFO,
};

pub const HTTP_RESPONSE_V1 = extern struct {
    Flags: u32,
    Version: HTTP_VERSION,
    StatusCode: u16,
    ReasonLength: u16,
    pReason: [*:0]const u8,
    Headers: HTTP_RESPONSE_HEADERS,
    EntityChunkCount: u16,
    pEntityChunks: *HTTP_DATA_CHUNK,
};

pub const HTTP_RESPONSE_INFO_TYPE = extern enum(i32) {
    HttpResponseInfoTypeMultipleKnownHeaders = 0,
    HttpResponseInfoTypeAuthenticationProperty = 1,
    HttpResponseInfoTypeQoSProperty = 2,
    HttpResponseInfoTypeChannelBind = 3,
};
pub const HttpResponseInfoTypeMultipleKnownHeaders = HTTP_RESPONSE_INFO_TYPE.HttpResponseInfoTypeMultipleKnownHeaders;
pub const HttpResponseInfoTypeAuthenticationProperty = HTTP_RESPONSE_INFO_TYPE.HttpResponseInfoTypeAuthenticationProperty;
pub const HttpResponseInfoTypeQoSProperty = HTTP_RESPONSE_INFO_TYPE.HttpResponseInfoTypeQoSProperty;
pub const HttpResponseInfoTypeChannelBind = HTTP_RESPONSE_INFO_TYPE.HttpResponseInfoTypeChannelBind;

pub const HTTP_RESPONSE_INFO = extern struct {
    Type: HTTP_RESPONSE_INFO_TYPE,
    Length: u32,
    pInfo: *c_void,
};

pub const HTTP_MULTIPLE_KNOWN_HEADERS = extern struct {
    HeaderId: HTTP_HEADER_ID,
    Flags: u32,
    KnownHeaderCount: u16,
    KnownHeaders: *HTTP_KNOWN_HEADER,
};

pub const HTTP_RESPONSE_V2 = extern struct {
    __AnonymousBase_http_L2003_C36: HTTP_RESPONSE_V1,
    ResponseInfoCount: u16,
    pResponseInfo: *HTTP_RESPONSE_INFO,
};

pub const HTTPAPI_VERSION = extern struct {
    HttpApiMajorVersion: u16,
    HttpApiMinorVersion: u16,
};

pub const HTTP_CACHE_POLICY_TYPE = extern enum(i32) {
    HttpCachePolicyNocache = 0,
    HttpCachePolicyUserInvalidates = 1,
    HttpCachePolicyTimeToLive = 2,
    HttpCachePolicyMaximum = 3,
};
pub const HttpCachePolicyNocache = HTTP_CACHE_POLICY_TYPE.HttpCachePolicyNocache;
pub const HttpCachePolicyUserInvalidates = HTTP_CACHE_POLICY_TYPE.HttpCachePolicyUserInvalidates;
pub const HttpCachePolicyTimeToLive = HTTP_CACHE_POLICY_TYPE.HttpCachePolicyTimeToLive;
pub const HttpCachePolicyMaximum = HTTP_CACHE_POLICY_TYPE.HttpCachePolicyMaximum;

pub const HTTP_CACHE_POLICY = extern struct {
    Policy: HTTP_CACHE_POLICY_TYPE,
    SecondsToLive: u32,
};

pub const HTTP_SERVICE_CONFIG_ID = extern enum(i32) {
    HttpServiceConfigIPListenList = 0,
    HttpServiceConfigSSLCertInfo = 1,
    HttpServiceConfigUrlAclInfo = 2,
    HttpServiceConfigTimeout = 3,
    HttpServiceConfigCache = 4,
    HttpServiceConfigSslSniCertInfo = 5,
    HttpServiceConfigSslCcsCertInfo = 6,
    HttpServiceConfigSetting = 7,
    HttpServiceConfigSslCertInfoEx = 8,
    HttpServiceConfigSslSniCertInfoEx = 9,
    HttpServiceConfigSslCcsCertInfoEx = 10,
    HttpServiceConfigSslScopedCcsCertInfo = 11,
    HttpServiceConfigSslScopedCcsCertInfoEx = 12,
    HttpServiceConfigMax = 13,
};
pub const HttpServiceConfigIPListenList = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigIPListenList;
pub const HttpServiceConfigSSLCertInfo = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSSLCertInfo;
pub const HttpServiceConfigUrlAclInfo = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigUrlAclInfo;
pub const HttpServiceConfigTimeout = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigTimeout;
pub const HttpServiceConfigCache = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigCache;
pub const HttpServiceConfigSslSniCertInfo = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSslSniCertInfo;
pub const HttpServiceConfigSslCcsCertInfo = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSslCcsCertInfo;
pub const HttpServiceConfigSetting = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSetting;
pub const HttpServiceConfigSslCertInfoEx = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSslCertInfoEx;
pub const HttpServiceConfigSslSniCertInfoEx = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSslSniCertInfoEx;
pub const HttpServiceConfigSslCcsCertInfoEx = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSslCcsCertInfoEx;
pub const HttpServiceConfigSslScopedCcsCertInfo = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSslScopedCcsCertInfo;
pub const HttpServiceConfigSslScopedCcsCertInfoEx = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigSslScopedCcsCertInfoEx;
pub const HttpServiceConfigMax = HTTP_SERVICE_CONFIG_ID.HttpServiceConfigMax;

pub const HTTP_SERVICE_CONFIG_QUERY_TYPE = extern enum(i32) {
    HttpServiceConfigQueryExact = 0,
    HttpServiceConfigQueryNext = 1,
    HttpServiceConfigQueryMax = 2,
};
pub const HttpServiceConfigQueryExact = HTTP_SERVICE_CONFIG_QUERY_TYPE.HttpServiceConfigQueryExact;
pub const HttpServiceConfigQueryNext = HTTP_SERVICE_CONFIG_QUERY_TYPE.HttpServiceConfigQueryNext;
pub const HttpServiceConfigQueryMax = HTTP_SERVICE_CONFIG_QUERY_TYPE.HttpServiceConfigQueryMax;

pub const HTTP_SERVICE_CONFIG_SSL_KEY = extern struct {
    pIpPort: *SOCKADDR,
};

pub const HTTP_SERVICE_CONFIG_SSL_KEY_EX = extern struct {
    IpPort: SOCKADDR_STORAGE_LH,
};

pub const HTTP_SERVICE_CONFIG_SSL_SNI_KEY = extern struct {
    IpPort: SOCKADDR_STORAGE_LH,
    Host: PWSTR,
};

pub const HTTP_SERVICE_CONFIG_SSL_CCS_KEY = extern struct {
    LocalAddress: SOCKADDR_STORAGE_LH,
};

pub const HTTP_SERVICE_CONFIG_SSL_PARAM = extern struct {
    SslHashLength: u32,
    pSslHash: *c_void,
    AppId: Guid,
    pSslCertStoreName: PWSTR,
    DefaultCertCheckMode: u32,
    DefaultRevocationFreshnessTime: u32,
    DefaultRevocationUrlRetrievalTimeout: u32,
    pDefaultSslCtlIdentifier: PWSTR,
    pDefaultSslCtlStoreName: PWSTR,
    DefaultFlags: u32,
};

pub const HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE = extern enum(i32) {
    ExParamTypeHttp2Window = 0,
    ExParamTypeHttp2SettingsLimits = 1,
    ExParamTypeHttpPerformance = 2,
    ExParamTypeMax = 3,
};
pub const ExParamTypeHttp2Window = HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE.ExParamTypeHttp2Window;
pub const ExParamTypeHttp2SettingsLimits = HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE.ExParamTypeHttp2SettingsLimits;
pub const ExParamTypeHttpPerformance = HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE.ExParamTypeHttpPerformance;
pub const ExParamTypeMax = HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE.ExParamTypeMax;

pub const HTTP2_WINDOW_SIZE_PARAM = extern struct {
    Http2ReceiveWindowSize: u32,
};

pub const HTTP2_SETTINGS_LIMITS_PARAM = extern struct {
    Http2MaxSettingsPerFrame: u32,
    Http2MaxSettingsPerMinute: u32,
};

pub const HTTP_PERFORMANCE_PARAM = extern struct {
    SendBufferingFlags: u64,
    EnableAggressiveICW: u8,
    MaxBufferedSendBytes: u32,
    MaxConcurrentClientStreams: u32,
};

pub const HTTP_SERVICE_CONFIG_SSL_PARAM_EX = extern struct {
    ParamType: HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE,
    Flags: u64,
    Anonymous: HTTP_SERVICE_CONFIG_SSL_PARAM_EX._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const HTTP_SERVICE_CONFIG_SSL_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_KEY,
    ParamDesc: HTTP_SERVICE_CONFIG_SSL_PARAM,
};

pub const HTTP_SERVICE_CONFIG_SSL_SNI_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_SNI_KEY,
    ParamDesc: HTTP_SERVICE_CONFIG_SSL_PARAM,
};

pub const HTTP_SERVICE_CONFIG_SSL_CCS_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_CCS_KEY,
    ParamDesc: HTTP_SERVICE_CONFIG_SSL_PARAM,
};

pub const HTTP_SERVICE_CONFIG_SSL_SET_EX = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_KEY_EX,
    ParamDesc: HTTP_SERVICE_CONFIG_SSL_PARAM_EX,
};

pub const HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_SNI_KEY,
    ParamDesc: HTTP_SERVICE_CONFIG_SSL_PARAM_EX,
};

pub const HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_CCS_KEY,
    ParamDesc: HTTP_SERVICE_CONFIG_SSL_PARAM_EX,
};

pub const HTTP_SERVICE_CONFIG_SSL_QUERY = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_KEY,
    dwToken: u32,
};

pub const HTTP_SERVICE_CONFIG_SSL_SNI_QUERY = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_SNI_KEY,
    dwToken: u32,
};

pub const HTTP_SERVICE_CONFIG_SSL_CCS_QUERY = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_CCS_KEY,
    dwToken: u32,
};

pub const HTTP_SERVICE_CONFIG_SSL_QUERY_EX = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_KEY_EX,
    dwToken: u32,
    ParamType: HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE,
};

pub const HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_SNI_KEY,
    dwToken: u32,
    ParamType: HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE,
};

pub const HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_SSL_CCS_KEY,
    dwToken: u32,
    ParamType: HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE,
};

pub const HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM = extern struct {
    AddrLength: u16,
    pAddress: *SOCKADDR,
};

pub const HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY = extern struct {
    AddrCount: u32,
    AddrList: [1]SOCKADDR_STORAGE_LH,
};

pub const HTTP_SERVICE_CONFIG_URLACL_KEY = extern struct {
    pUrlPrefix: PWSTR,
};

pub const HTTP_SERVICE_CONFIG_URLACL_PARAM = extern struct {
    pStringSecurityDescriptor: PWSTR,
};

pub const HTTP_SERVICE_CONFIG_URLACL_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_URLACL_KEY,
    ParamDesc: HTTP_SERVICE_CONFIG_URLACL_PARAM,
};

pub const HTTP_SERVICE_CONFIG_URLACL_QUERY = extern struct {
    QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE,
    KeyDesc: HTTP_SERVICE_CONFIG_URLACL_KEY,
    dwToken: u32,
};

pub const HTTP_SERVICE_CONFIG_CACHE_KEY = extern enum(i32) {
    MaxCacheResponseSize = 0,
    CacheRangeChunkSize = 1,
};
pub const MaxCacheResponseSize = HTTP_SERVICE_CONFIG_CACHE_KEY.MaxCacheResponseSize;
pub const CacheRangeChunkSize = HTTP_SERVICE_CONFIG_CACHE_KEY.CacheRangeChunkSize;

pub const HTTP_SERVICE_CONFIG_CACHE_SET = extern struct {
    KeyDesc: HTTP_SERVICE_CONFIG_CACHE_KEY,
    ParamDesc: u32,
};

pub const HTTP_REQUEST_PROPERTY = extern enum(i32) {
    HttpRequestPropertyIsb = 0,
    HttpRequestPropertyTcpInfoV0 = 1,
    HttpRequestPropertyQuicStats = 2,
    HttpRequestPropertyTcpInfoV1 = 3,
    HttpRequestPropertySni = 4,
};
pub const HttpRequestPropertyIsb = HTTP_REQUEST_PROPERTY.HttpRequestPropertyIsb;
pub const HttpRequestPropertyTcpInfoV0 = HTTP_REQUEST_PROPERTY.HttpRequestPropertyTcpInfoV0;
pub const HttpRequestPropertyQuicStats = HTTP_REQUEST_PROPERTY.HttpRequestPropertyQuicStats;
pub const HttpRequestPropertyTcpInfoV1 = HTTP_REQUEST_PROPERTY.HttpRequestPropertyTcpInfoV1;
pub const HttpRequestPropertySni = HTTP_REQUEST_PROPERTY.HttpRequestPropertySni;

pub const HTTP_QUERY_REQUEST_QUALIFIER_TCP = extern struct {
    Freshness: u64,
};

pub const HTTP_QUERY_REQUEST_QUALIFIER_QUIC = extern struct {
    Freshness: u64,
};

pub const HTTP_REQUEST_PROPERTY_SNI = extern struct {
    Hostname: [256]u16,
    Flags: u32,
};

pub const WINHTTP_ASYNC_RESULT = extern struct {
    dwResult: ?*c_void,
    dwError: u32,
};

pub const URL_COMPONENTS = extern struct {
    dwStructSize: u32,
    lpszScheme: PWSTR,
    dwSchemeLength: u32,
    nScheme: INTERNET_SCHEME,
    lpszHostName: PWSTR,
    dwHostNameLength: u32,
    nPort: u16,
    lpszUserName: PWSTR,
    dwUserNameLength: u32,
    lpszPassword: PWSTR,
    dwPasswordLength: u32,
    lpszUrlPath: PWSTR,
    dwUrlPathLength: u32,
    lpszExtraInfo: PWSTR,
    dwExtraInfoLength: u32,
};

pub const WINHTTP_PROXY_INFO = extern struct {
    dwAccessType: u32,
    lpszProxy: PWSTR,
    lpszProxyBypass: PWSTR,
};

pub const WINHTTP_AUTOPROXY_OPTIONS = extern struct {
    dwFlags: u32,
    dwAutoDetectFlags: u32,
    lpszAutoConfigUrl: [*:0]const u16,
    lpvReserved: *c_void,
    dwReserved: u32,
    fAutoLogonIfChallenged: BOOL,
};

pub const WINHTTP_PROXY_RESULT_ENTRY = extern struct {
    fProxy: BOOL,
    fBypass: BOOL,
    ProxyScheme: INTERNET_SCHEME,
    pwszProxy: PWSTR,
    ProxyPort: u16,
};

pub const WINHTTP_PROXY_RESULT = extern struct {
    cEntries: u32,
    pEntries: *WINHTTP_PROXY_RESULT_ENTRY,
};

pub const WINHTTP_PROXY_RESULT_EX = extern struct {
    cEntries: u32,
    pEntries: *WINHTTP_PROXY_RESULT_ENTRY,
    hProxyDetectionHandle: HANDLE,
    dwProxyInterfaceAffinity: u32,
};

pub const _WinHttpProxyNetworkKey = extern struct {
    pbBuffer: [128]u8,
};

pub const WINHTTP_PROXY_SETTINGS = extern struct {
    dwStructSize: u32,
    dwFlags: u32,
    dwCurrentSettingsVersion: u32,
    pwszConnectionName: PWSTR,
    pwszProxy: PWSTR,
    pwszProxyBypass: PWSTR,
    pwszAutoconfigUrl: PWSTR,
    pwszAutoconfigSecondaryUrl: PWSTR,
    dwAutoDiscoveryFlags: u32,
    pwszLastKnownGoodAutoConfigUrl: PWSTR,
    dwAutoconfigReloadDelayMins: u32,
    ftLastKnownDetectTime: FILETIME,
    dwDetectedInterfaceIpCount: u32,
    pdwDetectedInterfaceIp: *u32,
    cNetworkKeys: u32,
    pNetworkKeys: *_WinHttpProxyNetworkKey,
};

pub const WINHTTP_CERTIFICATE_INFO = extern struct {
    ftExpiry: FILETIME,
    ftStart: FILETIME,
    lpszSubjectInfo: PWSTR,
    lpszIssuerInfo: PWSTR,
    lpszProtocolName: PWSTR,
    lpszSignatureAlgName: PWSTR,
    lpszEncryptionAlgName: PWSTR,
    dwKeySize: u32,
};

pub const WINHTTP_CONNECTION_INFO = extern struct {
    cbSize: u32,
    LocalAddress: SOCKADDR_STORAGE_LH,
    RemoteAddress: SOCKADDR_STORAGE_LH,
};

pub const WINHTTP_REQUEST_TIME_ENTRY = extern enum(i32) {
    WinHttpProxyDetectionStart = 0,
    WinHttpProxyDetectionEnd = 1,
    WinHttpConnectionAcquireStart = 2,
    WinHttpConnectionAcquireWaitEnd = 3,
    WinHttpConnectionAcquireEnd = 4,
    WinHttpNameResolutionStart = 5,
    WinHttpNameResolutionEnd = 6,
    WinHttpConnectionEstablishmentStart = 7,
    WinHttpConnectionEstablishmentEnd = 8,
    WinHttpTlsHandshakeClientLeg1Start = 9,
    WinHttpTlsHandshakeClientLeg1End = 10,
    WinHttpTlsHandshakeClientLeg2Start = 11,
    WinHttpTlsHandshakeClientLeg2End = 12,
    WinHttpTlsHandshakeClientLeg3Start = 13,
    WinHttpTlsHandshakeClientLeg3End = 14,
    WinHttpStreamWaitStart = 15,
    WinHttpStreamWaitEnd = 16,
    WinHttpSendRequestStart = 17,
    WinHttpSendRequestHeadersCompressionStart = 18,
    WinHttpSendRequestHeadersCompressionEnd = 19,
    WinHttpSendRequestHeadersEnd = 20,
    WinHttpSendRequestEnd = 21,
    WinHttpReceiveResponseStart = 22,
    WinHttpReceiveResponseHeadersDecompressionStart = 23,
    WinHttpReceiveResponseHeadersDecompressionEnd = 24,
    WinHttpReceiveResponseHeadersEnd = 25,
    WinHttpReceiveResponseBodyDecompressionDelta = 26,
    WinHttpReceiveResponseEnd = 27,
    WinHttpProxyTunnelStart = 28,
    WinHttpProxyTunnelEnd = 29,
    WinHttpProxyTlsHandshakeClientLeg1Start = 30,
    WinHttpProxyTlsHandshakeClientLeg1End = 31,
    WinHttpProxyTlsHandshakeClientLeg2Start = 32,
    WinHttpProxyTlsHandshakeClientLeg2End = 33,
    WinHttpProxyTlsHandshakeClientLeg3Start = 34,
    WinHttpProxyTlsHandshakeClientLeg3End = 35,
    WinHttpRequestTimeLast = 36,
    WinHttpRequestTimeMax = 64,
};
pub const WinHttpProxyDetectionStart = WINHTTP_REQUEST_TIME_ENTRY.WinHttpProxyDetectionStart;
pub const WinHttpProxyDetectionEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpProxyDetectionEnd;
pub const WinHttpConnectionAcquireStart = WINHTTP_REQUEST_TIME_ENTRY.WinHttpConnectionAcquireStart;
pub const WinHttpConnectionAcquireWaitEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpConnectionAcquireWaitEnd;
pub const WinHttpConnectionAcquireEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpConnectionAcquireEnd;
pub const WinHttpNameResolutionStart = WINHTTP_REQUEST_TIME_ENTRY.WinHttpNameResolutionStart;
pub const WinHttpNameResolutionEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpNameResolutionEnd;
pub const WinHttpConnectionEstablishmentStart = WINHTTP_REQUEST_TIME_ENTRY.WinHttpConnectionEstablishmentStart;
pub const WinHttpConnectionEstablishmentEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpConnectionEstablishmentEnd;
pub const WinHttpTlsHandshakeClientLeg1Start = WINHTTP_REQUEST_TIME_ENTRY.WinHttpTlsHandshakeClientLeg1Start;
pub const WinHttpTlsHandshakeClientLeg1End = WINHTTP_REQUEST_TIME_ENTRY.WinHttpTlsHandshakeClientLeg1End;
pub const WinHttpTlsHandshakeClientLeg2Start = WINHTTP_REQUEST_TIME_ENTRY.WinHttpTlsHandshakeClientLeg2Start;
pub const WinHttpTlsHandshakeClientLeg2End = WINHTTP_REQUEST_TIME_ENTRY.WinHttpTlsHandshakeClientLeg2End;
pub const WinHttpTlsHandshakeClientLeg3Start = WINHTTP_REQUEST_TIME_ENTRY.WinHttpTlsHandshakeClientLeg3Start;
pub const WinHttpTlsHandshakeClientLeg3End = WINHTTP_REQUEST_TIME_ENTRY.WinHttpTlsHandshakeClientLeg3End;
pub const WinHttpStreamWaitStart = WINHTTP_REQUEST_TIME_ENTRY.WinHttpStreamWaitStart;
pub const WinHttpStreamWaitEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpStreamWaitEnd;
pub const WinHttpSendRequestStart = WINHTTP_REQUEST_TIME_ENTRY.WinHttpSendRequestStart;
pub const WinHttpSendRequestHeadersCompressionStart = WINHTTP_REQUEST_TIME_ENTRY.WinHttpSendRequestHeadersCompressionStart;
pub const WinHttpSendRequestHeadersCompressionEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpSendRequestHeadersCompressionEnd;
pub const WinHttpSendRequestHeadersEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpSendRequestHeadersEnd;
pub const WinHttpSendRequestEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpSendRequestEnd;
pub const WinHttpReceiveResponseStart = WINHTTP_REQUEST_TIME_ENTRY.WinHttpReceiveResponseStart;
pub const WinHttpReceiveResponseHeadersDecompressionStart = WINHTTP_REQUEST_TIME_ENTRY.WinHttpReceiveResponseHeadersDecompressionStart;
pub const WinHttpReceiveResponseHeadersDecompressionEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpReceiveResponseHeadersDecompressionEnd;
pub const WinHttpReceiveResponseHeadersEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpReceiveResponseHeadersEnd;
pub const WinHttpReceiveResponseBodyDecompressionDelta = WINHTTP_REQUEST_TIME_ENTRY.WinHttpReceiveResponseBodyDecompressionDelta;
pub const WinHttpReceiveResponseEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpReceiveResponseEnd;
pub const WinHttpProxyTunnelStart = WINHTTP_REQUEST_TIME_ENTRY.WinHttpProxyTunnelStart;
pub const WinHttpProxyTunnelEnd = WINHTTP_REQUEST_TIME_ENTRY.WinHttpProxyTunnelEnd;
pub const WinHttpProxyTlsHandshakeClientLeg1Start = WINHTTP_REQUEST_TIME_ENTRY.WinHttpProxyTlsHandshakeClientLeg1Start;
pub const WinHttpProxyTlsHandshakeClientLeg1End = WINHTTP_REQUEST_TIME_ENTRY.WinHttpProxyTlsHandshakeClientLeg1End;
pub const WinHttpProxyTlsHandshakeClientLeg2Start = WINHTTP_REQUEST_TIME_ENTRY.WinHttpProxyTlsHandshakeClientLeg2Start;
pub const WinHttpProxyTlsHandshakeClientLeg2End = WINHTTP_REQUEST_TIME_ENTRY.WinHttpProxyTlsHandshakeClientLeg2End;
pub const WinHttpProxyTlsHandshakeClientLeg3Start = WINHTTP_REQUEST_TIME_ENTRY.WinHttpProxyTlsHandshakeClientLeg3Start;
pub const WinHttpProxyTlsHandshakeClientLeg3End = WINHTTP_REQUEST_TIME_ENTRY.WinHttpProxyTlsHandshakeClientLeg3End;
pub const WinHttpRequestTimeLast = WINHTTP_REQUEST_TIME_ENTRY.WinHttpRequestTimeLast;
pub const WinHttpRequestTimeMax = WINHTTP_REQUEST_TIME_ENTRY.WinHttpRequestTimeMax;

pub const WINHTTP_REQUEST_TIMES = extern struct {
    cTimes: u32,
    rgullTimes: [64]u64,
};

pub const WINHTTP_REQUEST_STAT_ENTRY = extern enum(i32) {
    WinHttpConnectFailureCount = 0,
    WinHttpProxyFailureCount = 1,
    WinHttpTlsHandshakeClientLeg1Size = 2,
    WinHttpTlsHandshakeServerLeg1Size = 3,
    WinHttpTlsHandshakeClientLeg2Size = 4,
    WinHttpTlsHandshakeServerLeg2Size = 5,
    WinHttpRequestHeadersSize = 6,
    WinHttpRequestHeadersCompressedSize = 7,
    WinHttpResponseHeadersSize = 8,
    WinHttpResponseHeadersCompressedSize = 9,
    WinHttpResponseBodySize = 10,
    WinHttpResponseBodyCompressedSize = 11,
    WinHttpProxyTlsHandshakeClientLeg1Size = 12,
    WinHttpProxyTlsHandshakeServerLeg1Size = 13,
    WinHttpProxyTlsHandshakeClientLeg2Size = 14,
    WinHttpProxyTlsHandshakeServerLeg2Size = 15,
    WinHttpRequestStatLast = 16,
    WinHttpRequestStatMax = 32,
};
pub const WinHttpConnectFailureCount = WINHTTP_REQUEST_STAT_ENTRY.WinHttpConnectFailureCount;
pub const WinHttpProxyFailureCount = WINHTTP_REQUEST_STAT_ENTRY.WinHttpProxyFailureCount;
pub const WinHttpTlsHandshakeClientLeg1Size = WINHTTP_REQUEST_STAT_ENTRY.WinHttpTlsHandshakeClientLeg1Size;
pub const WinHttpTlsHandshakeServerLeg1Size = WINHTTP_REQUEST_STAT_ENTRY.WinHttpTlsHandshakeServerLeg1Size;
pub const WinHttpTlsHandshakeClientLeg2Size = WINHTTP_REQUEST_STAT_ENTRY.WinHttpTlsHandshakeClientLeg2Size;
pub const WinHttpTlsHandshakeServerLeg2Size = WINHTTP_REQUEST_STAT_ENTRY.WinHttpTlsHandshakeServerLeg2Size;
pub const WinHttpRequestHeadersSize = WINHTTP_REQUEST_STAT_ENTRY.WinHttpRequestHeadersSize;
pub const WinHttpRequestHeadersCompressedSize = WINHTTP_REQUEST_STAT_ENTRY.WinHttpRequestHeadersCompressedSize;
pub const WinHttpResponseHeadersSize = WINHTTP_REQUEST_STAT_ENTRY.WinHttpResponseHeadersSize;
pub const WinHttpResponseHeadersCompressedSize = WINHTTP_REQUEST_STAT_ENTRY.WinHttpResponseHeadersCompressedSize;
pub const WinHttpResponseBodySize = WINHTTP_REQUEST_STAT_ENTRY.WinHttpResponseBodySize;
pub const WinHttpResponseBodyCompressedSize = WINHTTP_REQUEST_STAT_ENTRY.WinHttpResponseBodyCompressedSize;
pub const WinHttpProxyTlsHandshakeClientLeg1Size = WINHTTP_REQUEST_STAT_ENTRY.WinHttpProxyTlsHandshakeClientLeg1Size;
pub const WinHttpProxyTlsHandshakeServerLeg1Size = WINHTTP_REQUEST_STAT_ENTRY.WinHttpProxyTlsHandshakeServerLeg1Size;
pub const WinHttpProxyTlsHandshakeClientLeg2Size = WINHTTP_REQUEST_STAT_ENTRY.WinHttpProxyTlsHandshakeClientLeg2Size;
pub const WinHttpProxyTlsHandshakeServerLeg2Size = WINHTTP_REQUEST_STAT_ENTRY.WinHttpProxyTlsHandshakeServerLeg2Size;
pub const WinHttpRequestStatLast = WINHTTP_REQUEST_STAT_ENTRY.WinHttpRequestStatLast;
pub const WinHttpRequestStatMax = WINHTTP_REQUEST_STAT_ENTRY.WinHttpRequestStatMax;

pub const WINHTTP_REQUEST_STATS = extern struct {
    ullFlags: u64,
    ulIndex: u32,
    cStats: u32,
    rgullStats: [32]u64,
};

pub const WINHTTP_EXTENDED_HEADER = extern struct {
    Anonymous1: WINHTTP_EXTENDED_HEADER._Anonymous1_e__Union,
    Anonymous2: WINHTTP_EXTENDED_HEADER._Anonymous2_e__Union,
    const _Anonymous2_e__Union = u32; // TODO: generate this nested type!
    const _Anonymous1_e__Union = u32; // TODO: generate this nested type!
};

pub const WINHTTP_CREDS = extern struct {
    lpszUserName: PSTR,
    lpszPassword: PSTR,
    lpszRealm: PSTR,
    dwAuthScheme: u32,
    lpszHostName: PSTR,
    dwPort: u32,
};

pub const WINHTTP_CREDS_EX = extern struct {
    lpszUserName: PSTR,
    lpszPassword: PSTR,
    lpszRealm: PSTR,
    dwAuthScheme: u32,
    lpszHostName: PSTR,
    dwPort: u32,
    lpszUrl: PSTR,
};

pub const WINHTTP_STATUS_CALLBACK = fn(
    hInternet: *c_void,
    dwContext: ?*c_void,
    dwInternetStatus: u32,
    lpvStatusInformation: *c_void,
    dwStatusInformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPWINHTTP_STATUS_CALLBACK = fn(
) callconv(@import("std").os.windows.WINAPI) void;

pub const WINHTTP_CURRENT_USER_IE_PROXY_CONFIG = extern struct {
    fAutoDetect: BOOL,
    lpszAutoConfigUrl: PWSTR,
    lpszProxy: PWSTR,
    lpszProxyBypass: PWSTR,
};

pub const WINHTTP_WEB_SOCKET_OPERATION = extern enum(i32) {
    WINHTTP_WEB_SOCKET_SEND_OPERATION = 0,
    WINHTTP_WEB_SOCKET_RECEIVE_OPERATION = 1,
    WINHTTP_WEB_SOCKET_CLOSE_OPERATION = 2,
    WINHTTP_WEB_SOCKET_SHUTDOWN_OPERATION = 3,
};
pub const WINHTTP_WEB_SOCKET_SEND_OPERATION = WINHTTP_WEB_SOCKET_OPERATION.WINHTTP_WEB_SOCKET_SEND_OPERATION;
pub const WINHTTP_WEB_SOCKET_RECEIVE_OPERATION = WINHTTP_WEB_SOCKET_OPERATION.WINHTTP_WEB_SOCKET_RECEIVE_OPERATION;
pub const WINHTTP_WEB_SOCKET_CLOSE_OPERATION = WINHTTP_WEB_SOCKET_OPERATION.WINHTTP_WEB_SOCKET_CLOSE_OPERATION;
pub const WINHTTP_WEB_SOCKET_SHUTDOWN_OPERATION = WINHTTP_WEB_SOCKET_OPERATION.WINHTTP_WEB_SOCKET_SHUTDOWN_OPERATION;

pub const WINHTTP_WEB_SOCKET_BUFFER_TYPE = extern enum(i32) {
    WINHTTP_WEB_SOCKET_BINARY_MESSAGE_BUFFER_TYPE = 0,
    WINHTTP_WEB_SOCKET_BINARY_FRAGMENT_BUFFER_TYPE = 1,
    WINHTTP_WEB_SOCKET_UTF8_MESSAGE_BUFFER_TYPE = 2,
    WINHTTP_WEB_SOCKET_UTF8_FRAGMENT_BUFFER_TYPE = 3,
    WINHTTP_WEB_SOCKET_CLOSE_BUFFER_TYPE = 4,
};
pub const WINHTTP_WEB_SOCKET_BINARY_MESSAGE_BUFFER_TYPE = WINHTTP_WEB_SOCKET_BUFFER_TYPE.WINHTTP_WEB_SOCKET_BINARY_MESSAGE_BUFFER_TYPE;
pub const WINHTTP_WEB_SOCKET_BINARY_FRAGMENT_BUFFER_TYPE = WINHTTP_WEB_SOCKET_BUFFER_TYPE.WINHTTP_WEB_SOCKET_BINARY_FRAGMENT_BUFFER_TYPE;
pub const WINHTTP_WEB_SOCKET_UTF8_MESSAGE_BUFFER_TYPE = WINHTTP_WEB_SOCKET_BUFFER_TYPE.WINHTTP_WEB_SOCKET_UTF8_MESSAGE_BUFFER_TYPE;
pub const WINHTTP_WEB_SOCKET_UTF8_FRAGMENT_BUFFER_TYPE = WINHTTP_WEB_SOCKET_BUFFER_TYPE.WINHTTP_WEB_SOCKET_UTF8_FRAGMENT_BUFFER_TYPE;
pub const WINHTTP_WEB_SOCKET_CLOSE_BUFFER_TYPE = WINHTTP_WEB_SOCKET_BUFFER_TYPE.WINHTTP_WEB_SOCKET_CLOSE_BUFFER_TYPE;

pub const WINHTTP_WEB_SOCKET_CLOSE_STATUS = extern enum(i32) {
    WINHTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS = 1000,
    WINHTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS = 1001,
    WINHTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = 1002,
    WINHTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = 1003,
    WINHTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS = 1005,
    WINHTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS = 1006,
    WINHTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = 1007,
    WINHTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = 1008,
    WINHTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = 1009,
    WINHTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = 1010,
    WINHTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = 1011,
    WINHTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = 1015,
};
pub const WINHTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.WINHTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.WINHTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.WINHTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.WINHTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.WINHTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.WINHTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.WINHTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.WINHTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.WINHTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.WINHTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.WINHTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS;
pub const WINHTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = WINHTTP_WEB_SOCKET_CLOSE_STATUS.WINHTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS;

pub const WINHTTP_WEB_SOCKET_ASYNC_RESULT = extern struct {
    AsyncResult: WINHTTP_ASYNC_RESULT,
    Operation: WINHTTP_WEB_SOCKET_OPERATION,
};

pub const WINHTTP_WEB_SOCKET_STATUS = extern struct {
    dwBytesTransferred: u32,
    eBufferType: WINHTTP_WEB_SOCKET_BUFFER_TYPE,
};


//--------------------------------------------------------------------------------
// Section: Functions (86)
//--------------------------------------------------------------------------------
pub extern "HTTPAPI" fn HttpInitialize(
    Version: HTTPAPI_VERSION,
    Flags: u32,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpTerminate(
    Flags: u32,
    pReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpCreateHttpHandle(
    RequestQueueHandle: *HANDLE,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpCreateRequestQueue(
    Version: HTTPAPI_VERSION,
    Name: [*:0]const u16,
    SecurityAttributes: *SECURITY_ATTRIBUTES,
    Flags: u32,
    RequestQueueHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpCloseRequestQueue(
    RequestQueueHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpSetRequestQueueProperty(
    RequestQueueHandle: HANDLE,
    Property: HTTP_SERVER_PROPERTY,
    PropertyInformation: [*]u8,
    PropertyInformationLength: u32,
    Reserved1: u32,
    Reserved2: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpQueryRequestQueueProperty(
    RequestQueueHandle: HANDLE,
    Property: HTTP_SERVER_PROPERTY,
    PropertyInformation: ?[*]u8,
    PropertyInformationLength: u32,
    Reserved1: u32,
    ReturnLength: ?*u32,
    Reserved2: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpShutdownRequestQueue(
    RequestQueueHandle: HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpReceiveClientCertificate(
    RequestQueueHandle: HANDLE,
    ConnectionId: u64,
    Flags: u32,
    SslClientCertInfo: [*]HTTP_SSL_CLIENT_CERT_INFO,
    SslClientCertInfoSize: u32,
    BytesReceived: ?*u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpCreateServerSession(
    Version: HTTPAPI_VERSION,
    ServerSessionId: *u64,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpCloseServerSession(
    ServerSessionId: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpQueryServerSessionProperty(
    ServerSessionId: u64,
    Property: HTTP_SERVER_PROPERTY,
    PropertyInformation: ?[*]u8,
    PropertyInformationLength: u32,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpSetServerSessionProperty(
    ServerSessionId: u64,
    Property: HTTP_SERVER_PROPERTY,
    PropertyInformation: [*]u8,
    PropertyInformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpAddUrl(
    RequestQueueHandle: HANDLE,
    FullyQualifiedUrl: [*:0]const u16,
    Reserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpRemoveUrl(
    RequestQueueHandle: HANDLE,
    FullyQualifiedUrl: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpCreateUrlGroup(
    ServerSessionId: u64,
    pUrlGroupId: *u64,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpCloseUrlGroup(
    UrlGroupId: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpAddUrlToUrlGroup(
    UrlGroupId: u64,
    pFullyQualifiedUrl: [*:0]const u16,
    UrlContext: u64,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpRemoveUrlFromUrlGroup(
    UrlGroupId: u64,
    pFullyQualifiedUrl: [*:0]const u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpSetUrlGroupProperty(
    UrlGroupId: u64,
    Property: HTTP_SERVER_PROPERTY,
    PropertyInformation: [*]u8,
    PropertyInformationLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpQueryUrlGroupProperty(
    UrlGroupId: u64,
    Property: HTTP_SERVER_PROPERTY,
    PropertyInformation: ?[*]u8,
    PropertyInformationLength: u32,
    ReturnLength: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpPrepareUrl(
    Reserved: *c_void,
    Flags: u32,
    Url: [*:0]const u16,
    PreparedUrl: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpReceiveHttpRequest(
    RequestQueueHandle: HANDLE,
    RequestId: u64,
    Flags: u32,
    RequestBuffer: [*]HTTP_REQUEST_V2,
    RequestBufferLength: u32,
    BytesReturned: ?*u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpReceiveRequestEntityBody(
    RequestQueueHandle: HANDLE,
    RequestId: u64,
    Flags: u32,
    EntityBuffer: [*]u8,
    EntityBufferLength: u32,
    BytesReturned: ?*u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpSendHttpResponse(
    RequestQueueHandle: HANDLE,
    RequestId: u64,
    Flags: u32,
    HttpResponse: *HTTP_RESPONSE_V2,
    CachePolicy: *HTTP_CACHE_POLICY,
    BytesSent: *u32,
    Reserved1: *c_void,
    Reserved2: u32,
    Overlapped: *OVERLAPPED,
    LogData: *HTTP_LOG_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpSendResponseEntityBody(
    RequestQueueHandle: HANDLE,
    RequestId: u64,
    Flags: u32,
    EntityChunkCount: u16,
    EntityChunks: ?[*]HTTP_DATA_CHUNK,
    BytesSent: *u32,
    Reserved1: *c_void,
    Reserved2: u32,
    Overlapped: *OVERLAPPED,
    LogData: *HTTP_LOG_DATA,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpDeclarePush(
    RequestQueueHandle: HANDLE,
    RequestId: u64,
    Verb: HTTP_VERB,
    Path: [*:0]const u16,
    Query: ?[*:0]const u8,
    Headers: ?*HTTP_REQUEST_HEADERS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpWaitForDisconnect(
    RequestQueueHandle: HANDLE,
    ConnectionId: u64,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpWaitForDisconnectEx(
    RequestQueueHandle: HANDLE,
    ConnectionId: u64,
    Reserved: u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpCancelHttpRequest(
    RequestQueueHandle: HANDLE,
    RequestId: u64,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpWaitForDemandStart(
    RequestQueueHandle: HANDLE,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpFlushResponseCache(
    RequestQueueHandle: HANDLE,
    UrlPrefix: [*:0]const u16,
    Flags: u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpAddFragmentToCache(
    RequestQueueHandle: HANDLE,
    UrlPrefix: [*:0]const u16,
    DataChunk: *HTTP_DATA_CHUNK,
    CachePolicy: *HTTP_CACHE_POLICY,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpReadFragmentFromCache(
    RequestQueueHandle: HANDLE,
    UrlPrefix: [*:0]const u16,
    ByteRange: *HTTP_BYTE_RANGE,
    Buffer: [*]u8,
    BufferLength: u32,
    BytesRead: ?*u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpSetServiceConfiguration(
    ServiceHandle: HANDLE,
    ConfigId: HTTP_SERVICE_CONFIG_ID,
    pConfigInformation: [*]u8,
    ConfigInformationLength: u32,
    pOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpUpdateServiceConfiguration(
    Handle: HANDLE,
    ConfigId: HTTP_SERVICE_CONFIG_ID,
    ConfigInfo: [*]u8,
    ConfigInfoLength: u32,
    Overlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpDeleteServiceConfiguration(
    ServiceHandle: HANDLE,
    ConfigId: HTTP_SERVICE_CONFIG_ID,
    pConfigInformation: [*]u8,
    ConfigInformationLength: u32,
    pOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpQueryServiceConfiguration(
    ServiceHandle: HANDLE,
    ConfigId: HTTP_SERVICE_CONFIG_ID,
    pInput: ?[*]u8,
    InputLength: u32,
    pOutput: ?[*]u8,
    OutputLength: u32,
    pReturnLength: ?*u32,
    pOverlapped: *OVERLAPPED,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "HTTPAPI" fn HttpGetExtension(
    Version: HTTPAPI_VERSION,
    Extension: u32,
    Buffer: *c_void,
    BufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpSetStatusCallback(
    hInternet: *c_void,
    lpfnInternetCallback: WINHTTP_STATUS_CALLBACK,
    dwNotificationFlags: u32,
    dwReserved: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) WINHTTP_STATUS_CALLBACK;

pub extern "WINHTTP" fn WinHttpTimeFromSystemTime(
    pst: *const SYSTEMTIME,
    pwszTime: *[62]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpTimeToSystemTime(
    pwszTime: [*:0]const u16,
    pst: *SYSTEMTIME,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpCrackUrl(
    pwszUrl: [*:0]const u16,
    dwUrlLength: u32,
    dwFlags: u32,
    lpUrlComponents: *URL_COMPONENTS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpCreateUrl(
    lpUrlComponents: *URL_COMPONENTS,
    dwFlags: u32,
    pwszUrl: ?[*:0]u16,
    pdwUrlLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpCheckPlatform(
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpGetDefaultProxyConfiguration(
    pProxyInfo: *WINHTTP_PROXY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpSetDefaultProxyConfiguration(
    pProxyInfo: *WINHTTP_PROXY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpOpen(
    pszAgentW: ?[*:0]const u16,
    dwAccessType: u32,
    pszProxyW: ?[*:0]const u16,
    pszProxyBypassW: ?[*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WINHTTP" fn WinHttpCloseHandle(
    hInternet: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpConnect(
    hSession: *c_void,
    pswzServerName: [*:0]const u16,
    nServerPort: u16,
    dwReserved: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WINHTTP" fn WinHttpReadData(
    hRequest: *c_void,
    lpBuffer: [*]u8,
    dwNumberOfBytesToRead: u32,
    lpdwNumberOfBytesRead: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpWriteData(
    hRequest: *c_void,
    lpBuffer: ?[*]const u8,
    dwNumberOfBytesToWrite: u32,
    lpdwNumberOfBytesWritten: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpQueryDataAvailable(
    hRequest: *c_void,
    lpdwNumberOfBytesAvailable: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpQueryOption(
    hInternet: *c_void,
    dwOption: u32,
    lpBuffer: ?[*]u8,
    lpdwBufferLength: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpSetOption(
    hInternet: ?*c_void,
    dwOption: u32,
    lpBuffer: ?[*]u8,
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpSetTimeouts(
    hInternet: *c_void,
    nResolveTimeout: i32,
    nConnectTimeout: i32,
    nSendTimeout: i32,
    nReceiveTimeout: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpOpenRequest(
    hConnect: *c_void,
    pwszVerb: [*:0]const u16,
    pwszObjectName: [*:0]const u16,
    pwszVersion: [*:0]const u16,
    pwszReferrer: [*:0]const u16,
    ppwszAcceptTypes: *PWSTR,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WINHTTP" fn WinHttpAddRequestHeaders(
    hRequest: *c_void,
    lpszHeaders: [*:0]const u16,
    dwHeadersLength: u32,
    dwModifiers: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpAddRequestHeadersEx(
    hRequest: *c_void,
    dwModifiers: u32,
    ullFlags: u64,
    ullExtra: u64,
    cHeaders: u32,
    pHeaders: [*]WINHTTP_EXTENDED_HEADER,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpSendRequest(
    hRequest: *c_void,
    lpszHeaders: ?[*:0]const u16,
    dwHeadersLength: u32,
    lpOptional: ?[*]u8,
    dwOptionalLength: u32,
    dwTotalLength: u32,
    dwContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpSetCredentials(
    hRequest: *c_void,
    AuthTargets: u32,
    AuthScheme: u32,
    pwszUserName: [*:0]const u16,
    pwszPassword: [*:0]const u16,
    pAuthParams: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpQueryAuthSchemes(
    hRequest: *c_void,
    lpdwSupportedSchemes: *u32,
    lpdwFirstScheme: *u32,
    pdwAuthTarget: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpReceiveResponse(
    hRequest: *c_void,
    lpReserved: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpQueryHeaders(
    hRequest: *c_void,
    dwInfoLevel: u32,
    pwszName: [*:0]const u16,
    lpBuffer: ?[*]u8,
    lpdwBufferLength: *u32,
    lpdwIndex: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpDetectAutoProxyConfigUrl(
    dwAutoDetectFlags: u32,
    ppwstrAutoConfigUrl: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpGetProxyForUrl(
    hSession: *c_void,
    lpcwszUrl: [*:0]const u16,
    pAutoProxyOptions: *WINHTTP_AUTOPROXY_OPTIONS,
    pProxyInfo: *WINHTTP_PROXY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpCreateProxyResolver(
    hSession: *c_void,
    phResolver: **c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpGetProxyForUrlEx(
    hResolver: *c_void,
    pcwszUrl: [*:0]const u16,
    pAutoProxyOptions: *WINHTTP_AUTOPROXY_OPTIONS,
    pContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpGetProxyForUrlEx2(
    hResolver: *c_void,
    pcwszUrl: [*:0]const u16,
    pAutoProxyOptions: *WINHTTP_AUTOPROXY_OPTIONS,
    cbInterfaceSelectionContext: u32,
    pInterfaceSelectionContext: ?[*:0]u8,
    pContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpGetProxyResult(
    hResolver: *c_void,
    pProxyResult: *WINHTTP_PROXY_RESULT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpGetProxyResultEx(
    hResolver: *c_void,
    pProxyResultEx: *WINHTTP_PROXY_RESULT_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpFreeProxyResult(
    pProxyResult: *WINHTTP_PROXY_RESULT,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WINHTTP" fn WinHttpFreeProxyResultEx(
    pProxyResultEx: *WINHTTP_PROXY_RESULT_EX,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WINHTTP" fn WinHttpResetAutoProxy(
    hSession: *c_void,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpGetIEProxyConfigForCurrentUser(
    pProxyConfig: *WINHTTP_CURRENT_USER_IE_PROXY_CONFIG,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "WINHTTP" fn WinHttpWriteProxySettings(
    hSession: *c_void,
    fForceUpdate: BOOL,
    pWinHttpProxySettings: *WINHTTP_PROXY_SETTINGS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpReadProxySettings(
    hSession: *c_void,
    pcwszConnectionName: ?[*:0]const u16,
    fFallBackToDefaultSettings: BOOL,
    fSetAutoDiscoverForDefaultSettings: BOOL,
    pdwSettingsVersion: *u32,
    pfDefaultSettingsAreReturned: *BOOL,
    pWinHttpProxySettings: *WINHTTP_PROXY_SETTINGS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpFreeProxySettings(
    pWinHttpProxySettings: *WINHTTP_PROXY_SETTINGS,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "WINHTTP" fn WinHttpGetProxySettingsVersion(
    hSession: *c_void,
    pdwProxySettingsVersion: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpSetProxySettingsPerUser(
    fProxySettingsPerUser: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpWebSocketCompleteUpgrade(
    hRequest: *c_void,
    pContext: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "WINHTTP" fn WinHttpWebSocketSend(
    hWebSocket: *c_void,
    eBufferType: WINHTTP_WEB_SOCKET_BUFFER_TYPE,
    pvBuffer: ?[*]u8,
    dwBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpWebSocketReceive(
    hWebSocket: *c_void,
    pvBuffer: [*]u8,
    dwBufferLength: u32,
    pdwBytesRead: *u32,
    peBufferType: *WINHTTP_WEB_SOCKET_BUFFER_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpWebSocketShutdown(
    hWebSocket: *c_void,
    usStatus: u16,
    pvReason: ?[*]u8,
    dwReasonLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpWebSocketClose(
    hWebSocket: *c_void,
    usStatus: u16,
    pvReason: ?[*]u8,
    dwReasonLength: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "WINHTTP" fn WinHttpWebSocketQueryCloseStatus(
    hWebSocket: *c_void,
    pusStatus: *u16,
    pvReason: ?[*]u8,
    dwReasonLength: u32,
    pdwReasonLengthConsumed: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (1)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const HTTP_SERVICE_BINDING_ = HTTP_SERVICE_BINDING_A;
    },
    .wide => struct {
        pub const HTTP_SERVICE_BINDING_ = HTTP_SERVICE_BINDING_W;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const HTTP_SERVICE_BINDING_ = *opaque{};
    } else struct {
        pub const HTTP_SERVICE_BINDING_ = @compileError("'HTTP_SERVICE_BINDING_' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (13)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const ULARGE_INTEGER = @import("system_services.zig").ULARGE_INTEGER;
const PWSTR = @import("system_services.zig").PWSTR;
const FILETIME = @import("windows_programming.zig").FILETIME;
const INTERNET_SCHEME = @import("win_inet.zig").INTERNET_SCHEME;
const OVERLAPPED = @import("system_services.zig").OVERLAPPED;
const SOCKADDR_STORAGE_LH = @import("network_drivers.zig").SOCKADDR_STORAGE_LH;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const SECURITY_ATTRIBUTES = @import("system_services.zig").SECURITY_ATTRIBUTES;
const HANDLE = @import("system_services.zig").HANDLE;
const PSTR = @import("system_services.zig").PSTR;
const BOOL = @import("system_services.zig").BOOL;
const SOCKADDR = @import("win_sock.zig").SOCKADDR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = WINHTTP_STATUS_CALLBACK;
    _ = LPWINHTTP_STATUS_CALLBACK;

    const constant_export_count = 0;
    const type_export_count = 135;
    const enum_value_export_count = 296;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 86;
    const unicode_alias_count = 1;
    const import_count = 13;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

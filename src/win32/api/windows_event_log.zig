//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (27)
//--------------------------------------------------------------------------------
pub const EVT_VARIANT_TYPE = extern enum(i32) {
    EvtVarTypeNull = 0,
    EvtVarTypeString = 1,
    EvtVarTypeAnsiString = 2,
    EvtVarTypeSByte = 3,
    EvtVarTypeByte = 4,
    EvtVarTypeInt16 = 5,
    EvtVarTypeUInt16 = 6,
    EvtVarTypeInt32 = 7,
    EvtVarTypeUInt32 = 8,
    EvtVarTypeInt64 = 9,
    EvtVarTypeUInt64 = 10,
    EvtVarTypeSingle = 11,
    EvtVarTypeDouble = 12,
    EvtVarTypeBoolean = 13,
    EvtVarTypeBinary = 14,
    EvtVarTypeGuid = 15,
    EvtVarTypeSizeT = 16,
    EvtVarTypeFileTime = 17,
    EvtVarTypeSysTime = 18,
    EvtVarTypeSid = 19,
    EvtVarTypeHexInt32 = 20,
    EvtVarTypeHexInt64 = 21,
    EvtVarTypeEvtHandle = 32,
    EvtVarTypeEvtXml = 35,
};
pub const EvtVarTypeNull = EVT_VARIANT_TYPE.EvtVarTypeNull;
pub const EvtVarTypeString = EVT_VARIANT_TYPE.EvtVarTypeString;
pub const EvtVarTypeAnsiString = EVT_VARIANT_TYPE.EvtVarTypeAnsiString;
pub const EvtVarTypeSByte = EVT_VARIANT_TYPE.EvtVarTypeSByte;
pub const EvtVarTypeByte = EVT_VARIANT_TYPE.EvtVarTypeByte;
pub const EvtVarTypeInt16 = EVT_VARIANT_TYPE.EvtVarTypeInt16;
pub const EvtVarTypeUInt16 = EVT_VARIANT_TYPE.EvtVarTypeUInt16;
pub const EvtVarTypeInt32 = EVT_VARIANT_TYPE.EvtVarTypeInt32;
pub const EvtVarTypeUInt32 = EVT_VARIANT_TYPE.EvtVarTypeUInt32;
pub const EvtVarTypeInt64 = EVT_VARIANT_TYPE.EvtVarTypeInt64;
pub const EvtVarTypeUInt64 = EVT_VARIANT_TYPE.EvtVarTypeUInt64;
pub const EvtVarTypeSingle = EVT_VARIANT_TYPE.EvtVarTypeSingle;
pub const EvtVarTypeDouble = EVT_VARIANT_TYPE.EvtVarTypeDouble;
pub const EvtVarTypeBoolean = EVT_VARIANT_TYPE.EvtVarTypeBoolean;
pub const EvtVarTypeBinary = EVT_VARIANT_TYPE.EvtVarTypeBinary;
pub const EvtVarTypeGuid = EVT_VARIANT_TYPE.EvtVarTypeGuid;
pub const EvtVarTypeSizeT = EVT_VARIANT_TYPE.EvtVarTypeSizeT;
pub const EvtVarTypeFileTime = EVT_VARIANT_TYPE.EvtVarTypeFileTime;
pub const EvtVarTypeSysTime = EVT_VARIANT_TYPE.EvtVarTypeSysTime;
pub const EvtVarTypeSid = EVT_VARIANT_TYPE.EvtVarTypeSid;
pub const EvtVarTypeHexInt32 = EVT_VARIANT_TYPE.EvtVarTypeHexInt32;
pub const EvtVarTypeHexInt64 = EVT_VARIANT_TYPE.EvtVarTypeHexInt64;
pub const EvtVarTypeEvtHandle = EVT_VARIANT_TYPE.EvtVarTypeEvtHandle;
pub const EvtVarTypeEvtXml = EVT_VARIANT_TYPE.EvtVarTypeEvtXml;

pub const EVT_VARIANT = extern struct {
    Anonymous: EVT_VARIANT._Anonymous_e__Union,
    Count: u32,
    Type: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const EVT_LOGIN_CLASS = extern enum(i32) {
    EvtRpcLogin = 1,
};
pub const EvtRpcLogin = EVT_LOGIN_CLASS.EvtRpcLogin;

pub const EVT_RPC_LOGIN_FLAGS = extern enum(i32) {
    EvtRpcLoginAuthDefault = 0,
    EvtRpcLoginAuthNegotiate = 1,
    EvtRpcLoginAuthKerberos = 2,
    EvtRpcLoginAuthNTLM = 3,
};
pub const EvtRpcLoginAuthDefault = EVT_RPC_LOGIN_FLAGS.EvtRpcLoginAuthDefault;
pub const EvtRpcLoginAuthNegotiate = EVT_RPC_LOGIN_FLAGS.EvtRpcLoginAuthNegotiate;
pub const EvtRpcLoginAuthKerberos = EVT_RPC_LOGIN_FLAGS.EvtRpcLoginAuthKerberos;
pub const EvtRpcLoginAuthNTLM = EVT_RPC_LOGIN_FLAGS.EvtRpcLoginAuthNTLM;

pub const EVT_RPC_LOGIN = extern struct {
    Server: PWSTR,
    User: PWSTR,
    Domain: PWSTR,
    Password: PWSTR,
    Flags: u32,
};

pub const EVT_QUERY_FLAGS = extern enum(i32) {
    EvtQueryChannelPath = 1,
    EvtQueryFilePath = 2,
    EvtQueryForwardDirection = 256,
    EvtQueryReverseDirection = 512,
    EvtQueryTolerateQueryErrors = 4096,
};
pub const EvtQueryChannelPath = EVT_QUERY_FLAGS.EvtQueryChannelPath;
pub const EvtQueryFilePath = EVT_QUERY_FLAGS.EvtQueryFilePath;
pub const EvtQueryForwardDirection = EVT_QUERY_FLAGS.EvtQueryForwardDirection;
pub const EvtQueryReverseDirection = EVT_QUERY_FLAGS.EvtQueryReverseDirection;
pub const EvtQueryTolerateQueryErrors = EVT_QUERY_FLAGS.EvtQueryTolerateQueryErrors;

pub const EVT_SEEK_FLAGS = extern enum(i32) {
    EvtSeekRelativeToFirst = 1,
    EvtSeekRelativeToLast = 2,
    EvtSeekRelativeToCurrent = 3,
    EvtSeekRelativeToBookmark = 4,
    EvtSeekOriginMask = 7,
    EvtSeekStrict = 65536,
};
pub const EvtSeekRelativeToFirst = EVT_SEEK_FLAGS.EvtSeekRelativeToFirst;
pub const EvtSeekRelativeToLast = EVT_SEEK_FLAGS.EvtSeekRelativeToLast;
pub const EvtSeekRelativeToCurrent = EVT_SEEK_FLAGS.EvtSeekRelativeToCurrent;
pub const EvtSeekRelativeToBookmark = EVT_SEEK_FLAGS.EvtSeekRelativeToBookmark;
pub const EvtSeekOriginMask = EVT_SEEK_FLAGS.EvtSeekOriginMask;
pub const EvtSeekStrict = EVT_SEEK_FLAGS.EvtSeekStrict;

pub const EVT_SUBSCRIBE_FLAGS = extern enum(i32) {
    EvtSubscribeToFutureEvents = 1,
    EvtSubscribeStartAtOldestRecord = 2,
    EvtSubscribeStartAfterBookmark = 3,
    EvtSubscribeOriginMask = 3,
    EvtSubscribeTolerateQueryErrors = 4096,
    EvtSubscribeStrict = 65536,
};
pub const EvtSubscribeToFutureEvents = EVT_SUBSCRIBE_FLAGS.EvtSubscribeToFutureEvents;
pub const EvtSubscribeStartAtOldestRecord = EVT_SUBSCRIBE_FLAGS.EvtSubscribeStartAtOldestRecord;
pub const EvtSubscribeStartAfterBookmark = EVT_SUBSCRIBE_FLAGS.EvtSubscribeStartAfterBookmark;
pub const EvtSubscribeOriginMask = EVT_SUBSCRIBE_FLAGS.EvtSubscribeOriginMask;
pub const EvtSubscribeTolerateQueryErrors = EVT_SUBSCRIBE_FLAGS.EvtSubscribeTolerateQueryErrors;
pub const EvtSubscribeStrict = EVT_SUBSCRIBE_FLAGS.EvtSubscribeStrict;

pub const EVT_SUBSCRIBE_NOTIFY_ACTION = extern enum(i32) {
    EvtSubscribeActionError = 0,
    EvtSubscribeActionDeliver = 1,
};
pub const EvtSubscribeActionError = EVT_SUBSCRIBE_NOTIFY_ACTION.EvtSubscribeActionError;
pub const EvtSubscribeActionDeliver = EVT_SUBSCRIBE_NOTIFY_ACTION.EvtSubscribeActionDeliver;

pub const EVT_SUBSCRIBE_CALLBACK = fn(
    Action: EVT_SUBSCRIBE_NOTIFY_ACTION,
    UserContext: ?*c_void,
    Event: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const EVT_SYSTEM_PROPERTY_ID = extern enum(i32) {
    EvtSystemProviderName = 0,
    EvtSystemProviderGuid = 1,
    EvtSystemEventID = 2,
    EvtSystemQualifiers = 3,
    EvtSystemLevel = 4,
    EvtSystemTask = 5,
    EvtSystemOpcode = 6,
    EvtSystemKeywords = 7,
    EvtSystemTimeCreated = 8,
    EvtSystemEventRecordId = 9,
    EvtSystemActivityID = 10,
    EvtSystemRelatedActivityID = 11,
    EvtSystemProcessID = 12,
    EvtSystemThreadID = 13,
    EvtSystemChannel = 14,
    EvtSystemComputer = 15,
    EvtSystemUserID = 16,
    EvtSystemVersion = 17,
    EvtSystemPropertyIdEND = 18,
};
pub const EvtSystemProviderName = EVT_SYSTEM_PROPERTY_ID.EvtSystemProviderName;
pub const EvtSystemProviderGuid = EVT_SYSTEM_PROPERTY_ID.EvtSystemProviderGuid;
pub const EvtSystemEventID = EVT_SYSTEM_PROPERTY_ID.EvtSystemEventID;
pub const EvtSystemQualifiers = EVT_SYSTEM_PROPERTY_ID.EvtSystemQualifiers;
pub const EvtSystemLevel = EVT_SYSTEM_PROPERTY_ID.EvtSystemLevel;
pub const EvtSystemTask = EVT_SYSTEM_PROPERTY_ID.EvtSystemTask;
pub const EvtSystemOpcode = EVT_SYSTEM_PROPERTY_ID.EvtSystemOpcode;
pub const EvtSystemKeywords = EVT_SYSTEM_PROPERTY_ID.EvtSystemKeywords;
pub const EvtSystemTimeCreated = EVT_SYSTEM_PROPERTY_ID.EvtSystemTimeCreated;
pub const EvtSystemEventRecordId = EVT_SYSTEM_PROPERTY_ID.EvtSystemEventRecordId;
pub const EvtSystemActivityID = EVT_SYSTEM_PROPERTY_ID.EvtSystemActivityID;
pub const EvtSystemRelatedActivityID = EVT_SYSTEM_PROPERTY_ID.EvtSystemRelatedActivityID;
pub const EvtSystemProcessID = EVT_SYSTEM_PROPERTY_ID.EvtSystemProcessID;
pub const EvtSystemThreadID = EVT_SYSTEM_PROPERTY_ID.EvtSystemThreadID;
pub const EvtSystemChannel = EVT_SYSTEM_PROPERTY_ID.EvtSystemChannel;
pub const EvtSystemComputer = EVT_SYSTEM_PROPERTY_ID.EvtSystemComputer;
pub const EvtSystemUserID = EVT_SYSTEM_PROPERTY_ID.EvtSystemUserID;
pub const EvtSystemVersion = EVT_SYSTEM_PROPERTY_ID.EvtSystemVersion;
pub const EvtSystemPropertyIdEND = EVT_SYSTEM_PROPERTY_ID.EvtSystemPropertyIdEND;

pub const EVT_RENDER_CONTEXT_FLAGS = extern enum(i32) {
    EvtRenderContextValues = 0,
    EvtRenderContextSystem = 1,
    EvtRenderContextUser = 2,
};
pub const EvtRenderContextValues = EVT_RENDER_CONTEXT_FLAGS.EvtRenderContextValues;
pub const EvtRenderContextSystem = EVT_RENDER_CONTEXT_FLAGS.EvtRenderContextSystem;
pub const EvtRenderContextUser = EVT_RENDER_CONTEXT_FLAGS.EvtRenderContextUser;

pub const EVT_RENDER_FLAGS = extern enum(i32) {
    EvtRenderEventValues = 0,
    EvtRenderEventXml = 1,
    EvtRenderBookmark = 2,
};
pub const EvtRenderEventValues = EVT_RENDER_FLAGS.EvtRenderEventValues;
pub const EvtRenderEventXml = EVT_RENDER_FLAGS.EvtRenderEventXml;
pub const EvtRenderBookmark = EVT_RENDER_FLAGS.EvtRenderBookmark;

pub const EVT_FORMAT_MESSAGE_FLAGS = extern enum(i32) {
    EvtFormatMessageEvent = 1,
    EvtFormatMessageLevel = 2,
    EvtFormatMessageTask = 3,
    EvtFormatMessageOpcode = 4,
    EvtFormatMessageKeyword = 5,
    EvtFormatMessageChannel = 6,
    EvtFormatMessageProvider = 7,
    EvtFormatMessageId = 8,
    EvtFormatMessageXml = 9,
};
pub const EvtFormatMessageEvent = EVT_FORMAT_MESSAGE_FLAGS.EvtFormatMessageEvent;
pub const EvtFormatMessageLevel = EVT_FORMAT_MESSAGE_FLAGS.EvtFormatMessageLevel;
pub const EvtFormatMessageTask = EVT_FORMAT_MESSAGE_FLAGS.EvtFormatMessageTask;
pub const EvtFormatMessageOpcode = EVT_FORMAT_MESSAGE_FLAGS.EvtFormatMessageOpcode;
pub const EvtFormatMessageKeyword = EVT_FORMAT_MESSAGE_FLAGS.EvtFormatMessageKeyword;
pub const EvtFormatMessageChannel = EVT_FORMAT_MESSAGE_FLAGS.EvtFormatMessageChannel;
pub const EvtFormatMessageProvider = EVT_FORMAT_MESSAGE_FLAGS.EvtFormatMessageProvider;
pub const EvtFormatMessageId = EVT_FORMAT_MESSAGE_FLAGS.EvtFormatMessageId;
pub const EvtFormatMessageXml = EVT_FORMAT_MESSAGE_FLAGS.EvtFormatMessageXml;

pub const EVT_OPEN_LOG_FLAGS = extern enum(i32) {
    EvtOpenChannelPath = 1,
    EvtOpenFilePath = 2,
};
pub const EvtOpenChannelPath = EVT_OPEN_LOG_FLAGS.EvtOpenChannelPath;
pub const EvtOpenFilePath = EVT_OPEN_LOG_FLAGS.EvtOpenFilePath;

pub const EVT_LOG_PROPERTY_ID = extern enum(i32) {
    EvtLogCreationTime = 0,
    EvtLogLastAccessTime = 1,
    EvtLogLastWriteTime = 2,
    EvtLogFileSize = 3,
    EvtLogAttributes = 4,
    EvtLogNumberOfLogRecords = 5,
    EvtLogOldestRecordNumber = 6,
    EvtLogFull = 7,
};
pub const EvtLogCreationTime = EVT_LOG_PROPERTY_ID.EvtLogCreationTime;
pub const EvtLogLastAccessTime = EVT_LOG_PROPERTY_ID.EvtLogLastAccessTime;
pub const EvtLogLastWriteTime = EVT_LOG_PROPERTY_ID.EvtLogLastWriteTime;
pub const EvtLogFileSize = EVT_LOG_PROPERTY_ID.EvtLogFileSize;
pub const EvtLogAttributes = EVT_LOG_PROPERTY_ID.EvtLogAttributes;
pub const EvtLogNumberOfLogRecords = EVT_LOG_PROPERTY_ID.EvtLogNumberOfLogRecords;
pub const EvtLogOldestRecordNumber = EVT_LOG_PROPERTY_ID.EvtLogOldestRecordNumber;
pub const EvtLogFull = EVT_LOG_PROPERTY_ID.EvtLogFull;

pub const EVT_EXPORTLOG_FLAGS = extern enum(i32) {
    EvtExportLogChannelPath = 1,
    EvtExportLogFilePath = 2,
    EvtExportLogTolerateQueryErrors = 4096,
    EvtExportLogOverwrite = 8192,
};
pub const EvtExportLogChannelPath = EVT_EXPORTLOG_FLAGS.EvtExportLogChannelPath;
pub const EvtExportLogFilePath = EVT_EXPORTLOG_FLAGS.EvtExportLogFilePath;
pub const EvtExportLogTolerateQueryErrors = EVT_EXPORTLOG_FLAGS.EvtExportLogTolerateQueryErrors;
pub const EvtExportLogOverwrite = EVT_EXPORTLOG_FLAGS.EvtExportLogOverwrite;

pub const EVT_CHANNEL_CONFIG_PROPERTY_ID = extern enum(i32) {
    EvtChannelConfigEnabled = 0,
    EvtChannelConfigIsolation = 1,
    EvtChannelConfigType = 2,
    EvtChannelConfigOwningPublisher = 3,
    EvtChannelConfigClassicEventlog = 4,
    EvtChannelConfigAccess = 5,
    EvtChannelLoggingConfigRetention = 6,
    EvtChannelLoggingConfigAutoBackup = 7,
    EvtChannelLoggingConfigMaxSize = 8,
    EvtChannelLoggingConfigLogFilePath = 9,
    EvtChannelPublishingConfigLevel = 10,
    EvtChannelPublishingConfigKeywords = 11,
    EvtChannelPublishingConfigControlGuid = 12,
    EvtChannelPublishingConfigBufferSize = 13,
    EvtChannelPublishingConfigMinBuffers = 14,
    EvtChannelPublishingConfigMaxBuffers = 15,
    EvtChannelPublishingConfigLatency = 16,
    EvtChannelPublishingConfigClockType = 17,
    EvtChannelPublishingConfigSidType = 18,
    EvtChannelPublisherList = 19,
    EvtChannelPublishingConfigFileMax = 20,
    EvtChannelConfigPropertyIdEND = 21,
};
pub const EvtChannelConfigEnabled = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelConfigEnabled;
pub const EvtChannelConfigIsolation = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelConfigIsolation;
pub const EvtChannelConfigType = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelConfigType;
pub const EvtChannelConfigOwningPublisher = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelConfigOwningPublisher;
pub const EvtChannelConfigClassicEventlog = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelConfigClassicEventlog;
pub const EvtChannelConfigAccess = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelConfigAccess;
pub const EvtChannelLoggingConfigRetention = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelLoggingConfigRetention;
pub const EvtChannelLoggingConfigAutoBackup = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelLoggingConfigAutoBackup;
pub const EvtChannelLoggingConfigMaxSize = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelLoggingConfigMaxSize;
pub const EvtChannelLoggingConfigLogFilePath = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelLoggingConfigLogFilePath;
pub const EvtChannelPublishingConfigLevel = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelPublishingConfigLevel;
pub const EvtChannelPublishingConfigKeywords = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelPublishingConfigKeywords;
pub const EvtChannelPublishingConfigControlGuid = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelPublishingConfigControlGuid;
pub const EvtChannelPublishingConfigBufferSize = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelPublishingConfigBufferSize;
pub const EvtChannelPublishingConfigMinBuffers = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelPublishingConfigMinBuffers;
pub const EvtChannelPublishingConfigMaxBuffers = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelPublishingConfigMaxBuffers;
pub const EvtChannelPublishingConfigLatency = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelPublishingConfigLatency;
pub const EvtChannelPublishingConfigClockType = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelPublishingConfigClockType;
pub const EvtChannelPublishingConfigSidType = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelPublishingConfigSidType;
pub const EvtChannelPublisherList = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelPublisherList;
pub const EvtChannelPublishingConfigFileMax = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelPublishingConfigFileMax;
pub const EvtChannelConfigPropertyIdEND = EVT_CHANNEL_CONFIG_PROPERTY_ID.EvtChannelConfigPropertyIdEND;

pub const EVT_CHANNEL_TYPE = extern enum(i32) {
    EvtChannelTypeAdmin = 0,
    EvtChannelTypeOperational = 1,
    EvtChannelTypeAnalytic = 2,
    EvtChannelTypeDebug = 3,
};
pub const EvtChannelTypeAdmin = EVT_CHANNEL_TYPE.EvtChannelTypeAdmin;
pub const EvtChannelTypeOperational = EVT_CHANNEL_TYPE.EvtChannelTypeOperational;
pub const EvtChannelTypeAnalytic = EVT_CHANNEL_TYPE.EvtChannelTypeAnalytic;
pub const EvtChannelTypeDebug = EVT_CHANNEL_TYPE.EvtChannelTypeDebug;

pub const EVT_CHANNEL_ISOLATION_TYPE = extern enum(i32) {
    EvtChannelIsolationTypeApplication = 0,
    EvtChannelIsolationTypeSystem = 1,
    EvtChannelIsolationTypeCustom = 2,
};
pub const EvtChannelIsolationTypeApplication = EVT_CHANNEL_ISOLATION_TYPE.EvtChannelIsolationTypeApplication;
pub const EvtChannelIsolationTypeSystem = EVT_CHANNEL_ISOLATION_TYPE.EvtChannelIsolationTypeSystem;
pub const EvtChannelIsolationTypeCustom = EVT_CHANNEL_ISOLATION_TYPE.EvtChannelIsolationTypeCustom;

pub const EVT_CHANNEL_CLOCK_TYPE = extern enum(i32) {
    EvtChannelClockTypeSystemTime = 0,
    EvtChannelClockTypeQPC = 1,
};
pub const EvtChannelClockTypeSystemTime = EVT_CHANNEL_CLOCK_TYPE.EvtChannelClockTypeSystemTime;
pub const EvtChannelClockTypeQPC = EVT_CHANNEL_CLOCK_TYPE.EvtChannelClockTypeQPC;

pub const EVT_CHANNEL_SID_TYPE = extern enum(i32) {
    EvtChannelSidTypeNone = 0,
    EvtChannelSidTypePublishing = 1,
};
pub const EvtChannelSidTypeNone = EVT_CHANNEL_SID_TYPE.EvtChannelSidTypeNone;
pub const EvtChannelSidTypePublishing = EVT_CHANNEL_SID_TYPE.EvtChannelSidTypePublishing;

pub const EVT_CHANNEL_REFERENCE_FLAGS = extern enum(i32) {
    EvtChannelReferenceImported = 1,
};
pub const EvtChannelReferenceImported = EVT_CHANNEL_REFERENCE_FLAGS.EvtChannelReferenceImported;

pub const EVT_PUBLISHER_METADATA_PROPERTY_ID = extern enum(i32) {
    EvtPublisherMetadataPublisherGuid = 0,
    EvtPublisherMetadataResourceFilePath = 1,
    EvtPublisherMetadataParameterFilePath = 2,
    EvtPublisherMetadataMessageFilePath = 3,
    EvtPublisherMetadataHelpLink = 4,
    EvtPublisherMetadataPublisherMessageID = 5,
    EvtPublisherMetadataChannelReferences = 6,
    EvtPublisherMetadataChannelReferencePath = 7,
    EvtPublisherMetadataChannelReferenceIndex = 8,
    EvtPublisherMetadataChannelReferenceID = 9,
    EvtPublisherMetadataChannelReferenceFlags = 10,
    EvtPublisherMetadataChannelReferenceMessageID = 11,
    EvtPublisherMetadataLevels = 12,
    EvtPublisherMetadataLevelName = 13,
    EvtPublisherMetadataLevelValue = 14,
    EvtPublisherMetadataLevelMessageID = 15,
    EvtPublisherMetadataTasks = 16,
    EvtPublisherMetadataTaskName = 17,
    EvtPublisherMetadataTaskEventGuid = 18,
    EvtPublisherMetadataTaskValue = 19,
    EvtPublisherMetadataTaskMessageID = 20,
    EvtPublisherMetadataOpcodes = 21,
    EvtPublisherMetadataOpcodeName = 22,
    EvtPublisherMetadataOpcodeValue = 23,
    EvtPublisherMetadataOpcodeMessageID = 24,
    EvtPublisherMetadataKeywords = 25,
    EvtPublisherMetadataKeywordName = 26,
    EvtPublisherMetadataKeywordValue = 27,
    EvtPublisherMetadataKeywordMessageID = 28,
    EvtPublisherMetadataPropertyIdEND = 29,
};
pub const EvtPublisherMetadataPublisherGuid = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataPublisherGuid;
pub const EvtPublisherMetadataResourceFilePath = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataResourceFilePath;
pub const EvtPublisherMetadataParameterFilePath = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataParameterFilePath;
pub const EvtPublisherMetadataMessageFilePath = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataMessageFilePath;
pub const EvtPublisherMetadataHelpLink = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataHelpLink;
pub const EvtPublisherMetadataPublisherMessageID = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataPublisherMessageID;
pub const EvtPublisherMetadataChannelReferences = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataChannelReferences;
pub const EvtPublisherMetadataChannelReferencePath = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataChannelReferencePath;
pub const EvtPublisherMetadataChannelReferenceIndex = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataChannelReferenceIndex;
pub const EvtPublisherMetadataChannelReferenceID = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataChannelReferenceID;
pub const EvtPublisherMetadataChannelReferenceFlags = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataChannelReferenceFlags;
pub const EvtPublisherMetadataChannelReferenceMessageID = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataChannelReferenceMessageID;
pub const EvtPublisherMetadataLevels = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataLevels;
pub const EvtPublisherMetadataLevelName = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataLevelName;
pub const EvtPublisherMetadataLevelValue = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataLevelValue;
pub const EvtPublisherMetadataLevelMessageID = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataLevelMessageID;
pub const EvtPublisherMetadataTasks = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataTasks;
pub const EvtPublisherMetadataTaskName = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataTaskName;
pub const EvtPublisherMetadataTaskEventGuid = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataTaskEventGuid;
pub const EvtPublisherMetadataTaskValue = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataTaskValue;
pub const EvtPublisherMetadataTaskMessageID = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataTaskMessageID;
pub const EvtPublisherMetadataOpcodes = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataOpcodes;
pub const EvtPublisherMetadataOpcodeName = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataOpcodeName;
pub const EvtPublisherMetadataOpcodeValue = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataOpcodeValue;
pub const EvtPublisherMetadataOpcodeMessageID = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataOpcodeMessageID;
pub const EvtPublisherMetadataKeywords = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataKeywords;
pub const EvtPublisherMetadataKeywordName = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataKeywordName;
pub const EvtPublisherMetadataKeywordValue = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataKeywordValue;
pub const EvtPublisherMetadataKeywordMessageID = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataKeywordMessageID;
pub const EvtPublisherMetadataPropertyIdEND = EVT_PUBLISHER_METADATA_PROPERTY_ID.EvtPublisherMetadataPropertyIdEND;

pub const EVT_EVENT_METADATA_PROPERTY_ID = extern enum(i32) {
    EventMetadataEventID = 0,
    EventMetadataEventVersion = 1,
    EventMetadataEventChannel = 2,
    EventMetadataEventLevel = 3,
    EventMetadataEventOpcode = 4,
    EventMetadataEventTask = 5,
    EventMetadataEventKeyword = 6,
    EventMetadataEventMessageID = 7,
    EventMetadataEventTemplate = 8,
    EvtEventMetadataPropertyIdEND = 9,
};
pub const EventMetadataEventID = EVT_EVENT_METADATA_PROPERTY_ID.EventMetadataEventID;
pub const EventMetadataEventVersion = EVT_EVENT_METADATA_PROPERTY_ID.EventMetadataEventVersion;
pub const EventMetadataEventChannel = EVT_EVENT_METADATA_PROPERTY_ID.EventMetadataEventChannel;
pub const EventMetadataEventLevel = EVT_EVENT_METADATA_PROPERTY_ID.EventMetadataEventLevel;
pub const EventMetadataEventOpcode = EVT_EVENT_METADATA_PROPERTY_ID.EventMetadataEventOpcode;
pub const EventMetadataEventTask = EVT_EVENT_METADATA_PROPERTY_ID.EventMetadataEventTask;
pub const EventMetadataEventKeyword = EVT_EVENT_METADATA_PROPERTY_ID.EventMetadataEventKeyword;
pub const EventMetadataEventMessageID = EVT_EVENT_METADATA_PROPERTY_ID.EventMetadataEventMessageID;
pub const EventMetadataEventTemplate = EVT_EVENT_METADATA_PROPERTY_ID.EventMetadataEventTemplate;
pub const EvtEventMetadataPropertyIdEND = EVT_EVENT_METADATA_PROPERTY_ID.EvtEventMetadataPropertyIdEND;

pub const EVT_QUERY_PROPERTY_ID = extern enum(i32) {
    EvtQueryNames = 0,
    EvtQueryStatuses = 1,
    EvtQueryPropertyIdEND = 2,
};
pub const EvtQueryNames = EVT_QUERY_PROPERTY_ID.EvtQueryNames;
pub const EvtQueryStatuses = EVT_QUERY_PROPERTY_ID.EvtQueryStatuses;
pub const EvtQueryPropertyIdEND = EVT_QUERY_PROPERTY_ID.EvtQueryPropertyIdEND;

pub const EVT_EVENT_PROPERTY_ID = extern enum(i32) {
    EvtEventQueryIDs = 0,
    EvtEventPath = 1,
    EvtEventPropertyIdEND = 2,
};
pub const EvtEventQueryIDs = EVT_EVENT_PROPERTY_ID.EvtEventQueryIDs;
pub const EvtEventPath = EVT_EVENT_PROPERTY_ID.EvtEventPath;
pub const EvtEventPropertyIdEND = EVT_EVENT_PROPERTY_ID.EvtEventPropertyIdEND;


//--------------------------------------------------------------------------------
// Section: Functions (35)
//--------------------------------------------------------------------------------
pub extern "wevtapi" fn EvtOpenSession(
    LoginClass: EVT_LOGIN_CLASS,
    Login: *c_void,
    Timeout: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wevtapi" fn EvtClose(
    Object: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtCancel(
    Object: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtGetExtendedStatus(
    BufferSize: u32,
    Buffer: ?[*:0]u16,
    BufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "wevtapi" fn EvtQuery(
    Session: ?*c_void,
    Path: ?[*:0]const u16,
    Query: ?[*:0]const u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wevtapi" fn EvtNext(
    ResultSet: ?*c_void,
    EventsSize: u32,
    Events: [*]?*c_void,
    Timeout: u32,
    Flags: u32,
    Returned: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtSeek(
    ResultSet: ?*c_void,
    Position: i64,
    Bookmark: ?*c_void,
    Timeout: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtSubscribe(
    Session: ?*c_void,
    SignalEvent: HANDLE,
    ChannelPath: ?[*:0]const u16,
    Query: ?[*:0]const u16,
    Bookmark: ?*c_void,
    Context: ?*c_void,
    Callback: ?EVT_SUBSCRIBE_CALLBACK,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wevtapi" fn EvtCreateRenderContext(
    ValuePathsCount: u32,
    ValuePaths: ?[*]?PWSTR,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wevtapi" fn EvtRender(
    Context: ?*c_void,
    Fragment: ?*c_void,
    Flags: u32,
    BufferSize: u32,
    Buffer: ?[*]u8,
    BufferUsed: *u32,
    PropertyCount: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtFormatMessage(
    PublisherMetadata: ?*c_void,
    Event: ?*c_void,
    MessageId: u32,
    ValueCount: u32,
    Values: ?[*]EVT_VARIANT,
    Flags: u32,
    BufferSize: u32,
    Buffer: ?[*:0]u16,
    BufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtOpenLog(
    Session: ?*c_void,
    Path: [*:0]const u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wevtapi" fn EvtGetLogInfo(
    Log: ?*c_void,
    PropertyId: EVT_LOG_PROPERTY_ID,
    PropertyValueBufferSize: u32,
    PropertyValueBuffer: ?[*]EVT_VARIANT,
    PropertyValueBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtClearLog(
    Session: ?*c_void,
    ChannelPath: [*:0]const u16,
    TargetFilePath: ?[*:0]const u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtExportLog(
    Session: ?*c_void,
    Path: ?[*:0]const u16,
    Query: ?[*:0]const u16,
    TargetFilePath: [*:0]const u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtArchiveExportedLog(
    Session: ?*c_void,
    LogFilePath: [*:0]const u16,
    Locale: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtOpenChannelEnum(
    Session: ?*c_void,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wevtapi" fn EvtNextChannelPath(
    ChannelEnum: ?*c_void,
    ChannelPathBufferSize: u32,
    ChannelPathBuffer: ?[*:0]u16,
    ChannelPathBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtOpenChannelConfig(
    Session: ?*c_void,
    ChannelPath: [*:0]const u16,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wevtapi" fn EvtSaveChannelConfig(
    ChannelConfig: ?*c_void,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtSetChannelConfigProperty(
    ChannelConfig: ?*c_void,
    PropertyId: EVT_CHANNEL_CONFIG_PROPERTY_ID,
    Flags: u32,
    PropertyValue: *EVT_VARIANT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtGetChannelConfigProperty(
    ChannelConfig: ?*c_void,
    PropertyId: EVT_CHANNEL_CONFIG_PROPERTY_ID,
    Flags: u32,
    PropertyValueBufferSize: u32,
    PropertyValueBuffer: ?[*]EVT_VARIANT,
    PropertyValueBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtOpenPublisherEnum(
    Session: ?*c_void,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wevtapi" fn EvtNextPublisherId(
    PublisherEnum: ?*c_void,
    PublisherIdBufferSize: u32,
    PublisherIdBuffer: ?[*:0]u16,
    PublisherIdBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtOpenPublisherMetadata(
    Session: ?*c_void,
    PublisherId: [*:0]const u16,
    LogFilePath: ?[*:0]const u16,
    Locale: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wevtapi" fn EvtGetPublisherMetadataProperty(
    PublisherMetadata: ?*c_void,
    PropertyId: EVT_PUBLISHER_METADATA_PROPERTY_ID,
    Flags: u32,
    PublisherMetadataPropertyBufferSize: u32,
    PublisherMetadataPropertyBuffer: ?[*]EVT_VARIANT,
    PublisherMetadataPropertyBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtOpenEventMetadataEnum(
    PublisherMetadata: ?*c_void,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wevtapi" fn EvtNextEventMetadata(
    EventMetadataEnum: ?*c_void,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wevtapi" fn EvtGetEventMetadataProperty(
    EventMetadata: ?*c_void,
    PropertyId: EVT_EVENT_METADATA_PROPERTY_ID,
    Flags: u32,
    EventMetadataPropertyBufferSize: u32,
    EventMetadataPropertyBuffer: ?[*]EVT_VARIANT,
    EventMetadataPropertyBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtGetObjectArraySize(
    ObjectArray: ?*c_void,
    ObjectArraySize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtGetObjectArrayProperty(
    ObjectArray: ?*c_void,
    PropertyId: u32,
    ArrayIndex: u32,
    Flags: u32,
    PropertyValueBufferSize: u32,
    PropertyValueBuffer: ?[*]EVT_VARIANT,
    PropertyValueBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtGetQueryInfo(
    QueryOrSubscription: ?*c_void,
    PropertyId: EVT_QUERY_PROPERTY_ID,
    PropertyValueBufferSize: u32,
    PropertyValueBuffer: ?[*]EVT_VARIANT,
    PropertyValueBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtCreateBookmark(
    BookmarkXml: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?*c_void;

pub extern "wevtapi" fn EvtUpdateBookmark(
    Bookmark: ?*c_void,
    Event: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "wevtapi" fn EvtGetEventInfo(
    Event: ?*c_void,
    PropertyId: EVT_EVENT_PROPERTY_ID,
    PropertyValueBufferSize: u32,
    PropertyValueBuffer: ?[*]EVT_VARIANT,
    PropertyValueBufferUsed: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (3)
//--------------------------------------------------------------------------------
const PWSTR = @import("system_services.zig").PWSTR;
const HANDLE = @import("system_services.zig").HANDLE;
const BOOL = @import("system_services.zig").BOOL;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = EVT_SUBSCRIBE_CALLBACK;

    const constant_export_count = 0;
    const type_export_count = 27;
    const enum_value_export_count = 176;
    const com_iface_id_export_count = 0;
    const com_class_id_export_count = 0;
    const func_export_count = 35;
    const unicode_alias_count = 0;
    const import_count = 3;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (125)
//--------------------------------------------------------------------------------
pub const WICRect = extern struct {
    X: i32,
    Y: i32,
    Width: i32,
    Height: i32,
};

pub const WICColorContextType = extern enum(i32) {
    WICColorContextUninitialized = 0,
    WICColorContextProfile = 1,
    WICColorContextExifColorSpace = 2,
};
pub const WICColorContextUninitialized = WICColorContextType.WICColorContextUninitialized;
pub const WICColorContextProfile = WICColorContextType.WICColorContextProfile;
pub const WICColorContextExifColorSpace = WICColorContextType.WICColorContextExifColorSpace;

pub const WICBitmapCreateCacheOption = extern enum(i32) {
    WICBitmapNoCache = 0,
    WICBitmapCacheOnDemand = 1,
    WICBitmapCacheOnLoad = 2,
    WICBITMAPCREATECACHEOPTION_FORCE_DWORD = 2147483647,
};
pub const WICBitmapNoCache = WICBitmapCreateCacheOption.WICBitmapNoCache;
pub const WICBitmapCacheOnDemand = WICBitmapCreateCacheOption.WICBitmapCacheOnDemand;
pub const WICBitmapCacheOnLoad = WICBitmapCreateCacheOption.WICBitmapCacheOnLoad;
pub const WICBITMAPCREATECACHEOPTION_FORCE_DWORD = WICBitmapCreateCacheOption.WICBITMAPCREATECACHEOPTION_FORCE_DWORD;

pub const WICDecodeOptions = extern enum(i32) {
    WICDecodeMetadataCacheOnDemand = 0,
    WICDecodeMetadataCacheOnLoad = 1,
    WICMETADATACACHEOPTION_FORCE_DWORD = 2147483647,
};
pub const WICDecodeMetadataCacheOnDemand = WICDecodeOptions.WICDecodeMetadataCacheOnDemand;
pub const WICDecodeMetadataCacheOnLoad = WICDecodeOptions.WICDecodeMetadataCacheOnLoad;
pub const WICMETADATACACHEOPTION_FORCE_DWORD = WICDecodeOptions.WICMETADATACACHEOPTION_FORCE_DWORD;

pub const WICBitmapEncoderCacheOption = extern enum(i32) {
    WICBitmapEncoderCacheInMemory = 0,
    WICBitmapEncoderCacheTempFile = 1,
    WICBitmapEncoderNoCache = 2,
    WICBITMAPENCODERCACHEOPTION_FORCE_DWORD = 2147483647,
};
pub const WICBitmapEncoderCacheInMemory = WICBitmapEncoderCacheOption.WICBitmapEncoderCacheInMemory;
pub const WICBitmapEncoderCacheTempFile = WICBitmapEncoderCacheOption.WICBitmapEncoderCacheTempFile;
pub const WICBitmapEncoderNoCache = WICBitmapEncoderCacheOption.WICBitmapEncoderNoCache;
pub const WICBITMAPENCODERCACHEOPTION_FORCE_DWORD = WICBitmapEncoderCacheOption.WICBITMAPENCODERCACHEOPTION_FORCE_DWORD;

pub const WICComponentType = extern enum(i32) {
    WICDecoder = 1,
    WICEncoder = 2,
    WICPixelFormatConverter = 4,
    WICMetadataReader = 8,
    WICMetadataWriter = 16,
    WICPixelFormat = 32,
    WICAllComponents = 63,
    WICCOMPONENTTYPE_FORCE_DWORD = 2147483647,
};
pub const WICDecoder = WICComponentType.WICDecoder;
pub const WICEncoder = WICComponentType.WICEncoder;
pub const WICPixelFormatConverter = WICComponentType.WICPixelFormatConverter;
pub const WICMetadataReader = WICComponentType.WICMetadataReader;
pub const WICMetadataWriter = WICComponentType.WICMetadataWriter;
pub const WICPixelFormat = WICComponentType.WICPixelFormat;
pub const WICAllComponents = WICComponentType.WICAllComponents;
pub const WICCOMPONENTTYPE_FORCE_DWORD = WICComponentType.WICCOMPONENTTYPE_FORCE_DWORD;

pub const WICComponentEnumerateOptions = extern enum(i32) {
    WICComponentEnumerateDefault = 0,
    WICComponentEnumerateRefresh = 1,
    WICComponentEnumerateDisabled = -2147483648,
    WICComponentEnumerateUnsigned = 1073741824,
    WICComponentEnumerateBuiltInOnly = 536870912,
    WICCOMPONENTENUMERATEOPTIONS_FORCE_DWORD = 2147483647,
};
pub const WICComponentEnumerateDefault = WICComponentEnumerateOptions.WICComponentEnumerateDefault;
pub const WICComponentEnumerateRefresh = WICComponentEnumerateOptions.WICComponentEnumerateRefresh;
pub const WICComponentEnumerateDisabled = WICComponentEnumerateOptions.WICComponentEnumerateDisabled;
pub const WICComponentEnumerateUnsigned = WICComponentEnumerateOptions.WICComponentEnumerateUnsigned;
pub const WICComponentEnumerateBuiltInOnly = WICComponentEnumerateOptions.WICComponentEnumerateBuiltInOnly;
pub const WICCOMPONENTENUMERATEOPTIONS_FORCE_DWORD = WICComponentEnumerateOptions.WICCOMPONENTENUMERATEOPTIONS_FORCE_DWORD;

pub const WICBitmapPattern = extern struct {
    Position: ULARGE_INTEGER,
    Length: u32,
    Pattern: *u8,
    Mask: *u8,
    EndOfStream: BOOL,
};

pub const WICBitmapInterpolationMode = extern enum(i32) {
    WICBitmapInterpolationModeNearestNeighbor = 0,
    WICBitmapInterpolationModeLinear = 1,
    WICBitmapInterpolationModeCubic = 2,
    WICBitmapInterpolationModeFant = 3,
    WICBitmapInterpolationModeHighQualityCubic = 4,
    WICBITMAPINTERPOLATIONMODE_FORCE_DWORD = 2147483647,
};
pub const WICBitmapInterpolationModeNearestNeighbor = WICBitmapInterpolationMode.WICBitmapInterpolationModeNearestNeighbor;
pub const WICBitmapInterpolationModeLinear = WICBitmapInterpolationMode.WICBitmapInterpolationModeLinear;
pub const WICBitmapInterpolationModeCubic = WICBitmapInterpolationMode.WICBitmapInterpolationModeCubic;
pub const WICBitmapInterpolationModeFant = WICBitmapInterpolationMode.WICBitmapInterpolationModeFant;
pub const WICBitmapInterpolationModeHighQualityCubic = WICBitmapInterpolationMode.WICBitmapInterpolationModeHighQualityCubic;
pub const WICBITMAPINTERPOLATIONMODE_FORCE_DWORD = WICBitmapInterpolationMode.WICBITMAPINTERPOLATIONMODE_FORCE_DWORD;

pub const WICBitmapPaletteType = extern enum(i32) {
    WICBitmapPaletteTypeCustom = 0,
    WICBitmapPaletteTypeMedianCut = 1,
    WICBitmapPaletteTypeFixedBW = 2,
    WICBitmapPaletteTypeFixedHalftone8 = 3,
    WICBitmapPaletteTypeFixedHalftone27 = 4,
    WICBitmapPaletteTypeFixedHalftone64 = 5,
    WICBitmapPaletteTypeFixedHalftone125 = 6,
    WICBitmapPaletteTypeFixedHalftone216 = 7,
    WICBitmapPaletteTypeFixedWebPalette = 7,
    WICBitmapPaletteTypeFixedHalftone252 = 8,
    WICBitmapPaletteTypeFixedHalftone256 = 9,
    WICBitmapPaletteTypeFixedGray4 = 10,
    WICBitmapPaletteTypeFixedGray16 = 11,
    WICBitmapPaletteTypeFixedGray256 = 12,
    WICBITMAPPALETTETYPE_FORCE_DWORD = 2147483647,
};
pub const WICBitmapPaletteTypeCustom = WICBitmapPaletteType.WICBitmapPaletteTypeCustom;
pub const WICBitmapPaletteTypeMedianCut = WICBitmapPaletteType.WICBitmapPaletteTypeMedianCut;
pub const WICBitmapPaletteTypeFixedBW = WICBitmapPaletteType.WICBitmapPaletteTypeFixedBW;
pub const WICBitmapPaletteTypeFixedHalftone8 = WICBitmapPaletteType.WICBitmapPaletteTypeFixedHalftone8;
pub const WICBitmapPaletteTypeFixedHalftone27 = WICBitmapPaletteType.WICBitmapPaletteTypeFixedHalftone27;
pub const WICBitmapPaletteTypeFixedHalftone64 = WICBitmapPaletteType.WICBitmapPaletteTypeFixedHalftone64;
pub const WICBitmapPaletteTypeFixedHalftone125 = WICBitmapPaletteType.WICBitmapPaletteTypeFixedHalftone125;
pub const WICBitmapPaletteTypeFixedHalftone216 = WICBitmapPaletteType.WICBitmapPaletteTypeFixedHalftone216;
pub const WICBitmapPaletteTypeFixedWebPalette = WICBitmapPaletteType.WICBitmapPaletteTypeFixedWebPalette;
pub const WICBitmapPaletteTypeFixedHalftone252 = WICBitmapPaletteType.WICBitmapPaletteTypeFixedHalftone252;
pub const WICBitmapPaletteTypeFixedHalftone256 = WICBitmapPaletteType.WICBitmapPaletteTypeFixedHalftone256;
pub const WICBitmapPaletteTypeFixedGray4 = WICBitmapPaletteType.WICBitmapPaletteTypeFixedGray4;
pub const WICBitmapPaletteTypeFixedGray16 = WICBitmapPaletteType.WICBitmapPaletteTypeFixedGray16;
pub const WICBitmapPaletteTypeFixedGray256 = WICBitmapPaletteType.WICBitmapPaletteTypeFixedGray256;
pub const WICBITMAPPALETTETYPE_FORCE_DWORD = WICBitmapPaletteType.WICBITMAPPALETTETYPE_FORCE_DWORD;

pub const WICBitmapDitherType = extern enum(i32) {
    WICBitmapDitherTypeNone = 0,
    WICBitmapDitherTypeSolid = 0,
    WICBitmapDitherTypeOrdered4x4 = 1,
    WICBitmapDitherTypeOrdered8x8 = 2,
    WICBitmapDitherTypeOrdered16x16 = 3,
    WICBitmapDitherTypeSpiral4x4 = 4,
    WICBitmapDitherTypeSpiral8x8 = 5,
    WICBitmapDitherTypeDualSpiral4x4 = 6,
    WICBitmapDitherTypeDualSpiral8x8 = 7,
    WICBitmapDitherTypeErrorDiffusion = 8,
    WICBITMAPDITHERTYPE_FORCE_DWORD = 2147483647,
};
pub const WICBitmapDitherTypeNone = WICBitmapDitherType.WICBitmapDitherTypeNone;
pub const WICBitmapDitherTypeSolid = WICBitmapDitherType.WICBitmapDitherTypeSolid;
pub const WICBitmapDitherTypeOrdered4x4 = WICBitmapDitherType.WICBitmapDitherTypeOrdered4x4;
pub const WICBitmapDitherTypeOrdered8x8 = WICBitmapDitherType.WICBitmapDitherTypeOrdered8x8;
pub const WICBitmapDitherTypeOrdered16x16 = WICBitmapDitherType.WICBitmapDitherTypeOrdered16x16;
pub const WICBitmapDitherTypeSpiral4x4 = WICBitmapDitherType.WICBitmapDitherTypeSpiral4x4;
pub const WICBitmapDitherTypeSpiral8x8 = WICBitmapDitherType.WICBitmapDitherTypeSpiral8x8;
pub const WICBitmapDitherTypeDualSpiral4x4 = WICBitmapDitherType.WICBitmapDitherTypeDualSpiral4x4;
pub const WICBitmapDitherTypeDualSpiral8x8 = WICBitmapDitherType.WICBitmapDitherTypeDualSpiral8x8;
pub const WICBitmapDitherTypeErrorDiffusion = WICBitmapDitherType.WICBitmapDitherTypeErrorDiffusion;
pub const WICBITMAPDITHERTYPE_FORCE_DWORD = WICBitmapDitherType.WICBITMAPDITHERTYPE_FORCE_DWORD;

pub const WICBitmapAlphaChannelOption = extern enum(i32) {
    WICBitmapUseAlpha = 0,
    WICBitmapUsePremultipliedAlpha = 1,
    WICBitmapIgnoreAlpha = 2,
    WICBITMAPALPHACHANNELOPTIONS_FORCE_DWORD = 2147483647,
};
pub const WICBitmapUseAlpha = WICBitmapAlphaChannelOption.WICBitmapUseAlpha;
pub const WICBitmapUsePremultipliedAlpha = WICBitmapAlphaChannelOption.WICBitmapUsePremultipliedAlpha;
pub const WICBitmapIgnoreAlpha = WICBitmapAlphaChannelOption.WICBitmapIgnoreAlpha;
pub const WICBITMAPALPHACHANNELOPTIONS_FORCE_DWORD = WICBitmapAlphaChannelOption.WICBITMAPALPHACHANNELOPTIONS_FORCE_DWORD;

pub const WICBitmapTransformOptions = extern enum(i32) {
    WICBitmapTransformRotate0 = 0,
    WICBitmapTransformRotate90 = 1,
    WICBitmapTransformRotate180 = 2,
    WICBitmapTransformRotate270 = 3,
    WICBitmapTransformFlipHorizontal = 8,
    WICBitmapTransformFlipVertical = 16,
    WICBITMAPTRANSFORMOPTIONS_FORCE_DWORD = 2147483647,
};
pub const WICBitmapTransformRotate0 = WICBitmapTransformOptions.WICBitmapTransformRotate0;
pub const WICBitmapTransformRotate90 = WICBitmapTransformOptions.WICBitmapTransformRotate90;
pub const WICBitmapTransformRotate180 = WICBitmapTransformOptions.WICBitmapTransformRotate180;
pub const WICBitmapTransformRotate270 = WICBitmapTransformOptions.WICBitmapTransformRotate270;
pub const WICBitmapTransformFlipHorizontal = WICBitmapTransformOptions.WICBitmapTransformFlipHorizontal;
pub const WICBitmapTransformFlipVertical = WICBitmapTransformOptions.WICBitmapTransformFlipVertical;
pub const WICBITMAPTRANSFORMOPTIONS_FORCE_DWORD = WICBitmapTransformOptions.WICBITMAPTRANSFORMOPTIONS_FORCE_DWORD;

pub const WICBitmapLockFlags = extern enum(i32) {
    WICBitmapLockRead = 1,
    WICBitmapLockWrite = 2,
    WICBITMAPLOCKFLAGS_FORCE_DWORD = 2147483647,
};
pub const WICBitmapLockRead = WICBitmapLockFlags.WICBitmapLockRead;
pub const WICBitmapLockWrite = WICBitmapLockFlags.WICBitmapLockWrite;
pub const WICBITMAPLOCKFLAGS_FORCE_DWORD = WICBitmapLockFlags.WICBITMAPLOCKFLAGS_FORCE_DWORD;

pub const WICBitmapDecoderCapabilities = extern enum(i32) {
    WICBitmapDecoderCapabilitySameEncoder = 1,
    WICBitmapDecoderCapabilityCanDecodeAllImages = 2,
    WICBitmapDecoderCapabilityCanDecodeSomeImages = 4,
    WICBitmapDecoderCapabilityCanEnumerateMetadata = 8,
    WICBitmapDecoderCapabilityCanDecodeThumbnail = 16,
    WICBITMAPDECODERCAPABILITIES_FORCE_DWORD = 2147483647,
};
pub const WICBitmapDecoderCapabilitySameEncoder = WICBitmapDecoderCapabilities.WICBitmapDecoderCapabilitySameEncoder;
pub const WICBitmapDecoderCapabilityCanDecodeAllImages = WICBitmapDecoderCapabilities.WICBitmapDecoderCapabilityCanDecodeAllImages;
pub const WICBitmapDecoderCapabilityCanDecodeSomeImages = WICBitmapDecoderCapabilities.WICBitmapDecoderCapabilityCanDecodeSomeImages;
pub const WICBitmapDecoderCapabilityCanEnumerateMetadata = WICBitmapDecoderCapabilities.WICBitmapDecoderCapabilityCanEnumerateMetadata;
pub const WICBitmapDecoderCapabilityCanDecodeThumbnail = WICBitmapDecoderCapabilities.WICBitmapDecoderCapabilityCanDecodeThumbnail;
pub const WICBITMAPDECODERCAPABILITIES_FORCE_DWORD = WICBitmapDecoderCapabilities.WICBITMAPDECODERCAPABILITIES_FORCE_DWORD;

pub const WICProgressOperation = extern enum(i32) {
    WICProgressOperationCopyPixels = 1,
    WICProgressOperationWritePixels = 2,
    WICProgressOperationAll = 65535,
    WICPROGRESSOPERATION_FORCE_DWORD = 2147483647,
};
pub const WICProgressOperationCopyPixels = WICProgressOperation.WICProgressOperationCopyPixels;
pub const WICProgressOperationWritePixels = WICProgressOperation.WICProgressOperationWritePixels;
pub const WICProgressOperationAll = WICProgressOperation.WICProgressOperationAll;
pub const WICPROGRESSOPERATION_FORCE_DWORD = WICProgressOperation.WICPROGRESSOPERATION_FORCE_DWORD;

pub const WICProgressNotification = extern enum(i32) {
    WICProgressNotificationBegin = 65536,
    WICProgressNotificationEnd = 131072,
    WICProgressNotificationFrequent = 262144,
    WICProgressNotificationAll = -65536,
    WICPROGRESSNOTIFICATION_FORCE_DWORD = 2147483647,
};
pub const WICProgressNotificationBegin = WICProgressNotification.WICProgressNotificationBegin;
pub const WICProgressNotificationEnd = WICProgressNotification.WICProgressNotificationEnd;
pub const WICProgressNotificationFrequent = WICProgressNotification.WICProgressNotificationFrequent;
pub const WICProgressNotificationAll = WICProgressNotification.WICProgressNotificationAll;
pub const WICPROGRESSNOTIFICATION_FORCE_DWORD = WICProgressNotification.WICPROGRESSNOTIFICATION_FORCE_DWORD;

pub const WICComponentSigning = extern enum(i32) {
    WICComponentSigned = 1,
    WICComponentUnsigned = 2,
    WICComponentSafe = 4,
    WICComponentDisabled = -2147483648,
    WICCOMPONENTSIGNING_FORCE_DWORD = 2147483647,
};
pub const WICComponentSigned = WICComponentSigning.WICComponentSigned;
pub const WICComponentUnsigned = WICComponentSigning.WICComponentUnsigned;
pub const WICComponentSafe = WICComponentSigning.WICComponentSafe;
pub const WICComponentDisabled = WICComponentSigning.WICComponentDisabled;
pub const WICCOMPONENTSIGNING_FORCE_DWORD = WICComponentSigning.WICCOMPONENTSIGNING_FORCE_DWORD;

pub const WICGifLogicalScreenDescriptorProperties = extern enum(u32) {
    WICGifLogicalScreenSignature = 1,
    WICGifLogicalScreenDescriptorWidth = 2,
    WICGifLogicalScreenDescriptorHeight = 3,
    WICGifLogicalScreenDescriptorGlobalColorTableFlag = 4,
    WICGifLogicalScreenDescriptorColorResolution = 5,
    WICGifLogicalScreenDescriptorSortFlag = 6,
    WICGifLogicalScreenDescriptorGlobalColorTableSize = 7,
    WICGifLogicalScreenDescriptorBackgroundColorIndex = 8,
    WICGifLogicalScreenDescriptorPixelAspectRatio = 9,
    FORCE_DWORD = 2147483647,
};
pub const WICGifLogicalScreenSignature = WICGifLogicalScreenDescriptorProperties.WICGifLogicalScreenSignature;
pub const WICGifLogicalScreenDescriptorWidth = WICGifLogicalScreenDescriptorProperties.WICGifLogicalScreenDescriptorWidth;
pub const WICGifLogicalScreenDescriptorHeight = WICGifLogicalScreenDescriptorProperties.WICGifLogicalScreenDescriptorHeight;
pub const WICGifLogicalScreenDescriptorGlobalColorTableFlag = WICGifLogicalScreenDescriptorProperties.WICGifLogicalScreenDescriptorGlobalColorTableFlag;
pub const WICGifLogicalScreenDescriptorColorResolution = WICGifLogicalScreenDescriptorProperties.WICGifLogicalScreenDescriptorColorResolution;
pub const WICGifLogicalScreenDescriptorSortFlag = WICGifLogicalScreenDescriptorProperties.WICGifLogicalScreenDescriptorSortFlag;
pub const WICGifLogicalScreenDescriptorGlobalColorTableSize = WICGifLogicalScreenDescriptorProperties.WICGifLogicalScreenDescriptorGlobalColorTableSize;
pub const WICGifLogicalScreenDescriptorBackgroundColorIndex = WICGifLogicalScreenDescriptorProperties.WICGifLogicalScreenDescriptorBackgroundColorIndex;
pub const WICGifLogicalScreenDescriptorPixelAspectRatio = WICGifLogicalScreenDescriptorProperties.WICGifLogicalScreenDescriptorPixelAspectRatio;
pub const WICGifLogicalScreenDescriptorProperties_FORCE_DWORD = WICGifLogicalScreenDescriptorProperties.FORCE_DWORD;

pub const WICGifImageDescriptorProperties = extern enum(u32) {
    WICGifImageDescriptorLeft = 1,
    WICGifImageDescriptorTop = 2,
    WICGifImageDescriptorWidth = 3,
    WICGifImageDescriptorHeight = 4,
    WICGifImageDescriptorLocalColorTableFlag = 5,
    WICGifImageDescriptorInterlaceFlag = 6,
    WICGifImageDescriptorSortFlag = 7,
    WICGifImageDescriptorLocalColorTableSize = 8,
    FORCE_DWORD = 2147483647,
};
pub const WICGifImageDescriptorLeft = WICGifImageDescriptorProperties.WICGifImageDescriptorLeft;
pub const WICGifImageDescriptorTop = WICGifImageDescriptorProperties.WICGifImageDescriptorTop;
pub const WICGifImageDescriptorWidth = WICGifImageDescriptorProperties.WICGifImageDescriptorWidth;
pub const WICGifImageDescriptorHeight = WICGifImageDescriptorProperties.WICGifImageDescriptorHeight;
pub const WICGifImageDescriptorLocalColorTableFlag = WICGifImageDescriptorProperties.WICGifImageDescriptorLocalColorTableFlag;
pub const WICGifImageDescriptorInterlaceFlag = WICGifImageDescriptorProperties.WICGifImageDescriptorInterlaceFlag;
pub const WICGifImageDescriptorSortFlag = WICGifImageDescriptorProperties.WICGifImageDescriptorSortFlag;
pub const WICGifImageDescriptorLocalColorTableSize = WICGifImageDescriptorProperties.WICGifImageDescriptorLocalColorTableSize;
pub const WICGifImageDescriptorProperties_FORCE_DWORD = WICGifImageDescriptorProperties.FORCE_DWORD;

pub const WICGifGraphicControlExtensionProperties = extern enum(u32) {
    WICGifGraphicControlExtensionDisposal = 1,
    WICGifGraphicControlExtensionUserInputFlag = 2,
    WICGifGraphicControlExtensionTransparencyFlag = 3,
    WICGifGraphicControlExtensionDelay = 4,
    WICGifGraphicControlExtensionTransparentColorIndex = 5,
    FORCE_DWORD = 2147483647,
};
pub const WICGifGraphicControlExtensionDisposal = WICGifGraphicControlExtensionProperties.WICGifGraphicControlExtensionDisposal;
pub const WICGifGraphicControlExtensionUserInputFlag = WICGifGraphicControlExtensionProperties.WICGifGraphicControlExtensionUserInputFlag;
pub const WICGifGraphicControlExtensionTransparencyFlag = WICGifGraphicControlExtensionProperties.WICGifGraphicControlExtensionTransparencyFlag;
pub const WICGifGraphicControlExtensionDelay = WICGifGraphicControlExtensionProperties.WICGifGraphicControlExtensionDelay;
pub const WICGifGraphicControlExtensionTransparentColorIndex = WICGifGraphicControlExtensionProperties.WICGifGraphicControlExtensionTransparentColorIndex;
pub const WICGifGraphicControlExtensionProperties_FORCE_DWORD = WICGifGraphicControlExtensionProperties.FORCE_DWORD;

pub const WICGifApplicationExtensionProperties = extern enum(u32) {
    WICGifApplicationExtensionApplication = 1,
    WICGifApplicationExtensionData = 2,
    FORCE_DWORD = 2147483647,
};
pub const WICGifApplicationExtensionApplication = WICGifApplicationExtensionProperties.WICGifApplicationExtensionApplication;
pub const WICGifApplicationExtensionData = WICGifApplicationExtensionProperties.WICGifApplicationExtensionData;
pub const WICGifApplicationExtensionProperties_FORCE_DWORD = WICGifApplicationExtensionProperties.FORCE_DWORD;

pub const WICGifCommentExtensionProperties = extern enum(u32) {
    WICGifCommentExtensionText = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICGifCommentExtensionText = WICGifCommentExtensionProperties.WICGifCommentExtensionText;
pub const WICGifCommentExtensionProperties_FORCE_DWORD = WICGifCommentExtensionProperties.FORCE_DWORD;

pub const WICJpegCommentProperties = extern enum(u32) {
    WICJpegCommentText = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICJpegCommentText = WICJpegCommentProperties.WICJpegCommentText;
pub const WICJpegCommentProperties_FORCE_DWORD = WICJpegCommentProperties.FORCE_DWORD;

pub const WICJpegLuminanceProperties = extern enum(u32) {
    WICJpegLuminanceTable = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICJpegLuminanceTable = WICJpegLuminanceProperties.WICJpegLuminanceTable;
pub const WICJpegLuminanceProperties_FORCE_DWORD = WICJpegLuminanceProperties.FORCE_DWORD;

pub const WICJpegChrominanceProperties = extern enum(u32) {
    WICJpegChrominanceTable = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICJpegChrominanceTable = WICJpegChrominanceProperties.WICJpegChrominanceTable;
pub const WICJpegChrominanceProperties_FORCE_DWORD = WICJpegChrominanceProperties.FORCE_DWORD;

pub const WIC8BIMIptcProperties = extern enum(u32) {
    WIC8BIMIptcPString = 0,
    WIC8BIMIptcEmbeddedIPTC = 1,
    FORCE_DWORD = 2147483647,
};
pub const WIC8BIMIptcPString = WIC8BIMIptcProperties.WIC8BIMIptcPString;
pub const WIC8BIMIptcEmbeddedIPTC = WIC8BIMIptcProperties.WIC8BIMIptcEmbeddedIPTC;
pub const WIC8BIMIptcProperties_FORCE_DWORD = WIC8BIMIptcProperties.FORCE_DWORD;

pub const WIC8BIMResolutionInfoProperties = extern enum(u32) {
    WIC8BIMResolutionInfoPString = 1,
    WIC8BIMResolutionInfoHResolution = 2,
    WIC8BIMResolutionInfoHResolutionUnit = 3,
    WIC8BIMResolutionInfoWidthUnit = 4,
    WIC8BIMResolutionInfoVResolution = 5,
    WIC8BIMResolutionInfoVResolutionUnit = 6,
    WIC8BIMResolutionInfoHeightUnit = 7,
    FORCE_DWORD = 2147483647,
};
pub const WIC8BIMResolutionInfoPString = WIC8BIMResolutionInfoProperties.WIC8BIMResolutionInfoPString;
pub const WIC8BIMResolutionInfoHResolution = WIC8BIMResolutionInfoProperties.WIC8BIMResolutionInfoHResolution;
pub const WIC8BIMResolutionInfoHResolutionUnit = WIC8BIMResolutionInfoProperties.WIC8BIMResolutionInfoHResolutionUnit;
pub const WIC8BIMResolutionInfoWidthUnit = WIC8BIMResolutionInfoProperties.WIC8BIMResolutionInfoWidthUnit;
pub const WIC8BIMResolutionInfoVResolution = WIC8BIMResolutionInfoProperties.WIC8BIMResolutionInfoVResolution;
pub const WIC8BIMResolutionInfoVResolutionUnit = WIC8BIMResolutionInfoProperties.WIC8BIMResolutionInfoVResolutionUnit;
pub const WIC8BIMResolutionInfoHeightUnit = WIC8BIMResolutionInfoProperties.WIC8BIMResolutionInfoHeightUnit;
pub const WIC8BIMResolutionInfoProperties_FORCE_DWORD = WIC8BIMResolutionInfoProperties.FORCE_DWORD;

pub const WIC8BIMIptcDigestProperties = extern enum(u32) {
    WIC8BIMIptcDigestPString = 1,
    WIC8BIMIptcDigestIptcDigest = 2,
    FORCE_DWORD = 2147483647,
};
pub const WIC8BIMIptcDigestPString = WIC8BIMIptcDigestProperties.WIC8BIMIptcDigestPString;
pub const WIC8BIMIptcDigestIptcDigest = WIC8BIMIptcDigestProperties.WIC8BIMIptcDigestIptcDigest;
pub const WIC8BIMIptcDigestProperties_FORCE_DWORD = WIC8BIMIptcDigestProperties.FORCE_DWORD;

pub const WICPngGamaProperties = extern enum(u32) {
    WICPngGamaGamma = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICPngGamaGamma = WICPngGamaProperties.WICPngGamaGamma;
pub const WICPngGamaProperties_FORCE_DWORD = WICPngGamaProperties.FORCE_DWORD;

pub const WICPngBkgdProperties = extern enum(u32) {
    WICPngBkgdBackgroundColor = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICPngBkgdBackgroundColor = WICPngBkgdProperties.WICPngBkgdBackgroundColor;
pub const WICPngBkgdProperties_FORCE_DWORD = WICPngBkgdProperties.FORCE_DWORD;

pub const WICPngItxtProperties = extern enum(u32) {
    WICPngItxtKeyword = 1,
    WICPngItxtCompressionFlag = 2,
    WICPngItxtLanguageTag = 3,
    WICPngItxtTranslatedKeyword = 4,
    WICPngItxtText = 5,
    FORCE_DWORD = 2147483647,
};
pub const WICPngItxtKeyword = WICPngItxtProperties.WICPngItxtKeyword;
pub const WICPngItxtCompressionFlag = WICPngItxtProperties.WICPngItxtCompressionFlag;
pub const WICPngItxtLanguageTag = WICPngItxtProperties.WICPngItxtLanguageTag;
pub const WICPngItxtTranslatedKeyword = WICPngItxtProperties.WICPngItxtTranslatedKeyword;
pub const WICPngItxtText = WICPngItxtProperties.WICPngItxtText;
pub const WICPngItxtProperties_FORCE_DWORD = WICPngItxtProperties.FORCE_DWORD;

pub const WICPngChrmProperties = extern enum(u32) {
    WICPngChrmWhitePointX = 1,
    WICPngChrmWhitePointY = 2,
    WICPngChrmRedX = 3,
    WICPngChrmRedY = 4,
    WICPngChrmGreenX = 5,
    WICPngChrmGreenY = 6,
    WICPngChrmBlueX = 7,
    WICPngChrmBlueY = 8,
    FORCE_DWORD = 2147483647,
};
pub const WICPngChrmWhitePointX = WICPngChrmProperties.WICPngChrmWhitePointX;
pub const WICPngChrmWhitePointY = WICPngChrmProperties.WICPngChrmWhitePointY;
pub const WICPngChrmRedX = WICPngChrmProperties.WICPngChrmRedX;
pub const WICPngChrmRedY = WICPngChrmProperties.WICPngChrmRedY;
pub const WICPngChrmGreenX = WICPngChrmProperties.WICPngChrmGreenX;
pub const WICPngChrmGreenY = WICPngChrmProperties.WICPngChrmGreenY;
pub const WICPngChrmBlueX = WICPngChrmProperties.WICPngChrmBlueX;
pub const WICPngChrmBlueY = WICPngChrmProperties.WICPngChrmBlueY;
pub const WICPngChrmProperties_FORCE_DWORD = WICPngChrmProperties.FORCE_DWORD;

pub const WICPngHistProperties = extern enum(u32) {
    WICPngHistFrequencies = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICPngHistFrequencies = WICPngHistProperties.WICPngHistFrequencies;
pub const WICPngHistProperties_FORCE_DWORD = WICPngHistProperties.FORCE_DWORD;

pub const WICPngIccpProperties = extern enum(u32) {
    WICPngIccpProfileName = 1,
    WICPngIccpProfileData = 2,
    FORCE_DWORD = 2147483647,
};
pub const WICPngIccpProfileName = WICPngIccpProperties.WICPngIccpProfileName;
pub const WICPngIccpProfileData = WICPngIccpProperties.WICPngIccpProfileData;
pub const WICPngIccpProperties_FORCE_DWORD = WICPngIccpProperties.FORCE_DWORD;

pub const WICPngSrgbProperties = extern enum(u32) {
    WICPngSrgbRenderingIntent = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICPngSrgbRenderingIntent = WICPngSrgbProperties.WICPngSrgbRenderingIntent;
pub const WICPngSrgbProperties_FORCE_DWORD = WICPngSrgbProperties.FORCE_DWORD;

pub const WICPngTimeProperties = extern enum(u32) {
    WICPngTimeYear = 1,
    WICPngTimeMonth = 2,
    WICPngTimeDay = 3,
    WICPngTimeHour = 4,
    WICPngTimeMinute = 5,
    WICPngTimeSecond = 6,
    FORCE_DWORD = 2147483647,
};
pub const WICPngTimeYear = WICPngTimeProperties.WICPngTimeYear;
pub const WICPngTimeMonth = WICPngTimeProperties.WICPngTimeMonth;
pub const WICPngTimeDay = WICPngTimeProperties.WICPngTimeDay;
pub const WICPngTimeHour = WICPngTimeProperties.WICPngTimeHour;
pub const WICPngTimeMinute = WICPngTimeProperties.WICPngTimeMinute;
pub const WICPngTimeSecond = WICPngTimeProperties.WICPngTimeSecond;
pub const WICPngTimeProperties_FORCE_DWORD = WICPngTimeProperties.FORCE_DWORD;

pub const WICHeifProperties = extern enum(u32) {
    WICHeifOrientation = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICHeifOrientation = WICHeifProperties.WICHeifOrientation;
pub const WICHeifProperties_FORCE_DWORD = WICHeifProperties.FORCE_DWORD;

pub const WICHeifHdrProperties = extern enum(u32) {
    WICHeifHdrMaximumLuminanceLevel = 1,
    WICHeifHdrMaximumFrameAverageLuminanceLevel = 2,
    WICHeifHdrMinimumMasteringDisplayLuminanceLevel = 3,
    WICHeifHdrMaximumMasteringDisplayLuminanceLevel = 4,
    WICHeifHdrCustomVideoPrimaries = 5,
    FORCE_DWORD = 2147483647,
};
pub const WICHeifHdrMaximumLuminanceLevel = WICHeifHdrProperties.WICHeifHdrMaximumLuminanceLevel;
pub const WICHeifHdrMaximumFrameAverageLuminanceLevel = WICHeifHdrProperties.WICHeifHdrMaximumFrameAverageLuminanceLevel;
pub const WICHeifHdrMinimumMasteringDisplayLuminanceLevel = WICHeifHdrProperties.WICHeifHdrMinimumMasteringDisplayLuminanceLevel;
pub const WICHeifHdrMaximumMasteringDisplayLuminanceLevel = WICHeifHdrProperties.WICHeifHdrMaximumMasteringDisplayLuminanceLevel;
pub const WICHeifHdrCustomVideoPrimaries = WICHeifHdrProperties.WICHeifHdrCustomVideoPrimaries;
pub const WICHeifHdrProperties_FORCE_DWORD = WICHeifHdrProperties.FORCE_DWORD;

pub const WICWebpAnimProperties = extern enum(u32) {
    WICWebpAnimLoopCount = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICWebpAnimLoopCount = WICWebpAnimProperties.WICWebpAnimLoopCount;
pub const WICWebpAnimProperties_FORCE_DWORD = WICWebpAnimProperties.FORCE_DWORD;

pub const WICWebpAnmfProperties = extern enum(u32) {
    WICWebpAnmfFrameDuration = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICWebpAnmfFrameDuration = WICWebpAnmfProperties.WICWebpAnmfFrameDuration;
pub const WICWebpAnmfProperties_FORCE_DWORD = WICWebpAnmfProperties.FORCE_DWORD;

pub const WICSectionAccessLevel = extern enum(u32) {
    WICSectionAccessLevelRead = 1,
    WICSectionAccessLevelReadWrite = 3,
    FORCE_DWORD = 2147483647,
};
pub const WICSectionAccessLevelRead = WICSectionAccessLevel.WICSectionAccessLevelRead;
pub const WICSectionAccessLevelReadWrite = WICSectionAccessLevel.WICSectionAccessLevelReadWrite;
pub const WICSectionAccessLevel_FORCE_DWORD = WICSectionAccessLevel.FORCE_DWORD;

pub const WICPixelFormatNumericRepresentation = extern enum(u32) {
    WICPixelFormatNumericRepresentationUnspecified = 0,
    WICPixelFormatNumericRepresentationIndexed = 1,
    WICPixelFormatNumericRepresentationUnsignedInteger = 2,
    WICPixelFormatNumericRepresentationSignedInteger = 3,
    WICPixelFormatNumericRepresentationFixed = 4,
    WICPixelFormatNumericRepresentationFloat = 5,
    FORCE_DWORD = 2147483647,
};
pub const WICPixelFormatNumericRepresentationUnspecified = WICPixelFormatNumericRepresentation.WICPixelFormatNumericRepresentationUnspecified;
pub const WICPixelFormatNumericRepresentationIndexed = WICPixelFormatNumericRepresentation.WICPixelFormatNumericRepresentationIndexed;
pub const WICPixelFormatNumericRepresentationUnsignedInteger = WICPixelFormatNumericRepresentation.WICPixelFormatNumericRepresentationUnsignedInteger;
pub const WICPixelFormatNumericRepresentationSignedInteger = WICPixelFormatNumericRepresentation.WICPixelFormatNumericRepresentationSignedInteger;
pub const WICPixelFormatNumericRepresentationFixed = WICPixelFormatNumericRepresentation.WICPixelFormatNumericRepresentationFixed;
pub const WICPixelFormatNumericRepresentationFloat = WICPixelFormatNumericRepresentation.WICPixelFormatNumericRepresentationFloat;
pub const WICPixelFormatNumericRepresentation_FORCE_DWORD = WICPixelFormatNumericRepresentation.FORCE_DWORD;

pub const WICPlanarOptions = extern enum(i32) {
    WICPlanarOptionsDefault = 0,
    WICPlanarOptionsPreserveSubsampling = 1,
    WICPLANAROPTIONS_FORCE_DWORD = 2147483647,
};
pub const WICPlanarOptionsDefault = WICPlanarOptions.WICPlanarOptionsDefault;
pub const WICPlanarOptionsPreserveSubsampling = WICPlanarOptions.WICPlanarOptionsPreserveSubsampling;
pub const WICPLANAROPTIONS_FORCE_DWORD = WICPlanarOptions.WICPLANAROPTIONS_FORCE_DWORD;

pub const WICJpegIndexingOptions = extern enum(u32) {
    WICJpegIndexingOptionsGenerateOnDemand = 0,
    WICJpegIndexingOptionsGenerateOnLoad = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICJpegIndexingOptionsGenerateOnDemand = WICJpegIndexingOptions.WICJpegIndexingOptionsGenerateOnDemand;
pub const WICJpegIndexingOptionsGenerateOnLoad = WICJpegIndexingOptions.WICJpegIndexingOptionsGenerateOnLoad;
pub const WICJpegIndexingOptions_FORCE_DWORD = WICJpegIndexingOptions.FORCE_DWORD;

pub const WICJpegTransferMatrix = extern enum(u32) {
    WICJpegTransferMatrixIdentity = 0,
    WICJpegTransferMatrixBT601 = 1,
    FORCE_DWORD = 2147483647,
};
pub const WICJpegTransferMatrixIdentity = WICJpegTransferMatrix.WICJpegTransferMatrixIdentity;
pub const WICJpegTransferMatrixBT601 = WICJpegTransferMatrix.WICJpegTransferMatrixBT601;
pub const WICJpegTransferMatrix_FORCE_DWORD = WICJpegTransferMatrix.FORCE_DWORD;

pub const WICJpegScanType = extern enum(u32) {
    WICJpegScanTypeInterleaved = 0,
    WICJpegScanTypePlanarComponents = 1,
    WICJpegScanTypeProgressive = 2,
    FORCE_DWORD = 2147483647,
};
pub const WICJpegScanTypeInterleaved = WICJpegScanType.WICJpegScanTypeInterleaved;
pub const WICJpegScanTypePlanarComponents = WICJpegScanType.WICJpegScanTypePlanarComponents;
pub const WICJpegScanTypeProgressive = WICJpegScanType.WICJpegScanTypeProgressive;
pub const WICJpegScanType_FORCE_DWORD = WICJpegScanType.FORCE_DWORD;

pub const WICImageParameters = extern struct {
    PixelFormat: D2D1_PIXEL_FORMAT,
    DpiX: f32,
    DpiY: f32,
    Top: f32,
    Left: f32,
    PixelWidth: u32,
    PixelHeight: u32,
};

pub const WICBitmapPlaneDescription = extern struct {
    Format: Guid,
    Width: u32,
    Height: u32,
};

pub const WICBitmapPlane = extern struct {
    Format: Guid,
    pbBuffer: *u8,
    cbStride: u32,
    cbBufferSize: u32,
};

pub const WICJpegFrameHeader = extern struct {
    Width: u32,
    Height: u32,
    TransferMatrix: WICJpegTransferMatrix,
    ScanType: WICJpegScanType,
    cComponents: u32,
    ComponentIdentifiers: u32,
    SampleFactors: u32,
    QuantizationTableIndices: u32,
};

pub const WICJpegScanHeader = extern struct {
    cComponents: u32,
    RestartInterval: u32,
    ComponentSelectors: u32,
    HuffmanTableIndices: u32,
    StartSpectralSelection: u8,
    EndSpectralSelection: u8,
    SuccessiveApproximationHigh: u8,
    SuccessiveApproximationLow: u8,
};

const IID_IWICPalette_Value = @import("../zig.zig").Guid.initString("00000040-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICPalette = &IID_IWICPalette_Value;
pub const IWICPalette = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializePredefined: fn(
            self: *const IWICPalette,
            ePaletteType: WICBitmapPaletteType,
            fAddTransparentColor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeCustom: fn(
            self: *const IWICPalette,
            pColors: [*]u32,
            cCount: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromBitmap: fn(
            self: *const IWICPalette,
            pISurface: *IWICBitmapSource,
            cCount: u32,
            fAddTransparentColor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPalette: fn(
            self: *const IWICPalette,
            pIPalette: *IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: fn(
            self: *const IWICPalette,
            pePaletteType: *WICBitmapPaletteType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorCount: fn(
            self: *const IWICPalette,
            pcCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColors: fn(
            self: *const IWICPalette,
            cCount: u32,
            pColors: [*]u32,
            pcActualColors: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsBlackWhite: fn(
            self: *const IWICPalette,
            pfIsBlackWhite: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsGrayscale: fn(
            self: *const IWICPalette,
            pfIsGrayscale: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasAlpha: fn(
            self: *const IWICPalette,
            pfHasAlpha: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPalette_InitializePredefined(self: *const T, ePaletteType: WICBitmapPaletteType, fAddTransparentColor: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPalette.VTable, self.vtable).InitializePredefined(@ptrCast(*const IWICPalette, self), ePaletteType, fAddTransparentColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPalette_InitializeCustom(self: *const T, pColors: [*]u32, cCount: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPalette.VTable, self.vtable).InitializeCustom(@ptrCast(*const IWICPalette, self), pColors, cCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPalette_InitializeFromBitmap(self: *const T, pISurface: *IWICBitmapSource, cCount: u32, fAddTransparentColor: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPalette.VTable, self.vtable).InitializeFromBitmap(@ptrCast(*const IWICPalette, self), pISurface, cCount, fAddTransparentColor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPalette_InitializeFromPalette(self: *const T, pIPalette: *IWICPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPalette.VTable, self.vtable).InitializeFromPalette(@ptrCast(*const IWICPalette, self), pIPalette);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPalette_GetType(self: *const T, pePaletteType: *WICBitmapPaletteType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPalette.VTable, self.vtable).GetType(@ptrCast(*const IWICPalette, self), pePaletteType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPalette_GetColorCount(self: *const T, pcCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPalette.VTable, self.vtable).GetColorCount(@ptrCast(*const IWICPalette, self), pcCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPalette_GetColors(self: *const T, cCount: u32, pColors: [*]u32, pcActualColors: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPalette.VTable, self.vtable).GetColors(@ptrCast(*const IWICPalette, self), cCount, pColors, pcActualColors);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPalette_IsBlackWhite(self: *const T, pfIsBlackWhite: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPalette.VTable, self.vtable).IsBlackWhite(@ptrCast(*const IWICPalette, self), pfIsBlackWhite);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPalette_IsGrayscale(self: *const T, pfIsGrayscale: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPalette.VTable, self.vtable).IsGrayscale(@ptrCast(*const IWICPalette, self), pfIsGrayscale);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPalette_HasAlpha(self: *const T, pfHasAlpha: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPalette.VTable, self.vtable).HasAlpha(@ptrCast(*const IWICPalette, self), pfHasAlpha);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapSource_Value = @import("../zig.zig").Guid.initString("00000120-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICBitmapSource = &IID_IWICBitmapSource_Value;
pub const IWICBitmapSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSize: fn(
            self: *const IWICBitmapSource,
            puiWidth: *u32,
            puiHeight: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: fn(
            self: *const IWICBitmapSource,
            pPixelFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResolution: fn(
            self: *const IWICBitmapSource,
            pDpiX: *f64,
            pDpiY: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyPalette: fn(
            self: *const IWICBitmapSource,
            pIPalette: *IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyPixels: fn(
            self: *const IWICBitmapSource,
            prc: *const WICRect,
            cbStride: u32,
            cbBufferSize: u32,
            pbBuffer: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapSource_GetSize(self: *const T, puiWidth: *u32, puiHeight: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapSource.VTable, self.vtable).GetSize(@ptrCast(*const IWICBitmapSource, self), puiWidth, puiHeight);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapSource_GetPixelFormat(self: *const T, pPixelFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapSource.VTable, self.vtable).GetPixelFormat(@ptrCast(*const IWICBitmapSource, self), pPixelFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapSource_GetResolution(self: *const T, pDpiX: *f64, pDpiY: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapSource.VTable, self.vtable).GetResolution(@ptrCast(*const IWICBitmapSource, self), pDpiX, pDpiY);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapSource_CopyPalette(self: *const T, pIPalette: *IWICPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapSource.VTable, self.vtable).CopyPalette(@ptrCast(*const IWICBitmapSource, self), pIPalette);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapSource_CopyPixels(self: *const T, prc: *const WICRect, cbStride: u32, cbBufferSize: u32, pbBuffer: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapSource.VTable, self.vtable).CopyPixels(@ptrCast(*const IWICBitmapSource, self), prc, cbStride, cbBufferSize, pbBuffer);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICFormatConverter_Value = @import("../zig.zig").Guid.initString("00000301-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICFormatConverter = &IID_IWICFormatConverter_Value;
pub const IWICFormatConverter = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Initialize: fn(
            self: *const IWICFormatConverter,
            pISource: *IWICBitmapSource,
            dstFormat: *Guid,
            dither: WICBitmapDitherType,
            pIPalette: *IWICPalette,
            alphaThresholdPercent: f64,
            paletteTranslate: WICBitmapPaletteType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanConvert: fn(
            self: *const IWICFormatConverter,
            srcPixelFormat: *Guid,
            dstPixelFormat: *Guid,
            pfCanConvert: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICBitmapSource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICFormatConverter_Initialize(self: *const T, pISource: *IWICBitmapSource, dstFormat: *Guid, dither: WICBitmapDitherType, pIPalette: *IWICPalette, alphaThresholdPercent: f64, paletteTranslate: WICBitmapPaletteType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICFormatConverter.VTable, self.vtable).Initialize(@ptrCast(*const IWICFormatConverter, self), pISource, dstFormat, dither, pIPalette, alphaThresholdPercent, paletteTranslate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICFormatConverter_CanConvert(self: *const T, srcPixelFormat: *Guid, dstPixelFormat: *Guid, pfCanConvert: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICFormatConverter.VTable, self.vtable).CanConvert(@ptrCast(*const IWICFormatConverter, self), srcPixelFormat, dstPixelFormat, pfCanConvert);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICPlanarFormatConverter_Value = @import("../zig.zig").Guid.initString("bebee9cb-83b0-4dcc-8132-b0aaa55eac96");
pub const IID_IWICPlanarFormatConverter = &IID_IWICPlanarFormatConverter_Value;
pub const IWICPlanarFormatConverter = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Initialize: fn(
            self: *const IWICPlanarFormatConverter,
            ppPlanes: [*]*IWICBitmapSource,
            cPlanes: u32,
            dstFormat: *Guid,
            dither: WICBitmapDitherType,
            pIPalette: *IWICPalette,
            alphaThresholdPercent: f64,
            paletteTranslate: WICBitmapPaletteType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanConvert: fn(
            self: *const IWICPlanarFormatConverter,
            pSrcPixelFormats: [*]const Guid,
            cSrcPlanes: u32,
            dstPixelFormat: *Guid,
            pfCanConvert: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICBitmapSource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPlanarFormatConverter_Initialize(self: *const T, ppPlanes: [*]*IWICBitmapSource, cPlanes: u32, dstFormat: *Guid, dither: WICBitmapDitherType, pIPalette: *IWICPalette, alphaThresholdPercent: f64, paletteTranslate: WICBitmapPaletteType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPlanarFormatConverter.VTable, self.vtable).Initialize(@ptrCast(*const IWICPlanarFormatConverter, self), ppPlanes, cPlanes, dstFormat, dither, pIPalette, alphaThresholdPercent, paletteTranslate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPlanarFormatConverter_CanConvert(self: *const T, pSrcPixelFormats: [*]const Guid, cSrcPlanes: u32, dstPixelFormat: *Guid, pfCanConvert: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPlanarFormatConverter.VTable, self.vtable).CanConvert(@ptrCast(*const IWICPlanarFormatConverter, self), pSrcPixelFormats, cSrcPlanes, dstPixelFormat, pfCanConvert);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapScaler_Value = @import("../zig.zig").Guid.initString("00000302-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICBitmapScaler = &IID_IWICBitmapScaler_Value;
pub const IWICBitmapScaler = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Initialize: fn(
            self: *const IWICBitmapScaler,
            pISource: *IWICBitmapSource,
            uiWidth: u32,
            uiHeight: u32,
            mode: WICBitmapInterpolationMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICBitmapSource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapScaler_Initialize(self: *const T, pISource: *IWICBitmapSource, uiWidth: u32, uiHeight: u32, mode: WICBitmapInterpolationMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapScaler.VTable, self.vtable).Initialize(@ptrCast(*const IWICBitmapScaler, self), pISource, uiWidth, uiHeight, mode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapClipper_Value = @import("../zig.zig").Guid.initString("e4fbcf03-223d-4e81-9333-d635556dd1b5");
pub const IID_IWICBitmapClipper = &IID_IWICBitmapClipper_Value;
pub const IWICBitmapClipper = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Initialize: fn(
            self: *const IWICBitmapClipper,
            pISource: *IWICBitmapSource,
            prc: *const WICRect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICBitmapSource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapClipper_Initialize(self: *const T, pISource: *IWICBitmapSource, prc: *const WICRect) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapClipper.VTable, self.vtable).Initialize(@ptrCast(*const IWICBitmapClipper, self), pISource, prc);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapFlipRotator_Value = @import("../zig.zig").Guid.initString("5009834f-2d6a-41ce-9e1b-17c5aff7a782");
pub const IID_IWICBitmapFlipRotator = &IID_IWICBitmapFlipRotator_Value;
pub const IWICBitmapFlipRotator = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Initialize: fn(
            self: *const IWICBitmapFlipRotator,
            pISource: *IWICBitmapSource,
            options: WICBitmapTransformOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICBitmapSource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFlipRotator_Initialize(self: *const T, pISource: *IWICBitmapSource, options: WICBitmapTransformOptions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFlipRotator.VTable, self.vtable).Initialize(@ptrCast(*const IWICBitmapFlipRotator, self), pISource, options);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapLock_Value = @import("../zig.zig").Guid.initString("00000123-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICBitmapLock = &IID_IWICBitmapLock_Value;
pub const IWICBitmapLock = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSize: fn(
            self: *const IWICBitmapLock,
            puiWidth: *u32,
            puiHeight: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStride: fn(
            self: *const IWICBitmapLock,
            pcbStride: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataPointer: fn(
            self: *const IWICBitmapLock,
            pcbBufferSize: *u32,
            ppbData: [*]*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: fn(
            self: *const IWICBitmapLock,
            pPixelFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapLock_GetSize(self: *const T, puiWidth: *u32, puiHeight: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapLock.VTable, self.vtable).GetSize(@ptrCast(*const IWICBitmapLock, self), puiWidth, puiHeight);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapLock_GetStride(self: *const T, pcbStride: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapLock.VTable, self.vtable).GetStride(@ptrCast(*const IWICBitmapLock, self), pcbStride);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapLock_GetDataPointer(self: *const T, pcbBufferSize: *u32, ppbData: [*]*u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapLock.VTable, self.vtable).GetDataPointer(@ptrCast(*const IWICBitmapLock, self), pcbBufferSize, ppbData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapLock_GetPixelFormat(self: *const T, pPixelFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapLock.VTable, self.vtable).GetPixelFormat(@ptrCast(*const IWICBitmapLock, self), pPixelFormat);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmap_Value = @import("../zig.zig").Guid.initString("00000121-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICBitmap = &IID_IWICBitmap_Value;
pub const IWICBitmap = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Lock: fn(
            self: *const IWICBitmap,
            prcLock: *const WICRect,
            flags: u32,
            ppILock: **IWICBitmapLock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPalette: fn(
            self: *const IWICBitmap,
            pIPalette: *IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResolution: fn(
            self: *const IWICBitmap,
            dpiX: f64,
            dpiY: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICBitmapSource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmap_Lock(self: *const T, prcLock: *const WICRect, flags: u32, ppILock: **IWICBitmapLock) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmap.VTable, self.vtable).Lock(@ptrCast(*const IWICBitmap, self), prcLock, flags, ppILock);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmap_SetPalette(self: *const T, pIPalette: *IWICPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmap.VTable, self.vtable).SetPalette(@ptrCast(*const IWICBitmap, self), pIPalette);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmap_SetResolution(self: *const T, dpiX: f64, dpiY: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmap.VTable, self.vtable).SetResolution(@ptrCast(*const IWICBitmap, self), dpiX, dpiY);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICColorContext_Value = @import("../zig.zig").Guid.initString("3c613a02-34b2-44ea-9a7c-45aea9c6fd6d");
pub const IID_IWICColorContext = &IID_IWICColorContext_Value;
pub const IWICColorContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeFromFilename: fn(
            self: *const IWICColorContext,
            wzFilename: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromMemory: fn(
            self: *const IWICColorContext,
            pbBuffer: [*:0]const u8,
            cbBufferSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromExifColorSpace: fn(
            self: *const IWICColorContext,
            value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: fn(
            self: *const IWICColorContext,
            pType: *WICColorContextType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProfileBytes: fn(
            self: *const IWICColorContext,
            cbBuffer: u32,
            pbBuffer: [*:0]u8,
            pcbActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExifColorSpace: fn(
            self: *const IWICColorContext,
            pValue: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICColorContext_InitializeFromFilename(self: *const T, wzFilename: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICColorContext.VTable, self.vtable).InitializeFromFilename(@ptrCast(*const IWICColorContext, self), wzFilename);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICColorContext_InitializeFromMemory(self: *const T, pbBuffer: [*:0]const u8, cbBufferSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICColorContext.VTable, self.vtable).InitializeFromMemory(@ptrCast(*const IWICColorContext, self), pbBuffer, cbBufferSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICColorContext_InitializeFromExifColorSpace(self: *const T, value: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICColorContext.VTable, self.vtable).InitializeFromExifColorSpace(@ptrCast(*const IWICColorContext, self), value);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICColorContext_GetType(self: *const T, pType: *WICColorContextType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICColorContext.VTable, self.vtable).GetType(@ptrCast(*const IWICColorContext, self), pType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICColorContext_GetProfileBytes(self: *const T, cbBuffer: u32, pbBuffer: [*:0]u8, pcbActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICColorContext.VTable, self.vtable).GetProfileBytes(@ptrCast(*const IWICColorContext, self), cbBuffer, pbBuffer, pcbActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICColorContext_GetExifColorSpace(self: *const T, pValue: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICColorContext.VTable, self.vtable).GetExifColorSpace(@ptrCast(*const IWICColorContext, self), pValue);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICColorTransform_Value = @import("../zig.zig").Guid.initString("b66f034f-d0e2-40ab-b436-6de39e321a94");
pub const IID_IWICColorTransform = &IID_IWICColorTransform_Value;
pub const IWICColorTransform = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Initialize: fn(
            self: *const IWICColorTransform,
            pIBitmapSource: *IWICBitmapSource,
            pIContextSource: *IWICColorContext,
            pIContextDest: *IWICColorContext,
            pixelFmtDest: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICBitmapSource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICColorTransform_Initialize(self: *const T, pIBitmapSource: *IWICBitmapSource, pIContextSource: *IWICColorContext, pIContextDest: *IWICColorContext, pixelFmtDest: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICColorTransform.VTable, self.vtable).Initialize(@ptrCast(*const IWICColorTransform, self), pIBitmapSource, pIContextSource, pIContextDest, pixelFmtDest);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICFastMetadataEncoder_Value = @import("../zig.zig").Guid.initString("b84e2c09-78c9-4ac4-8bd3-524ae1663a2f");
pub const IID_IWICFastMetadataEncoder = &IID_IWICFastMetadataEncoder_Value;
pub const IWICFastMetadataEncoder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Commit: fn(
            self: *const IWICFastMetadataEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataQueryWriter: fn(
            self: *const IWICFastMetadataEncoder,
            ppIMetadataQueryWriter: **IWICMetadataQueryWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICFastMetadataEncoder_Commit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICFastMetadataEncoder.VTable, self.vtable).Commit(@ptrCast(*const IWICFastMetadataEncoder, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICFastMetadataEncoder_GetMetadataQueryWriter(self: *const T, ppIMetadataQueryWriter: **IWICMetadataQueryWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICFastMetadataEncoder.VTable, self.vtable).GetMetadataQueryWriter(@ptrCast(*const IWICFastMetadataEncoder, self), ppIMetadataQueryWriter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICStream_Value = @import("../zig.zig").Guid.initString("135ff860-22b7-4ddf-b0f6-218f4f299a43");
pub const IID_IWICStream = &IID_IWICStream_Value;
pub const IWICStream = extern struct {
    pub const VTable = extern struct {
        base: IStream.VTable,
        InitializeFromIStream: fn(
            self: *const IWICStream,
            pIStream: *IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromFilename: fn(
            self: *const IWICStream,
            wzFileName: [*:0]const u16,
            dwDesiredAccess: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromMemory: fn(
            self: *const IWICStream,
            pbBuffer: [*:0]u8,
            cbBufferSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromIStreamRegion: fn(
            self: *const IWICStream,
            pIStream: *IStream,
            ulOffset: ULARGE_INTEGER,
            ulMaxSize: ULARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IStream.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICStream_InitializeFromIStream(self: *const T, pIStream: *IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICStream.VTable, self.vtable).InitializeFromIStream(@ptrCast(*const IWICStream, self), pIStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICStream_InitializeFromFilename(self: *const T, wzFileName: [*:0]const u16, dwDesiredAccess: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICStream.VTable, self.vtable).InitializeFromFilename(@ptrCast(*const IWICStream, self), wzFileName, dwDesiredAccess);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICStream_InitializeFromMemory(self: *const T, pbBuffer: [*:0]u8, cbBufferSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICStream.VTable, self.vtable).InitializeFromMemory(@ptrCast(*const IWICStream, self), pbBuffer, cbBufferSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICStream_InitializeFromIStreamRegion(self: *const T, pIStream: *IStream, ulOffset: ULARGE_INTEGER, ulMaxSize: ULARGE_INTEGER) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICStream.VTable, self.vtable).InitializeFromIStreamRegion(@ptrCast(*const IWICStream, self), pIStream, ulOffset, ulMaxSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICEnumMetadataItem_Value = @import("../zig.zig").Guid.initString("dc2bb46d-3f07-481e-8625-220c4aedbb33");
pub const IID_IWICEnumMetadataItem = &IID_IWICEnumMetadataItem_Value;
pub const IWICEnumMetadataItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: fn(
            self: *const IWICEnumMetadataItem,
            celt: u32,
            rgeltSchema: [*]PROPVARIANT,
            rgeltId: [*]PROPVARIANT,
            rgeltValue: [*]PROPVARIANT,
            pceltFetched: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: fn(
            self: *const IWICEnumMetadataItem,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: fn(
            self: *const IWICEnumMetadataItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: fn(
            self: *const IWICEnumMetadataItem,
            ppIEnumMetadataItem: **IWICEnumMetadataItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICEnumMetadataItem_Next(self: *const T, celt: u32, rgeltSchema: [*]PROPVARIANT, rgeltId: [*]PROPVARIANT, rgeltValue: [*]PROPVARIANT, pceltFetched: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICEnumMetadataItem.VTable, self.vtable).Next(@ptrCast(*const IWICEnumMetadataItem, self), celt, rgeltSchema, rgeltId, rgeltValue, pceltFetched);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICEnumMetadataItem_Skip(self: *const T, celt: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICEnumMetadataItem.VTable, self.vtable).Skip(@ptrCast(*const IWICEnumMetadataItem, self), celt);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICEnumMetadataItem_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICEnumMetadataItem.VTable, self.vtable).Reset(@ptrCast(*const IWICEnumMetadataItem, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICEnumMetadataItem_Clone(self: *const T, ppIEnumMetadataItem: **IWICEnumMetadataItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICEnumMetadataItem.VTable, self.vtable).Clone(@ptrCast(*const IWICEnumMetadataItem, self), ppIEnumMetadataItem);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICMetadataQueryReader_Value = @import("../zig.zig").Guid.initString("30989668-e1c9-4597-b395-458eedb808df");
pub const IID_IWICMetadataQueryReader = &IID_IWICMetadataQueryReader_Value;
pub const IWICMetadataQueryReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetContainerFormat: fn(
            self: *const IWICMetadataQueryReader,
            pguidContainerFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocation: fn(
            self: *const IWICMetadataQueryReader,
            cchMaxLength: u32,
            wzNamespace: [*:0]u16,
            pcchActualLength: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataByName: fn(
            self: *const IWICMetadataQueryReader,
            wzName: [*:0]const u16,
            pvarValue: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: fn(
            self: *const IWICMetadataQueryReader,
            ppIEnumString: **IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataQueryReader_GetContainerFormat(self: *const T, pguidContainerFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataQueryReader.VTable, self.vtable).GetContainerFormat(@ptrCast(*const IWICMetadataQueryReader, self), pguidContainerFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataQueryReader_GetLocation(self: *const T, cchMaxLength: u32, wzNamespace: [*:0]u16, pcchActualLength: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataQueryReader.VTable, self.vtable).GetLocation(@ptrCast(*const IWICMetadataQueryReader, self), cchMaxLength, wzNamespace, pcchActualLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataQueryReader_GetMetadataByName(self: *const T, wzName: [*:0]const u16, pvarValue: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataQueryReader.VTable, self.vtable).GetMetadataByName(@ptrCast(*const IWICMetadataQueryReader, self), wzName, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataQueryReader_GetEnumerator(self: *const T, ppIEnumString: **IEnumString) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataQueryReader.VTable, self.vtable).GetEnumerator(@ptrCast(*const IWICMetadataQueryReader, self), ppIEnumString);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICMetadataQueryWriter_Value = @import("../zig.zig").Guid.initString("a721791a-0def-4d06-bd91-2118bf1db10b");
pub const IID_IWICMetadataQueryWriter = &IID_IWICMetadataQueryWriter_Value;
pub const IWICMetadataQueryWriter = extern struct {
    pub const VTable = extern struct {
        base: IWICMetadataQueryReader.VTable,
        SetMetadataByName: fn(
            self: *const IWICMetadataQueryWriter,
            wzName: [*:0]const u16,
            pvarValue: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveMetadataByName: fn(
            self: *const IWICMetadataQueryWriter,
            wzName: [*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICMetadataQueryReader.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataQueryWriter_SetMetadataByName(self: *const T, wzName: [*:0]const u16, pvarValue: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataQueryWriter.VTable, self.vtable).SetMetadataByName(@ptrCast(*const IWICMetadataQueryWriter, self), wzName, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataQueryWriter_RemoveMetadataByName(self: *const T, wzName: [*:0]const u16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataQueryWriter.VTable, self.vtable).RemoveMetadataByName(@ptrCast(*const IWICMetadataQueryWriter, self), wzName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapEncoder_Value = @import("../zig.zig").Guid.initString("00000103-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICBitmapEncoder = &IID_IWICBitmapEncoder_Value;
pub const IWICBitmapEncoder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IWICBitmapEncoder,
            pIStream: *IStream,
            cacheOption: WICBitmapEncoderCacheOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContainerFormat: fn(
            self: *const IWICBitmapEncoder,
            pguidContainerFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEncoderInfo: fn(
            self: *const IWICBitmapEncoder,
            ppIEncoderInfo: **IWICBitmapEncoderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorContexts: fn(
            self: *const IWICBitmapEncoder,
            cCount: u32,
            ppIColorContext: [*]*IWICColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPalette: fn(
            self: *const IWICBitmapEncoder,
            pIPalette: *IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnail: fn(
            self: *const IWICBitmapEncoder,
            pIThumbnail: *IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPreview: fn(
            self: *const IWICBitmapEncoder,
            pIPreview: *IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNewFrame: fn(
            self: *const IWICBitmapEncoder,
            ppIFrameEncode: **IWICBitmapFrameEncode,
            ppIEncoderOptions: **IPropertyBag2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const IWICBitmapEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataQueryWriter: fn(
            self: *const IWICBitmapEncoder,
            ppIMetadataQueryWriter: **IWICMetadataQueryWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapEncoder_Initialize(self: *const T, pIStream: *IStream, cacheOption: WICBitmapEncoderCacheOption) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapEncoder.VTable, self.vtable).Initialize(@ptrCast(*const IWICBitmapEncoder, self), pIStream, cacheOption);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapEncoder_GetContainerFormat(self: *const T, pguidContainerFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapEncoder.VTable, self.vtable).GetContainerFormat(@ptrCast(*const IWICBitmapEncoder, self), pguidContainerFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapEncoder_GetEncoderInfo(self: *const T, ppIEncoderInfo: **IWICBitmapEncoderInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapEncoder.VTable, self.vtable).GetEncoderInfo(@ptrCast(*const IWICBitmapEncoder, self), ppIEncoderInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapEncoder_SetColorContexts(self: *const T, cCount: u32, ppIColorContext: [*]*IWICColorContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapEncoder.VTable, self.vtable).SetColorContexts(@ptrCast(*const IWICBitmapEncoder, self), cCount, ppIColorContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapEncoder_SetPalette(self: *const T, pIPalette: *IWICPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapEncoder.VTable, self.vtable).SetPalette(@ptrCast(*const IWICBitmapEncoder, self), pIPalette);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapEncoder_SetThumbnail(self: *const T, pIThumbnail: *IWICBitmapSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapEncoder.VTable, self.vtable).SetThumbnail(@ptrCast(*const IWICBitmapEncoder, self), pIThumbnail);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapEncoder_SetPreview(self: *const T, pIPreview: *IWICBitmapSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapEncoder.VTable, self.vtable).SetPreview(@ptrCast(*const IWICBitmapEncoder, self), pIPreview);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapEncoder_CreateNewFrame(self: *const T, ppIFrameEncode: **IWICBitmapFrameEncode, ppIEncoderOptions: **IPropertyBag2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapEncoder.VTable, self.vtable).CreateNewFrame(@ptrCast(*const IWICBitmapEncoder, self), ppIFrameEncode, ppIEncoderOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapEncoder_Commit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapEncoder.VTable, self.vtable).Commit(@ptrCast(*const IWICBitmapEncoder, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapEncoder_GetMetadataQueryWriter(self: *const T, ppIMetadataQueryWriter: **IWICMetadataQueryWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapEncoder.VTable, self.vtable).GetMetadataQueryWriter(@ptrCast(*const IWICBitmapEncoder, self), ppIMetadataQueryWriter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapFrameEncode_Value = @import("../zig.zig").Guid.initString("00000105-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICBitmapFrameEncode = &IID_IWICBitmapFrameEncode_Value;
pub const IWICBitmapFrameEncode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: fn(
            self: *const IWICBitmapFrameEncode,
            pIEncoderOptions: *IPropertyBag2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSize: fn(
            self: *const IWICBitmapFrameEncode,
            uiWidth: u32,
            uiHeight: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResolution: fn(
            self: *const IWICBitmapFrameEncode,
            dpiX: f64,
            dpiY: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPixelFormat: fn(
            self: *const IWICBitmapFrameEncode,
            pPixelFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorContexts: fn(
            self: *const IWICBitmapFrameEncode,
            cCount: u32,
            ppIColorContext: [*]*IWICColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPalette: fn(
            self: *const IWICBitmapFrameEncode,
            pIPalette: *IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnail: fn(
            self: *const IWICBitmapFrameEncode,
            pIThumbnail: *IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WritePixels: fn(
            self: *const IWICBitmapFrameEncode,
            lineCount: u32,
            cbStride: u32,
            cbBufferSize: u32,
            pbPixels: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteSource: fn(
            self: *const IWICBitmapFrameEncode,
            pIBitmapSource: *IWICBitmapSource,
            prc: *WICRect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: fn(
            self: *const IWICBitmapFrameEncode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataQueryWriter: fn(
            self: *const IWICBitmapFrameEncode,
            ppIMetadataQueryWriter: **IWICMetadataQueryWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameEncode_Initialize(self: *const T, pIEncoderOptions: *IPropertyBag2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameEncode.VTable, self.vtable).Initialize(@ptrCast(*const IWICBitmapFrameEncode, self), pIEncoderOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameEncode_SetSize(self: *const T, uiWidth: u32, uiHeight: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameEncode.VTable, self.vtable).SetSize(@ptrCast(*const IWICBitmapFrameEncode, self), uiWidth, uiHeight);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameEncode_SetResolution(self: *const T, dpiX: f64, dpiY: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameEncode.VTable, self.vtable).SetResolution(@ptrCast(*const IWICBitmapFrameEncode, self), dpiX, dpiY);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameEncode_SetPixelFormat(self: *const T, pPixelFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameEncode.VTable, self.vtable).SetPixelFormat(@ptrCast(*const IWICBitmapFrameEncode, self), pPixelFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameEncode_SetColorContexts(self: *const T, cCount: u32, ppIColorContext: [*]*IWICColorContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameEncode.VTable, self.vtable).SetColorContexts(@ptrCast(*const IWICBitmapFrameEncode, self), cCount, ppIColorContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameEncode_SetPalette(self: *const T, pIPalette: *IWICPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameEncode.VTable, self.vtable).SetPalette(@ptrCast(*const IWICBitmapFrameEncode, self), pIPalette);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameEncode_SetThumbnail(self: *const T, pIThumbnail: *IWICBitmapSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameEncode.VTable, self.vtable).SetThumbnail(@ptrCast(*const IWICBitmapFrameEncode, self), pIThumbnail);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameEncode_WritePixels(self: *const T, lineCount: u32, cbStride: u32, cbBufferSize: u32, pbPixels: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameEncode.VTable, self.vtable).WritePixels(@ptrCast(*const IWICBitmapFrameEncode, self), lineCount, cbStride, cbBufferSize, pbPixels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameEncode_WriteSource(self: *const T, pIBitmapSource: *IWICBitmapSource, prc: *WICRect) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameEncode.VTable, self.vtable).WriteSource(@ptrCast(*const IWICBitmapFrameEncode, self), pIBitmapSource, prc);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameEncode_Commit(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameEncode.VTable, self.vtable).Commit(@ptrCast(*const IWICBitmapFrameEncode, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameEncode_GetMetadataQueryWriter(self: *const T, ppIMetadataQueryWriter: **IWICMetadataQueryWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameEncode.VTable, self.vtable).GetMetadataQueryWriter(@ptrCast(*const IWICBitmapFrameEncode, self), ppIMetadataQueryWriter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICPlanarBitmapFrameEncode_Value = @import("../zig.zig").Guid.initString("f928b7b8-2221-40c1-b72e-7e82f1974d1a");
pub const IID_IWICPlanarBitmapFrameEncode = &IID_IWICPlanarBitmapFrameEncode_Value;
pub const IWICPlanarBitmapFrameEncode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        WritePixels: fn(
            self: *const IWICPlanarBitmapFrameEncode,
            lineCount: u32,
            pPlanes: [*]WICBitmapPlane,
            cPlanes: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteSource: fn(
            self: *const IWICPlanarBitmapFrameEncode,
            ppPlanes: [*]*IWICBitmapSource,
            cPlanes: u32,
            prcSource: *WICRect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPlanarBitmapFrameEncode_WritePixels(self: *const T, lineCount: u32, pPlanes: [*]WICBitmapPlane, cPlanes: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPlanarBitmapFrameEncode.VTable, self.vtable).WritePixels(@ptrCast(*const IWICPlanarBitmapFrameEncode, self), lineCount, pPlanes, cPlanes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPlanarBitmapFrameEncode_WriteSource(self: *const T, ppPlanes: [*]*IWICBitmapSource, cPlanes: u32, prcSource: *WICRect) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPlanarBitmapFrameEncode.VTable, self.vtable).WriteSource(@ptrCast(*const IWICPlanarBitmapFrameEncode, self), ppPlanes, cPlanes, prcSource);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICImageEncoder_Value = @import("../zig.zig").Guid.initString("04c75bf8-3ce1-473b-acc5-3cc4f5e94999");
pub const IID_IWICImageEncoder = &IID_IWICImageEncoder_Value;
pub const IWICImageEncoder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        WriteFrame: fn(
            self: *const IWICImageEncoder,
            pImage: *ID2D1Image,
            pFrameEncode: *IWICBitmapFrameEncode,
            pImageParameters: *const WICImageParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteFrameThumbnail: fn(
            self: *const IWICImageEncoder,
            pImage: *ID2D1Image,
            pFrameEncode: *IWICBitmapFrameEncode,
            pImageParameters: *const WICImageParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteThumbnail: fn(
            self: *const IWICImageEncoder,
            pImage: *ID2D1Image,
            pEncoder: *IWICBitmapEncoder,
            pImageParameters: *const WICImageParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImageEncoder_WriteFrame(self: *const T, pImage: *ID2D1Image, pFrameEncode: *IWICBitmapFrameEncode, pImageParameters: *const WICImageParameters) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImageEncoder.VTable, self.vtable).WriteFrame(@ptrCast(*const IWICImageEncoder, self), pImage, pFrameEncode, pImageParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImageEncoder_WriteFrameThumbnail(self: *const T, pImage: *ID2D1Image, pFrameEncode: *IWICBitmapFrameEncode, pImageParameters: *const WICImageParameters) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImageEncoder.VTable, self.vtable).WriteFrameThumbnail(@ptrCast(*const IWICImageEncoder, self), pImage, pFrameEncode, pImageParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImageEncoder_WriteThumbnail(self: *const T, pImage: *ID2D1Image, pEncoder: *IWICBitmapEncoder, pImageParameters: *const WICImageParameters) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImageEncoder.VTable, self.vtable).WriteThumbnail(@ptrCast(*const IWICImageEncoder, self), pImage, pEncoder, pImageParameters);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapDecoder_Value = @import("../zig.zig").Guid.initString("9edde9e7-8dee-47ea-99df-e6faf2ed44bf");
pub const IID_IWICBitmapDecoder = &IID_IWICBitmapDecoder_Value;
pub const IWICBitmapDecoder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryCapability: fn(
            self: *const IWICBitmapDecoder,
            pIStream: *IStream,
            pdwCapability: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IWICBitmapDecoder,
            pIStream: *IStream,
            cacheOptions: WICDecodeOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContainerFormat: fn(
            self: *const IWICBitmapDecoder,
            pguidContainerFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDecoderInfo: fn(
            self: *const IWICBitmapDecoder,
            ppIDecoderInfo: **IWICBitmapDecoderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyPalette: fn(
            self: *const IWICBitmapDecoder,
            pIPalette: *IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataQueryReader: fn(
            self: *const IWICBitmapDecoder,
            ppIMetadataQueryReader: **IWICMetadataQueryReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreview: fn(
            self: *const IWICBitmapDecoder,
            ppIBitmapSource: **IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorContexts: fn(
            self: *const IWICBitmapDecoder,
            cCount: u32,
            ppIColorContexts: [*]*IWICColorContext,
            pcActualCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnail: fn(
            self: *const IWICBitmapDecoder,
            ppIThumbnail: **IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrameCount: fn(
            self: *const IWICBitmapDecoder,
            pCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrame: fn(
            self: *const IWICBitmapDecoder,
            index: u32,
            ppIBitmapFrame: **IWICBitmapFrameDecode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoder_QueryCapability(self: *const T, pIStream: *IStream, pdwCapability: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoder.VTable, self.vtable).QueryCapability(@ptrCast(*const IWICBitmapDecoder, self), pIStream, pdwCapability);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoder_Initialize(self: *const T, pIStream: *IStream, cacheOptions: WICDecodeOptions) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoder.VTable, self.vtable).Initialize(@ptrCast(*const IWICBitmapDecoder, self), pIStream, cacheOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoder_GetContainerFormat(self: *const T, pguidContainerFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoder.VTable, self.vtable).GetContainerFormat(@ptrCast(*const IWICBitmapDecoder, self), pguidContainerFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoder_GetDecoderInfo(self: *const T, ppIDecoderInfo: **IWICBitmapDecoderInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoder.VTable, self.vtable).GetDecoderInfo(@ptrCast(*const IWICBitmapDecoder, self), ppIDecoderInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoder_CopyPalette(self: *const T, pIPalette: *IWICPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoder.VTable, self.vtable).CopyPalette(@ptrCast(*const IWICBitmapDecoder, self), pIPalette);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoder_GetMetadataQueryReader(self: *const T, ppIMetadataQueryReader: **IWICMetadataQueryReader) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoder.VTable, self.vtable).GetMetadataQueryReader(@ptrCast(*const IWICBitmapDecoder, self), ppIMetadataQueryReader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoder_GetPreview(self: *const T, ppIBitmapSource: **IWICBitmapSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoder.VTable, self.vtable).GetPreview(@ptrCast(*const IWICBitmapDecoder, self), ppIBitmapSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoder_GetColorContexts(self: *const T, cCount: u32, ppIColorContexts: [*]*IWICColorContext, pcActualCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoder.VTable, self.vtable).GetColorContexts(@ptrCast(*const IWICBitmapDecoder, self), cCount, ppIColorContexts, pcActualCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoder_GetThumbnail(self: *const T, ppIThumbnail: **IWICBitmapSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoder.VTable, self.vtable).GetThumbnail(@ptrCast(*const IWICBitmapDecoder, self), ppIThumbnail);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoder_GetFrameCount(self: *const T, pCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoder.VTable, self.vtable).GetFrameCount(@ptrCast(*const IWICBitmapDecoder, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoder_GetFrame(self: *const T, index: u32, ppIBitmapFrame: **IWICBitmapFrameDecode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoder.VTable, self.vtable).GetFrame(@ptrCast(*const IWICBitmapDecoder, self), index, ppIBitmapFrame);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapSourceTransform_Value = @import("../zig.zig").Guid.initString("3b16811b-6a43-4ec9-b713-3d5a0c13b940");
pub const IID_IWICBitmapSourceTransform = &IID_IWICBitmapSourceTransform_Value;
pub const IWICBitmapSourceTransform = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CopyPixels: fn(
            self: *const IWICBitmapSourceTransform,
            prc: *const WICRect,
            uiWidth: u32,
            uiHeight: u32,
            pguidDstFormat: *Guid,
            dstTransform: WICBitmapTransformOptions,
            nStride: u32,
            cbBufferSize: u32,
            pbBuffer: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClosestSize: fn(
            self: *const IWICBitmapSourceTransform,
            puiWidth: *u32,
            puiHeight: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClosestPixelFormat: fn(
            self: *const IWICBitmapSourceTransform,
            pguidDstFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesSupportTransform: fn(
            self: *const IWICBitmapSourceTransform,
            dstTransform: WICBitmapTransformOptions,
            pfIsSupported: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapSourceTransform_CopyPixels(self: *const T, prc: *const WICRect, uiWidth: u32, uiHeight: u32, pguidDstFormat: *Guid, dstTransform: WICBitmapTransformOptions, nStride: u32, cbBufferSize: u32, pbBuffer: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapSourceTransform.VTable, self.vtable).CopyPixels(@ptrCast(*const IWICBitmapSourceTransform, self), prc, uiWidth, uiHeight, pguidDstFormat, dstTransform, nStride, cbBufferSize, pbBuffer);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapSourceTransform_GetClosestSize(self: *const T, puiWidth: *u32, puiHeight: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapSourceTransform.VTable, self.vtable).GetClosestSize(@ptrCast(*const IWICBitmapSourceTransform, self), puiWidth, puiHeight);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapSourceTransform_GetClosestPixelFormat(self: *const T, pguidDstFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapSourceTransform.VTable, self.vtable).GetClosestPixelFormat(@ptrCast(*const IWICBitmapSourceTransform, self), pguidDstFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapSourceTransform_DoesSupportTransform(self: *const T, dstTransform: WICBitmapTransformOptions, pfIsSupported: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapSourceTransform.VTable, self.vtable).DoesSupportTransform(@ptrCast(*const IWICBitmapSourceTransform, self), dstTransform, pfIsSupported);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICPlanarBitmapSourceTransform_Value = @import("../zig.zig").Guid.initString("3aff9cce-be95-4303-b927-e7d16ff4a613");
pub const IID_IWICPlanarBitmapSourceTransform = &IID_IWICPlanarBitmapSourceTransform_Value;
pub const IWICPlanarBitmapSourceTransform = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DoesSupportTransform: fn(
            self: *const IWICPlanarBitmapSourceTransform,
            puiWidth: *u32,
            puiHeight: *u32,
            dstTransform: WICBitmapTransformOptions,
            dstPlanarOptions: WICPlanarOptions,
            pguidDstFormats: [*]const Guid,
            pPlaneDescriptions: [*]WICBitmapPlaneDescription,
            cPlanes: u32,
            pfIsSupported: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyPixels: fn(
            self: *const IWICPlanarBitmapSourceTransform,
            prcSource: *const WICRect,
            uiWidth: u32,
            uiHeight: u32,
            dstTransform: WICBitmapTransformOptions,
            dstPlanarOptions: WICPlanarOptions,
            pDstPlanes: [*]const WICBitmapPlane,
            cPlanes: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPlanarBitmapSourceTransform_DoesSupportTransform(self: *const T, puiWidth: *u32, puiHeight: *u32, dstTransform: WICBitmapTransformOptions, dstPlanarOptions: WICPlanarOptions, pguidDstFormats: [*]const Guid, pPlaneDescriptions: [*]WICBitmapPlaneDescription, cPlanes: u32, pfIsSupported: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPlanarBitmapSourceTransform.VTable, self.vtable).DoesSupportTransform(@ptrCast(*const IWICPlanarBitmapSourceTransform, self), puiWidth, puiHeight, dstTransform, dstPlanarOptions, pguidDstFormats, pPlaneDescriptions, cPlanes, pfIsSupported);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPlanarBitmapSourceTransform_CopyPixels(self: *const T, prcSource: *const WICRect, uiWidth: u32, uiHeight: u32, dstTransform: WICBitmapTransformOptions, dstPlanarOptions: WICPlanarOptions, pDstPlanes: [*]const WICBitmapPlane, cPlanes: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPlanarBitmapSourceTransform.VTable, self.vtable).CopyPixels(@ptrCast(*const IWICPlanarBitmapSourceTransform, self), prcSource, uiWidth, uiHeight, dstTransform, dstPlanarOptions, pDstPlanes, cPlanes);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapFrameDecode_Value = @import("../zig.zig").Guid.initString("3b16811b-6a43-4ec9-a813-3d930c13b940");
pub const IID_IWICBitmapFrameDecode = &IID_IWICBitmapFrameDecode_Value;
pub const IWICBitmapFrameDecode = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        GetMetadataQueryReader: fn(
            self: *const IWICBitmapFrameDecode,
            ppIMetadataQueryReader: **IWICMetadataQueryReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorContexts: fn(
            self: *const IWICBitmapFrameDecode,
            cCount: u32,
            ppIColorContexts: [*]*IWICColorContext,
            pcActualCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnail: fn(
            self: *const IWICBitmapFrameDecode,
            ppIThumbnail: **IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICBitmapSource.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameDecode_GetMetadataQueryReader(self: *const T, ppIMetadataQueryReader: **IWICMetadataQueryReader) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameDecode.VTable, self.vtable).GetMetadataQueryReader(@ptrCast(*const IWICBitmapFrameDecode, self), ppIMetadataQueryReader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameDecode_GetColorContexts(self: *const T, cCount: u32, ppIColorContexts: [*]*IWICColorContext, pcActualCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameDecode.VTable, self.vtable).GetColorContexts(@ptrCast(*const IWICBitmapFrameDecode, self), cCount, ppIColorContexts, pcActualCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapFrameDecode_GetThumbnail(self: *const T, ppIThumbnail: **IWICBitmapSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapFrameDecode.VTable, self.vtable).GetThumbnail(@ptrCast(*const IWICBitmapFrameDecode, self), ppIThumbnail);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICProgressiveLevelControl_Value = @import("../zig.zig").Guid.initString("daac296f-7aa5-4dbf-8d15-225c5976f891");
pub const IID_IWICProgressiveLevelControl = &IID_IWICProgressiveLevelControl_Value;
pub const IWICProgressiveLevelControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLevelCount: fn(
            self: *const IWICProgressiveLevelControl,
            pcLevels: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentLevel: fn(
            self: *const IWICProgressiveLevelControl,
            pnLevel: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentLevel: fn(
            self: *const IWICProgressiveLevelControl,
            nLevel: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICProgressiveLevelControl_GetLevelCount(self: *const T, pcLevels: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICProgressiveLevelControl.VTable, self.vtable).GetLevelCount(@ptrCast(*const IWICProgressiveLevelControl, self), pcLevels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICProgressiveLevelControl_GetCurrentLevel(self: *const T, pnLevel: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICProgressiveLevelControl.VTable, self.vtable).GetCurrentLevel(@ptrCast(*const IWICProgressiveLevelControl, self), pnLevel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICProgressiveLevelControl_SetCurrentLevel(self: *const T, nLevel: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICProgressiveLevelControl.VTable, self.vtable).SetCurrentLevel(@ptrCast(*const IWICProgressiveLevelControl, self), nLevel);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICProgressCallback_Value = @import("../zig.zig").Guid.initString("4776f9cd-9517-45fa-bf24-e89c5ec5c60c");
pub const IID_IWICProgressCallback = &IID_IWICProgressCallback_Value;
pub const IWICProgressCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Notify: fn(
            self: *const IWICProgressCallback,
            uFrameNum: u32,
            operation: WICProgressOperation,
            dblProgress: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICProgressCallback_Notify(self: *const T, uFrameNum: u32, operation: WICProgressOperation, dblProgress: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICProgressCallback.VTable, self.vtable).Notify(@ptrCast(*const IWICProgressCallback, self), uFrameNum, operation, dblProgress);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const PFNProgressNotification = fn(
    pvData: *c_void,
    uFrameNum: u32,
    operation: WICProgressOperation,
    dblProgress: f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

const IID_IWICBitmapCodecProgressNotification_Value = @import("../zig.zig").Guid.initString("64c1024e-c3cf-4462-8078-88c2b11c46d9");
pub const IID_IWICBitmapCodecProgressNotification = &IID_IWICBitmapCodecProgressNotification_Value;
pub const IWICBitmapCodecProgressNotification = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterProgressNotification: fn(
            self: *const IWICBitmapCodecProgressNotification,
            pfnProgressNotification: ?PFNProgressNotification,
            pvData: ?*c_void,
            dwProgressFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecProgressNotification_RegisterProgressNotification(self: *const T, pfnProgressNotification: ?PFNProgressNotification, pvData: ?*c_void, dwProgressFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecProgressNotification.VTable, self.vtable).RegisterProgressNotification(@ptrCast(*const IWICBitmapCodecProgressNotification, self), pfnProgressNotification, pvData, dwProgressFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICComponentInfo_Value = @import("../zig.zig").Guid.initString("23bc3f0a-698b-4357-886b-f24d50671334");
pub const IID_IWICComponentInfo = &IID_IWICComponentInfo_Value;
pub const IWICComponentInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetComponentType: fn(
            self: *const IWICComponentInfo,
            pType: *WICComponentType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCLSID: fn(
            self: *const IWICComponentInfo,
            pclsid: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningStatus: fn(
            self: *const IWICComponentInfo,
            pStatus: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthor: fn(
            self: *const IWICComponentInfo,
            cchAuthor: u32,
            wzAuthor: [*:0]u16,
            pcchActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVendorGUID: fn(
            self: *const IWICComponentInfo,
            pguidVendor: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVersion: fn(
            self: *const IWICComponentInfo,
            cchVersion: u32,
            wzVersion: [*:0]u16,
            pcchActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpecVersion: fn(
            self: *const IWICComponentInfo,
            cchSpecVersion: u32,
            wzSpecVersion: [*:0]u16,
            pcchActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: fn(
            self: *const IWICComponentInfo,
            cchFriendlyName: u32,
            wzFriendlyName: [*:0]u16,
            pcchActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentInfo_GetComponentType(self: *const T, pType: *WICComponentType) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentInfo.VTable, self.vtable).GetComponentType(@ptrCast(*const IWICComponentInfo, self), pType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentInfo_GetCLSID(self: *const T, pclsid: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentInfo.VTable, self.vtable).GetCLSID(@ptrCast(*const IWICComponentInfo, self), pclsid);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentInfo_GetSigningStatus(self: *const T, pStatus: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentInfo.VTable, self.vtable).GetSigningStatus(@ptrCast(*const IWICComponentInfo, self), pStatus);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentInfo_GetAuthor(self: *const T, cchAuthor: u32, wzAuthor: [*:0]u16, pcchActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentInfo.VTable, self.vtable).GetAuthor(@ptrCast(*const IWICComponentInfo, self), cchAuthor, wzAuthor, pcchActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentInfo_GetVendorGUID(self: *const T, pguidVendor: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentInfo.VTable, self.vtable).GetVendorGUID(@ptrCast(*const IWICComponentInfo, self), pguidVendor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentInfo_GetVersion(self: *const T, cchVersion: u32, wzVersion: [*:0]u16, pcchActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentInfo.VTable, self.vtable).GetVersion(@ptrCast(*const IWICComponentInfo, self), cchVersion, wzVersion, pcchActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentInfo_GetSpecVersion(self: *const T, cchSpecVersion: u32, wzSpecVersion: [*:0]u16, pcchActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentInfo.VTable, self.vtable).GetSpecVersion(@ptrCast(*const IWICComponentInfo, self), cchSpecVersion, wzSpecVersion, pcchActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentInfo_GetFriendlyName(self: *const T, cchFriendlyName: u32, wzFriendlyName: [*:0]u16, pcchActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentInfo.VTable, self.vtable).GetFriendlyName(@ptrCast(*const IWICComponentInfo, self), cchFriendlyName, wzFriendlyName, pcchActual);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICFormatConverterInfo_Value = @import("../zig.zig").Guid.initString("9f34fb65-13f4-4f15-bc57-3726b5e53d9f");
pub const IID_IWICFormatConverterInfo = &IID_IWICFormatConverterInfo_Value;
pub const IWICFormatConverterInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICComponentInfo.VTable,
        GetPixelFormats: fn(
            self: *const IWICFormatConverterInfo,
            cFormats: u32,
            pPixelFormatGUIDs: [*]Guid,
            pcActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstance: fn(
            self: *const IWICFormatConverterInfo,
            ppIConverter: **IWICFormatConverter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICComponentInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICFormatConverterInfo_GetPixelFormats(self: *const T, cFormats: u32, pPixelFormatGUIDs: [*]Guid, pcActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICFormatConverterInfo.VTable, self.vtable).GetPixelFormats(@ptrCast(*const IWICFormatConverterInfo, self), cFormats, pPixelFormatGUIDs, pcActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICFormatConverterInfo_CreateInstance(self: *const T, ppIConverter: **IWICFormatConverter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICFormatConverterInfo.VTable, self.vtable).CreateInstance(@ptrCast(*const IWICFormatConverterInfo, self), ppIConverter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapCodecInfo_Value = @import("../zig.zig").Guid.initString("e87a44c4-b76e-4c47-8b09-298eb12a2714");
pub const IID_IWICBitmapCodecInfo = &IID_IWICBitmapCodecInfo_Value;
pub const IWICBitmapCodecInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICComponentInfo.VTable,
        GetContainerFormat: fn(
            self: *const IWICBitmapCodecInfo,
            pguidContainerFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormats: fn(
            self: *const IWICBitmapCodecInfo,
            cFormats: u32,
            pguidPixelFormats: [*]Guid,
            pcActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorManagementVersion: fn(
            self: *const IWICBitmapCodecInfo,
            cchColorManagementVersion: u32,
            wzColorManagementVersion: [*:0]u16,
            pcchActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceManufacturer: fn(
            self: *const IWICBitmapCodecInfo,
            cchDeviceManufacturer: u32,
            wzDeviceManufacturer: [*:0]u16,
            pcchActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceModels: fn(
            self: *const IWICBitmapCodecInfo,
            cchDeviceModels: u32,
            wzDeviceModels: [*:0]u16,
            pcchActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMimeTypes: fn(
            self: *const IWICBitmapCodecInfo,
            cchMimeTypes: u32,
            wzMimeTypes: [*:0]u16,
            pcchActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileExtensions: fn(
            self: *const IWICBitmapCodecInfo,
            cchFileExtensions: u32,
            wzFileExtensions: [*:0]u16,
            pcchActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesSupportAnimation: fn(
            self: *const IWICBitmapCodecInfo,
            pfSupportAnimation: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesSupportChromakey: fn(
            self: *const IWICBitmapCodecInfo,
            pfSupportChromakey: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesSupportLossless: fn(
            self: *const IWICBitmapCodecInfo,
            pfSupportLossless: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesSupportMultiframe: fn(
            self: *const IWICBitmapCodecInfo,
            pfSupportMultiframe: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MatchesMimeType: fn(
            self: *const IWICBitmapCodecInfo,
            wzMimeType: [*:0]const u16,
            pfMatches: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICComponentInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecInfo_GetContainerFormat(self: *const T, pguidContainerFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecInfo.VTable, self.vtable).GetContainerFormat(@ptrCast(*const IWICBitmapCodecInfo, self), pguidContainerFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecInfo_GetPixelFormats(self: *const T, cFormats: u32, pguidPixelFormats: [*]Guid, pcActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecInfo.VTable, self.vtable).GetPixelFormats(@ptrCast(*const IWICBitmapCodecInfo, self), cFormats, pguidPixelFormats, pcActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecInfo_GetColorManagementVersion(self: *const T, cchColorManagementVersion: u32, wzColorManagementVersion: [*:0]u16, pcchActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecInfo.VTable, self.vtable).GetColorManagementVersion(@ptrCast(*const IWICBitmapCodecInfo, self), cchColorManagementVersion, wzColorManagementVersion, pcchActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecInfo_GetDeviceManufacturer(self: *const T, cchDeviceManufacturer: u32, wzDeviceManufacturer: [*:0]u16, pcchActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecInfo.VTable, self.vtable).GetDeviceManufacturer(@ptrCast(*const IWICBitmapCodecInfo, self), cchDeviceManufacturer, wzDeviceManufacturer, pcchActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecInfo_GetDeviceModels(self: *const T, cchDeviceModels: u32, wzDeviceModels: [*:0]u16, pcchActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecInfo.VTable, self.vtable).GetDeviceModels(@ptrCast(*const IWICBitmapCodecInfo, self), cchDeviceModels, wzDeviceModels, pcchActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecInfo_GetMimeTypes(self: *const T, cchMimeTypes: u32, wzMimeTypes: [*:0]u16, pcchActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecInfo.VTable, self.vtable).GetMimeTypes(@ptrCast(*const IWICBitmapCodecInfo, self), cchMimeTypes, wzMimeTypes, pcchActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecInfo_GetFileExtensions(self: *const T, cchFileExtensions: u32, wzFileExtensions: [*:0]u16, pcchActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecInfo.VTable, self.vtable).GetFileExtensions(@ptrCast(*const IWICBitmapCodecInfo, self), cchFileExtensions, wzFileExtensions, pcchActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecInfo_DoesSupportAnimation(self: *const T, pfSupportAnimation: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecInfo.VTable, self.vtable).DoesSupportAnimation(@ptrCast(*const IWICBitmapCodecInfo, self), pfSupportAnimation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecInfo_DoesSupportChromakey(self: *const T, pfSupportChromakey: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecInfo.VTable, self.vtable).DoesSupportChromakey(@ptrCast(*const IWICBitmapCodecInfo, self), pfSupportChromakey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecInfo_DoesSupportLossless(self: *const T, pfSupportLossless: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecInfo.VTable, self.vtable).DoesSupportLossless(@ptrCast(*const IWICBitmapCodecInfo, self), pfSupportLossless);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecInfo_DoesSupportMultiframe(self: *const T, pfSupportMultiframe: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecInfo.VTable, self.vtable).DoesSupportMultiframe(@ptrCast(*const IWICBitmapCodecInfo, self), pfSupportMultiframe);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapCodecInfo_MatchesMimeType(self: *const T, wzMimeType: [*:0]const u16, pfMatches: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapCodecInfo.VTable, self.vtable).MatchesMimeType(@ptrCast(*const IWICBitmapCodecInfo, self), wzMimeType, pfMatches);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapEncoderInfo_Value = @import("../zig.zig").Guid.initString("94c9b4ee-a09f-4f92-8a1e-4a9bce7e76fb");
pub const IID_IWICBitmapEncoderInfo = &IID_IWICBitmapEncoderInfo_Value;
pub const IWICBitmapEncoderInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapCodecInfo.VTable,
        CreateInstance: fn(
            self: *const IWICBitmapEncoderInfo,
            ppIBitmapEncoder: **IWICBitmapEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICBitmapCodecInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapEncoderInfo_CreateInstance(self: *const T, ppIBitmapEncoder: **IWICBitmapEncoder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapEncoderInfo.VTable, self.vtable).CreateInstance(@ptrCast(*const IWICBitmapEncoderInfo, self), ppIBitmapEncoder);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapDecoderInfo_Value = @import("../zig.zig").Guid.initString("d8cd007f-d08f-4191-9bfc-236ea7f0e4b5");
pub const IID_IWICBitmapDecoderInfo = &IID_IWICBitmapDecoderInfo_Value;
pub const IWICBitmapDecoderInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapCodecInfo.VTable,
        GetPatterns: fn(
            self: *const IWICBitmapDecoderInfo,
            cbSizePatterns: u32,
            pPatterns: ?[*]WICBitmapPattern,
            pcPatterns: ?*u32,
            pcbPatternsActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MatchesPattern: fn(
            self: *const IWICBitmapDecoderInfo,
            pIStream: *IStream,
            pfMatches: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstance: fn(
            self: *const IWICBitmapDecoderInfo,
            ppIBitmapDecoder: **IWICBitmapDecoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICBitmapCodecInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoderInfo_GetPatterns(self: *const T, cbSizePatterns: u32, pPatterns: ?[*]WICBitmapPattern, pcPatterns: ?*u32, pcbPatternsActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoderInfo.VTable, self.vtable).GetPatterns(@ptrCast(*const IWICBitmapDecoderInfo, self), cbSizePatterns, pPatterns, pcPatterns, pcbPatternsActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoderInfo_MatchesPattern(self: *const T, pIStream: *IStream, pfMatches: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoderInfo.VTable, self.vtable).MatchesPattern(@ptrCast(*const IWICBitmapDecoderInfo, self), pIStream, pfMatches);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICBitmapDecoderInfo_CreateInstance(self: *const T, ppIBitmapDecoder: **IWICBitmapDecoder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICBitmapDecoderInfo.VTable, self.vtable).CreateInstance(@ptrCast(*const IWICBitmapDecoderInfo, self), ppIBitmapDecoder);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICPixelFormatInfo_Value = @import("../zig.zig").Guid.initString("e8eda601-3d48-431a-ab44-69059be88bbe");
pub const IID_IWICPixelFormatInfo = &IID_IWICPixelFormatInfo_Value;
pub const IWICPixelFormatInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICComponentInfo.VTable,
        GetFormatGUID: fn(
            self: *const IWICPixelFormatInfo,
            pFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorContext: fn(
            self: *const IWICPixelFormatInfo,
            ppIColorContext: **IWICColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitsPerPixel: fn(
            self: *const IWICPixelFormatInfo,
            puiBitsPerPixel: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChannelCount: fn(
            self: *const IWICPixelFormatInfo,
            puiChannelCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChannelMask: fn(
            self: *const IWICPixelFormatInfo,
            uiChannelIndex: u32,
            cbMaskBuffer: u32,
            pbMaskBuffer: [*:0]u8,
            pcbActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICComponentInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPixelFormatInfo_GetFormatGUID(self: *const T, pFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPixelFormatInfo.VTable, self.vtable).GetFormatGUID(@ptrCast(*const IWICPixelFormatInfo, self), pFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPixelFormatInfo_GetColorContext(self: *const T, ppIColorContext: **IWICColorContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPixelFormatInfo.VTable, self.vtable).GetColorContext(@ptrCast(*const IWICPixelFormatInfo, self), ppIColorContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPixelFormatInfo_GetBitsPerPixel(self: *const T, puiBitsPerPixel: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPixelFormatInfo.VTable, self.vtable).GetBitsPerPixel(@ptrCast(*const IWICPixelFormatInfo, self), puiBitsPerPixel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPixelFormatInfo_GetChannelCount(self: *const T, puiChannelCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPixelFormatInfo.VTable, self.vtable).GetChannelCount(@ptrCast(*const IWICPixelFormatInfo, self), puiChannelCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPixelFormatInfo_GetChannelMask(self: *const T, uiChannelIndex: u32, cbMaskBuffer: u32, pbMaskBuffer: [*:0]u8, pcbActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPixelFormatInfo.VTable, self.vtable).GetChannelMask(@ptrCast(*const IWICPixelFormatInfo, self), uiChannelIndex, cbMaskBuffer, pbMaskBuffer, pcbActual);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICPixelFormatInfo2_Value = @import("../zig.zig").Guid.initString("a9db33a2-af5f-43c7-b679-74f5984b5aa4");
pub const IID_IWICPixelFormatInfo2 = &IID_IWICPixelFormatInfo2_Value;
pub const IWICPixelFormatInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IWICPixelFormatInfo.VTable,
        SupportsTransparency: fn(
            self: *const IWICPixelFormatInfo2,
            pfSupportsTransparency: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumericRepresentation: fn(
            self: *const IWICPixelFormatInfo2,
            pNumericRepresentation: *WICPixelFormatNumericRepresentation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICPixelFormatInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPixelFormatInfo2_SupportsTransparency(self: *const T, pfSupportsTransparency: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPixelFormatInfo2.VTable, self.vtable).SupportsTransparency(@ptrCast(*const IWICPixelFormatInfo2, self), pfSupportsTransparency);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPixelFormatInfo2_GetNumericRepresentation(self: *const T, pNumericRepresentation: *WICPixelFormatNumericRepresentation) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPixelFormatInfo2.VTable, self.vtable).GetNumericRepresentation(@ptrCast(*const IWICPixelFormatInfo2, self), pNumericRepresentation);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICImagingFactory_Value = @import("../zig.zig").Guid.initString("ec5ec8a9-c395-4314-9c77-54d7a935ff70");
pub const IID_IWICImagingFactory = &IID_IWICImagingFactory_Value;
pub const IWICImagingFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDecoderFromFilename: fn(
            self: *const IWICImagingFactory,
            wzFilename: [*:0]const u16,
            pguidVendor: *const Guid,
            dwDesiredAccess: u32,
            metadataOptions: WICDecodeOptions,
            ppIDecoder: **IWICBitmapDecoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDecoderFromStream: fn(
            self: *const IWICImagingFactory,
            pIStream: *IStream,
            pguidVendor: *const Guid,
            metadataOptions: WICDecodeOptions,
            ppIDecoder: **IWICBitmapDecoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDecoderFromFileHandle: fn(
            self: *const IWICImagingFactory,
            hFile: ?*c_void,
            pguidVendor: *const Guid,
            metadataOptions: WICDecodeOptions,
            ppIDecoder: **IWICBitmapDecoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateComponentInfo: fn(
            self: *const IWICImagingFactory,
            clsidComponent: *const Guid,
            ppIInfo: **IWICComponentInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDecoder: fn(
            self: *const IWICImagingFactory,
            guidContainerFormat: *const Guid,
            pguidVendor: *const Guid,
            ppIDecoder: **IWICBitmapDecoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEncoder: fn(
            self: *const IWICImagingFactory,
            guidContainerFormat: *const Guid,
            pguidVendor: *const Guid,
            ppIEncoder: **IWICBitmapEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePalette: fn(
            self: *const IWICImagingFactory,
            ppIPalette: **IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFormatConverter: fn(
            self: *const IWICImagingFactory,
            ppIFormatConverter: **IWICFormatConverter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapScaler: fn(
            self: *const IWICImagingFactory,
            ppIBitmapScaler: **IWICBitmapScaler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapClipper: fn(
            self: *const IWICImagingFactory,
            ppIBitmapClipper: **IWICBitmapClipper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFlipRotator: fn(
            self: *const IWICImagingFactory,
            ppIBitmapFlipRotator: **IWICBitmapFlipRotator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStream: fn(
            self: *const IWICImagingFactory,
            ppIWICStream: **IWICStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorContext: fn(
            self: *const IWICImagingFactory,
            ppIWICColorContext: **IWICColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorTransformer: fn(
            self: *const IWICImagingFactory,
            ppIWICColorTransform: **IWICColorTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmap: fn(
            self: *const IWICImagingFactory,
            uiWidth: u32,
            uiHeight: u32,
            pixelFormat: *Guid,
            option: WICBitmapCreateCacheOption,
            ppIBitmap: **IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromSource: fn(
            self: *const IWICImagingFactory,
            pIBitmapSource: *IWICBitmapSource,
            option: WICBitmapCreateCacheOption,
            ppIBitmap: **IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromSourceRect: fn(
            self: *const IWICImagingFactory,
            pIBitmapSource: *IWICBitmapSource,
            x: u32,
            y: u32,
            width: u32,
            height: u32,
            ppIBitmap: **IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromMemory: fn(
            self: *const IWICImagingFactory,
            uiWidth: u32,
            uiHeight: u32,
            pixelFormat: *Guid,
            cbStride: u32,
            cbBufferSize: u32,
            pbBuffer: [*:0]u8,
            ppIBitmap: **IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromHBITMAP: fn(
            self: *const IWICImagingFactory,
            hBitmap: HBITMAP,
            hPalette: HPALETTE,
            options: WICBitmapAlphaChannelOption,
            ppIBitmap: **IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromHICON: fn(
            self: *const IWICImagingFactory,
            hIcon: HICON,
            ppIBitmap: **IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateComponentEnumerator: fn(
            self: *const IWICImagingFactory,
            componentTypes: u32,
            options: u32,
            ppIEnumUnknown: **IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFastMetadataEncoderFromDecoder: fn(
            self: *const IWICImagingFactory,
            pIDecoder: *IWICBitmapDecoder,
            ppIFastEncoder: **IWICFastMetadataEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFastMetadataEncoderFromFrameDecode: fn(
            self: *const IWICImagingFactory,
            pIFrameDecoder: *IWICBitmapFrameDecode,
            ppIFastEncoder: **IWICFastMetadataEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQueryWriter: fn(
            self: *const IWICImagingFactory,
            guidMetadataFormat: *const Guid,
            pguidVendor: *const Guid,
            ppIQueryWriter: **IWICMetadataQueryWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQueryWriterFromReader: fn(
            self: *const IWICImagingFactory,
            pIQueryReader: *IWICMetadataQueryReader,
            pguidVendor: *const Guid,
            ppIQueryWriter: **IWICMetadataQueryWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateDecoderFromFilename(self: *const T, wzFilename: [*:0]const u16, pguidVendor: *const Guid, dwDesiredAccess: u32, metadataOptions: WICDecodeOptions, ppIDecoder: **IWICBitmapDecoder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateDecoderFromFilename(@ptrCast(*const IWICImagingFactory, self), wzFilename, pguidVendor, dwDesiredAccess, metadataOptions, ppIDecoder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateDecoderFromStream(self: *const T, pIStream: *IStream, pguidVendor: *const Guid, metadataOptions: WICDecodeOptions, ppIDecoder: **IWICBitmapDecoder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateDecoderFromStream(@ptrCast(*const IWICImagingFactory, self), pIStream, pguidVendor, metadataOptions, ppIDecoder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateDecoderFromFileHandle(self: *const T, hFile: ?*c_void, pguidVendor: *const Guid, metadataOptions: WICDecodeOptions, ppIDecoder: **IWICBitmapDecoder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateDecoderFromFileHandle(@ptrCast(*const IWICImagingFactory, self), hFile, pguidVendor, metadataOptions, ppIDecoder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateComponentInfo(self: *const T, clsidComponent: *const Guid, ppIInfo: **IWICComponentInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateComponentInfo(@ptrCast(*const IWICImagingFactory, self), clsidComponent, ppIInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateDecoder(self: *const T, guidContainerFormat: *const Guid, pguidVendor: *const Guid, ppIDecoder: **IWICBitmapDecoder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateDecoder(@ptrCast(*const IWICImagingFactory, self), guidContainerFormat, pguidVendor, ppIDecoder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateEncoder(self: *const T, guidContainerFormat: *const Guid, pguidVendor: *const Guid, ppIEncoder: **IWICBitmapEncoder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateEncoder(@ptrCast(*const IWICImagingFactory, self), guidContainerFormat, pguidVendor, ppIEncoder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreatePalette(self: *const T, ppIPalette: **IWICPalette) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreatePalette(@ptrCast(*const IWICImagingFactory, self), ppIPalette);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateFormatConverter(self: *const T, ppIFormatConverter: **IWICFormatConverter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateFormatConverter(@ptrCast(*const IWICImagingFactory, self), ppIFormatConverter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateBitmapScaler(self: *const T, ppIBitmapScaler: **IWICBitmapScaler) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateBitmapScaler(@ptrCast(*const IWICImagingFactory, self), ppIBitmapScaler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateBitmapClipper(self: *const T, ppIBitmapClipper: **IWICBitmapClipper) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateBitmapClipper(@ptrCast(*const IWICImagingFactory, self), ppIBitmapClipper);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateBitmapFlipRotator(self: *const T, ppIBitmapFlipRotator: **IWICBitmapFlipRotator) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateBitmapFlipRotator(@ptrCast(*const IWICImagingFactory, self), ppIBitmapFlipRotator);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateStream(self: *const T, ppIWICStream: **IWICStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateStream(@ptrCast(*const IWICImagingFactory, self), ppIWICStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateColorContext(self: *const T, ppIWICColorContext: **IWICColorContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateColorContext(@ptrCast(*const IWICImagingFactory, self), ppIWICColorContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateColorTransformer(self: *const T, ppIWICColorTransform: **IWICColorTransform) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateColorTransformer(@ptrCast(*const IWICImagingFactory, self), ppIWICColorTransform);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateBitmap(self: *const T, uiWidth: u32, uiHeight: u32, pixelFormat: *Guid, option: WICBitmapCreateCacheOption, ppIBitmap: **IWICBitmap) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateBitmap(@ptrCast(*const IWICImagingFactory, self), uiWidth, uiHeight, pixelFormat, option, ppIBitmap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateBitmapFromSource(self: *const T, pIBitmapSource: *IWICBitmapSource, option: WICBitmapCreateCacheOption, ppIBitmap: **IWICBitmap) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateBitmapFromSource(@ptrCast(*const IWICImagingFactory, self), pIBitmapSource, option, ppIBitmap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateBitmapFromSourceRect(self: *const T, pIBitmapSource: *IWICBitmapSource, x: u32, y: u32, width: u32, height: u32, ppIBitmap: **IWICBitmap) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateBitmapFromSourceRect(@ptrCast(*const IWICImagingFactory, self), pIBitmapSource, x, y, width, height, ppIBitmap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateBitmapFromMemory(self: *const T, uiWidth: u32, uiHeight: u32, pixelFormat: *Guid, cbStride: u32, cbBufferSize: u32, pbBuffer: [*:0]u8, ppIBitmap: **IWICBitmap) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateBitmapFromMemory(@ptrCast(*const IWICImagingFactory, self), uiWidth, uiHeight, pixelFormat, cbStride, cbBufferSize, pbBuffer, ppIBitmap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateBitmapFromHBITMAP(self: *const T, hBitmap: HBITMAP, hPalette: HPALETTE, options: WICBitmapAlphaChannelOption, ppIBitmap: **IWICBitmap) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateBitmapFromHBITMAP(@ptrCast(*const IWICImagingFactory, self), hBitmap, hPalette, options, ppIBitmap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateBitmapFromHICON(self: *const T, hIcon: HICON, ppIBitmap: **IWICBitmap) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateBitmapFromHICON(@ptrCast(*const IWICImagingFactory, self), hIcon, ppIBitmap);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateComponentEnumerator(self: *const T, componentTypes: u32, options: u32, ppIEnumUnknown: **IEnumUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateComponentEnumerator(@ptrCast(*const IWICImagingFactory, self), componentTypes, options, ppIEnumUnknown);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateFastMetadataEncoderFromDecoder(self: *const T, pIDecoder: *IWICBitmapDecoder, ppIFastEncoder: **IWICFastMetadataEncoder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateFastMetadataEncoderFromDecoder(@ptrCast(*const IWICImagingFactory, self), pIDecoder, ppIFastEncoder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateFastMetadataEncoderFromFrameDecode(self: *const T, pIFrameDecoder: *IWICBitmapFrameDecode, ppIFastEncoder: **IWICFastMetadataEncoder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateFastMetadataEncoderFromFrameDecode(@ptrCast(*const IWICImagingFactory, self), pIFrameDecoder, ppIFastEncoder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateQueryWriter(self: *const T, guidMetadataFormat: *const Guid, pguidVendor: *const Guid, ppIQueryWriter: **IWICMetadataQueryWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateQueryWriter(@ptrCast(*const IWICImagingFactory, self), guidMetadataFormat, pguidVendor, ppIQueryWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory_CreateQueryWriterFromReader(self: *const T, pIQueryReader: *IWICMetadataQueryReader, pguidVendor: *const Guid, ppIQueryWriter: **IWICMetadataQueryWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory.VTable, self.vtable).CreateQueryWriterFromReader(@ptrCast(*const IWICImagingFactory, self), pIQueryReader, pguidVendor, ppIQueryWriter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICImagingFactory2_Value = @import("../zig.zig").Guid.initString("7b816b45-1996-4476-b132-de9e247c8af0");
pub const IID_IWICImagingFactory2 = &IID_IWICImagingFactory2_Value;
pub const IWICImagingFactory2 = extern struct {
    pub const VTable = extern struct {
        base: IWICImagingFactory.VTable,
        CreateImageEncoder: fn(
            self: *const IWICImagingFactory2,
            pD2DDevice: *ID2D1Device,
            ppWICImageEncoder: **IWICImageEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICImagingFactory.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICImagingFactory2_CreateImageEncoder(self: *const T, pD2DDevice: *ID2D1Device, ppWICImageEncoder: **IWICImageEncoder) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICImagingFactory2.VTable, self.vtable).CreateImageEncoder(@ptrCast(*const IWICImagingFactory2, self), pD2DDevice, ppWICImageEncoder);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WICTiffCompressionOption = extern enum(i32) {
    WICTiffCompressionDontCare = 0,
    WICTiffCompressionNone = 1,
    WICTiffCompressionCCITT3 = 2,
    WICTiffCompressionCCITT4 = 3,
    WICTiffCompressionLZW = 4,
    WICTiffCompressionRLE = 5,
    WICTiffCompressionZIP = 6,
    WICTiffCompressionLZWHDifferencing = 7,
    WICTIFFCOMPRESSIONOPTION_FORCE_DWORD = 2147483647,
};
pub const WICTiffCompressionDontCare = WICTiffCompressionOption.WICTiffCompressionDontCare;
pub const WICTiffCompressionNone = WICTiffCompressionOption.WICTiffCompressionNone;
pub const WICTiffCompressionCCITT3 = WICTiffCompressionOption.WICTiffCompressionCCITT3;
pub const WICTiffCompressionCCITT4 = WICTiffCompressionOption.WICTiffCompressionCCITT4;
pub const WICTiffCompressionLZW = WICTiffCompressionOption.WICTiffCompressionLZW;
pub const WICTiffCompressionRLE = WICTiffCompressionOption.WICTiffCompressionRLE;
pub const WICTiffCompressionZIP = WICTiffCompressionOption.WICTiffCompressionZIP;
pub const WICTiffCompressionLZWHDifferencing = WICTiffCompressionOption.WICTiffCompressionLZWHDifferencing;
pub const WICTIFFCOMPRESSIONOPTION_FORCE_DWORD = WICTiffCompressionOption.WICTIFFCOMPRESSIONOPTION_FORCE_DWORD;

pub const WICJpegYCrCbSubsamplingOption = extern enum(i32) {
    WICJpegYCrCbSubsamplingDefault = 0,
    WICJpegYCrCbSubsampling420 = 1,
    WICJpegYCrCbSubsampling422 = 2,
    WICJpegYCrCbSubsampling444 = 3,
    WICJpegYCrCbSubsampling440 = 4,
    WICJPEGYCRCBSUBSAMPLING_FORCE_DWORD = 2147483647,
};
pub const WICJpegYCrCbSubsamplingDefault = WICJpegYCrCbSubsamplingOption.WICJpegYCrCbSubsamplingDefault;
pub const WICJpegYCrCbSubsampling420 = WICJpegYCrCbSubsamplingOption.WICJpegYCrCbSubsampling420;
pub const WICJpegYCrCbSubsampling422 = WICJpegYCrCbSubsamplingOption.WICJpegYCrCbSubsampling422;
pub const WICJpegYCrCbSubsampling444 = WICJpegYCrCbSubsamplingOption.WICJpegYCrCbSubsampling444;
pub const WICJpegYCrCbSubsampling440 = WICJpegYCrCbSubsamplingOption.WICJpegYCrCbSubsampling440;
pub const WICJPEGYCRCBSUBSAMPLING_FORCE_DWORD = WICJpegYCrCbSubsamplingOption.WICJPEGYCRCBSUBSAMPLING_FORCE_DWORD;

pub const WICPngFilterOption = extern enum(i32) {
    WICPngFilterUnspecified = 0,
    WICPngFilterNone = 1,
    WICPngFilterSub = 2,
    WICPngFilterUp = 3,
    WICPngFilterAverage = 4,
    WICPngFilterPaeth = 5,
    WICPngFilterAdaptive = 6,
    WICPNGFILTEROPTION_FORCE_DWORD = 2147483647,
};
pub const WICPngFilterUnspecified = WICPngFilterOption.WICPngFilterUnspecified;
pub const WICPngFilterNone = WICPngFilterOption.WICPngFilterNone;
pub const WICPngFilterSub = WICPngFilterOption.WICPngFilterSub;
pub const WICPngFilterUp = WICPngFilterOption.WICPngFilterUp;
pub const WICPngFilterAverage = WICPngFilterOption.WICPngFilterAverage;
pub const WICPngFilterPaeth = WICPngFilterOption.WICPngFilterPaeth;
pub const WICPngFilterAdaptive = WICPngFilterOption.WICPngFilterAdaptive;
pub const WICPNGFILTEROPTION_FORCE_DWORD = WICPngFilterOption.WICPNGFILTEROPTION_FORCE_DWORD;

pub const WICNamedWhitePoint = extern enum(i32) {
    WICWhitePointDefault = 1,
    WICWhitePointDaylight = 2,
    WICWhitePointCloudy = 4,
    WICWhitePointShade = 8,
    WICWhitePointTungsten = 16,
    WICWhitePointFluorescent = 32,
    WICWhitePointFlash = 64,
    WICWhitePointUnderwater = 128,
    WICWhitePointCustom = 256,
    WICWhitePointAutoWhiteBalance = 512,
    WICWhitePointAsShot = 1,
    WICNAMEDWHITEPOINT_FORCE_DWORD = 2147483647,
};
pub const WICWhitePointDefault = WICNamedWhitePoint.WICWhitePointDefault;
pub const WICWhitePointDaylight = WICNamedWhitePoint.WICWhitePointDaylight;
pub const WICWhitePointCloudy = WICNamedWhitePoint.WICWhitePointCloudy;
pub const WICWhitePointShade = WICNamedWhitePoint.WICWhitePointShade;
pub const WICWhitePointTungsten = WICNamedWhitePoint.WICWhitePointTungsten;
pub const WICWhitePointFluorescent = WICNamedWhitePoint.WICWhitePointFluorescent;
pub const WICWhitePointFlash = WICNamedWhitePoint.WICWhitePointFlash;
pub const WICWhitePointUnderwater = WICNamedWhitePoint.WICWhitePointUnderwater;
pub const WICWhitePointCustom = WICNamedWhitePoint.WICWhitePointCustom;
pub const WICWhitePointAutoWhiteBalance = WICNamedWhitePoint.WICWhitePointAutoWhiteBalance;
pub const WICWhitePointAsShot = WICNamedWhitePoint.WICWhitePointAsShot;
pub const WICNAMEDWHITEPOINT_FORCE_DWORD = WICNamedWhitePoint.WICNAMEDWHITEPOINT_FORCE_DWORD;

pub const WICRawCapabilities = extern enum(i32) {
    WICRawCapabilityNotSupported = 0,
    WICRawCapabilityGetSupported = 1,
    WICRawCapabilityFullySupported = 2,
    WICRAWCAPABILITIES_FORCE_DWORD = 2147483647,
};
pub const WICRawCapabilityNotSupported = WICRawCapabilities.WICRawCapabilityNotSupported;
pub const WICRawCapabilityGetSupported = WICRawCapabilities.WICRawCapabilityGetSupported;
pub const WICRawCapabilityFullySupported = WICRawCapabilities.WICRawCapabilityFullySupported;
pub const WICRAWCAPABILITIES_FORCE_DWORD = WICRawCapabilities.WICRAWCAPABILITIES_FORCE_DWORD;

pub const WICRawRotationCapabilities = extern enum(i32) {
    WICRawRotationCapabilityNotSupported = 0,
    WICRawRotationCapabilityGetSupported = 1,
    WICRawRotationCapabilityNinetyDegreesSupported = 2,
    WICRawRotationCapabilityFullySupported = 3,
    WICRAWROTATIONCAPABILITIES_FORCE_DWORD = 2147483647,
};
pub const WICRawRotationCapabilityNotSupported = WICRawRotationCapabilities.WICRawRotationCapabilityNotSupported;
pub const WICRawRotationCapabilityGetSupported = WICRawRotationCapabilities.WICRawRotationCapabilityGetSupported;
pub const WICRawRotationCapabilityNinetyDegreesSupported = WICRawRotationCapabilities.WICRawRotationCapabilityNinetyDegreesSupported;
pub const WICRawRotationCapabilityFullySupported = WICRawRotationCapabilities.WICRawRotationCapabilityFullySupported;
pub const WICRAWROTATIONCAPABILITIES_FORCE_DWORD = WICRawRotationCapabilities.WICRAWROTATIONCAPABILITIES_FORCE_DWORD;

pub const WICRawCapabilitiesInfo = extern struct {
    cbSize: u32,
    CodecMajorVersion: u32,
    CodecMinorVersion: u32,
    ExposureCompensationSupport: WICRawCapabilities,
    ContrastSupport: WICRawCapabilities,
    RGBWhitePointSupport: WICRawCapabilities,
    NamedWhitePointSupport: WICRawCapabilities,
    NamedWhitePointSupportMask: u32,
    KelvinWhitePointSupport: WICRawCapabilities,
    GammaSupport: WICRawCapabilities,
    TintSupport: WICRawCapabilities,
    SaturationSupport: WICRawCapabilities,
    SharpnessSupport: WICRawCapabilities,
    NoiseReductionSupport: WICRawCapabilities,
    DestinationColorProfileSupport: WICRawCapabilities,
    ToneCurveSupport: WICRawCapabilities,
    RotationSupport: WICRawRotationCapabilities,
    RenderModeSupport: WICRawCapabilities,
};

pub const WICRawParameterSet = extern enum(i32) {
    WICAsShotParameterSet = 1,
    WICUserAdjustedParameterSet = 2,
    WICAutoAdjustedParameterSet = 3,
    WICRAWPARAMETERSET_FORCE_DWORD = 2147483647,
};
pub const WICAsShotParameterSet = WICRawParameterSet.WICAsShotParameterSet;
pub const WICUserAdjustedParameterSet = WICRawParameterSet.WICUserAdjustedParameterSet;
pub const WICAutoAdjustedParameterSet = WICRawParameterSet.WICAutoAdjustedParameterSet;
pub const WICRAWPARAMETERSET_FORCE_DWORD = WICRawParameterSet.WICRAWPARAMETERSET_FORCE_DWORD;

pub const WICRawRenderMode = extern enum(i32) {
    WICRawRenderModeDraft = 1,
    WICRawRenderModeNormal = 2,
    WICRawRenderModeBestQuality = 3,
    WICRAWRENDERMODE_FORCE_DWORD = 2147483647,
};
pub const WICRawRenderModeDraft = WICRawRenderMode.WICRawRenderModeDraft;
pub const WICRawRenderModeNormal = WICRawRenderMode.WICRawRenderModeNormal;
pub const WICRawRenderModeBestQuality = WICRawRenderMode.WICRawRenderModeBestQuality;
pub const WICRAWRENDERMODE_FORCE_DWORD = WICRawRenderMode.WICRAWRENDERMODE_FORCE_DWORD;

pub const WICRawToneCurvePoint = extern struct {
    Input: f64,
    Output: f64,
};

pub const WICRawToneCurve = extern struct {
    cPoints: u32,
    aPoints: [1]WICRawToneCurvePoint,
};

const IID_IWICDevelopRawNotificationCallback_Value = @import("../zig.zig").Guid.initString("95c75a6e-3e8c-4ec2-85a8-aebcc551e59b");
pub const IID_IWICDevelopRawNotificationCallback = &IID_IWICDevelopRawNotificationCallback_Value;
pub const IWICDevelopRawNotificationCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Notify: fn(
            self: *const IWICDevelopRawNotificationCallback,
            NotificationMask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRawNotificationCallback_Notify(self: *const T, NotificationMask: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRawNotificationCallback.VTable, self.vtable).Notify(@ptrCast(*const IWICDevelopRawNotificationCallback, self), NotificationMask);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICDevelopRaw_Value = @import("../zig.zig").Guid.initString("fbec5e44-f7be-4b65-b7f8-c0c81fef026d");
pub const IID_IWICDevelopRaw = &IID_IWICDevelopRaw_Value;
pub const IWICDevelopRaw = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapFrameDecode.VTable,
        QueryRawCapabilitiesInfo: fn(
            self: *const IWICDevelopRaw,
            pInfo: *WICRawCapabilitiesInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadParameterSet: fn(
            self: *const IWICDevelopRaw,
            ParameterSet: WICRawParameterSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentParameterSet: fn(
            self: *const IWICDevelopRaw,
            ppCurrentParameterSet: **IPropertyBag2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetExposureCompensation: fn(
            self: *const IWICDevelopRaw,
            ev: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExposureCompensation: fn(
            self: *const IWICDevelopRaw,
            pEV: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWhitePointRGB: fn(
            self: *const IWICDevelopRaw,
            Red: u32,
            Green: u32,
            Blue: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWhitePointRGB: fn(
            self: *const IWICDevelopRaw,
            pRed: *u32,
            pGreen: *u32,
            pBlue: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNamedWhitePoint: fn(
            self: *const IWICDevelopRaw,
            WhitePoint: WICNamedWhitePoint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNamedWhitePoint: fn(
            self: *const IWICDevelopRaw,
            pWhitePoint: *WICNamedWhitePoint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWhitePointKelvin: fn(
            self: *const IWICDevelopRaw,
            WhitePointKelvin: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWhitePointKelvin: fn(
            self: *const IWICDevelopRaw,
            pWhitePointKelvin: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKelvinRangeInfo: fn(
            self: *const IWICDevelopRaw,
            pMinKelvinTemp: *u32,
            pMaxKelvinTemp: *u32,
            pKelvinTempStepValue: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContrast: fn(
            self: *const IWICDevelopRaw,
            Contrast: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContrast: fn(
            self: *const IWICDevelopRaw,
            pContrast: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGamma: fn(
            self: *const IWICDevelopRaw,
            Gamma: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGamma: fn(
            self: *const IWICDevelopRaw,
            pGamma: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSharpness: fn(
            self: *const IWICDevelopRaw,
            Sharpness: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSharpness: fn(
            self: *const IWICDevelopRaw,
            pSharpness: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSaturation: fn(
            self: *const IWICDevelopRaw,
            Saturation: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSaturation: fn(
            self: *const IWICDevelopRaw,
            pSaturation: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTint: fn(
            self: *const IWICDevelopRaw,
            Tint: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTint: fn(
            self: *const IWICDevelopRaw,
            pTint: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoiseReduction: fn(
            self: *const IWICDevelopRaw,
            NoiseReduction: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNoiseReduction: fn(
            self: *const IWICDevelopRaw,
            pNoiseReduction: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDestinationColorContext: fn(
            self: *const IWICDevelopRaw,
            pColorContext: *IWICColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetToneCurve: fn(
            self: *const IWICDevelopRaw,
            cbToneCurveSize: u32,
            pToneCurve: [*]const WICRawToneCurve,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetToneCurve: fn(
            self: *const IWICDevelopRaw,
            cbToneCurveBufferSize: u32,
            pToneCurve: ?[*]WICRawToneCurve,
            pcbActualToneCurveBufferSize: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRotation: fn(
            self: *const IWICDevelopRaw,
            Rotation: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRotation: fn(
            self: *const IWICDevelopRaw,
            pRotation: *f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRenderMode: fn(
            self: *const IWICDevelopRaw,
            RenderMode: WICRawRenderMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRenderMode: fn(
            self: *const IWICDevelopRaw,
            pRenderMode: *WICRawRenderMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNotificationCallback: fn(
            self: *const IWICDevelopRaw,
            pCallback: *IWICDevelopRawNotificationCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICBitmapFrameDecode.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_QueryRawCapabilitiesInfo(self: *const T, pInfo: *WICRawCapabilitiesInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).QueryRawCapabilitiesInfo(@ptrCast(*const IWICDevelopRaw, self), pInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_LoadParameterSet(self: *const T, ParameterSet: WICRawParameterSet) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).LoadParameterSet(@ptrCast(*const IWICDevelopRaw, self), ParameterSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetCurrentParameterSet(self: *const T, ppCurrentParameterSet: **IPropertyBag2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetCurrentParameterSet(@ptrCast(*const IWICDevelopRaw, self), ppCurrentParameterSet);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetExposureCompensation(self: *const T, ev: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetExposureCompensation(@ptrCast(*const IWICDevelopRaw, self), ev);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetExposureCompensation(self: *const T, pEV: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetExposureCompensation(@ptrCast(*const IWICDevelopRaw, self), pEV);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetWhitePointRGB(self: *const T, Red: u32, Green: u32, Blue: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetWhitePointRGB(@ptrCast(*const IWICDevelopRaw, self), Red, Green, Blue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetWhitePointRGB(self: *const T, pRed: *u32, pGreen: *u32, pBlue: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetWhitePointRGB(@ptrCast(*const IWICDevelopRaw, self), pRed, pGreen, pBlue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetNamedWhitePoint(self: *const T, WhitePoint: WICNamedWhitePoint) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetNamedWhitePoint(@ptrCast(*const IWICDevelopRaw, self), WhitePoint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetNamedWhitePoint(self: *const T, pWhitePoint: *WICNamedWhitePoint) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetNamedWhitePoint(@ptrCast(*const IWICDevelopRaw, self), pWhitePoint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetWhitePointKelvin(self: *const T, WhitePointKelvin: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetWhitePointKelvin(@ptrCast(*const IWICDevelopRaw, self), WhitePointKelvin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetWhitePointKelvin(self: *const T, pWhitePointKelvin: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetWhitePointKelvin(@ptrCast(*const IWICDevelopRaw, self), pWhitePointKelvin);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetKelvinRangeInfo(self: *const T, pMinKelvinTemp: *u32, pMaxKelvinTemp: *u32, pKelvinTempStepValue: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetKelvinRangeInfo(@ptrCast(*const IWICDevelopRaw, self), pMinKelvinTemp, pMaxKelvinTemp, pKelvinTempStepValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetContrast(self: *const T, Contrast: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetContrast(@ptrCast(*const IWICDevelopRaw, self), Contrast);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetContrast(self: *const T, pContrast: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetContrast(@ptrCast(*const IWICDevelopRaw, self), pContrast);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetGamma(self: *const T, Gamma: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetGamma(@ptrCast(*const IWICDevelopRaw, self), Gamma);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetGamma(self: *const T, pGamma: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetGamma(@ptrCast(*const IWICDevelopRaw, self), pGamma);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetSharpness(self: *const T, Sharpness: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetSharpness(@ptrCast(*const IWICDevelopRaw, self), Sharpness);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetSharpness(self: *const T, pSharpness: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetSharpness(@ptrCast(*const IWICDevelopRaw, self), pSharpness);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetSaturation(self: *const T, Saturation: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetSaturation(@ptrCast(*const IWICDevelopRaw, self), Saturation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetSaturation(self: *const T, pSaturation: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetSaturation(@ptrCast(*const IWICDevelopRaw, self), pSaturation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetTint(self: *const T, Tint: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetTint(@ptrCast(*const IWICDevelopRaw, self), Tint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetTint(self: *const T, pTint: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetTint(@ptrCast(*const IWICDevelopRaw, self), pTint);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetNoiseReduction(self: *const T, NoiseReduction: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetNoiseReduction(@ptrCast(*const IWICDevelopRaw, self), NoiseReduction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetNoiseReduction(self: *const T, pNoiseReduction: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetNoiseReduction(@ptrCast(*const IWICDevelopRaw, self), pNoiseReduction);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetDestinationColorContext(self: *const T, pColorContext: *IWICColorContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetDestinationColorContext(@ptrCast(*const IWICDevelopRaw, self), pColorContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetToneCurve(self: *const T, cbToneCurveSize: u32, pToneCurve: [*]const WICRawToneCurve) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetToneCurve(@ptrCast(*const IWICDevelopRaw, self), cbToneCurveSize, pToneCurve);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetToneCurve(self: *const T, cbToneCurveBufferSize: u32, pToneCurve: ?[*]WICRawToneCurve, pcbActualToneCurveBufferSize: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetToneCurve(@ptrCast(*const IWICDevelopRaw, self), cbToneCurveBufferSize, pToneCurve, pcbActualToneCurveBufferSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetRotation(self: *const T, Rotation: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetRotation(@ptrCast(*const IWICDevelopRaw, self), Rotation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetRotation(self: *const T, pRotation: *f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetRotation(@ptrCast(*const IWICDevelopRaw, self), pRotation);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetRenderMode(self: *const T, RenderMode: WICRawRenderMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetRenderMode(@ptrCast(*const IWICDevelopRaw, self), RenderMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_GetRenderMode(self: *const T, pRenderMode: *WICRawRenderMode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).GetRenderMode(@ptrCast(*const IWICDevelopRaw, self), pRenderMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDevelopRaw_SetNotificationCallback(self: *const T, pCallback: *IWICDevelopRawNotificationCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDevelopRaw.VTable, self.vtable).SetNotificationCallback(@ptrCast(*const IWICDevelopRaw, self), pCallback);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WICDdsDimension = extern enum(i32) {
    WICDdsTexture1D = 0,
    WICDdsTexture2D = 1,
    WICDdsTexture3D = 2,
    WICDdsTextureCube = 3,
    WICDDSTEXTURE_FORCE_DWORD = 2147483647,
};
pub const WICDdsTexture1D = WICDdsDimension.WICDdsTexture1D;
pub const WICDdsTexture2D = WICDdsDimension.WICDdsTexture2D;
pub const WICDdsTexture3D = WICDdsDimension.WICDdsTexture3D;
pub const WICDdsTextureCube = WICDdsDimension.WICDdsTextureCube;
pub const WICDDSTEXTURE_FORCE_DWORD = WICDdsDimension.WICDDSTEXTURE_FORCE_DWORD;

pub const WICDdsAlphaMode = extern enum(i32) {
    WICDdsAlphaModeUnknown = 0,
    WICDdsAlphaModeStraight = 1,
    WICDdsAlphaModePremultiplied = 2,
    WICDdsAlphaModeOpaque = 3,
    WICDdsAlphaModeCustom = 4,
    WICDDSALPHAMODE_FORCE_DWORD = 2147483647,
};
pub const WICDdsAlphaModeUnknown = WICDdsAlphaMode.WICDdsAlphaModeUnknown;
pub const WICDdsAlphaModeStraight = WICDdsAlphaMode.WICDdsAlphaModeStraight;
pub const WICDdsAlphaModePremultiplied = WICDdsAlphaMode.WICDdsAlphaModePremultiplied;
pub const WICDdsAlphaModeOpaque = WICDdsAlphaMode.WICDdsAlphaModeOpaque;
pub const WICDdsAlphaModeCustom = WICDdsAlphaMode.WICDdsAlphaModeCustom;
pub const WICDDSALPHAMODE_FORCE_DWORD = WICDdsAlphaMode.WICDDSALPHAMODE_FORCE_DWORD;

pub const WICDdsParameters = extern struct {
    Width: u32,
    Height: u32,
    Depth: u32,
    MipLevels: u32,
    ArraySize: u32,
    DxgiFormat: DXGI_FORMAT,
    Dimension: WICDdsDimension,
    AlphaMode: WICDdsAlphaMode,
};

const IID_IWICDdsDecoder_Value = @import("../zig.zig").Guid.initString("409cd537-8532-40cb-9774-e2feb2df4e9c");
pub const IID_IWICDdsDecoder = &IID_IWICDdsDecoder_Value;
pub const IWICDdsDecoder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetParameters: fn(
            self: *const IWICDdsDecoder,
            pParameters: *WICDdsParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrame: fn(
            self: *const IWICDdsDecoder,
            arrayIndex: u32,
            mipLevel: u32,
            sliceIndex: u32,
            ppIBitmapFrame: **IWICBitmapFrameDecode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDdsDecoder_GetParameters(self: *const T, pParameters: *WICDdsParameters) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDdsDecoder.VTable, self.vtable).GetParameters(@ptrCast(*const IWICDdsDecoder, self), pParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDdsDecoder_GetFrame(self: *const T, arrayIndex: u32, mipLevel: u32, sliceIndex: u32, ppIBitmapFrame: **IWICBitmapFrameDecode) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDdsDecoder.VTable, self.vtable).GetFrame(@ptrCast(*const IWICDdsDecoder, self), arrayIndex, mipLevel, sliceIndex, ppIBitmapFrame);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICDdsEncoder_Value = @import("../zig.zig").Guid.initString("5cacdb4c-407e-41b3-b936-d0f010cd6732");
pub const IID_IWICDdsEncoder = &IID_IWICDdsEncoder_Value;
pub const IWICDdsEncoder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetParameters: fn(
            self: *const IWICDdsEncoder,
            pParameters: *WICDdsParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParameters: fn(
            self: *const IWICDdsEncoder,
            pParameters: *WICDdsParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNewFrame: fn(
            self: *const IWICDdsEncoder,
            ppIFrameEncode: **IWICBitmapFrameEncode,
            pArrayIndex: *u32,
            pMipLevel: *u32,
            pSliceIndex: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDdsEncoder_SetParameters(self: *const T, pParameters: *WICDdsParameters) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDdsEncoder.VTable, self.vtable).SetParameters(@ptrCast(*const IWICDdsEncoder, self), pParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDdsEncoder_GetParameters(self: *const T, pParameters: *WICDdsParameters) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDdsEncoder.VTable, self.vtable).GetParameters(@ptrCast(*const IWICDdsEncoder, self), pParameters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDdsEncoder_CreateNewFrame(self: *const T, ppIFrameEncode: **IWICBitmapFrameEncode, pArrayIndex: *u32, pMipLevel: *u32, pSliceIndex: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDdsEncoder.VTable, self.vtable).CreateNewFrame(@ptrCast(*const IWICDdsEncoder, self), ppIFrameEncode, pArrayIndex, pMipLevel, pSliceIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WICDdsFormatInfo = extern struct {
    DxgiFormat: DXGI_FORMAT,
    BytesPerBlock: u32,
    BlockWidth: u32,
    BlockHeight: u32,
};

const IID_IWICDdsFrameDecode_Value = @import("../zig.zig").Guid.initString("3d4c0c61-18a4-41e4-bd80-481a4fc9f464");
pub const IID_IWICDdsFrameDecode = &IID_IWICDdsFrameDecode_Value;
pub const IWICDdsFrameDecode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSizeInBlocks: fn(
            self: *const IWICDdsFrameDecode,
            pWidthInBlocks: *u32,
            pHeightInBlocks: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatInfo: fn(
            self: *const IWICDdsFrameDecode,
            pFormatInfo: *WICDdsFormatInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyBlocks: fn(
            self: *const IWICDdsFrameDecode,
            prcBoundsInBlocks: *const WICRect,
            cbStride: u32,
            cbBufferSize: u32,
            pbBuffer: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDdsFrameDecode_GetSizeInBlocks(self: *const T, pWidthInBlocks: *u32, pHeightInBlocks: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDdsFrameDecode.VTable, self.vtable).GetSizeInBlocks(@ptrCast(*const IWICDdsFrameDecode, self), pWidthInBlocks, pHeightInBlocks);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDdsFrameDecode_GetFormatInfo(self: *const T, pFormatInfo: *WICDdsFormatInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDdsFrameDecode.VTable, self.vtable).GetFormatInfo(@ptrCast(*const IWICDdsFrameDecode, self), pFormatInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICDdsFrameDecode_CopyBlocks(self: *const T, prcBoundsInBlocks: *const WICRect, cbStride: u32, cbBufferSize: u32, pbBuffer: [*:0]u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICDdsFrameDecode.VTable, self.vtable).CopyBlocks(@ptrCast(*const IWICDdsFrameDecode, self), prcBoundsInBlocks, cbStride, cbBufferSize, pbBuffer);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICJpegFrameDecode_Value = @import("../zig.zig").Guid.initString("8939f66e-c46a-4c21-a9d1-98b327ce1679");
pub const IID_IWICJpegFrameDecode = &IID_IWICJpegFrameDecode_Value;
pub const IWICJpegFrameDecode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DoesSupportIndexing: fn(
            self: *const IWICJpegFrameDecode,
            pfIndexingSupported: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIndexing: fn(
            self: *const IWICJpegFrameDecode,
            options: WICJpegIndexingOptions,
            horizontalIntervalSize: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearIndexing: fn(
            self: *const IWICJpegFrameDecode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAcHuffmanTable: fn(
            self: *const IWICJpegFrameDecode,
            scanIndex: u32,
            tableIndex: u32,
            pAcHuffmanTable: *DXGI_JPEG_AC_HUFFMAN_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDcHuffmanTable: fn(
            self: *const IWICJpegFrameDecode,
            scanIndex: u32,
            tableIndex: u32,
            pDcHuffmanTable: *DXGI_JPEG_DC_HUFFMAN_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQuantizationTable: fn(
            self: *const IWICJpegFrameDecode,
            scanIndex: u32,
            tableIndex: u32,
            pQuantizationTable: *DXGI_JPEG_QUANTIZATION_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrameHeader: fn(
            self: *const IWICJpegFrameDecode,
            pFrameHeader: *WICJpegFrameHeader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScanHeader: fn(
            self: *const IWICJpegFrameDecode,
            scanIndex: u32,
            pScanHeader: *WICJpegScanHeader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyScan: fn(
            self: *const IWICJpegFrameDecode,
            scanIndex: u32,
            scanOffset: u32,
            cbScanData: u32,
            pbScanData: [*:0]u8,
            pcbScanDataActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyMinimalStream: fn(
            self: *const IWICJpegFrameDecode,
            streamOffset: u32,
            cbStreamData: u32,
            pbStreamData: [*:0]u8,
            pcbStreamDataActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameDecode_DoesSupportIndexing(self: *const T, pfIndexingSupported: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameDecode.VTable, self.vtable).DoesSupportIndexing(@ptrCast(*const IWICJpegFrameDecode, self), pfIndexingSupported);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameDecode_SetIndexing(self: *const T, options: WICJpegIndexingOptions, horizontalIntervalSize: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameDecode.VTable, self.vtable).SetIndexing(@ptrCast(*const IWICJpegFrameDecode, self), options, horizontalIntervalSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameDecode_ClearIndexing(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameDecode.VTable, self.vtable).ClearIndexing(@ptrCast(*const IWICJpegFrameDecode, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameDecode_GetAcHuffmanTable(self: *const T, scanIndex: u32, tableIndex: u32, pAcHuffmanTable: *DXGI_JPEG_AC_HUFFMAN_TABLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameDecode.VTable, self.vtable).GetAcHuffmanTable(@ptrCast(*const IWICJpegFrameDecode, self), scanIndex, tableIndex, pAcHuffmanTable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameDecode_GetDcHuffmanTable(self: *const T, scanIndex: u32, tableIndex: u32, pDcHuffmanTable: *DXGI_JPEG_DC_HUFFMAN_TABLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameDecode.VTable, self.vtable).GetDcHuffmanTable(@ptrCast(*const IWICJpegFrameDecode, self), scanIndex, tableIndex, pDcHuffmanTable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameDecode_GetQuantizationTable(self: *const T, scanIndex: u32, tableIndex: u32, pQuantizationTable: *DXGI_JPEG_QUANTIZATION_TABLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameDecode.VTable, self.vtable).GetQuantizationTable(@ptrCast(*const IWICJpegFrameDecode, self), scanIndex, tableIndex, pQuantizationTable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameDecode_GetFrameHeader(self: *const T, pFrameHeader: *WICJpegFrameHeader) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameDecode.VTable, self.vtable).GetFrameHeader(@ptrCast(*const IWICJpegFrameDecode, self), pFrameHeader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameDecode_GetScanHeader(self: *const T, scanIndex: u32, pScanHeader: *WICJpegScanHeader) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameDecode.VTable, self.vtable).GetScanHeader(@ptrCast(*const IWICJpegFrameDecode, self), scanIndex, pScanHeader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameDecode_CopyScan(self: *const T, scanIndex: u32, scanOffset: u32, cbScanData: u32, pbScanData: [*:0]u8, pcbScanDataActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameDecode.VTable, self.vtable).CopyScan(@ptrCast(*const IWICJpegFrameDecode, self), scanIndex, scanOffset, cbScanData, pbScanData, pcbScanDataActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameDecode_CopyMinimalStream(self: *const T, streamOffset: u32, cbStreamData: u32, pbStreamData: [*:0]u8, pcbStreamDataActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameDecode.VTable, self.vtable).CopyMinimalStream(@ptrCast(*const IWICJpegFrameDecode, self), streamOffset, cbStreamData, pbStreamData, pcbStreamDataActual);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICJpegFrameEncode_Value = @import("../zig.zig").Guid.initString("2f0c601f-d2c6-468c-abfa-49495d983ed1");
pub const IID_IWICJpegFrameEncode = &IID_IWICJpegFrameEncode_Value;
pub const IWICJpegFrameEncode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAcHuffmanTable: fn(
            self: *const IWICJpegFrameEncode,
            scanIndex: u32,
            tableIndex: u32,
            pAcHuffmanTable: *DXGI_JPEG_AC_HUFFMAN_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDcHuffmanTable: fn(
            self: *const IWICJpegFrameEncode,
            scanIndex: u32,
            tableIndex: u32,
            pDcHuffmanTable: *DXGI_JPEG_DC_HUFFMAN_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQuantizationTable: fn(
            self: *const IWICJpegFrameEncode,
            scanIndex: u32,
            tableIndex: u32,
            pQuantizationTable: *DXGI_JPEG_QUANTIZATION_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteScan: fn(
            self: *const IWICJpegFrameEncode,
            cbScanData: u32,
            pbScanData: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameEncode_GetAcHuffmanTable(self: *const T, scanIndex: u32, tableIndex: u32, pAcHuffmanTable: *DXGI_JPEG_AC_HUFFMAN_TABLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameEncode.VTable, self.vtable).GetAcHuffmanTable(@ptrCast(*const IWICJpegFrameEncode, self), scanIndex, tableIndex, pAcHuffmanTable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameEncode_GetDcHuffmanTable(self: *const T, scanIndex: u32, tableIndex: u32, pDcHuffmanTable: *DXGI_JPEG_DC_HUFFMAN_TABLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameEncode.VTable, self.vtable).GetDcHuffmanTable(@ptrCast(*const IWICJpegFrameEncode, self), scanIndex, tableIndex, pDcHuffmanTable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameEncode_GetQuantizationTable(self: *const T, scanIndex: u32, tableIndex: u32, pQuantizationTable: *DXGI_JPEG_QUANTIZATION_TABLE) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameEncode.VTable, self.vtable).GetQuantizationTable(@ptrCast(*const IWICJpegFrameEncode, self), scanIndex, tableIndex, pQuantizationTable);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICJpegFrameEncode_WriteScan(self: *const T, cbScanData: u32, pbScanData: [*:0]const u8) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICJpegFrameEncode.VTable, self.vtable).WriteScan(@ptrCast(*const IWICJpegFrameEncode, self), cbScanData, pbScanData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WICMetadataCreationOptions = extern enum(i32) {
    WICMetadataCreationDefault = 0,
    WICMetadataCreationAllowUnknown = 0,
    WICMetadataCreationFailUnknown = 65536,
    WICMetadataCreationMask = -65536,
};
pub const WICMetadataCreationDefault = WICMetadataCreationOptions.WICMetadataCreationDefault;
pub const WICMetadataCreationAllowUnknown = WICMetadataCreationOptions.WICMetadataCreationAllowUnknown;
pub const WICMetadataCreationFailUnknown = WICMetadataCreationOptions.WICMetadataCreationFailUnknown;
pub const WICMetadataCreationMask = WICMetadataCreationOptions.WICMetadataCreationMask;

pub const WICPersistOptions = extern enum(i32) {
    WICPersistOptionDefault = 0,
    WICPersistOptionLittleEndian = 0,
    WICPersistOptionBigEndian = 1,
    WICPersistOptionStrictFormat = 2,
    WICPersistOptionNoCacheStream = 4,
    WICPersistOptionPreferUTF8 = 8,
    WICPersistOptionMask = 65535,
};
pub const WICPersistOptionDefault = WICPersistOptions.WICPersistOptionDefault;
pub const WICPersistOptionLittleEndian = WICPersistOptions.WICPersistOptionLittleEndian;
pub const WICPersistOptionBigEndian = WICPersistOptions.WICPersistOptionBigEndian;
pub const WICPersistOptionStrictFormat = WICPersistOptions.WICPersistOptionStrictFormat;
pub const WICPersistOptionNoCacheStream = WICPersistOptions.WICPersistOptionNoCacheStream;
pub const WICPersistOptionPreferUTF8 = WICPersistOptions.WICPersistOptionPreferUTF8;
pub const WICPersistOptionMask = WICPersistOptions.WICPersistOptionMask;

const IID_IWICMetadataBlockReader_Value = @import("../zig.zig").Guid.initString("feaa2a8d-b3f3-43e4-b25c-d1de990a1ae1");
pub const IID_IWICMetadataBlockReader = &IID_IWICMetadataBlockReader_Value;
pub const IWICMetadataBlockReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetContainerFormat: fn(
            self: *const IWICMetadataBlockReader,
            pguidContainerFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const IWICMetadataBlockReader,
            pcCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReaderByIndex: fn(
            self: *const IWICMetadataBlockReader,
            nIndex: u32,
            ppIMetadataReader: **IWICMetadataReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: fn(
            self: *const IWICMetadataBlockReader,
            ppIEnumMetadata: **IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataBlockReader_GetContainerFormat(self: *const T, pguidContainerFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataBlockReader.VTable, self.vtable).GetContainerFormat(@ptrCast(*const IWICMetadataBlockReader, self), pguidContainerFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataBlockReader_GetCount(self: *const T, pcCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataBlockReader.VTable, self.vtable).GetCount(@ptrCast(*const IWICMetadataBlockReader, self), pcCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataBlockReader_GetReaderByIndex(self: *const T, nIndex: u32, ppIMetadataReader: **IWICMetadataReader) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataBlockReader.VTable, self.vtable).GetReaderByIndex(@ptrCast(*const IWICMetadataBlockReader, self), nIndex, ppIMetadataReader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataBlockReader_GetEnumerator(self: *const T, ppIEnumMetadata: **IEnumUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataBlockReader.VTable, self.vtable).GetEnumerator(@ptrCast(*const IWICMetadataBlockReader, self), ppIEnumMetadata);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICMetadataBlockWriter_Value = @import("../zig.zig").Guid.initString("08fb9676-b444-41e8-8dbe-6a53a542bff1");
pub const IID_IWICMetadataBlockWriter = &IID_IWICMetadataBlockWriter_Value;
pub const IWICMetadataBlockWriter = extern struct {
    pub const VTable = extern struct {
        base: IWICMetadataBlockReader.VTable,
        InitializeFromBlockReader: fn(
            self: *const IWICMetadataBlockWriter,
            pIMDBlockReader: *IWICMetadataBlockReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWriterByIndex: fn(
            self: *const IWICMetadataBlockWriter,
            nIndex: u32,
            ppIMetadataWriter: **IWICMetadataWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddWriter: fn(
            self: *const IWICMetadataBlockWriter,
            pIMetadataWriter: *IWICMetadataWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWriterByIndex: fn(
            self: *const IWICMetadataBlockWriter,
            nIndex: u32,
            pIMetadataWriter: *IWICMetadataWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveWriterByIndex: fn(
            self: *const IWICMetadataBlockWriter,
            nIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICMetadataBlockReader.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataBlockWriter_InitializeFromBlockReader(self: *const T, pIMDBlockReader: *IWICMetadataBlockReader) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataBlockWriter.VTable, self.vtable).InitializeFromBlockReader(@ptrCast(*const IWICMetadataBlockWriter, self), pIMDBlockReader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataBlockWriter_GetWriterByIndex(self: *const T, nIndex: u32, ppIMetadataWriter: **IWICMetadataWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataBlockWriter.VTable, self.vtable).GetWriterByIndex(@ptrCast(*const IWICMetadataBlockWriter, self), nIndex, ppIMetadataWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataBlockWriter_AddWriter(self: *const T, pIMetadataWriter: *IWICMetadataWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataBlockWriter.VTable, self.vtable).AddWriter(@ptrCast(*const IWICMetadataBlockWriter, self), pIMetadataWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataBlockWriter_SetWriterByIndex(self: *const T, nIndex: u32, pIMetadataWriter: *IWICMetadataWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataBlockWriter.VTable, self.vtable).SetWriterByIndex(@ptrCast(*const IWICMetadataBlockWriter, self), nIndex, pIMetadataWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataBlockWriter_RemoveWriterByIndex(self: *const T, nIndex: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataBlockWriter.VTable, self.vtable).RemoveWriterByIndex(@ptrCast(*const IWICMetadataBlockWriter, self), nIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICMetadataReader_Value = @import("../zig.zig").Guid.initString("9204fe99-d8fc-4fd5-a001-9536b067a899");
pub const IID_IWICMetadataReader = &IID_IWICMetadataReader_Value;
pub const IWICMetadataReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMetadataFormat: fn(
            self: *const IWICMetadataReader,
            pguidMetadataFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataHandlerInfo: fn(
            self: *const IWICMetadataReader,
            ppIHandler: **IWICMetadataHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: fn(
            self: *const IWICMetadataReader,
            pcCount: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValueByIndex: fn(
            self: *const IWICMetadataReader,
            nIndex: u32,
            pvarSchema: *PROPVARIANT,
            pvarId: *PROPVARIANT,
            pvarValue: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: fn(
            self: *const IWICMetadataReader,
            pvarSchema: *const PROPVARIANT,
            pvarId: *const PROPVARIANT,
            pvarValue: *PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: fn(
            self: *const IWICMetadataReader,
            ppIEnumMetadata: **IWICEnumMetadataItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataReader_GetMetadataFormat(self: *const T, pguidMetadataFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataReader.VTable, self.vtable).GetMetadataFormat(@ptrCast(*const IWICMetadataReader, self), pguidMetadataFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataReader_GetMetadataHandlerInfo(self: *const T, ppIHandler: **IWICMetadataHandlerInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataReader.VTable, self.vtable).GetMetadataHandlerInfo(@ptrCast(*const IWICMetadataReader, self), ppIHandler);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataReader_GetCount(self: *const T, pcCount: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataReader.VTable, self.vtable).GetCount(@ptrCast(*const IWICMetadataReader, self), pcCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataReader_GetValueByIndex(self: *const T, nIndex: u32, pvarSchema: *PROPVARIANT, pvarId: *PROPVARIANT, pvarValue: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataReader.VTable, self.vtable).GetValueByIndex(@ptrCast(*const IWICMetadataReader, self), nIndex, pvarSchema, pvarId, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataReader_GetValue(self: *const T, pvarSchema: *const PROPVARIANT, pvarId: *const PROPVARIANT, pvarValue: *PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataReader.VTable, self.vtable).GetValue(@ptrCast(*const IWICMetadataReader, self), pvarSchema, pvarId, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataReader_GetEnumerator(self: *const T, ppIEnumMetadata: **IWICEnumMetadataItem) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataReader.VTable, self.vtable).GetEnumerator(@ptrCast(*const IWICMetadataReader, self), ppIEnumMetadata);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICMetadataWriter_Value = @import("../zig.zig").Guid.initString("f7836e16-3be0-470b-86bb-160d0aecd7de");
pub const IID_IWICMetadataWriter = &IID_IWICMetadataWriter_Value;
pub const IWICMetadataWriter = extern struct {
    pub const VTable = extern struct {
        base: IWICMetadataReader.VTable,
        SetValue: fn(
            self: *const IWICMetadataWriter,
            pvarSchema: *const PROPVARIANT,
            pvarId: *const PROPVARIANT,
            pvarValue: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValueByIndex: fn(
            self: *const IWICMetadataWriter,
            nIndex: u32,
            pvarSchema: *const PROPVARIANT,
            pvarId: *const PROPVARIANT,
            pvarValue: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveValue: fn(
            self: *const IWICMetadataWriter,
            pvarSchema: *const PROPVARIANT,
            pvarId: *const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveValueByIndex: fn(
            self: *const IWICMetadataWriter,
            nIndex: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICMetadataReader.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataWriter_SetValue(self: *const T, pvarSchema: *const PROPVARIANT, pvarId: *const PROPVARIANT, pvarValue: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataWriter.VTable, self.vtable).SetValue(@ptrCast(*const IWICMetadataWriter, self), pvarSchema, pvarId, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataWriter_SetValueByIndex(self: *const T, nIndex: u32, pvarSchema: *const PROPVARIANT, pvarId: *const PROPVARIANT, pvarValue: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataWriter.VTable, self.vtable).SetValueByIndex(@ptrCast(*const IWICMetadataWriter, self), nIndex, pvarSchema, pvarId, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataWriter_RemoveValue(self: *const T, pvarSchema: *const PROPVARIANT, pvarId: *const PROPVARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataWriter.VTable, self.vtable).RemoveValue(@ptrCast(*const IWICMetadataWriter, self), pvarSchema, pvarId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataWriter_RemoveValueByIndex(self: *const T, nIndex: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataWriter.VTable, self.vtable).RemoveValueByIndex(@ptrCast(*const IWICMetadataWriter, self), nIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICStreamProvider_Value = @import("../zig.zig").Guid.initString("449494bc-b468-4927-96d7-ba90d31ab505");
pub const IID_IWICStreamProvider = &IID_IWICStreamProvider_Value;
pub const IWICStreamProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStream: fn(
            self: *const IWICStreamProvider,
            ppIStream: **IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPersistOptions: fn(
            self: *const IWICStreamProvider,
            pdwPersistOptions: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreferredVendorGUID: fn(
            self: *const IWICStreamProvider,
            pguidPreferredVendor: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshStream: fn(
            self: *const IWICStreamProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICStreamProvider_GetStream(self: *const T, ppIStream: **IStream) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICStreamProvider.VTable, self.vtable).GetStream(@ptrCast(*const IWICStreamProvider, self), ppIStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICStreamProvider_GetPersistOptions(self: *const T, pdwPersistOptions: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICStreamProvider.VTable, self.vtable).GetPersistOptions(@ptrCast(*const IWICStreamProvider, self), pdwPersistOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICStreamProvider_GetPreferredVendorGUID(self: *const T, pguidPreferredVendor: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICStreamProvider.VTable, self.vtable).GetPreferredVendorGUID(@ptrCast(*const IWICStreamProvider, self), pguidPreferredVendor);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICStreamProvider_RefreshStream(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICStreamProvider.VTable, self.vtable).RefreshStream(@ptrCast(*const IWICStreamProvider, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICPersistStream_Value = @import("../zig.zig").Guid.initString("00675040-6908-45f8-86a3-49c7dfd6d9ad");
pub const IID_IWICPersistStream = &IID_IWICPersistStream_Value;
pub const IWICPersistStream = extern struct {
    pub const VTable = extern struct {
        base: IPersistStream.VTable,
        LoadEx: fn(
            self: *const IWICPersistStream,
            pIStream: *IStream,
            pguidPreferredVendor: *const Guid,
            dwPersistOptions: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveEx: fn(
            self: *const IWICPersistStream,
            pIStream: *IStream,
            dwPersistOptions: u32,
            fClearDirty: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IPersistStream.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPersistStream_LoadEx(self: *const T, pIStream: *IStream, pguidPreferredVendor: *const Guid, dwPersistOptions: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPersistStream.VTable, self.vtable).LoadEx(@ptrCast(*const IWICPersistStream, self), pIStream, pguidPreferredVendor, dwPersistOptions);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICPersistStream_SaveEx(self: *const T, pIStream: *IStream, dwPersistOptions: u32, fClearDirty: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICPersistStream.VTable, self.vtable).SaveEx(@ptrCast(*const IWICPersistStream, self), pIStream, dwPersistOptions, fClearDirty);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICMetadataHandlerInfo_Value = @import("../zig.zig").Guid.initString("aba958bf-c672-44d1-8d61-ce6df2e682c2");
pub const IID_IWICMetadataHandlerInfo = &IID_IWICMetadataHandlerInfo_Value;
pub const IWICMetadataHandlerInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICComponentInfo.VTable,
        GetMetadataFormat: fn(
            self: *const IWICMetadataHandlerInfo,
            pguidMetadataFormat: *Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContainerFormats: fn(
            self: *const IWICMetadataHandlerInfo,
            cContainerFormats: u32,
            pguidContainerFormats: [*]Guid,
            pcchActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceManufacturer: fn(
            self: *const IWICMetadataHandlerInfo,
            cchDeviceManufacturer: u32,
            wzDeviceManufacturer: [*:0]u16,
            pcchActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceModels: fn(
            self: *const IWICMetadataHandlerInfo,
            cchDeviceModels: u32,
            wzDeviceModels: [*:0]u16,
            pcchActual: *u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesRequireFullStream: fn(
            self: *const IWICMetadataHandlerInfo,
            pfRequiresFullStream: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesSupportPadding: fn(
            self: *const IWICMetadataHandlerInfo,
            pfSupportsPadding: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesRequireFixedSize: fn(
            self: *const IWICMetadataHandlerInfo,
            pfFixedSize: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICComponentInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataHandlerInfo_GetMetadataFormat(self: *const T, pguidMetadataFormat: *Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataHandlerInfo.VTable, self.vtable).GetMetadataFormat(@ptrCast(*const IWICMetadataHandlerInfo, self), pguidMetadataFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataHandlerInfo_GetContainerFormats(self: *const T, cContainerFormats: u32, pguidContainerFormats: [*]Guid, pcchActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataHandlerInfo.VTable, self.vtable).GetContainerFormats(@ptrCast(*const IWICMetadataHandlerInfo, self), cContainerFormats, pguidContainerFormats, pcchActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataHandlerInfo_GetDeviceManufacturer(self: *const T, cchDeviceManufacturer: u32, wzDeviceManufacturer: [*:0]u16, pcchActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataHandlerInfo.VTable, self.vtable).GetDeviceManufacturer(@ptrCast(*const IWICMetadataHandlerInfo, self), cchDeviceManufacturer, wzDeviceManufacturer, pcchActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataHandlerInfo_GetDeviceModels(self: *const T, cchDeviceModels: u32, wzDeviceModels: [*:0]u16, pcchActual: *u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataHandlerInfo.VTable, self.vtable).GetDeviceModels(@ptrCast(*const IWICMetadataHandlerInfo, self), cchDeviceModels, wzDeviceModels, pcchActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataHandlerInfo_DoesRequireFullStream(self: *const T, pfRequiresFullStream: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataHandlerInfo.VTable, self.vtable).DoesRequireFullStream(@ptrCast(*const IWICMetadataHandlerInfo, self), pfRequiresFullStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataHandlerInfo_DoesSupportPadding(self: *const T, pfSupportsPadding: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataHandlerInfo.VTable, self.vtable).DoesSupportPadding(@ptrCast(*const IWICMetadataHandlerInfo, self), pfSupportsPadding);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataHandlerInfo_DoesRequireFixedSize(self: *const T, pfFixedSize: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataHandlerInfo.VTable, self.vtable).DoesRequireFixedSize(@ptrCast(*const IWICMetadataHandlerInfo, self), pfFixedSize);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WICMetadataPattern = extern struct {
    Position: ULARGE_INTEGER,
    Length: u32,
    Pattern: *u8,
    Mask: *u8,
    DataOffset: ULARGE_INTEGER,
};

const IID_IWICMetadataReaderInfo_Value = @import("../zig.zig").Guid.initString("eebf1f5b-07c1-4447-a3ab-22acaf78a804");
pub const IID_IWICMetadataReaderInfo = &IID_IWICMetadataReaderInfo_Value;
pub const IWICMetadataReaderInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICMetadataHandlerInfo.VTable,
        GetPatterns: fn(
            self: *const IWICMetadataReaderInfo,
            guidContainerFormat: *const Guid,
            cbSize: u32,
            pPattern: ?[*]WICMetadataPattern,
            pcCount: ?*u32,
            pcbActual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MatchesPattern: fn(
            self: *const IWICMetadataReaderInfo,
            guidContainerFormat: *const Guid,
            pIStream: *IStream,
            pfMatches: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstance: fn(
            self: *const IWICMetadataReaderInfo,
            ppIReader: **IWICMetadataReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICMetadataHandlerInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataReaderInfo_GetPatterns(self: *const T, guidContainerFormat: *const Guid, cbSize: u32, pPattern: ?[*]WICMetadataPattern, pcCount: ?*u32, pcbActual: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataReaderInfo.VTable, self.vtable).GetPatterns(@ptrCast(*const IWICMetadataReaderInfo, self), guidContainerFormat, cbSize, pPattern, pcCount, pcbActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataReaderInfo_MatchesPattern(self: *const T, guidContainerFormat: *const Guid, pIStream: *IStream, pfMatches: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataReaderInfo.VTable, self.vtable).MatchesPattern(@ptrCast(*const IWICMetadataReaderInfo, self), guidContainerFormat, pIStream, pfMatches);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataReaderInfo_CreateInstance(self: *const T, ppIReader: **IWICMetadataReader) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataReaderInfo.VTable, self.vtable).CreateInstance(@ptrCast(*const IWICMetadataReaderInfo, self), ppIReader);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

pub const WICMetadataHeader = extern struct {
    Position: ULARGE_INTEGER,
    Length: u32,
    Header: *u8,
    DataOffset: ULARGE_INTEGER,
};

const IID_IWICMetadataWriterInfo_Value = @import("../zig.zig").Guid.initString("b22e3fba-3925-4323-b5c1-9ebfc430f236");
pub const IID_IWICMetadataWriterInfo = &IID_IWICMetadataWriterInfo_Value;
pub const IWICMetadataWriterInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICMetadataHandlerInfo.VTable,
        GetHeader: fn(
            self: *const IWICMetadataWriterInfo,
            guidContainerFormat: *const Guid,
            cbSize: u32,
            pHeader: ?[*]WICMetadataHeader,
            pcbActual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstance: fn(
            self: *const IWICMetadataWriterInfo,
            ppIWriter: **IWICMetadataWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICMetadataHandlerInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataWriterInfo_GetHeader(self: *const T, guidContainerFormat: *const Guid, cbSize: u32, pHeader: ?[*]WICMetadataHeader, pcbActual: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataWriterInfo.VTable, self.vtable).GetHeader(@ptrCast(*const IWICMetadataWriterInfo, self), guidContainerFormat, cbSize, pHeader, pcbActual);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICMetadataWriterInfo_CreateInstance(self: *const T, ppIWriter: **IWICMetadataWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICMetadataWriterInfo.VTable, self.vtable).CreateInstance(@ptrCast(*const IWICMetadataWriterInfo, self), ppIWriter);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICComponentFactory_Value = @import("../zig.zig").Guid.initString("412d0c3a-9650-44fa-af5b-dd2a06c8e8fb");
pub const IID_IWICComponentFactory = &IID_IWICComponentFactory_Value;
pub const IWICComponentFactory = extern struct {
    pub const VTable = extern struct {
        base: IWICImagingFactory.VTable,
        CreateMetadataReader: fn(
            self: *const IWICComponentFactory,
            guidMetadataFormat: *const Guid,
            pguidVendor: *const Guid,
            dwOptions: u32,
            pIStream: *IStream,
            ppIReader: **IWICMetadataReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMetadataReaderFromContainer: fn(
            self: *const IWICComponentFactory,
            guidContainerFormat: *const Guid,
            pguidVendor: *const Guid,
            dwOptions: u32,
            pIStream: *IStream,
            ppIReader: **IWICMetadataReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMetadataWriter: fn(
            self: *const IWICComponentFactory,
            guidMetadataFormat: *const Guid,
            pguidVendor: *const Guid,
            dwMetadataOptions: u32,
            ppIWriter: **IWICMetadataWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMetadataWriterFromReader: fn(
            self: *const IWICComponentFactory,
            pIReader: *IWICMetadataReader,
            pguidVendor: *const Guid,
            ppIWriter: **IWICMetadataWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQueryReaderFromBlockReader: fn(
            self: *const IWICComponentFactory,
            pIBlockReader: *IWICMetadataBlockReader,
            ppIQueryReader: **IWICMetadataQueryReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQueryWriterFromBlockWriter: fn(
            self: *const IWICComponentFactory,
            pIBlockWriter: *IWICMetadataBlockWriter,
            ppIQueryWriter: **IWICMetadataQueryWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEncoderPropertyBag: fn(
            self: *const IWICComponentFactory,
            ppropOptions: [*]PROPBAG2,
            cCount: u32,
            ppIPropertyBag: **IPropertyBag2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IWICImagingFactory.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentFactory_CreateMetadataReader(self: *const T, guidMetadataFormat: *const Guid, pguidVendor: *const Guid, dwOptions: u32, pIStream: *IStream, ppIReader: **IWICMetadataReader) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentFactory.VTable, self.vtable).CreateMetadataReader(@ptrCast(*const IWICComponentFactory, self), guidMetadataFormat, pguidVendor, dwOptions, pIStream, ppIReader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentFactory_CreateMetadataReaderFromContainer(self: *const T, guidContainerFormat: *const Guid, pguidVendor: *const Guid, dwOptions: u32, pIStream: *IStream, ppIReader: **IWICMetadataReader) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentFactory.VTable, self.vtable).CreateMetadataReaderFromContainer(@ptrCast(*const IWICComponentFactory, self), guidContainerFormat, pguidVendor, dwOptions, pIStream, ppIReader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentFactory_CreateMetadataWriter(self: *const T, guidMetadataFormat: *const Guid, pguidVendor: *const Guid, dwMetadataOptions: u32, ppIWriter: **IWICMetadataWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentFactory.VTable, self.vtable).CreateMetadataWriter(@ptrCast(*const IWICComponentFactory, self), guidMetadataFormat, pguidVendor, dwMetadataOptions, ppIWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentFactory_CreateMetadataWriterFromReader(self: *const T, pIReader: *IWICMetadataReader, pguidVendor: *const Guid, ppIWriter: **IWICMetadataWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentFactory.VTable, self.vtable).CreateMetadataWriterFromReader(@ptrCast(*const IWICComponentFactory, self), pIReader, pguidVendor, ppIWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentFactory_CreateQueryReaderFromBlockReader(self: *const T, pIBlockReader: *IWICMetadataBlockReader, ppIQueryReader: **IWICMetadataQueryReader) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentFactory.VTable, self.vtable).CreateQueryReaderFromBlockReader(@ptrCast(*const IWICComponentFactory, self), pIBlockReader, ppIQueryReader);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentFactory_CreateQueryWriterFromBlockWriter(self: *const T, pIBlockWriter: *IWICMetadataBlockWriter, ppIQueryWriter: **IWICMetadataQueryWriter) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentFactory.VTable, self.vtable).CreateQueryWriterFromBlockWriter(@ptrCast(*const IWICComponentFactory, self), pIBlockWriter, ppIQueryWriter);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWICComponentFactory_CreateEncoderPropertyBag(self: *const T, ppropOptions: [*]PROPBAG2, cCount: u32, ppIPropertyBag: **IPropertyBag2) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWICComponentFactory.VTable, self.vtable).CreateEncoderPropertyBag(@ptrCast(*const IWICComponentFactory, self), ppropOptions, cCount, ppIPropertyBag);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (9)
//--------------------------------------------------------------------------------
pub extern "WindowsCodecs" fn WICConvertBitmapSource(
    dstFormat: *Guid,
    pISrc: *IWICBitmapSource,
    ppIDst: **IWICBitmapSource,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WindowsCodecs" fn WICCreateBitmapFromSection(
    width: u32,
    height: u32,
    pixelFormat: *Guid,
    hSection: HANDLE,
    stride: u32,
    offset: u32,
    ppIBitmap: **IWICBitmap,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WindowsCodecs" fn WICCreateBitmapFromSectionEx(
    width: u32,
    height: u32,
    pixelFormat: *Guid,
    hSection: HANDLE,
    stride: u32,
    offset: u32,
    desiredAccessLevel: WICSectionAccessLevel,
    ppIBitmap: **IWICBitmap,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WindowsCodecs" fn WICMapGuidToShortName(
    guid: *const Guid,
    cchName: u32,
    wzName: ?[*:0]u16,
    pcchActual: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WindowsCodecs" fn WICMapShortNameToGuid(
    wzName: [*:0]const u16,
    pguid: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WindowsCodecs" fn WICMapSchemaToName(
    guidMetadataFormat: *const Guid,
    pwzSchema: PWSTR,
    cchName: u32,
    wzName: ?[*:0]u16,
    pcchActual: *u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WindowsCodecs" fn WICMatchMetadataContent(
    guidContainerFormat: *const Guid,
    pguidVendor: ?*const Guid,
    pIStream: *IStream,
    pguidMetadataFormat: *Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WindowsCodecs" fn WICSerializeMetadataContent(
    guidContainerFormat: *const Guid,
    pIWriter: *IWICMetadataWriter,
    dwPersistOptions: u32,
    pIStream: *IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "WindowsCodecs" fn WICGetMetadataContentSize(
    guidContainerFormat: *const Guid,
    pIWriter: *IWICMetadataWriter,
    pcbSize: *ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (24)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const IStream = @import("structured_storage.zig").IStream;
const ULARGE_INTEGER = @import("system_services.zig").ULARGE_INTEGER;
const PWSTR = @import("system_services.zig").PWSTR;
const ID2D1Image = @import("direct2d.zig").ID2D1Image;
const IPersistStream = @import("com.zig").IPersistStream;
const IUnknown = @import("com.zig").IUnknown;
const IEnumString = @import("com.zig").IEnumString;
const HRESULT = @import("com.zig").HRESULT;
const PROPVARIANT = @import("structured_storage.zig").PROPVARIANT;
const IEnumUnknown = @import("com.zig").IEnumUnknown;
const HBITMAP = @import("gdi.zig").HBITMAP;
const PROPBAG2 = @import("com.zig").PROPBAG2;
const BOOL = @import("system_services.zig").BOOL;
const ID2D1Device = @import("direct2d.zig").ID2D1Device;
const DXGI_FORMAT = @import("dxgi.zig").DXGI_FORMAT;
const HPALETTE = @import("gdi.zig").HPALETTE;
const DXGI_JPEG_DC_HUFFMAN_TABLE = @import("dxgi.zig").DXGI_JPEG_DC_HUFFMAN_TABLE;
const D2D1_PIXEL_FORMAT = @import("direct2d.zig").D2D1_PIXEL_FORMAT;
const IPropertyBag2 = @import("com.zig").IPropertyBag2;
const DXGI_JPEG_AC_HUFFMAN_TABLE = @import("dxgi.zig").DXGI_JPEG_AC_HUFFMAN_TABLE;
const HANDLE = @import("system_services.zig").HANDLE;
const HICON = @import("menus_and_resources.zig").HICON;
const DXGI_JPEG_QUANTIZATION_TABLE = @import("dxgi.zig").DXGI_JPEG_QUANTIZATION_TABLE;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PFNProgressNotification;

    const constant_export_count = 0;
    const type_export_count = 125;
    const enum_value_export_count = 286;
    const com_iface_id_export_count = 53;
    const com_class_id_export_count = 0;
    const func_export_count = 9;
    const unicode_alias_count = 0;
    const import_count = 24;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}

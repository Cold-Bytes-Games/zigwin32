//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (684)
//--------------------------------------------------------------------------------
pub const _HCLUSTER = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HNODE = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HRESOURCE = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HGROUP = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HNETWORK = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HNETINTERFACE = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HCHANGE = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HCLUSENUM = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HGROUPENUM = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HRESENUM = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HNETWORKENUM = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HNODEENUM = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HNETINTERFACEENUM = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HRESTYPEENUM = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HREGBATCH = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HREGBATCHPORT = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HREGBATCHNOTIFICATION = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HREGREADBATCH = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HREGREADBATCHREPLY = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HNODEENUMEX = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HCLUSENUMEX = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HGROUPENUMEX = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HRESENUMEX = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HGROUPSET = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const _HGROUPSETENUM = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const CLUSTER_QUORUM_TYPE = extern enum(i32) {
    OperationalQuorum = 0,
    ModifyQuorum = 1,
};
pub const OperationalQuorum = CLUSTER_QUORUM_TYPE.OperationalQuorum;
pub const ModifyQuorum = CLUSTER_QUORUM_TYPE.ModifyQuorum;

pub const CLUSTERVERSIONINFO_NT4 = extern struct {
    dwVersionInfoSize: u32,
    MajorVersion: u16,
    MinorVersion: u16,
    BuildNumber: u16,
    szVendorId: [64]u16,
    szCSDVersion: [64]u16,
};

pub const CLUSTERVERSIONINFO = extern struct {
    dwVersionInfoSize: u32,
    MajorVersion: u16,
    MinorVersion: u16,
    BuildNumber: u16,
    szVendorId: [64]u16,
    szCSDVersion: [64]u16,
    dwClusterHighestVersion: u32,
    dwClusterLowestVersion: u32,
    dwFlags: u32,
    dwReserved: u32,
};

pub const CLUS_STARTING_PARAMS = extern struct {
    dwSize: u32,
    bForm: BOOL,
    bFirst: BOOL,
};

pub const NODE_CLUSTER_STATE = extern enum(i32) {
    ClusterStateNotInstalled = 0,
    ClusterStateNotConfigured = 1,
    ClusterStateNotRunning = 3,
    ClusterStateRunning = 19,
};
pub const ClusterStateNotInstalled = NODE_CLUSTER_STATE.ClusterStateNotInstalled;
pub const ClusterStateNotConfigured = NODE_CLUSTER_STATE.ClusterStateNotConfigured;
pub const ClusterStateNotRunning = NODE_CLUSTER_STATE.ClusterStateNotRunning;
pub const ClusterStateRunning = NODE_CLUSTER_STATE.ClusterStateRunning;

pub const CLUSTER_RESOURCE_STATE_CHANGE_REASON = extern enum(i32) {
    eResourceStateChangeReasonUnknown = 0,
    eResourceStateChangeReasonMove = 1,
    eResourceStateChangeReasonFailover = 2,
    eResourceStateChangeReasonFailedMove = 3,
    eResourceStateChangeReasonShutdown = 4,
    eResourceStateChangeReasonRundown = 5,
};
pub const eResourceStateChangeReasonUnknown = CLUSTER_RESOURCE_STATE_CHANGE_REASON.eResourceStateChangeReasonUnknown;
pub const eResourceStateChangeReasonMove = CLUSTER_RESOURCE_STATE_CHANGE_REASON.eResourceStateChangeReasonMove;
pub const eResourceStateChangeReasonFailover = CLUSTER_RESOURCE_STATE_CHANGE_REASON.eResourceStateChangeReasonFailover;
pub const eResourceStateChangeReasonFailedMove = CLUSTER_RESOURCE_STATE_CHANGE_REASON.eResourceStateChangeReasonFailedMove;
pub const eResourceStateChangeReasonShutdown = CLUSTER_RESOURCE_STATE_CHANGE_REASON.eResourceStateChangeReasonShutdown;
pub const eResourceStateChangeReasonRundown = CLUSTER_RESOURCE_STATE_CHANGE_REASON.eResourceStateChangeReasonRundown;

pub const CLUSTER_REG_COMMAND = extern enum(i32) {
    CLUSREG_COMMAND_NONE = 0,
    CLUSREG_SET_VALUE = 1,
    CLUSREG_CREATE_KEY = 2,
    CLUSREG_DELETE_KEY = 3,
    CLUSREG_DELETE_VALUE = 4,
    CLUSREG_SET_KEY_SECURITY = 5,
    CLUSREG_VALUE_DELETED = 6,
    CLUSREG_READ_KEY = 7,
    CLUSREG_READ_VALUE = 8,
    CLUSREG_READ_ERROR = 9,
    CLUSREG_CONTROL_COMMAND = 10,
    CLUSREG_CONDITION_EXISTS = 11,
    CLUSREG_CONDITION_NOT_EXISTS = 12,
    CLUSREG_CONDITION_IS_EQUAL = 13,
    CLUSREG_CONDITION_IS_NOT_EQUAL = 14,
    CLUSREG_CONDITION_IS_GREATER_THAN = 15,
    CLUSREG_CONDITION_IS_LESS_THAN = 16,
    CLUSREG_CONDITION_KEY_EXISTS = 17,
    CLUSREG_CONDITION_KEY_NOT_EXISTS = 18,
    CLUSREG_LAST_COMMAND = 19,
};
pub const CLUSREG_COMMAND_NONE = CLUSTER_REG_COMMAND.CLUSREG_COMMAND_NONE;
pub const CLUSREG_SET_VALUE = CLUSTER_REG_COMMAND.CLUSREG_SET_VALUE;
pub const CLUSREG_CREATE_KEY = CLUSTER_REG_COMMAND.CLUSREG_CREATE_KEY;
pub const CLUSREG_DELETE_KEY = CLUSTER_REG_COMMAND.CLUSREG_DELETE_KEY;
pub const CLUSREG_DELETE_VALUE = CLUSTER_REG_COMMAND.CLUSREG_DELETE_VALUE;
pub const CLUSREG_SET_KEY_SECURITY = CLUSTER_REG_COMMAND.CLUSREG_SET_KEY_SECURITY;
pub const CLUSREG_VALUE_DELETED = CLUSTER_REG_COMMAND.CLUSREG_VALUE_DELETED;
pub const CLUSREG_READ_KEY = CLUSTER_REG_COMMAND.CLUSREG_READ_KEY;
pub const CLUSREG_READ_VALUE = CLUSTER_REG_COMMAND.CLUSREG_READ_VALUE;
pub const CLUSREG_READ_ERROR = CLUSTER_REG_COMMAND.CLUSREG_READ_ERROR;
pub const CLUSREG_CONTROL_COMMAND = CLUSTER_REG_COMMAND.CLUSREG_CONTROL_COMMAND;
pub const CLUSREG_CONDITION_EXISTS = CLUSTER_REG_COMMAND.CLUSREG_CONDITION_EXISTS;
pub const CLUSREG_CONDITION_NOT_EXISTS = CLUSTER_REG_COMMAND.CLUSREG_CONDITION_NOT_EXISTS;
pub const CLUSREG_CONDITION_IS_EQUAL = CLUSTER_REG_COMMAND.CLUSREG_CONDITION_IS_EQUAL;
pub const CLUSREG_CONDITION_IS_NOT_EQUAL = CLUSTER_REG_COMMAND.CLUSREG_CONDITION_IS_NOT_EQUAL;
pub const CLUSREG_CONDITION_IS_GREATER_THAN = CLUSTER_REG_COMMAND.CLUSREG_CONDITION_IS_GREATER_THAN;
pub const CLUSREG_CONDITION_IS_LESS_THAN = CLUSTER_REG_COMMAND.CLUSREG_CONDITION_IS_LESS_THAN;
pub const CLUSREG_CONDITION_KEY_EXISTS = CLUSTER_REG_COMMAND.CLUSREG_CONDITION_KEY_EXISTS;
pub const CLUSREG_CONDITION_KEY_NOT_EXISTS = CLUSTER_REG_COMMAND.CLUSREG_CONDITION_KEY_NOT_EXISTS;
pub const CLUSREG_LAST_COMMAND = CLUSTER_REG_COMMAND.CLUSREG_LAST_COMMAND;

pub const CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT = extern struct {
    dwSize: u32,
    dwVersion: u32,
    eReason: CLUSTER_RESOURCE_STATE_CHANGE_REASON,
};

pub const CLUSTER_BATCH_COMMAND = extern struct {
    Command: CLUSTER_REG_COMMAND,
    dwOptions: u32,
    wzName: [*:0]const u16,
    lpData: *const u8,
    cbData: u32,
};

pub const CLUSTER_READ_BATCH_COMMAND = extern struct {
    Command: CLUSTER_REG_COMMAND,
    dwOptions: u32,
    wzSubkeyName: [*:0]const u16,
    wzValueName: [*:0]const u16,
    lpData: *const u8,
    cbData: u32,
};

pub const CLUSTER_ENUM_ITEM = extern struct {
    dwVersion: u32,
    dwType: u32,
    cbId: u32,
    lpszId: PWSTR,
    cbName: u32,
    lpszName: PWSTR,
};

pub const CLUSGROUP_TYPE = extern enum(i32) {
    ClusGroupTypeCoreCluster = 1,
    ClusGroupTypeAvailableStorage = 2,
    ClusGroupTypeTemporary = 3,
    ClusGroupTypeSharedVolume = 4,
    ClusGroupTypeStoragePool = 5,
    ClusGroupTypeFileServer = 100,
    ClusGroupTypePrintServer = 101,
    ClusGroupTypeDhcpServer = 102,
    ClusGroupTypeDtc = 103,
    ClusGroupTypeMsmq = 104,
    ClusGroupTypeWins = 105,
    ClusGroupTypeStandAloneDfs = 106,
    ClusGroupTypeGenericApplication = 107,
    ClusGroupTypeGenericService = 108,
    ClusGroupTypeGenericScript = 109,
    ClusGroupTypeIScsiNameService = 110,
    ClusGroupTypeVirtualMachine = 111,
    ClusGroupTypeTsSessionBroker = 112,
    ClusGroupTypeIScsiTarget = 113,
    ClusGroupTypeScaleoutFileServer = 114,
    ClusGroupTypeVMReplicaBroker = 115,
    ClusGroupTypeTaskScheduler = 116,
    ClusGroupTypeClusterUpdateAgent = 117,
    ClusGroupTypeScaleoutCluster = 118,
    ClusGroupTypeStorageReplica = 119,
    ClusGroupTypeVMReplicaCoordinator = 120,
    ClusGroupTypeCrossClusterOrchestrator = 121,
    ClusGroupTypeInfrastructureFileServer = 122,
    ClusGroupTypeUnknown = 9999,
};
pub const ClusGroupTypeCoreCluster = CLUSGROUP_TYPE.ClusGroupTypeCoreCluster;
pub const ClusGroupTypeAvailableStorage = CLUSGROUP_TYPE.ClusGroupTypeAvailableStorage;
pub const ClusGroupTypeTemporary = CLUSGROUP_TYPE.ClusGroupTypeTemporary;
pub const ClusGroupTypeSharedVolume = CLUSGROUP_TYPE.ClusGroupTypeSharedVolume;
pub const ClusGroupTypeStoragePool = CLUSGROUP_TYPE.ClusGroupTypeStoragePool;
pub const ClusGroupTypeFileServer = CLUSGROUP_TYPE.ClusGroupTypeFileServer;
pub const ClusGroupTypePrintServer = CLUSGROUP_TYPE.ClusGroupTypePrintServer;
pub const ClusGroupTypeDhcpServer = CLUSGROUP_TYPE.ClusGroupTypeDhcpServer;
pub const ClusGroupTypeDtc = CLUSGROUP_TYPE.ClusGroupTypeDtc;
pub const ClusGroupTypeMsmq = CLUSGROUP_TYPE.ClusGroupTypeMsmq;
pub const ClusGroupTypeWins = CLUSGROUP_TYPE.ClusGroupTypeWins;
pub const ClusGroupTypeStandAloneDfs = CLUSGROUP_TYPE.ClusGroupTypeStandAloneDfs;
pub const ClusGroupTypeGenericApplication = CLUSGROUP_TYPE.ClusGroupTypeGenericApplication;
pub const ClusGroupTypeGenericService = CLUSGROUP_TYPE.ClusGroupTypeGenericService;
pub const ClusGroupTypeGenericScript = CLUSGROUP_TYPE.ClusGroupTypeGenericScript;
pub const ClusGroupTypeIScsiNameService = CLUSGROUP_TYPE.ClusGroupTypeIScsiNameService;
pub const ClusGroupTypeVirtualMachine = CLUSGROUP_TYPE.ClusGroupTypeVirtualMachine;
pub const ClusGroupTypeTsSessionBroker = CLUSGROUP_TYPE.ClusGroupTypeTsSessionBroker;
pub const ClusGroupTypeIScsiTarget = CLUSGROUP_TYPE.ClusGroupTypeIScsiTarget;
pub const ClusGroupTypeScaleoutFileServer = CLUSGROUP_TYPE.ClusGroupTypeScaleoutFileServer;
pub const ClusGroupTypeVMReplicaBroker = CLUSGROUP_TYPE.ClusGroupTypeVMReplicaBroker;
pub const ClusGroupTypeTaskScheduler = CLUSGROUP_TYPE.ClusGroupTypeTaskScheduler;
pub const ClusGroupTypeClusterUpdateAgent = CLUSGROUP_TYPE.ClusGroupTypeClusterUpdateAgent;
pub const ClusGroupTypeScaleoutCluster = CLUSGROUP_TYPE.ClusGroupTypeScaleoutCluster;
pub const ClusGroupTypeStorageReplica = CLUSGROUP_TYPE.ClusGroupTypeStorageReplica;
pub const ClusGroupTypeVMReplicaCoordinator = CLUSGROUP_TYPE.ClusGroupTypeVMReplicaCoordinator;
pub const ClusGroupTypeCrossClusterOrchestrator = CLUSGROUP_TYPE.ClusGroupTypeCrossClusterOrchestrator;
pub const ClusGroupTypeInfrastructureFileServer = CLUSGROUP_TYPE.ClusGroupTypeInfrastructureFileServer;
pub const ClusGroupTypeUnknown = CLUSGROUP_TYPE.ClusGroupTypeUnknown;

pub const CLUSTER_CREATE_GROUP_INFO = extern struct {
    dwVersion: u32,
    groupType: CLUSGROUP_TYPE,
};

pub const CLUSTER_MGMT_POINT_TYPE = extern enum(i32) {
    NONE = 0,
    CNO = 1,
    DNS_ONLY = 2,
    CNO_ONLY = 3,
};
pub const CLUSTER_MGMT_POINT_TYPE_NONE = CLUSTER_MGMT_POINT_TYPE.NONE;
pub const CLUSTER_MGMT_POINT_TYPE_CNO = CLUSTER_MGMT_POINT_TYPE.CNO;
pub const CLUSTER_MGMT_POINT_TYPE_DNS_ONLY = CLUSTER_MGMT_POINT_TYPE.DNS_ONLY;
pub const CLUSTER_MGMT_POINT_TYPE_CNO_ONLY = CLUSTER_MGMT_POINT_TYPE.CNO_ONLY;

pub const CLUSTER_MGMT_POINT_RESTYPE = extern enum(i32) {
    AUTO = 0,
    SNN = 1,
    DNN = 2,
};
pub const CLUSTER_MGMT_POINT_RESTYPE_AUTO = CLUSTER_MGMT_POINT_RESTYPE.AUTO;
pub const CLUSTER_MGMT_POINT_RESTYPE_SNN = CLUSTER_MGMT_POINT_RESTYPE.SNN;
pub const CLUSTER_MGMT_POINT_RESTYPE_DNN = CLUSTER_MGMT_POINT_RESTYPE.DNN;

pub const CLUSTER_CLOUD_TYPE = extern enum(i32) {
    NONE = 0,
    AZURE = 1,
    MIXED = 128,
    UNKNOWN = -1,
};
pub const CLUSTER_CLOUD_TYPE_NONE = CLUSTER_CLOUD_TYPE.NONE;
pub const CLUSTER_CLOUD_TYPE_AZURE = CLUSTER_CLOUD_TYPE.AZURE;
pub const CLUSTER_CLOUD_TYPE_MIXED = CLUSTER_CLOUD_TYPE.MIXED;
pub const CLUSTER_CLOUD_TYPE_UNKNOWN = CLUSTER_CLOUD_TYPE.UNKNOWN;

pub const CLUS_GROUP_START_SETTING = extern enum(i32) {
    CLUS_GROUP_START_ALWAYS = 0,
    CLUS_GROUP_DO_NOT_START = 1,
    CLUS_GROUP_START_ALLOWED = 2,
};
pub const CLUS_GROUP_START_ALWAYS = CLUS_GROUP_START_SETTING.CLUS_GROUP_START_ALWAYS;
pub const CLUS_GROUP_DO_NOT_START = CLUS_GROUP_START_SETTING.CLUS_GROUP_DO_NOT_START;
pub const CLUS_GROUP_START_ALLOWED = CLUS_GROUP_START_SETTING.CLUS_GROUP_START_ALLOWED;

pub const CLUS_AFFINITY_RULE_TYPE = extern enum(i32) {
    CLUS_AFFINITY_RULE_NONE = 0,
    CLUS_AFFINITY_RULE_SAME_FAULT_DOMAIN = 1,
    CLUS_AFFINITY_RULE_SAME_NODE = 2,
    CLUS_AFFINITY_RULE_DIFFERENT_FAULT_DOMAIN = 3,
    CLUS_AFFINITY_RULE_DIFFERENT_NODE = 4,
    CLUS_AFFINITY_RULE_MIN = 0,
    CLUS_AFFINITY_RULE_MAX = 4,
};
pub const CLUS_AFFINITY_RULE_NONE = CLUS_AFFINITY_RULE_TYPE.CLUS_AFFINITY_RULE_NONE;
pub const CLUS_AFFINITY_RULE_SAME_FAULT_DOMAIN = CLUS_AFFINITY_RULE_TYPE.CLUS_AFFINITY_RULE_SAME_FAULT_DOMAIN;
pub const CLUS_AFFINITY_RULE_SAME_NODE = CLUS_AFFINITY_RULE_TYPE.CLUS_AFFINITY_RULE_SAME_NODE;
pub const CLUS_AFFINITY_RULE_DIFFERENT_FAULT_DOMAIN = CLUS_AFFINITY_RULE_TYPE.CLUS_AFFINITY_RULE_DIFFERENT_FAULT_DOMAIN;
pub const CLUS_AFFINITY_RULE_DIFFERENT_NODE = CLUS_AFFINITY_RULE_TYPE.CLUS_AFFINITY_RULE_DIFFERENT_NODE;
pub const CLUS_AFFINITY_RULE_MIN = CLUS_AFFINITY_RULE_TYPE.CLUS_AFFINITY_RULE_MIN;
pub const CLUS_AFFINITY_RULE_MAX = CLUS_AFFINITY_RULE_TYPE.CLUS_AFFINITY_RULE_MAX;

pub const CLUSTER_QUORUM_VALUE = extern enum(i32) {
    CLUSTER_QUORUM_MAINTAINED = 0,
    CLUSTER_QUORUM_LOST = 1,
};
pub const CLUSTER_QUORUM_MAINTAINED = CLUSTER_QUORUM_VALUE.CLUSTER_QUORUM_MAINTAINED;
pub const CLUSTER_QUORUM_LOST = CLUSTER_QUORUM_VALUE.CLUSTER_QUORUM_LOST;

pub const CLUSTER_VALIDATE_PATH = extern struct {
    szPath: u16,
};

pub const CLUSTER_VALIDATE_DIRECTORY = extern struct {
    szPath: u16,
};

pub const CLUSTER_VALIDATE_NETNAME = extern struct {
    szNetworkName: u16,
};

pub const CLUSTER_VALIDATE_CSV_FILENAME = extern struct {
    szFileName: u16,
};

pub const CLUSTER_SET_PASSWORD_STATUS = extern struct {
    NodeId: u32,
    SetAttempted: u8,
    ReturnStatus: u32,
};

pub const CLUSTER_IP_ENTRY = extern struct {
    lpszIpAddress: [*:0]const u16,
    dwPrefixLength: u32,
};

pub const CREATE_CLUSTER_CONFIG = extern struct {
    dwVersion: u32,
    lpszClusterName: [*:0]const u16,
    cNodes: u32,
    ppszNodeNames: *PWSTR,
    cIpEntries: u32,
    pIpEntries: *CLUSTER_IP_ENTRY,
    fEmptyCluster: u8,
    managementPointType: CLUSTER_MGMT_POINT_TYPE,
    managementPointResType: CLUSTER_MGMT_POINT_RESTYPE,
};

pub const CREATE_CLUSTER_NAME_ACCOUNT = extern struct {
    dwVersion: u32,
    lpszClusterName: [*:0]const u16,
    dwFlags: u32,
    pszUserName: [*:0]const u16,
    pszPassword: [*:0]const u16,
    pszDomain: [*:0]const u16,
    managementPointType: CLUSTER_MGMT_POINT_TYPE,
    managementPointResType: CLUSTER_MGMT_POINT_RESTYPE,
    bUpgradeVCOs: u8,
};

pub const PCLUSAPI_GET_NODE_CLUSTER_STATE = fn(
    lpszNodeName: ?[*:0]const u16,
    pdwClusterState: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_OPEN_CLUSTER = fn(
    lpszClusterName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub const PCLUSAPI_OPEN_CLUSTER_EX = fn(
    lpszClusterName: ?[*:0]const u16,
    dwDesiredAccess: u32,
    lpdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub const PCLUSAPI_CLOSE_CLUSTER = fn(
    hCluster: *_HCLUSTER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSAPI_SetClusterName = fn(
    hCluster: *_HCLUSTER,
    lpszNewClusterName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_INFORMATION = fn(
    hCluster: *_HCLUSTER,
    lpszClusterName: [*:0]u16,
    lpcchClusterName: *u32,
    lpClusterInfo: ?*CLUSTERVERSIONINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_QUORUM_RESOURCE = fn(
    hCluster: *_HCLUSTER,
    lpszResourceName: [*:0]u16,
    lpcchResourceName: *u32,
    lpszDeviceName: [*:0]u16,
    lpcchDeviceName: *u32,
    lpdwMaxQuorumLogSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_SET_CLUSTER_QUORUM_RESOURCE = fn(
    hResource: *_HRESOURCE,
    lpszDeviceName: ?[*:0]const u16,
    dwMaxQuoLogSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_BACKUP_CLUSTER_DATABASE = fn(
    hCluster: *_HCLUSTER,
    lpszPathName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_RESTORE_CLUSTER_DATABASE = fn(
    lpszPathName: [*:0]const u16,
    bForce: BOOL,
    lpszQuorumDriveLetter: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_SET_CLUSTER_NETWORK_PRIORITY_ORDER = fn(
    hCluster: *_HCLUSTER,
    NetworkCount: u32,
    NetworkList: [*]*_HNETWORK,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_SET_CLUSTER_SERVICE_ACCOUNT_PASSWORD = fn(
    lpszClusterName: [*:0]const u16,
    lpszNewPassword: [*:0]const u16,
    dwFlags: u32,
    lpReturnStatusBuffer: ?[*]CLUSTER_SET_PASSWORD_STATUS,
    lpcbReturnStatusBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_CONTROL = fn(
    hCluster: *_HCLUSTER,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLUSTER_UPGRADE_PHASE = extern enum(i32) {
    ClusterUpgradePhaseInitialize = 1,
    ClusterUpgradePhaseValidatingUpgrade = 2,
    ClusterUpgradePhaseUpgradingComponents = 3,
    ClusterUpgradePhaseInstallingNewComponents = 4,
    ClusterUpgradePhaseUpgradeComplete = 5,
};
pub const ClusterUpgradePhaseInitialize = CLUSTER_UPGRADE_PHASE.ClusterUpgradePhaseInitialize;
pub const ClusterUpgradePhaseValidatingUpgrade = CLUSTER_UPGRADE_PHASE.ClusterUpgradePhaseValidatingUpgrade;
pub const ClusterUpgradePhaseUpgradingComponents = CLUSTER_UPGRADE_PHASE.ClusterUpgradePhaseUpgradingComponents;
pub const ClusterUpgradePhaseInstallingNewComponents = CLUSTER_UPGRADE_PHASE.ClusterUpgradePhaseInstallingNewComponents;
pub const ClusterUpgradePhaseUpgradeComplete = CLUSTER_UPGRADE_PHASE.ClusterUpgradePhaseUpgradeComplete;

pub const PCLUSTER_UPGRADE_PROGRESS_CALLBACK = fn(
    pvCallbackArg: *c_void,
    eUpgradePhase: CLUSTER_UPGRADE_PHASE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSAPI_CLUSTER_UPGRADE = fn(
    hCluster: *_HCLUSTER,
    perform: BOOL,
    pfnProgressCallback: ?PCLUSTER_UPGRADE_PROGRESS_CALLBACK,
    pvCallbackArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLUSTER_CHANGE = extern enum(i32) {
    NODE_STATE = 1,
    NODE_DELETED = 2,
    NODE_ADDED = 4,
    NODE_PROPERTY = 8,
    REGISTRY_NAME = 16,
    REGISTRY_ATTRIBUTES = 32,
    REGISTRY_VALUE = 64,
    REGISTRY_SUBTREE = 128,
    RESOURCE_STATE = 256,
    RESOURCE_DELETED = 512,
    RESOURCE_ADDED = 1024,
    RESOURCE_PROPERTY = 2048,
    GROUP_STATE = 4096,
    GROUP_DELETED = 8192,
    GROUP_ADDED = 16384,
    GROUP_PROPERTY = 32768,
    RESOURCE_TYPE_DELETED = 65536,
    RESOURCE_TYPE_ADDED = 131072,
    RESOURCE_TYPE_PROPERTY = 262144,
    CLUSTER_RECONNECT = 524288,
    NETWORK_STATE = 1048576,
    NETWORK_DELETED = 2097152,
    NETWORK_ADDED = 4194304,
    NETWORK_PROPERTY = 8388608,
    NETINTERFACE_STATE = 16777216,
    NETINTERFACE_DELETED = 33554432,
    NETINTERFACE_ADDED = 67108864,
    NETINTERFACE_PROPERTY = 134217728,
    QUORUM_STATE = 268435456,
    CLUSTER_STATE = 536870912,
    CLUSTER_PROPERTY = 1073741824,
    HANDLE_CLOSE = -2147483648,
    ALL = -1,
};
pub const CLUSTER_CHANGE_NODE_STATE = CLUSTER_CHANGE.NODE_STATE;
pub const CLUSTER_CHANGE_NODE_DELETED = CLUSTER_CHANGE.NODE_DELETED;
pub const CLUSTER_CHANGE_NODE_ADDED = CLUSTER_CHANGE.NODE_ADDED;
pub const CLUSTER_CHANGE_NODE_PROPERTY = CLUSTER_CHANGE.NODE_PROPERTY;
pub const CLUSTER_CHANGE_REGISTRY_NAME = CLUSTER_CHANGE.REGISTRY_NAME;
pub const CLUSTER_CHANGE_REGISTRY_ATTRIBUTES = CLUSTER_CHANGE.REGISTRY_ATTRIBUTES;
pub const CLUSTER_CHANGE_REGISTRY_VALUE = CLUSTER_CHANGE.REGISTRY_VALUE;
pub const CLUSTER_CHANGE_REGISTRY_SUBTREE = CLUSTER_CHANGE.REGISTRY_SUBTREE;
pub const CLUSTER_CHANGE_RESOURCE_STATE = CLUSTER_CHANGE.RESOURCE_STATE;
pub const CLUSTER_CHANGE_RESOURCE_DELETED = CLUSTER_CHANGE.RESOURCE_DELETED;
pub const CLUSTER_CHANGE_RESOURCE_ADDED = CLUSTER_CHANGE.RESOURCE_ADDED;
pub const CLUSTER_CHANGE_RESOURCE_PROPERTY = CLUSTER_CHANGE.RESOURCE_PROPERTY;
pub const CLUSTER_CHANGE_GROUP_STATE = CLUSTER_CHANGE.GROUP_STATE;
pub const CLUSTER_CHANGE_GROUP_DELETED = CLUSTER_CHANGE.GROUP_DELETED;
pub const CLUSTER_CHANGE_GROUP_ADDED = CLUSTER_CHANGE.GROUP_ADDED;
pub const CLUSTER_CHANGE_GROUP_PROPERTY = CLUSTER_CHANGE.GROUP_PROPERTY;
pub const CLUSTER_CHANGE_RESOURCE_TYPE_DELETED = CLUSTER_CHANGE.RESOURCE_TYPE_DELETED;
pub const CLUSTER_CHANGE_RESOURCE_TYPE_ADDED = CLUSTER_CHANGE.RESOURCE_TYPE_ADDED;
pub const CLUSTER_CHANGE_RESOURCE_TYPE_PROPERTY = CLUSTER_CHANGE.RESOURCE_TYPE_PROPERTY;
pub const CLUSTER_CHANGE_CLUSTER_RECONNECT = CLUSTER_CHANGE.CLUSTER_RECONNECT;
pub const CLUSTER_CHANGE_NETWORK_STATE = CLUSTER_CHANGE.NETWORK_STATE;
pub const CLUSTER_CHANGE_NETWORK_DELETED = CLUSTER_CHANGE.NETWORK_DELETED;
pub const CLUSTER_CHANGE_NETWORK_ADDED = CLUSTER_CHANGE.NETWORK_ADDED;
pub const CLUSTER_CHANGE_NETWORK_PROPERTY = CLUSTER_CHANGE.NETWORK_PROPERTY;
pub const CLUSTER_CHANGE_NETINTERFACE_STATE = CLUSTER_CHANGE.NETINTERFACE_STATE;
pub const CLUSTER_CHANGE_NETINTERFACE_DELETED = CLUSTER_CHANGE.NETINTERFACE_DELETED;
pub const CLUSTER_CHANGE_NETINTERFACE_ADDED = CLUSTER_CHANGE.NETINTERFACE_ADDED;
pub const CLUSTER_CHANGE_NETINTERFACE_PROPERTY = CLUSTER_CHANGE.NETINTERFACE_PROPERTY;
pub const CLUSTER_CHANGE_QUORUM_STATE = CLUSTER_CHANGE.QUORUM_STATE;
pub const CLUSTER_CHANGE_CLUSTER_STATE = CLUSTER_CHANGE.CLUSTER_STATE;
pub const CLUSTER_CHANGE_CLUSTER_PROPERTY = CLUSTER_CHANGE.CLUSTER_PROPERTY;
pub const CLUSTER_CHANGE_HANDLE_CLOSE = CLUSTER_CHANGE.HANDLE_CLOSE;
pub const CLUSTER_CHANGE_ALL = CLUSTER_CHANGE.ALL;

pub const CLUSTER_NOTIFICATIONS_VERSION = extern enum(i32) {
    CLUSTER_NOTIFICATIONS_V1 = 1,
    CLUSTER_NOTIFICATIONS_V2 = 2,
};
pub const CLUSTER_NOTIFICATIONS_V1 = CLUSTER_NOTIFICATIONS_VERSION.CLUSTER_NOTIFICATIONS_V1;
pub const CLUSTER_NOTIFICATIONS_V2 = CLUSTER_NOTIFICATIONS_VERSION.CLUSTER_NOTIFICATIONS_V2;

pub const CLUSTER_CHANGE_CLUSTER_V2 = extern enum(i32) {
    CLUSTER_CHANGE_CLUSTER_RECONNECT_V2 = 1,
    CLUSTER_CHANGE_CLUSTER_STATE_V2 = 2,
    CLUSTER_CHANGE_CLUSTER_GROUP_ADDED_V2 = 4,
    CLUSTER_CHANGE_CLUSTER_HANDLE_CLOSE_V2 = 8,
    CLUSTER_CHANGE_CLUSTER_NETWORK_ADDED_V2 = 16,
    CLUSTER_CHANGE_CLUSTER_NODE_ADDED_V2 = 32,
    CLUSTER_CHANGE_CLUSTER_RESOURCE_TYPE_ADDED_V2 = 64,
    CLUSTER_CHANGE_CLUSTER_COMMON_PROPERTY_V2 = 128,
    CLUSTER_CHANGE_CLUSTER_PRIVATE_PROPERTY_V2 = 256,
    CLUSTER_CHANGE_CLUSTER_LOST_NOTIFICATIONS_V2 = 512,
    CLUSTER_CHANGE_CLUSTER_RENAME_V2 = 1024,
    CLUSTER_CHANGE_CLUSTER_MEMBERSHIP_V2 = 2048,
    CLUSTER_CHANGE_CLUSTER_UPGRADED_V2 = 4096,
    CLUSTER_CHANGE_CLUSTER_ALL_V2 = 8191,
};
pub const CLUSTER_CHANGE_CLUSTER_RECONNECT_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_RECONNECT_V2;
pub const CLUSTER_CHANGE_CLUSTER_STATE_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_STATE_V2;
pub const CLUSTER_CHANGE_CLUSTER_GROUP_ADDED_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_GROUP_ADDED_V2;
pub const CLUSTER_CHANGE_CLUSTER_HANDLE_CLOSE_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_HANDLE_CLOSE_V2;
pub const CLUSTER_CHANGE_CLUSTER_NETWORK_ADDED_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_NETWORK_ADDED_V2;
pub const CLUSTER_CHANGE_CLUSTER_NODE_ADDED_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_NODE_ADDED_V2;
pub const CLUSTER_CHANGE_CLUSTER_RESOURCE_TYPE_ADDED_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_RESOURCE_TYPE_ADDED_V2;
pub const CLUSTER_CHANGE_CLUSTER_COMMON_PROPERTY_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_COMMON_PROPERTY_V2;
pub const CLUSTER_CHANGE_CLUSTER_PRIVATE_PROPERTY_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_PRIVATE_PROPERTY_V2;
pub const CLUSTER_CHANGE_CLUSTER_LOST_NOTIFICATIONS_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_LOST_NOTIFICATIONS_V2;
pub const CLUSTER_CHANGE_CLUSTER_RENAME_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_RENAME_V2;
pub const CLUSTER_CHANGE_CLUSTER_MEMBERSHIP_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_MEMBERSHIP_V2;
pub const CLUSTER_CHANGE_CLUSTER_UPGRADED_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_UPGRADED_V2;
pub const CLUSTER_CHANGE_CLUSTER_ALL_V2 = CLUSTER_CHANGE_CLUSTER_V2.CLUSTER_CHANGE_CLUSTER_ALL_V2;

pub const CLUSTER_CHANGE_GROUP_V2 = extern enum(i32) {
    CLUSTER_CHANGE_GROUP_DELETED_V2 = 1,
    CLUSTER_CHANGE_GROUP_COMMON_PROPERTY_V2 = 2,
    CLUSTER_CHANGE_GROUP_PRIVATE_PROPERTY_V2 = 4,
    CLUSTER_CHANGE_GROUP_STATE_V2 = 8,
    CLUSTER_CHANGE_GROUP_OWNER_NODE_V2 = 16,
    CLUSTER_CHANGE_GROUP_PREFERRED_OWNERS_V2 = 32,
    CLUSTER_CHANGE_GROUP_RESOURCE_ADDED_V2 = 64,
    CLUSTER_CHANGE_GROUP_RESOURCE_GAINED_V2 = 128,
    CLUSTER_CHANGE_GROUP_RESOURCE_LOST_V2 = 256,
    CLUSTER_CHANGE_GROUP_HANDLE_CLOSE_V2 = 512,
    CLUSTER_CHANGE_GROUP_ALL_V2 = 1023,
};
pub const CLUSTER_CHANGE_GROUP_DELETED_V2 = CLUSTER_CHANGE_GROUP_V2.CLUSTER_CHANGE_GROUP_DELETED_V2;
pub const CLUSTER_CHANGE_GROUP_COMMON_PROPERTY_V2 = CLUSTER_CHANGE_GROUP_V2.CLUSTER_CHANGE_GROUP_COMMON_PROPERTY_V2;
pub const CLUSTER_CHANGE_GROUP_PRIVATE_PROPERTY_V2 = CLUSTER_CHANGE_GROUP_V2.CLUSTER_CHANGE_GROUP_PRIVATE_PROPERTY_V2;
pub const CLUSTER_CHANGE_GROUP_STATE_V2 = CLUSTER_CHANGE_GROUP_V2.CLUSTER_CHANGE_GROUP_STATE_V2;
pub const CLUSTER_CHANGE_GROUP_OWNER_NODE_V2 = CLUSTER_CHANGE_GROUP_V2.CLUSTER_CHANGE_GROUP_OWNER_NODE_V2;
pub const CLUSTER_CHANGE_GROUP_PREFERRED_OWNERS_V2 = CLUSTER_CHANGE_GROUP_V2.CLUSTER_CHANGE_GROUP_PREFERRED_OWNERS_V2;
pub const CLUSTER_CHANGE_GROUP_RESOURCE_ADDED_V2 = CLUSTER_CHANGE_GROUP_V2.CLUSTER_CHANGE_GROUP_RESOURCE_ADDED_V2;
pub const CLUSTER_CHANGE_GROUP_RESOURCE_GAINED_V2 = CLUSTER_CHANGE_GROUP_V2.CLUSTER_CHANGE_GROUP_RESOURCE_GAINED_V2;
pub const CLUSTER_CHANGE_GROUP_RESOURCE_LOST_V2 = CLUSTER_CHANGE_GROUP_V2.CLUSTER_CHANGE_GROUP_RESOURCE_LOST_V2;
pub const CLUSTER_CHANGE_GROUP_HANDLE_CLOSE_V2 = CLUSTER_CHANGE_GROUP_V2.CLUSTER_CHANGE_GROUP_HANDLE_CLOSE_V2;
pub const CLUSTER_CHANGE_GROUP_ALL_V2 = CLUSTER_CHANGE_GROUP_V2.CLUSTER_CHANGE_GROUP_ALL_V2;

pub const CLUSTER_CHANGE_GROUPSET_V2 = extern enum(i32) {
    CLUSTER_CHANGE_GROUPSET_DELETED_v2 = 1,
    CLUSTER_CHANGE_GROUPSET_COMMON_PROPERTY_V2 = 2,
    CLUSTER_CHANGE_GROUPSET_PRIVATE_PROPERTY_V2 = 4,
    CLUSTER_CHANGE_GROUPSET_STATE_V2 = 8,
    CLUSTER_CHANGE_GROUPSET_GROUP_ADDED = 16,
    CLUSTER_CHANGE_GROUPSET_GROUP_REMOVED = 32,
    CLUSTER_CHANGE_GROUPSET_DEPENDENCIES_V2 = 64,
    CLUSTER_CHANGE_GROUPSET_DEPENDENTS_V2 = 128,
    CLUSTER_CHANGE_GROUPSET_HANDLE_CLOSE_v2 = 256,
    CLUSTER_CHANGE_GROUPSET_ALL_V2 = 511,
};
pub const CLUSTER_CHANGE_GROUPSET_DELETED_v2 = CLUSTER_CHANGE_GROUPSET_V2.CLUSTER_CHANGE_GROUPSET_DELETED_v2;
pub const CLUSTER_CHANGE_GROUPSET_COMMON_PROPERTY_V2 = CLUSTER_CHANGE_GROUPSET_V2.CLUSTER_CHANGE_GROUPSET_COMMON_PROPERTY_V2;
pub const CLUSTER_CHANGE_GROUPSET_PRIVATE_PROPERTY_V2 = CLUSTER_CHANGE_GROUPSET_V2.CLUSTER_CHANGE_GROUPSET_PRIVATE_PROPERTY_V2;
pub const CLUSTER_CHANGE_GROUPSET_STATE_V2 = CLUSTER_CHANGE_GROUPSET_V2.CLUSTER_CHANGE_GROUPSET_STATE_V2;
pub const CLUSTER_CHANGE_GROUPSET_GROUP_ADDED = CLUSTER_CHANGE_GROUPSET_V2.CLUSTER_CHANGE_GROUPSET_GROUP_ADDED;
pub const CLUSTER_CHANGE_GROUPSET_GROUP_REMOVED = CLUSTER_CHANGE_GROUPSET_V2.CLUSTER_CHANGE_GROUPSET_GROUP_REMOVED;
pub const CLUSTER_CHANGE_GROUPSET_DEPENDENCIES_V2 = CLUSTER_CHANGE_GROUPSET_V2.CLUSTER_CHANGE_GROUPSET_DEPENDENCIES_V2;
pub const CLUSTER_CHANGE_GROUPSET_DEPENDENTS_V2 = CLUSTER_CHANGE_GROUPSET_V2.CLUSTER_CHANGE_GROUPSET_DEPENDENTS_V2;
pub const CLUSTER_CHANGE_GROUPSET_HANDLE_CLOSE_v2 = CLUSTER_CHANGE_GROUPSET_V2.CLUSTER_CHANGE_GROUPSET_HANDLE_CLOSE_v2;
pub const CLUSTER_CHANGE_GROUPSET_ALL_V2 = CLUSTER_CHANGE_GROUPSET_V2.CLUSTER_CHANGE_GROUPSET_ALL_V2;

pub const CLUSTER_CHANGE_RESOURCE_V2 = extern enum(i32) {
    CLUSTER_CHANGE_RESOURCE_COMMON_PROPERTY_V2 = 1,
    CLUSTER_CHANGE_RESOURCE_PRIVATE_PROPERTY_V2 = 2,
    CLUSTER_CHANGE_RESOURCE_STATE_V2 = 4,
    CLUSTER_CHANGE_RESOURCE_OWNER_GROUP_V2 = 8,
    CLUSTER_CHANGE_RESOURCE_DEPENDENCIES_V2 = 16,
    CLUSTER_CHANGE_RESOURCE_DEPENDENTS_V2 = 32,
    CLUSTER_CHANGE_RESOURCE_POSSIBLE_OWNERS_V2 = 64,
    CLUSTER_CHANGE_RESOURCE_DELETED_V2 = 128,
    CLUSTER_CHANGE_RESOURCE_DLL_UPGRADED_V2 = 256,
    CLUSTER_CHANGE_RESOURCE_HANDLE_CLOSE_V2 = 512,
    CLUSTER_CHANGE_RESOURCE_TERMINAL_STATE_V2 = 1024,
    CLUSTER_CHANGE_RESOURCE_ALL_V2 = 2047,
};
pub const CLUSTER_CHANGE_RESOURCE_COMMON_PROPERTY_V2 = CLUSTER_CHANGE_RESOURCE_V2.CLUSTER_CHANGE_RESOURCE_COMMON_PROPERTY_V2;
pub const CLUSTER_CHANGE_RESOURCE_PRIVATE_PROPERTY_V2 = CLUSTER_CHANGE_RESOURCE_V2.CLUSTER_CHANGE_RESOURCE_PRIVATE_PROPERTY_V2;
pub const CLUSTER_CHANGE_RESOURCE_STATE_V2 = CLUSTER_CHANGE_RESOURCE_V2.CLUSTER_CHANGE_RESOURCE_STATE_V2;
pub const CLUSTER_CHANGE_RESOURCE_OWNER_GROUP_V2 = CLUSTER_CHANGE_RESOURCE_V2.CLUSTER_CHANGE_RESOURCE_OWNER_GROUP_V2;
pub const CLUSTER_CHANGE_RESOURCE_DEPENDENCIES_V2 = CLUSTER_CHANGE_RESOURCE_V2.CLUSTER_CHANGE_RESOURCE_DEPENDENCIES_V2;
pub const CLUSTER_CHANGE_RESOURCE_DEPENDENTS_V2 = CLUSTER_CHANGE_RESOURCE_V2.CLUSTER_CHANGE_RESOURCE_DEPENDENTS_V2;
pub const CLUSTER_CHANGE_RESOURCE_POSSIBLE_OWNERS_V2 = CLUSTER_CHANGE_RESOURCE_V2.CLUSTER_CHANGE_RESOURCE_POSSIBLE_OWNERS_V2;
pub const CLUSTER_CHANGE_RESOURCE_DELETED_V2 = CLUSTER_CHANGE_RESOURCE_V2.CLUSTER_CHANGE_RESOURCE_DELETED_V2;
pub const CLUSTER_CHANGE_RESOURCE_DLL_UPGRADED_V2 = CLUSTER_CHANGE_RESOURCE_V2.CLUSTER_CHANGE_RESOURCE_DLL_UPGRADED_V2;
pub const CLUSTER_CHANGE_RESOURCE_HANDLE_CLOSE_V2 = CLUSTER_CHANGE_RESOURCE_V2.CLUSTER_CHANGE_RESOURCE_HANDLE_CLOSE_V2;
pub const CLUSTER_CHANGE_RESOURCE_TERMINAL_STATE_V2 = CLUSTER_CHANGE_RESOURCE_V2.CLUSTER_CHANGE_RESOURCE_TERMINAL_STATE_V2;
pub const CLUSTER_CHANGE_RESOURCE_ALL_V2 = CLUSTER_CHANGE_RESOURCE_V2.CLUSTER_CHANGE_RESOURCE_ALL_V2;

pub const CLUSTER_CHANGE_RESOURCE_TYPE_V2 = extern enum(i32) {
    CLUSTER_CHANGE_RESOURCE_TYPE_DELETED_V2 = 1,
    CLUSTER_CHANGE_RESOURCE_TYPE_COMMON_PROPERTY_V2 = 2,
    CLUSTER_CHANGE_RESOURCE_TYPE_PRIVATE_PROPERTY_V2 = 4,
    CLUSTER_CHANGE_RESOURCE_TYPE_POSSIBLE_OWNERS_V2 = 8,
    CLUSTER_CHANGE_RESOURCE_TYPE_DLL_UPGRADED_V2 = 16,
    CLUSTER_RESOURCE_TYPE_SPECIFIC_V2 = 32,
    CLUSTER_CHANGE_RESOURCE_TYPE_ALL_V2 = 63,
};
pub const CLUSTER_CHANGE_RESOURCE_TYPE_DELETED_V2 = CLUSTER_CHANGE_RESOURCE_TYPE_V2.CLUSTER_CHANGE_RESOURCE_TYPE_DELETED_V2;
pub const CLUSTER_CHANGE_RESOURCE_TYPE_COMMON_PROPERTY_V2 = CLUSTER_CHANGE_RESOURCE_TYPE_V2.CLUSTER_CHANGE_RESOURCE_TYPE_COMMON_PROPERTY_V2;
pub const CLUSTER_CHANGE_RESOURCE_TYPE_PRIVATE_PROPERTY_V2 = CLUSTER_CHANGE_RESOURCE_TYPE_V2.CLUSTER_CHANGE_RESOURCE_TYPE_PRIVATE_PROPERTY_V2;
pub const CLUSTER_CHANGE_RESOURCE_TYPE_POSSIBLE_OWNERS_V2 = CLUSTER_CHANGE_RESOURCE_TYPE_V2.CLUSTER_CHANGE_RESOURCE_TYPE_POSSIBLE_OWNERS_V2;
pub const CLUSTER_CHANGE_RESOURCE_TYPE_DLL_UPGRADED_V2 = CLUSTER_CHANGE_RESOURCE_TYPE_V2.CLUSTER_CHANGE_RESOURCE_TYPE_DLL_UPGRADED_V2;
pub const CLUSTER_RESOURCE_TYPE_SPECIFIC_V2 = CLUSTER_CHANGE_RESOURCE_TYPE_V2.CLUSTER_RESOURCE_TYPE_SPECIFIC_V2;
pub const CLUSTER_CHANGE_RESOURCE_TYPE_ALL_V2 = CLUSTER_CHANGE_RESOURCE_TYPE_V2.CLUSTER_CHANGE_RESOURCE_TYPE_ALL_V2;

pub const CLUSTER_CHANGE_NETINTERFACE_V2 = extern enum(i32) {
    CLUSTER_CHANGE_NETINTERFACE_DELETED_V2 = 1,
    CLUSTER_CHANGE_NETINTERFACE_COMMON_PROPERTY_V2 = 2,
    CLUSTER_CHANGE_NETINTERFACE_PRIVATE_PROPERTY_V2 = 4,
    CLUSTER_CHANGE_NETINTERFACE_STATE_V2 = 8,
    CLUSTER_CHANGE_NETINTERFACE_HANDLE_CLOSE_V2 = 16,
    CLUSTER_CHANGE_NETINTERFACE_ALL_V2 = 31,
};
pub const CLUSTER_CHANGE_NETINTERFACE_DELETED_V2 = CLUSTER_CHANGE_NETINTERFACE_V2.CLUSTER_CHANGE_NETINTERFACE_DELETED_V2;
pub const CLUSTER_CHANGE_NETINTERFACE_COMMON_PROPERTY_V2 = CLUSTER_CHANGE_NETINTERFACE_V2.CLUSTER_CHANGE_NETINTERFACE_COMMON_PROPERTY_V2;
pub const CLUSTER_CHANGE_NETINTERFACE_PRIVATE_PROPERTY_V2 = CLUSTER_CHANGE_NETINTERFACE_V2.CLUSTER_CHANGE_NETINTERFACE_PRIVATE_PROPERTY_V2;
pub const CLUSTER_CHANGE_NETINTERFACE_STATE_V2 = CLUSTER_CHANGE_NETINTERFACE_V2.CLUSTER_CHANGE_NETINTERFACE_STATE_V2;
pub const CLUSTER_CHANGE_NETINTERFACE_HANDLE_CLOSE_V2 = CLUSTER_CHANGE_NETINTERFACE_V2.CLUSTER_CHANGE_NETINTERFACE_HANDLE_CLOSE_V2;
pub const CLUSTER_CHANGE_NETINTERFACE_ALL_V2 = CLUSTER_CHANGE_NETINTERFACE_V2.CLUSTER_CHANGE_NETINTERFACE_ALL_V2;

pub const CLUSTER_CHANGE_NETWORK_V2 = extern enum(i32) {
    CLUSTER_CHANGE_NETWORK_DELETED_V2 = 1,
    CLUSTER_CHANGE_NETWORK_COMMON_PROPERTY_V2 = 2,
    CLUSTER_CHANGE_NETWORK_PRIVATE_PROPERTY_V2 = 4,
    CLUSTER_CHANGE_NETWORK_STATE_V2 = 8,
    CLUSTER_CHANGE_NETWORK_HANDLE_CLOSE_V2 = 16,
    CLUSTER_CHANGE_NETWORK_ALL_V2 = 31,
};
pub const CLUSTER_CHANGE_NETWORK_DELETED_V2 = CLUSTER_CHANGE_NETWORK_V2.CLUSTER_CHANGE_NETWORK_DELETED_V2;
pub const CLUSTER_CHANGE_NETWORK_COMMON_PROPERTY_V2 = CLUSTER_CHANGE_NETWORK_V2.CLUSTER_CHANGE_NETWORK_COMMON_PROPERTY_V2;
pub const CLUSTER_CHANGE_NETWORK_PRIVATE_PROPERTY_V2 = CLUSTER_CHANGE_NETWORK_V2.CLUSTER_CHANGE_NETWORK_PRIVATE_PROPERTY_V2;
pub const CLUSTER_CHANGE_NETWORK_STATE_V2 = CLUSTER_CHANGE_NETWORK_V2.CLUSTER_CHANGE_NETWORK_STATE_V2;
pub const CLUSTER_CHANGE_NETWORK_HANDLE_CLOSE_V2 = CLUSTER_CHANGE_NETWORK_V2.CLUSTER_CHANGE_NETWORK_HANDLE_CLOSE_V2;
pub const CLUSTER_CHANGE_NETWORK_ALL_V2 = CLUSTER_CHANGE_NETWORK_V2.CLUSTER_CHANGE_NETWORK_ALL_V2;

pub const CLUSTER_CHANGE_NODE_V2 = extern enum(i32) {
    CLUSTER_CHANGE_NODE_NETINTERFACE_ADDED_V2 = 1,
    CLUSTER_CHANGE_NODE_DELETED_V2 = 2,
    CLUSTER_CHANGE_NODE_COMMON_PROPERTY_V2 = 4,
    CLUSTER_CHANGE_NODE_PRIVATE_PROPERTY_V2 = 8,
    CLUSTER_CHANGE_NODE_STATE_V2 = 16,
    CLUSTER_CHANGE_NODE_GROUP_GAINED_V2 = 32,
    CLUSTER_CHANGE_NODE_GROUP_LOST_V2 = 64,
    CLUSTER_CHANGE_NODE_HANDLE_CLOSE_V2 = 128,
    CLUSTER_CHANGE_NODE_ALL_V2 = 255,
};
pub const CLUSTER_CHANGE_NODE_NETINTERFACE_ADDED_V2 = CLUSTER_CHANGE_NODE_V2.CLUSTER_CHANGE_NODE_NETINTERFACE_ADDED_V2;
pub const CLUSTER_CHANGE_NODE_DELETED_V2 = CLUSTER_CHANGE_NODE_V2.CLUSTER_CHANGE_NODE_DELETED_V2;
pub const CLUSTER_CHANGE_NODE_COMMON_PROPERTY_V2 = CLUSTER_CHANGE_NODE_V2.CLUSTER_CHANGE_NODE_COMMON_PROPERTY_V2;
pub const CLUSTER_CHANGE_NODE_PRIVATE_PROPERTY_V2 = CLUSTER_CHANGE_NODE_V2.CLUSTER_CHANGE_NODE_PRIVATE_PROPERTY_V2;
pub const CLUSTER_CHANGE_NODE_STATE_V2 = CLUSTER_CHANGE_NODE_V2.CLUSTER_CHANGE_NODE_STATE_V2;
pub const CLUSTER_CHANGE_NODE_GROUP_GAINED_V2 = CLUSTER_CHANGE_NODE_V2.CLUSTER_CHANGE_NODE_GROUP_GAINED_V2;
pub const CLUSTER_CHANGE_NODE_GROUP_LOST_V2 = CLUSTER_CHANGE_NODE_V2.CLUSTER_CHANGE_NODE_GROUP_LOST_V2;
pub const CLUSTER_CHANGE_NODE_HANDLE_CLOSE_V2 = CLUSTER_CHANGE_NODE_V2.CLUSTER_CHANGE_NODE_HANDLE_CLOSE_V2;
pub const CLUSTER_CHANGE_NODE_ALL_V2 = CLUSTER_CHANGE_NODE_V2.CLUSTER_CHANGE_NODE_ALL_V2;

pub const CLUSTER_CHANGE_REGISTRY_V2 = extern enum(i32) {
    CLUSTER_CHANGE_REGISTRY_ATTRIBUTES_V2 = 1,
    CLUSTER_CHANGE_REGISTRY_NAME_V2 = 2,
    CLUSTER_CHANGE_REGISTRY_SUBTREE_V2 = 4,
    CLUSTER_CHANGE_REGISTRY_VALUE_V2 = 8,
    CLUSTER_CHANGE_REGISTRY_HANDLE_CLOSE_V2 = 16,
    CLUSTER_CHANGE_REGISTRY_ALL_V2 = 31,
};
pub const CLUSTER_CHANGE_REGISTRY_ATTRIBUTES_V2 = CLUSTER_CHANGE_REGISTRY_V2.CLUSTER_CHANGE_REGISTRY_ATTRIBUTES_V2;
pub const CLUSTER_CHANGE_REGISTRY_NAME_V2 = CLUSTER_CHANGE_REGISTRY_V2.CLUSTER_CHANGE_REGISTRY_NAME_V2;
pub const CLUSTER_CHANGE_REGISTRY_SUBTREE_V2 = CLUSTER_CHANGE_REGISTRY_V2.CLUSTER_CHANGE_REGISTRY_SUBTREE_V2;
pub const CLUSTER_CHANGE_REGISTRY_VALUE_V2 = CLUSTER_CHANGE_REGISTRY_V2.CLUSTER_CHANGE_REGISTRY_VALUE_V2;
pub const CLUSTER_CHANGE_REGISTRY_HANDLE_CLOSE_V2 = CLUSTER_CHANGE_REGISTRY_V2.CLUSTER_CHANGE_REGISTRY_HANDLE_CLOSE_V2;
pub const CLUSTER_CHANGE_REGISTRY_ALL_V2 = CLUSTER_CHANGE_REGISTRY_V2.CLUSTER_CHANGE_REGISTRY_ALL_V2;

pub const CLUSTER_CHANGE_QUORUM_V2 = extern enum(i32) {
    CLUSTER_CHANGE_QUORUM_STATE_V2 = 1,
    CLUSTER_CHANGE_QUORUM_ALL_V2 = 1,
};
pub const CLUSTER_CHANGE_QUORUM_STATE_V2 = CLUSTER_CHANGE_QUORUM_V2.CLUSTER_CHANGE_QUORUM_STATE_V2;
pub const CLUSTER_CHANGE_QUORUM_ALL_V2 = CLUSTER_CHANGE_QUORUM_V2.CLUSTER_CHANGE_QUORUM_ALL_V2;

pub const CLUSTER_CHANGE_SHARED_VOLUME_V2 = extern enum(i32) {
    CLUSTER_CHANGE_SHARED_VOLUME_STATE_V2 = 1,
    CLUSTER_CHANGE_SHARED_VOLUME_ADDED_V2 = 2,
    CLUSTER_CHANGE_SHARED_VOLUME_REMOVED_V2 = 4,
    CLUSTER_CHANGE_SHARED_VOLUME_ALL_V2 = 7,
};
pub const CLUSTER_CHANGE_SHARED_VOLUME_STATE_V2 = CLUSTER_CHANGE_SHARED_VOLUME_V2.CLUSTER_CHANGE_SHARED_VOLUME_STATE_V2;
pub const CLUSTER_CHANGE_SHARED_VOLUME_ADDED_V2 = CLUSTER_CHANGE_SHARED_VOLUME_V2.CLUSTER_CHANGE_SHARED_VOLUME_ADDED_V2;
pub const CLUSTER_CHANGE_SHARED_VOLUME_REMOVED_V2 = CLUSTER_CHANGE_SHARED_VOLUME_V2.CLUSTER_CHANGE_SHARED_VOLUME_REMOVED_V2;
pub const CLUSTER_CHANGE_SHARED_VOLUME_ALL_V2 = CLUSTER_CHANGE_SHARED_VOLUME_V2.CLUSTER_CHANGE_SHARED_VOLUME_ALL_V2;

pub const CLUSTER_CHANGE_SPACEPORT_V2 = extern enum(i32) {
    CLUSTER_CHANGE_SPACEPORT_CUSTOM_PNP_V2 = 1,
};
pub const CLUSTER_CHANGE_SPACEPORT_CUSTOM_PNP_V2 = CLUSTER_CHANGE_SPACEPORT_V2.CLUSTER_CHANGE_SPACEPORT_CUSTOM_PNP_V2;

pub const CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2 = extern enum(i32) {
    CLUSTER_CHANGE_UPGRADE_NODE_PREPARE = 1,
    CLUSTER_CHANGE_UPGRADE_NODE_COMMIT = 2,
    CLUSTER_CHANGE_UPGRADE_NODE_POSTCOMMIT = 4,
    CLUSTER_CHANGE_UPGRADE_ALL = 7,
};
pub const CLUSTER_CHANGE_UPGRADE_NODE_PREPARE = CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2.CLUSTER_CHANGE_UPGRADE_NODE_PREPARE;
pub const CLUSTER_CHANGE_UPGRADE_NODE_COMMIT = CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2.CLUSTER_CHANGE_UPGRADE_NODE_COMMIT;
pub const CLUSTER_CHANGE_UPGRADE_NODE_POSTCOMMIT = CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2.CLUSTER_CHANGE_UPGRADE_NODE_POSTCOMMIT;
pub const CLUSTER_CHANGE_UPGRADE_ALL = CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2.CLUSTER_CHANGE_UPGRADE_ALL;

pub const CLUSTER_OBJECT_TYPE = extern enum(i32) {
    NONE = 0,
    CLUSTER = 1,
    GROUP = 2,
    RESOURCE = 3,
    RESOURCE_TYPE = 4,
    NETWORK_INTERFACE = 5,
    NETWORK = 6,
    NODE = 7,
    REGISTRY = 8,
    QUORUM = 9,
    SHARED_VOLUME = 10,
    GROUPSET = 13,
    AFFINITYRULE = 16,
};
pub const CLUSTER_OBJECT_TYPE_NONE = CLUSTER_OBJECT_TYPE.NONE;
pub const CLUSTER_OBJECT_TYPE_CLUSTER = CLUSTER_OBJECT_TYPE.CLUSTER;
pub const CLUSTER_OBJECT_TYPE_GROUP = CLUSTER_OBJECT_TYPE.GROUP;
pub const CLUSTER_OBJECT_TYPE_RESOURCE = CLUSTER_OBJECT_TYPE.RESOURCE;
pub const CLUSTER_OBJECT_TYPE_RESOURCE_TYPE = CLUSTER_OBJECT_TYPE.RESOURCE_TYPE;
pub const CLUSTER_OBJECT_TYPE_NETWORK_INTERFACE = CLUSTER_OBJECT_TYPE.NETWORK_INTERFACE;
pub const CLUSTER_OBJECT_TYPE_NETWORK = CLUSTER_OBJECT_TYPE.NETWORK;
pub const CLUSTER_OBJECT_TYPE_NODE = CLUSTER_OBJECT_TYPE.NODE;
pub const CLUSTER_OBJECT_TYPE_REGISTRY = CLUSTER_OBJECT_TYPE.REGISTRY;
pub const CLUSTER_OBJECT_TYPE_QUORUM = CLUSTER_OBJECT_TYPE.QUORUM;
pub const CLUSTER_OBJECT_TYPE_SHARED_VOLUME = CLUSTER_OBJECT_TYPE.SHARED_VOLUME;
pub const CLUSTER_OBJECT_TYPE_GROUPSET = CLUSTER_OBJECT_TYPE.GROUPSET;
pub const CLUSTER_OBJECT_TYPE_AFFINITYRULE = CLUSTER_OBJECT_TYPE.AFFINITYRULE;

pub const CLUSTERSET_OBJECT_TYPE = extern enum(i32) {
    NONE = 0,
    MEMBER = 1,
    WORKLOAD = 2,
    DATABASE = 3,
};
pub const CLUSTERSET_OBJECT_TYPE_NONE = CLUSTERSET_OBJECT_TYPE.NONE;
pub const CLUSTERSET_OBJECT_TYPE_MEMBER = CLUSTERSET_OBJECT_TYPE.MEMBER;
pub const CLUSTERSET_OBJECT_TYPE_WORKLOAD = CLUSTERSET_OBJECT_TYPE.WORKLOAD;
pub const CLUSTERSET_OBJECT_TYPE_DATABASE = CLUSTERSET_OBJECT_TYPE.DATABASE;

pub const NOTIFY_FILTER_AND_TYPE = extern struct {
    dwObjectType: u32,
    FilterFlags: i64,
};

pub const CLUSTER_MEMBERSHIP_INFO = extern struct {
    HasQuorum: BOOL,
    UpnodesSize: u32,
    Upnodes: [1]u8,
};

pub const PCLUSAPI_CREATE_CLUSTER_NOTIFY_PORT_V2 = fn(
    hChange: *_HCHANGE,
    hCluster: *_HCLUSTER,
    Filters: *NOTIFY_FILTER_AND_TYPE,
    dwFilterCount: u32,
    dwNotifyKey: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HCHANGE;

pub const PCLUSAPI_REGISTER_CLUSTER_NOTIFY_V2 = fn(
    hChange: *_HCHANGE,
    Filter: NOTIFY_FILTER_AND_TYPE,
    hObject: HANDLE,
    dwNotifyKey: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_NOTIFY_EVENT_HANDLE_V2 = fn(
    hChange: *_HCHANGE,
    lphTargetEvent: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_NOTIFY_V2 = fn(
    hChange: *_HCHANGE,
    lpdwNotifyKey: *?*c_void,
    pFilterAndType: ?*NOTIFY_FILTER_AND_TYPE,
    buffer: ?*u8,
    lpcchBufferSize: ?*u32,
    lpszObjectId: ?PWSTR,
    lpcchObjectId: ?*u32,
    lpszParentId: ?PWSTR,
    lpcchParentId: ?*u32,
    lpszName: ?PWSTR,
    lpcchName: ?*u32,
    lpszType: ?PWSTR,
    lpcchType: ?*u32,
    dwMilliseconds: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CREATE_CLUSTER_NOTIFY_PORT = fn(
    hChange: *_HCHANGE,
    hCluster: *_HCLUSTER,
    dwFilter: u32,
    dwNotifyKey: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HCHANGE;

pub const PCLUSAPI_REGISTER_CLUSTER_NOTIFY = fn(
    hChange: *_HCHANGE,
    dwFilterType: u32,
    hObject: HANDLE,
    dwNotifyKey: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_NOTIFY = fn(
    hChange: *_HCHANGE,
    lpdwNotifyKey: *?*c_void,
    lpdwFilterType: *u32,
    lpszName: ?[*:0]u16,
    lpcchName: *u32,
    dwMilliseconds: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLOSE_CLUSTER_NOTIFY_PORT = fn(
    hChange: *_HCHANGE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CLUSTER_ENUM = extern enum(i32) {
    NODE = 1,
    RESTYPE = 2,
    RESOURCE = 4,
    GROUP = 8,
    NETWORK = 16,
    NETINTERFACE = 32,
    SHARED_VOLUME_GROUP = 536870912,
    SHARED_VOLUME_RESOURCE = 1073741824,
    INTERNAL_NETWORK = -2147483648,
    ALL = 63,
};
pub const CLUSTER_ENUM_NODE = CLUSTER_ENUM.NODE;
pub const CLUSTER_ENUM_RESTYPE = CLUSTER_ENUM.RESTYPE;
pub const CLUSTER_ENUM_RESOURCE = CLUSTER_ENUM.RESOURCE;
pub const CLUSTER_ENUM_GROUP = CLUSTER_ENUM.GROUP;
pub const CLUSTER_ENUM_NETWORK = CLUSTER_ENUM.NETWORK;
pub const CLUSTER_ENUM_NETINTERFACE = CLUSTER_ENUM.NETINTERFACE;
pub const CLUSTER_ENUM_SHARED_VOLUME_GROUP = CLUSTER_ENUM.SHARED_VOLUME_GROUP;
pub const CLUSTER_ENUM_SHARED_VOLUME_RESOURCE = CLUSTER_ENUM.SHARED_VOLUME_RESOURCE;
pub const CLUSTER_ENUM_INTERNAL_NETWORK = CLUSTER_ENUM.INTERNAL_NETWORK;
pub const CLUSTER_ENUM_ALL = CLUSTER_ENUM.ALL;

pub const PCLUSAPI_CLUSTER_OPEN_ENUM = fn(
    hCluster: *_HCLUSTER,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSENUM;

pub const PCLUSAPI_CLUSTER_GET_ENUM_COUNT = fn(
    hEnum: *_HCLUSENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_ENUM = fn(
    hEnum: *_HCLUSENUM,
    dwIndex: u32,
    lpdwType: *u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_CLOSE_ENUM = fn(
    hEnum: *_HCLUSENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_OPEN_ENUM_EX = fn(
    hCluster: *_HCLUSTER,
    dwType: u32,
    pOptions: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSENUMEX;

pub const PCLUSAPI_CLUSTER_GET_ENUM_COUNT_EX = fn(
    hClusterEnum: *_HCLUSENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_ENUM_EX = fn(
    hClusterEnum: *_HCLUSENUMEX,
    dwIndex: u32,
    pItem: *CLUSTER_ENUM_ITEM,
    cbItem: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_CLOSE_ENUM_EX = fn(
    hClusterEnum: *_HCLUSENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CREATE_CLUSTER_GROUP_GROUPSET = fn(
    hCluster: *_HCLUSTER,
    lpszGroupSetName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HGROUPSET;

pub const PCLUSAPI_OPEN_CLUSTER_GROUP_GROUPSET = fn(
    hCluster: *_HCLUSTER,
    lpszGroupSetName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HGROUPSET;

pub const PCLUSAPI_CLOSE_CLUSTER_GROUP_GROUPSET = fn(
    hGroupSet: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSAPI_DELETE_CLUSTER_GROUP_GROUPSET = fn(
    hGroupSet: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_ADD_GROUP_TO_GROUP_GROUPSET = fn(
    hGroupSet: *_HGROUPSET,
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_REMOVE_GROUP_FROM_GROUP_GROUPSET = fn(
    hGroupSet: *_HGROUPSET,
    hGroupName: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_GROUP_GROUPSET_CONTROL = fn(
    hGroupSet: *_HGROUPSET,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    cbInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    cbOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_ADD_CLUSTER_GROUP_DEPENDENCY = fn(
    hDependentGroup: *_HGROUP,
    hProviderGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_SET_GROUP_DEPENDENCY_EXPRESSION = fn(
    hGroupSet: *_HGROUP,
    lpszDependencyExpression: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_REMOVE_CLUSTER_GROUP_DEPENDENCY = fn(
    hGroup: *_HGROUP,
    hDependsOn: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_ADD_CLUSTER_GROUP_GROUPSET_DEPENDENCY = fn(
    hDependentGroupSet: *_HGROUPSET,
    hProviderGroupSet: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_SET_CLUSTER_GROUP_GROUPSET_DEPENDENCY_EXPRESSION = fn(
    hGroupSet: *_HGROUPSET,
    lpszDependencyExpression: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_REMOVE_CLUSTER_GROUP_GROUPSET_DEPENDENCY = fn(
    hGroupSet: *_HGROUPSET,
    hDependsOn: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_ADD_CLUSTER_GROUP_TO_GROUP_GROUPSET_DEPENDENCY = fn(
    hDependentGroup: *_HGROUP,
    hProviderGroupSet: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_REMOVE_CLUSTER_GROUP_TO_GROUP_GROUPSET_DEPENDENCY = fn(
    hGroup: *_HGROUP,
    hDependsOn: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_FROM_GROUP_GROUPSET = fn(
    hGroupSet: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub const PCLUSAPI_ADD_CROSS_CLUSTER_GROUPSET_DEPENDENCY = fn(
    hDependentGroupSet: *_HGROUPSET,
    lpRemoteClusterName: [*:0]const u16,
    lpRemoteGroupSetName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_REMOVE_CROSS_CLUSTER_GROUPSET_DEPENDENCY = fn(
    hDependentGroupSet: *_HGROUPSET,
    lpRemoteClusterName: [*:0]const u16,
    lpRemoteGroupSetName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLUSTER_AVAILABILITY_SET_CONFIG = extern struct {
    dwVersion: u32,
    dwUpdateDomains: u32,
    dwFaultDomains: u32,
    bReserveSpareNode: BOOL,
};

pub const PCLUSAPI_CREATE_CLUSTER_AVAILABILITY_SET = fn(
    hCluster: *_HCLUSTER,
    lpAvailabilitySetName: [*:0]const u16,
    pAvailabilitySetConfig: *CLUSTER_AVAILABILITY_SET_CONFIG,
) callconv(@import("std").os.windows.WINAPI) *_HGROUPSET;

pub const PCLUSAPI_CLUSTER_CREATE_AFFINITY_RULE = fn(
    hCluster: *_HCLUSTER,
    ruleName: [*:0]const u16,
    ruleType: CLUS_AFFINITY_RULE_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_REMOVE_AFFINITY_RULE = fn(
    hCluster: *_HCLUSTER,
    ruleName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_ADD_GROUP_TO_AFFINITY_RULE = fn(
    hCluster: *_HCLUSTER,
    ruleName: [*:0]const u16,
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_REMOVE_GROUP_FROM_AFFINITY_RULE = fn(
    hCluster: *_HCLUSTER,
    ruleName: [*:0]const u16,
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_AFFINITY_RULE_CONTROL = fn(
    hCluster: *_HCLUSTER,
    affinityRuleName: [*:0]const u16,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    cbInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    cbOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLUSTER_NODE_ENUM = extern enum(i32) {
    NETINTERFACES = 1,
    GROUPS = 2,
    PREFERRED_GROUPS = 4,
    ALL = 3,
};
pub const CLUSTER_NODE_ENUM_NETINTERFACES = CLUSTER_NODE_ENUM.NETINTERFACES;
pub const CLUSTER_NODE_ENUM_GROUPS = CLUSTER_NODE_ENUM.GROUPS;
pub const CLUSTER_NODE_ENUM_PREFERRED_GROUPS = CLUSTER_NODE_ENUM.PREFERRED_GROUPS;
pub const CLUSTER_NODE_ENUM_ALL = CLUSTER_NODE_ENUM.ALL;

pub const CLUSTER_NODE_STATE = extern enum(i32) {
    ClusterNodeStateUnknown = -1,
    ClusterNodeUp = 0,
    ClusterNodeDown = 1,
    ClusterNodePaused = 2,
    ClusterNodeJoining = 3,
};
pub const ClusterNodeStateUnknown = CLUSTER_NODE_STATE.ClusterNodeStateUnknown;
pub const ClusterNodeUp = CLUSTER_NODE_STATE.ClusterNodeUp;
pub const ClusterNodeDown = CLUSTER_NODE_STATE.ClusterNodeDown;
pub const ClusterNodePaused = CLUSTER_NODE_STATE.ClusterNodePaused;
pub const ClusterNodeJoining = CLUSTER_NODE_STATE.ClusterNodeJoining;

pub const CLUSTER_STORAGENODE_STATE = extern enum(i32) {
    ClusterStorageNodeStateUnknown = 0,
    ClusterStorageNodeUp = 1,
    ClusterStorageNodeDown = 2,
    ClusterStorageNodePaused = 3,
    ClusterStorageNodeStarting = 4,
    ClusterStorageNodeStopping = 5,
};
pub const ClusterStorageNodeStateUnknown = CLUSTER_STORAGENODE_STATE.ClusterStorageNodeStateUnknown;
pub const ClusterStorageNodeUp = CLUSTER_STORAGENODE_STATE.ClusterStorageNodeUp;
pub const ClusterStorageNodeDown = CLUSTER_STORAGENODE_STATE.ClusterStorageNodeDown;
pub const ClusterStorageNodePaused = CLUSTER_STORAGENODE_STATE.ClusterStorageNodePaused;
pub const ClusterStorageNodeStarting = CLUSTER_STORAGENODE_STATE.ClusterStorageNodeStarting;
pub const ClusterStorageNodeStopping = CLUSTER_STORAGENODE_STATE.ClusterStorageNodeStopping;

pub const CLUSTER_NODE_DRAIN_STATUS = extern enum(i32) {
    NodeDrainStatusNotInitiated = 0,
    NodeDrainStatusInProgress = 1,
    NodeDrainStatusCompleted = 2,
    NodeDrainStatusFailed = 3,
    ClusterNodeDrainStatusCount = 4,
};
pub const NodeDrainStatusNotInitiated = CLUSTER_NODE_DRAIN_STATUS.NodeDrainStatusNotInitiated;
pub const NodeDrainStatusInProgress = CLUSTER_NODE_DRAIN_STATUS.NodeDrainStatusInProgress;
pub const NodeDrainStatusCompleted = CLUSTER_NODE_DRAIN_STATUS.NodeDrainStatusCompleted;
pub const NodeDrainStatusFailed = CLUSTER_NODE_DRAIN_STATUS.NodeDrainStatusFailed;
pub const ClusterNodeDrainStatusCount = CLUSTER_NODE_DRAIN_STATUS.ClusterNodeDrainStatusCount;

pub const CLUSTER_NODE_STATUS = extern enum(i32) {
    NodeStatusNormal = 0,
    NodeStatusIsolated = 1,
    NodeStatusQuarantined = 2,
    NodeStatusDrainInProgress = 4,
    NodeStatusDrainCompleted = 8,
    NodeStatusDrainFailed = 16,
    NodeStatusAvoidPlacement = 32,
    NodeStatusMax = 51,
};
pub const NodeStatusNormal = CLUSTER_NODE_STATUS.NodeStatusNormal;
pub const NodeStatusIsolated = CLUSTER_NODE_STATUS.NodeStatusIsolated;
pub const NodeStatusQuarantined = CLUSTER_NODE_STATUS.NodeStatusQuarantined;
pub const NodeStatusDrainInProgress = CLUSTER_NODE_STATUS.NodeStatusDrainInProgress;
pub const NodeStatusDrainCompleted = CLUSTER_NODE_STATUS.NodeStatusDrainCompleted;
pub const NodeStatusDrainFailed = CLUSTER_NODE_STATUS.NodeStatusDrainFailed;
pub const NodeStatusAvoidPlacement = CLUSTER_NODE_STATUS.NodeStatusAvoidPlacement;
pub const NodeStatusMax = CLUSTER_NODE_STATUS.NodeStatusMax;

pub const PCLUSAPI_OPEN_CLUSTER_NODE = fn(
    hCluster: *_HCLUSTER,
    lpszNodeName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HNODE;

pub const PCLUSAPI_OPEN_CLUSTER_NODE_EX = fn(
    hCluster: *_HCLUSTER,
    lpszNodeName: ?[*:0]const u16,
    dwDesiredAccess: u32,
    lpdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *_HNODE;

pub const PCLUSAPI_OPEN_NODE_BY_ID = fn(
    hCluster: *_HCLUSTER,
    nodeId: u32,
) callconv(@import("std").os.windows.WINAPI) *_HNODE;

pub const PCLUSAPI_CLOSE_CLUSTER_NODE = fn(
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSAPI_GET_CLUSTER_NODE_STATE = fn(
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) CLUSTER_NODE_STATE;

pub const PCLUSAPI_GET_CLUSTER_NODE_ID = fn(
    hNode: ?*_HNODE,
    lpszNodeId: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_FROM_NODE = fn(
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub const PCLUSAPI_PAUSE_CLUSTER_NODE = fn(
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_RESUME_CLUSTER_NODE = fn(
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_EVICT_CLUSTER_NODE = fn(
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_NODE_OPEN_ENUM = fn(
    hNode: *_HNODE,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) *_HNODEENUM;

pub const PCLUSAPI_CLUSTER_NODE_OPEN_ENUM_EX = fn(
    hNode: *_HNODE,
    dwType: u32,
    pOptions: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HNODEENUMEX;

pub const PCLUSAPI_CLUSTER_NODE_GET_ENUM_COUNT_EX = fn(
    hNodeEnum: *_HNODEENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_NODE_ENUM_EX = fn(
    hNodeEnum: *_HNODEENUMEX,
    dwIndex: u32,
    pItem: *CLUSTER_ENUM_ITEM,
    cbItem: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_NODE_CLOSE_ENUM_EX = fn(
    hNodeEnum: *_HNODEENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_NODE_GET_ENUM_COUNT = fn(
    hNodeEnum: *_HNODEENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_NODE_CLOSE_ENUM = fn(
    hNodeEnum: *_HNODEENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_NODE_ENUM = fn(
    hNodeEnum: *_HNODEENUM,
    dwIndex: u32,
    lpdwType: *u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_EVICT_CLUSTER_NODE_EX = fn(
    hNode: *_HNODE,
    dwTimeOut: u32,
    phrCleanupStatus: *HRESULT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_RESOURCE_TYPE_KEY = fn(
    hCluster: *_HCLUSTER,
    lpszTypeName: [*:0]const u16,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub const CLUSTER_GROUP_ENUM = extern enum(i32) {
    CONTAINS = 1,
    NODES = 2,
    ALL = 3,
};
pub const CLUSTER_GROUP_ENUM_CONTAINS = CLUSTER_GROUP_ENUM.CONTAINS;
pub const CLUSTER_GROUP_ENUM_NODES = CLUSTER_GROUP_ENUM.NODES;
pub const CLUSTER_GROUP_ENUM_ALL = CLUSTER_GROUP_ENUM.ALL;

pub const CLUSTER_GROUP_STATE = extern enum(i32) {
    ClusterGroupStateUnknown = -1,
    ClusterGroupOnline = 0,
    ClusterGroupOffline = 1,
    ClusterGroupFailed = 2,
    ClusterGroupPartialOnline = 3,
    ClusterGroupPending = 4,
};
pub const ClusterGroupStateUnknown = CLUSTER_GROUP_STATE.ClusterGroupStateUnknown;
pub const ClusterGroupOnline = CLUSTER_GROUP_STATE.ClusterGroupOnline;
pub const ClusterGroupOffline = CLUSTER_GROUP_STATE.ClusterGroupOffline;
pub const ClusterGroupFailed = CLUSTER_GROUP_STATE.ClusterGroupFailed;
pub const ClusterGroupPartialOnline = CLUSTER_GROUP_STATE.ClusterGroupPartialOnline;
pub const ClusterGroupPending = CLUSTER_GROUP_STATE.ClusterGroupPending;

pub const CLUSTER_GROUP_PRIORITY = extern enum(i32) {
    PriorityDisabled = 0,
    PriorityLow = 1000,
    PriorityMedium = 2000,
    PriorityHigh = 3000,
};
pub const PriorityDisabled = CLUSTER_GROUP_PRIORITY.PriorityDisabled;
pub const PriorityLow = CLUSTER_GROUP_PRIORITY.PriorityLow;
pub const PriorityMedium = CLUSTER_GROUP_PRIORITY.PriorityMedium;
pub const PriorityHigh = CLUSTER_GROUP_PRIORITY.PriorityHigh;

pub const CLUSTER_GROUP_AUTOFAILBACK_TYPE = extern enum(i32) {
    ClusterGroupPreventFailback = 0,
    ClusterGroupAllowFailback = 1,
    ClusterGroupFailbackTypeCount = 2,
};
pub const ClusterGroupPreventFailback = CLUSTER_GROUP_AUTOFAILBACK_TYPE.ClusterGroupPreventFailback;
pub const ClusterGroupAllowFailback = CLUSTER_GROUP_AUTOFAILBACK_TYPE.ClusterGroupAllowFailback;
pub const ClusterGroupFailbackTypeCount = CLUSTER_GROUP_AUTOFAILBACK_TYPE.ClusterGroupFailbackTypeCount;

pub const CLUSTER_GROUP_ENUM_ITEM = extern struct {
    dwVersion: u32,
    cbId: u32,
    lpszId: PWSTR,
    cbName: u32,
    lpszName: PWSTR,
    state: CLUSTER_GROUP_STATE,
    cbOwnerNode: u32,
    lpszOwnerNode: PWSTR,
    dwFlags: u32,
    cbProperties: u32,
    pProperties: *c_void,
    cbRoProperties: u32,
    pRoProperties: *c_void,
};

pub const CLUSTER_RESOURCE_ENUM_ITEM = extern struct {
    dwVersion: u32,
    cbId: u32,
    lpszId: PWSTR,
    cbName: u32,
    lpszName: PWSTR,
    cbOwnerGroupName: u32,
    lpszOwnerGroupName: PWSTR,
    cbOwnerGroupId: u32,
    lpszOwnerGroupId: PWSTR,
    cbProperties: u32,
    pProperties: *c_void,
    cbRoProperties: u32,
    pRoProperties: *c_void,
};

pub const PCLUSAPI_CREATE_CLUSTER_GROUP = fn(
    hCluster: *_HCLUSTER,
    lpszGroupName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HGROUP;

pub const PCLUSAPI_OPEN_CLUSTER_GROUP = fn(
    hCluster: *_HCLUSTER,
    lpszGroupName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HGROUP;

pub const PCLUSAPI_OPEN_CLUSTER_GROUP_EX = fn(
    hCluster: *_HCLUSTER,
    lpszGroupName: ?[*:0]const u16,
    dwDesiredAccess: u32,
    lpdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *_HGROUP;

pub const PCLUSAPI_PAUSE_CLUSTER_NODE_EX = fn(
    hNode: *_HNODE,
    bDrainNode: BOOL,
    dwPauseFlags: u32,
    hNodeDrainTarget: ?*_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLUSTER_NODE_RESUME_FAILBACK_TYPE = extern enum(i32) {
    DoNotFailbackGroups = 0,
    FailbackGroupsImmediately = 1,
    FailbackGroupsPerPolicy = 2,
    ClusterNodeResumeFailbackTypeCount = 3,
};
pub const DoNotFailbackGroups = CLUSTER_NODE_RESUME_FAILBACK_TYPE.DoNotFailbackGroups;
pub const FailbackGroupsImmediately = CLUSTER_NODE_RESUME_FAILBACK_TYPE.FailbackGroupsImmediately;
pub const FailbackGroupsPerPolicy = CLUSTER_NODE_RESUME_FAILBACK_TYPE.FailbackGroupsPerPolicy;
pub const ClusterNodeResumeFailbackTypeCount = CLUSTER_NODE_RESUME_FAILBACK_TYPE.ClusterNodeResumeFailbackTypeCount;

pub const PCLUSAPI_RESUME_CLUSTER_NODE_EX = fn(
    hNode: *_HNODE,
    eResumeFailbackType: CLUSTER_NODE_RESUME_FAILBACK_TYPE,
    dwResumeFlagsReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CREATE_CLUSTER_GROUPEX = fn(
    hCluster: *_HCLUSTER,
    lpszGroupName: [*:0]const u16,
    pGroupInfo: ?*CLUSTER_CREATE_GROUP_INFO,
) callconv(@import("std").os.windows.WINAPI) *_HGROUP;

pub const PCLUSAPI_CLUSTER_GROUP_OPEN_ENUM_EX = fn(
    hCluster: *_HCLUSTER,
    lpszProperties: ?[*:0]const u16,
    cbProperties: u32,
    lpszRoProperties: ?[*:0]const u16,
    cbRoProperties: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *_HGROUPENUMEX;

pub const PCLUSAPI_CLUSTER_GROUP_GET_ENUM_COUNT_EX = fn(
    hGroupEnumEx: *_HGROUPENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_GROUP_ENUM_EX = fn(
    hGroupEnumEx: *_HGROUPENUMEX,
    dwIndex: u32,
    pItem: *CLUSTER_GROUP_ENUM_ITEM,
    cbItem: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_GROUP_CLOSE_ENUM_EX = fn(
    hGroupEnumEx: *_HGROUPENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_RESOURCE_OPEN_ENUM_EX = fn(
    hCluster: *_HCLUSTER,
    lpszProperties: ?[*:0]const u16,
    cbProperties: u32,
    lpszRoProperties: ?[*:0]const u16,
    cbRoProperties: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESENUMEX;

pub const PCLUSAPI_CLUSTER_RESOURCE_GET_ENUM_COUNT_EX = fn(
    hResourceEnumEx: *_HRESENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_RESOURCE_ENUM_EX = fn(
    hResourceEnumEx: *_HRESENUMEX,
    dwIndex: u32,
    pItem: *CLUSTER_RESOURCE_ENUM_ITEM,
    cbItem: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_RESOURCE_CLOSE_ENUM_EX = fn(
    hResourceEnumEx: *_HRESENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_RESTART_CLUSTER_RESOURCE = fn(
    hResource: *_HRESOURCE,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLOSE_CLUSTER_GROUP = fn(
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSAPI_GET_CLUSTER_FROM_GROUP = fn(
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub const PCLUSAPI_GET_CLUSTER_GROUP_STATE = fn(
    hGroup: *_HGROUP,
    lpszNodeName: ?[*:0]u16,
    lpcchNodeName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) CLUSTER_GROUP_STATE;

pub const PCLUSAPI_SET_CLUSTER_GROUP_NAME = fn(
    hGroup: *_HGROUP,
    lpszGroupName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_SET_CLUSTER_GROUP_NODE_LIST = fn(
    hGroup: *_HGROUP,
    NodeCount: u32,
    NodeList: ?[*]?*_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_ONLINE_CLUSTER_GROUP = fn(
    hGroup: *_HGROUP,
    hDestinationNode: ?*_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_MOVE_CLUSTER_GROUP = fn(
    hGroup: *_HGROUP,
    hDestinationNode: ?*_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_OFFLINE_CLUSTER_GROUP = fn(
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_DELETE_CLUSTER_GROUP = fn(
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_DESTROY_CLUSTER_GROUP = fn(
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_GROUP_OPEN_ENUM = fn(
    hGroup: *_HGROUP,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) *_HGROUPENUM;

pub const PCLUSAPI_CLUSTER_GROUP_GET_ENUM_COUNT = fn(
    hGroupEnum: *_HGROUPENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_GROUP_ENUM = fn(
    hGroupEnum: *_HGROUPENUM,
    dwIndex: u32,
    lpdwType: *u32,
    lpszResourceName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_GROUP_CLOSE_ENUM = fn(
    hGroupEnum: *_HGROUPENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLUSTER_RESOURCE_STATE = extern enum(i32) {
    ClusterResourceStateUnknown = -1,
    ClusterResourceInherited = 0,
    ClusterResourceInitializing = 1,
    ClusterResourceOnline = 2,
    ClusterResourceOffline = 3,
    ClusterResourceFailed = 4,
    ClusterResourcePending = 128,
    ClusterResourceOnlinePending = 129,
    ClusterResourceOfflinePending = 130,
};
pub const ClusterResourceStateUnknown = CLUSTER_RESOURCE_STATE.ClusterResourceStateUnknown;
pub const ClusterResourceInherited = CLUSTER_RESOURCE_STATE.ClusterResourceInherited;
pub const ClusterResourceInitializing = CLUSTER_RESOURCE_STATE.ClusterResourceInitializing;
pub const ClusterResourceOnline = CLUSTER_RESOURCE_STATE.ClusterResourceOnline;
pub const ClusterResourceOffline = CLUSTER_RESOURCE_STATE.ClusterResourceOffline;
pub const ClusterResourceFailed = CLUSTER_RESOURCE_STATE.ClusterResourceFailed;
pub const ClusterResourcePending = CLUSTER_RESOURCE_STATE.ClusterResourcePending;
pub const ClusterResourceOnlinePending = CLUSTER_RESOURCE_STATE.ClusterResourceOnlinePending;
pub const ClusterResourceOfflinePending = CLUSTER_RESOURCE_STATE.ClusterResourceOfflinePending;

pub const CLUSTER_RESOURCE_RESTART_ACTION = extern enum(i32) {
    ClusterResourceDontRestart = 0,
    ClusterResourceRestartNoNotify = 1,
    ClusterResourceRestartNotify = 2,
    ClusterResourceRestartActionCount = 3,
};
pub const ClusterResourceDontRestart = CLUSTER_RESOURCE_RESTART_ACTION.ClusterResourceDontRestart;
pub const ClusterResourceRestartNoNotify = CLUSTER_RESOURCE_RESTART_ACTION.ClusterResourceRestartNoNotify;
pub const ClusterResourceRestartNotify = CLUSTER_RESOURCE_RESTART_ACTION.ClusterResourceRestartNotify;
pub const ClusterResourceRestartActionCount = CLUSTER_RESOURCE_RESTART_ACTION.ClusterResourceRestartActionCount;

pub const CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION = extern enum(i32) {
    ClusterResourceEmbeddedFailureActionNone = 0,
    ClusterResourceEmbeddedFailureActionLogOnly = 1,
    ClusterResourceEmbeddedFailureActionRecover = 2,
};
pub const ClusterResourceEmbeddedFailureActionNone = CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION.ClusterResourceEmbeddedFailureActionNone;
pub const ClusterResourceEmbeddedFailureActionLogOnly = CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION.ClusterResourceEmbeddedFailureActionLogOnly;
pub const ClusterResourceEmbeddedFailureActionRecover = CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION.ClusterResourceEmbeddedFailureActionRecover;

pub const CLUSTER_RESOURCE_CREATE_FLAGS = extern enum(i32) {
    CLUSTER_RESOURCE_DEFAULT_MONITOR = 0,
    CLUSTER_RESOURCE_SEPARATE_MONITOR = 1,
    CLUSTER_RESOURCE_VALID_FLAGS = 1,
};
pub const CLUSTER_RESOURCE_DEFAULT_MONITOR = CLUSTER_RESOURCE_CREATE_FLAGS.CLUSTER_RESOURCE_DEFAULT_MONITOR;
pub const CLUSTER_RESOURCE_SEPARATE_MONITOR = CLUSTER_RESOURCE_CREATE_FLAGS.CLUSTER_RESOURCE_SEPARATE_MONITOR;
pub const CLUSTER_RESOURCE_VALID_FLAGS = CLUSTER_RESOURCE_CREATE_FLAGS.CLUSTER_RESOURCE_VALID_FLAGS;

pub const CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE = extern enum(i32) {
    ClusterSharedVolumeSnapshotStateUnknown = 0,
    ClusterSharedVolumePrepareForHWSnapshot = 1,
    ClusterSharedVolumeHWSnapshotCompleted = 2,
    ClusterSharedVolumePrepareForFreeze = 3,
};
pub const ClusterSharedVolumeSnapshotStateUnknown = CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE.ClusterSharedVolumeSnapshotStateUnknown;
pub const ClusterSharedVolumePrepareForHWSnapshot = CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE.ClusterSharedVolumePrepareForHWSnapshot;
pub const ClusterSharedVolumeHWSnapshotCompleted = CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE.ClusterSharedVolumeHWSnapshotCompleted;
pub const ClusterSharedVolumePrepareForFreeze = CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE.ClusterSharedVolumePrepareForFreeze;

pub const PCLUSAPI_CREATE_CLUSTER_RESOURCE = fn(
    hGroup: *_HGROUP,
    lpszResourceName: [*:0]const u16,
    lpszResourceType: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub const PCLUSAPI_OPEN_CLUSTER_RESOURCE = fn(
    hCluster: *_HCLUSTER,
    lpszResourceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub const PCLUSAPI_OPEN_CLUSTER_RESOURCE_EX = fn(
    hCluster: *_HCLUSTER,
    lpszResourceName: ?[*:0]const u16,
    dwDesiredAccess: u32,
    lpdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub const PCLUSAPI_CLOSE_CLUSTER_RESOURCE = fn(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSAPI_GET_CLUSTER_FROM_RESOURCE = fn(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub const PCLUSAPI_DELETE_CLUSTER_RESOURCE = fn(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_RESOURCE_STATE = fn(
    hResource: *_HRESOURCE,
    lpszNodeName: ?[*:0]u16,
    lpcchNodeName: ?*u32,
    lpszGroupName: ?[*:0]u16,
    lpcchGroupName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) CLUSTER_RESOURCE_STATE;

pub const PCLUSAPI_SET_CLUSTER_RESOURCE_NAME = fn(
    hResource: *_HRESOURCE,
    lpszResourceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_FAIL_CLUSTER_RESOURCE = fn(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_ONLINE_CLUSTER_RESOURCE = fn(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_OFFLINE_CLUSTER_RESOURCE = fn(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CHANGE_CLUSTER_RESOURCE_GROUP = fn(
    hResource: *_HRESOURCE,
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CHANGE_CLUSTER_RESOURCE_GROUP_EX = fn(
    hResource: *_HRESOURCE,
    hGroup: *_HGROUP,
    Flags: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_ADD_CLUSTER_RESOURCE_NODE = fn(
    hResource: *_HRESOURCE,
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_REMOVE_CLUSTER_RESOURCE_NODE = fn(
    hResource: *_HRESOURCE,
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_ADD_CLUSTER_RESOURCE_DEPENDENCY = fn(
    hResource: *_HRESOURCE,
    hDependsOn: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_REMOVE_CLUSTER_RESOURCE_DEPENDENCY = fn(
    hResource: *_HRESOURCE,
    hDependsOn: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_SET_CLUSTER_RESOURCE_DEPENDENCY_EXPRESSION = fn(
    hResource: *_HRESOURCE,
    lpszDependencyExpression: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_RESOURCE_DEPENDENCY_EXPRESSION = fn(
    hResource: *_HRESOURCE,
    lpszDependencyExpression: ?[*:0]u16,
    lpcchDependencyExpression: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_ADD_RESOURCE_TO_CLUSTER_SHARED_VOLUMES = fn(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_REMOVE_RESOURCE_FROM_CLUSTER_SHARED_VOLUMES = fn(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_IS_FILE_ON_CLUSTER_SHARED_VOLUME = fn(
    lpszPathName: [*:0]const u16,
    pbFileIsOnSharedVolume: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_SHARED_VOLUME_SET_SNAPSHOT_STATE = fn(
    guidSnapshotSet: Guid,
    lpszVolumeName: [*:0]const u16,
    state: CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CAN_RESOURCE_BE_DEPENDENT = fn(
    hResource: *_HRESOURCE,
    hResourceDependent: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSAPI_CLUSTER_RESOURCE_CONTROL = fn(
    hResource: *_HRESOURCE,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    cbInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    cbOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_RESOURCE_TYPE_CONTROL = fn(
    hCluster: *_HCLUSTER,
    lpszResourceTypeName: [*:0]const u16,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_GROUP_CONTROL = fn(
    hGroup: *_HGROUP,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_NODE_CONTROL = fn(
    hNode: *_HNODE,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_RESOURCE_NETWORK_NAME = fn(
    hResource: *_HRESOURCE,
    lpBuffer: [*:0]u16,
    nSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const CLUSTER_PROPERTY_TYPE = extern enum(i32) {
    CLUSPROP_TYPE_UNKNOWN = -1,
    CLUSPROP_TYPE_ENDMARK = 0,
    CLUSPROP_TYPE_LIST_VALUE = 1,
    CLUSPROP_TYPE_RESCLASS = 2,
    CLUSPROP_TYPE_RESERVED1 = 3,
    CLUSPROP_TYPE_NAME = 4,
    CLUSPROP_TYPE_SIGNATURE = 5,
    CLUSPROP_TYPE_SCSI_ADDRESS = 6,
    CLUSPROP_TYPE_DISK_NUMBER = 7,
    CLUSPROP_TYPE_PARTITION_INFO = 8,
    CLUSPROP_TYPE_FTSET_INFO = 9,
    CLUSPROP_TYPE_DISK_SERIALNUMBER = 10,
    CLUSPROP_TYPE_DISK_GUID = 11,
    CLUSPROP_TYPE_DISK_SIZE = 12,
    CLUSPROP_TYPE_PARTITION_INFO_EX = 13,
    CLUSPROP_TYPE_PARTITION_INFO_EX2 = 14,
    CLUSPROP_TYPE_STORAGE_DEVICE_ID_DESCRIPTOR = 15,
    CLUSPROP_TYPE_USER = 32768,
};
pub const CLUSPROP_TYPE_UNKNOWN = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_UNKNOWN;
pub const CLUSPROP_TYPE_ENDMARK = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_ENDMARK;
pub const CLUSPROP_TYPE_LIST_VALUE = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_LIST_VALUE;
pub const CLUSPROP_TYPE_RESCLASS = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_RESCLASS;
pub const CLUSPROP_TYPE_RESERVED1 = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_RESERVED1;
pub const CLUSPROP_TYPE_NAME = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_NAME;
pub const CLUSPROP_TYPE_SIGNATURE = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_SIGNATURE;
pub const CLUSPROP_TYPE_SCSI_ADDRESS = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_SCSI_ADDRESS;
pub const CLUSPROP_TYPE_DISK_NUMBER = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_DISK_NUMBER;
pub const CLUSPROP_TYPE_PARTITION_INFO = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_PARTITION_INFO;
pub const CLUSPROP_TYPE_FTSET_INFO = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_FTSET_INFO;
pub const CLUSPROP_TYPE_DISK_SERIALNUMBER = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_DISK_SERIALNUMBER;
pub const CLUSPROP_TYPE_DISK_GUID = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_DISK_GUID;
pub const CLUSPROP_TYPE_DISK_SIZE = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_DISK_SIZE;
pub const CLUSPROP_TYPE_PARTITION_INFO_EX = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_PARTITION_INFO_EX;
pub const CLUSPROP_TYPE_PARTITION_INFO_EX2 = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_PARTITION_INFO_EX2;
pub const CLUSPROP_TYPE_STORAGE_DEVICE_ID_DESCRIPTOR = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_STORAGE_DEVICE_ID_DESCRIPTOR;
pub const CLUSPROP_TYPE_USER = CLUSTER_PROPERTY_TYPE.CLUSPROP_TYPE_USER;

pub const CLUSTER_PROPERTY_FORMAT = extern enum(i32) {
    CLUSPROP_FORMAT_UNKNOWN = 0,
    CLUSPROP_FORMAT_BINARY = 1,
    CLUSPROP_FORMAT_DWORD = 2,
    CLUSPROP_FORMAT_SZ = 3,
    CLUSPROP_FORMAT_EXPAND_SZ = 4,
    CLUSPROP_FORMAT_MULTI_SZ = 5,
    CLUSPROP_FORMAT_ULARGE_INTEGER = 6,
    CLUSPROP_FORMAT_LONG = 7,
    CLUSPROP_FORMAT_EXPANDED_SZ = 8,
    CLUSPROP_FORMAT_SECURITY_DESCRIPTOR = 9,
    CLUSPROP_FORMAT_LARGE_INTEGER = 10,
    CLUSPROP_FORMAT_WORD = 11,
    CLUSPROP_FORMAT_FILETIME = 12,
    CLUSPROP_FORMAT_VALUE_LIST = 13,
    CLUSPROP_FORMAT_PROPERTY_LIST = 14,
    CLUSPROP_FORMAT_USER = 32768,
};
pub const CLUSPROP_FORMAT_UNKNOWN = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_UNKNOWN;
pub const CLUSPROP_FORMAT_BINARY = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_BINARY;
pub const CLUSPROP_FORMAT_DWORD = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_DWORD;
pub const CLUSPROP_FORMAT_SZ = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_SZ;
pub const CLUSPROP_FORMAT_EXPAND_SZ = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_EXPAND_SZ;
pub const CLUSPROP_FORMAT_MULTI_SZ = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_MULTI_SZ;
pub const CLUSPROP_FORMAT_ULARGE_INTEGER = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_ULARGE_INTEGER;
pub const CLUSPROP_FORMAT_LONG = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_LONG;
pub const CLUSPROP_FORMAT_EXPANDED_SZ = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_EXPANDED_SZ;
pub const CLUSPROP_FORMAT_SECURITY_DESCRIPTOR = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_SECURITY_DESCRIPTOR;
pub const CLUSPROP_FORMAT_LARGE_INTEGER = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_LARGE_INTEGER;
pub const CLUSPROP_FORMAT_WORD = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_WORD;
pub const CLUSPROP_FORMAT_FILETIME = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_FILETIME;
pub const CLUSPROP_FORMAT_VALUE_LIST = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_VALUE_LIST;
pub const CLUSPROP_FORMAT_PROPERTY_LIST = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_PROPERTY_LIST;
pub const CLUSPROP_FORMAT_USER = CLUSTER_PROPERTY_FORMAT.CLUSPROP_FORMAT_USER;

pub const CLUSTER_PROPERTY_SYNTAX = extern enum(u32) {
    CLUSPROP_SYNTAX_ENDMARK = 0,
    CLUSPROP_SYNTAX_NAME = 262147,
    CLUSPROP_SYNTAX_RESCLASS = 131074,
    CLUSPROP_SYNTAX_LIST_VALUE_SZ = 65539,
    CLUSPROP_SYNTAX_LIST_VALUE_EXPAND_SZ = 65540,
    CLUSPROP_SYNTAX_LIST_VALUE_DWORD = 65538,
    CLUSPROP_SYNTAX_LIST_VALUE_BINARY = 65537,
    CLUSPROP_SYNTAX_LIST_VALUE_MULTI_SZ = 65541,
    CLUSPROP_SYNTAX_LIST_VALUE_LONG = 65543,
    CLUSPROP_SYNTAX_LIST_VALUE_EXPANDED_SZ = 65544,
    CLUSPROP_SYNTAX_LIST_VALUE_SECURITY_DESCRIPTOR = 65545,
    CLUSPROP_SYNTAX_LIST_VALUE_LARGE_INTEGER = 65546,
    CLUSPROP_SYNTAX_LIST_VALUE_ULARGE_INTEGER = 65542,
    CLUSPROP_SYNTAX_LIST_VALUE_WORD = 65547,
    CLUSPROP_SYNTAX_LIST_VALUE_PROPERTY_LIST = 65550,
    CLUSPROP_SYNTAX_LIST_VALUE_FILETIME = 65548,
    CLUSPROP_SYNTAX_DISK_SIGNATURE = 327682,
    CLUSPROP_SYNTAX_SCSI_ADDRESS = 393218,
    CLUSPROP_SYNTAX_DISK_NUMBER = 458754,
    CLUSPROP_SYNTAX_PARTITION_INFO = 524289,
    CLUSPROP_SYNTAX_FTSET_INFO = 589825,
    CLUSPROP_SYNTAX_DISK_SERIALNUMBER = 655363,
    CLUSPROP_SYNTAX_DISK_GUID = 720899,
    CLUSPROP_SYNTAX_DISK_SIZE = 786438,
    CLUSPROP_SYNTAX_PARTITION_INFO_EX = 851969,
    CLUSPROP_SYNTAX_PARTITION_INFO_EX2 = 917505,
    CLUSPROP_SYNTAX_STORAGE_DEVICE_ID_DESCRIPTOR = 983041,
};
pub const CLUSPROP_SYNTAX_ENDMARK = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_ENDMARK;
pub const CLUSPROP_SYNTAX_NAME = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_NAME;
pub const CLUSPROP_SYNTAX_RESCLASS = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_RESCLASS;
pub const CLUSPROP_SYNTAX_LIST_VALUE_SZ = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_SZ;
pub const CLUSPROP_SYNTAX_LIST_VALUE_EXPAND_SZ = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_EXPAND_SZ;
pub const CLUSPROP_SYNTAX_LIST_VALUE_DWORD = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_DWORD;
pub const CLUSPROP_SYNTAX_LIST_VALUE_BINARY = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_BINARY;
pub const CLUSPROP_SYNTAX_LIST_VALUE_MULTI_SZ = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_MULTI_SZ;
pub const CLUSPROP_SYNTAX_LIST_VALUE_LONG = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_LONG;
pub const CLUSPROP_SYNTAX_LIST_VALUE_EXPANDED_SZ = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_EXPANDED_SZ;
pub const CLUSPROP_SYNTAX_LIST_VALUE_SECURITY_DESCRIPTOR = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_SECURITY_DESCRIPTOR;
pub const CLUSPROP_SYNTAX_LIST_VALUE_LARGE_INTEGER = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_LARGE_INTEGER;
pub const CLUSPROP_SYNTAX_LIST_VALUE_ULARGE_INTEGER = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_ULARGE_INTEGER;
pub const CLUSPROP_SYNTAX_LIST_VALUE_WORD = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_WORD;
pub const CLUSPROP_SYNTAX_LIST_VALUE_PROPERTY_LIST = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_PROPERTY_LIST;
pub const CLUSPROP_SYNTAX_LIST_VALUE_FILETIME = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_LIST_VALUE_FILETIME;
pub const CLUSPROP_SYNTAX_DISK_SIGNATURE = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_DISK_SIGNATURE;
pub const CLUSPROP_SYNTAX_SCSI_ADDRESS = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_SCSI_ADDRESS;
pub const CLUSPROP_SYNTAX_DISK_NUMBER = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_DISK_NUMBER;
pub const CLUSPROP_SYNTAX_PARTITION_INFO = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_PARTITION_INFO;
pub const CLUSPROP_SYNTAX_FTSET_INFO = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_FTSET_INFO;
pub const CLUSPROP_SYNTAX_DISK_SERIALNUMBER = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_DISK_SERIALNUMBER;
pub const CLUSPROP_SYNTAX_DISK_GUID = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_DISK_GUID;
pub const CLUSPROP_SYNTAX_DISK_SIZE = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_DISK_SIZE;
pub const CLUSPROP_SYNTAX_PARTITION_INFO_EX = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_PARTITION_INFO_EX;
pub const CLUSPROP_SYNTAX_PARTITION_INFO_EX2 = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_PARTITION_INFO_EX2;
pub const CLUSPROP_SYNTAX_STORAGE_DEVICE_ID_DESCRIPTOR = CLUSTER_PROPERTY_SYNTAX.CLUSPROP_SYNTAX_STORAGE_DEVICE_ID_DESCRIPTOR;

pub const GROUP_FAILURE_INFO = extern struct {
    dwFailoverAttemptsRemaining: u32,
    dwFailoverPeriodRemaining: u32,
};

pub const GROUP_FAILURE_INFO_BUFFER = extern struct {
    dwVersion: u32,
    Info: GROUP_FAILURE_INFO,
};

pub const RESOURCE_FAILURE_INFO = extern struct {
    dwRestartAttemptsRemaining: u32,
    dwRestartPeriodRemaining: u32,
};

pub const RESOURCE_FAILURE_INFO_BUFFER = extern struct {
    dwVersion: u32,
    Info: RESOURCE_FAILURE_INFO,
};

pub const RESOURCE_TERMINAL_FAILURE_INFO_BUFFER = extern struct {
    isTerminalFailure: BOOL,
    restartPeriodRemaining: u32,
};

pub const CLUSTER_CONTROL_OBJECT = extern enum(i32) {
    CLUS_OBJECT_INVALID = 0,
    CLUS_OBJECT_RESOURCE = 1,
    CLUS_OBJECT_RESOURCE_TYPE = 2,
    CLUS_OBJECT_GROUP = 3,
    CLUS_OBJECT_NODE = 4,
    CLUS_OBJECT_NETWORK = 5,
    CLUS_OBJECT_NETINTERFACE = 6,
    CLUS_OBJECT_CLUSTER = 7,
    CLUS_OBJECT_GROUPSET = 8,
    CLUS_OBJECT_AFFINITYRULE = 9,
    CLUS_OBJECT_USER = 128,
};
pub const CLUS_OBJECT_INVALID = CLUSTER_CONTROL_OBJECT.CLUS_OBJECT_INVALID;
pub const CLUS_OBJECT_RESOURCE = CLUSTER_CONTROL_OBJECT.CLUS_OBJECT_RESOURCE;
pub const CLUS_OBJECT_RESOURCE_TYPE = CLUSTER_CONTROL_OBJECT.CLUS_OBJECT_RESOURCE_TYPE;
pub const CLUS_OBJECT_GROUP = CLUSTER_CONTROL_OBJECT.CLUS_OBJECT_GROUP;
pub const CLUS_OBJECT_NODE = CLUSTER_CONTROL_OBJECT.CLUS_OBJECT_NODE;
pub const CLUS_OBJECT_NETWORK = CLUSTER_CONTROL_OBJECT.CLUS_OBJECT_NETWORK;
pub const CLUS_OBJECT_NETINTERFACE = CLUSTER_CONTROL_OBJECT.CLUS_OBJECT_NETINTERFACE;
pub const CLUS_OBJECT_CLUSTER = CLUSTER_CONTROL_OBJECT.CLUS_OBJECT_CLUSTER;
pub const CLUS_OBJECT_GROUPSET = CLUSTER_CONTROL_OBJECT.CLUS_OBJECT_GROUPSET;
pub const CLUS_OBJECT_AFFINITYRULE = CLUSTER_CONTROL_OBJECT.CLUS_OBJECT_AFFINITYRULE;
pub const CLUS_OBJECT_USER = CLUSTER_CONTROL_OBJECT.CLUS_OBJECT_USER;

pub const CLCTL_CODES = extern enum(i32) {
    CLCTL_UNKNOWN = 0,
    CLCTL_GET_CHARACTERISTICS = 5,
    CLCTL_GET_FLAGS = 9,
    CLCTL_GET_CLASS_INFO = 13,
    CLCTL_GET_REQUIRED_DEPENDENCIES = 17,
    CLCTL_GET_ARB_TIMEOUT = 21,
    CLCTL_GET_FAILURE_INFO = 25,
    CLCTL_GET_NAME = 41,
    CLCTL_GET_RESOURCE_TYPE = 45,
    CLCTL_GET_NODE = 49,
    CLCTL_GET_NETWORK = 53,
    CLCTL_GET_ID = 57,
    CLCTL_GET_FQDN = 61,
    CLCTL_GET_CLUSTER_SERVICE_ACCOUNT_NAME = 65,
    CLCTL_CHECK_VOTER_EVICT = 69,
    CLCTL_CHECK_VOTER_DOWN = 73,
    CLCTL_SHUTDOWN = 77,
    CLCTL_ENUM_COMMON_PROPERTIES = 81,
    CLCTL_GET_RO_COMMON_PROPERTIES = 85,
    CLCTL_GET_COMMON_PROPERTIES = 89,
    CLCTL_SET_COMMON_PROPERTIES = 4194398,
    CLCTL_VALIDATE_COMMON_PROPERTIES = 97,
    CLCTL_GET_COMMON_PROPERTY_FMTS = 101,
    CLCTL_GET_COMMON_RESOURCE_PROPERTY_FMTS = 105,
    CLCTL_ENUM_PRIVATE_PROPERTIES = 121,
    CLCTL_GET_RO_PRIVATE_PROPERTIES = 125,
    CLCTL_GET_PRIVATE_PROPERTIES = 129,
    CLCTL_SET_PRIVATE_PROPERTIES = 4194438,
    CLCTL_VALIDATE_PRIVATE_PROPERTIES = 137,
    CLCTL_GET_PRIVATE_PROPERTY_FMTS = 141,
    CLCTL_GET_PRIVATE_RESOURCE_PROPERTY_FMTS = 145,
    CLCTL_ADD_REGISTRY_CHECKPOINT = 4194466,
    CLCTL_DELETE_REGISTRY_CHECKPOINT = 4194470,
    CLCTL_GET_REGISTRY_CHECKPOINTS = 169,
    CLCTL_ADD_CRYPTO_CHECKPOINT = 4194478,
    CLCTL_DELETE_CRYPTO_CHECKPOINT = 4194482,
    CLCTL_GET_CRYPTO_CHECKPOINTS = 181,
    CLCTL_RESOURCE_UPGRADE_DLL = 4194490,
    CLCTL_ADD_REGISTRY_CHECKPOINT_64BIT = 4194494,
    CLCTL_ADD_REGISTRY_CHECKPOINT_32BIT = 4194498,
    CLCTL_GET_LOADBAL_PROCESS_LIST = 201,
    CLCTL_SET_ACCOUNT_ACCESS = 4194546,
    CLCTL_GET_NETWORK_NAME = 361,
    CLCTL_NETNAME_GET_VIRTUAL_SERVER_TOKEN = 365,
    CLCTL_NETNAME_REGISTER_DNS_RECORDS = 370,
    CLCTL_GET_DNS_NAME = 373,
    CLCTL_NETNAME_SET_PWD_INFO = 378,
    CLCTL_NETNAME_DELETE_CO = 382,
    CLCTL_NETNAME_VALIDATE_VCO = 385,
    CLCTL_NETNAME_RESET_VCO = 389,
    CLCTL_NETNAME_REPAIR_VCO = 397,
    CLCTL_STORAGE_GET_DISK_INFO = 401,
    CLCTL_STORAGE_GET_AVAILABLE_DISKS = 405,
    CLCTL_STORAGE_IS_PATH_VALID = 409,
    CLCTL_STORAGE_SYNC_CLUSDISK_DB = 4194718,
    CLCTL_STORAGE_GET_DISK_NUMBER_INFO = 417,
    CLCTL_QUERY_DELETE = 441,
    CLCTL_IPADDRESS_RENEW_LEASE = 4194750,
    CLCTL_IPADDRESS_RELEASE_LEASE = 4194754,
    CLCTL_QUERY_MAINTENANCE_MODE = 481,
    CLCTL_SET_MAINTENANCE_MODE = 4194790,
    CLCTL_STORAGE_SET_DRIVELETTER = 4194794,
    CLCTL_STORAGE_GET_DRIVELETTERS = 493,
    CLCTL_STORAGE_GET_DISK_INFO_EX = 497,
    CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX = 501,
    CLCTL_STORAGE_GET_DISK_INFO_EX2 = 505,
    CLCTL_STORAGE_GET_CLUSPORT_DISK_COUNT = 509,
    CLCTL_STORAGE_REMAP_DRIVELETTER = 513,
    CLCTL_STORAGE_GET_DISKID = 517,
    CLCTL_STORAGE_IS_CLUSTERABLE = 521,
    CLCTL_STORAGE_REMOVE_VM_OWNERSHIP = 4194830,
    CLCTL_STORAGE_GET_MOUNTPOINTS = 529,
    CLCTL_STORAGE_GET_DIRTY = 537,
    CLCTL_STORAGE_GET_SHARED_VOLUME_INFO = 549,
    CLCTL_STORAGE_IS_CSV_FILE = 553,
    CLCTL_STORAGE_GET_RESOURCEID = 557,
    CLCTL_VALIDATE_PATH = 561,
    CLCTL_VALIDATE_NETNAME = 565,
    CLCTL_VALIDATE_DIRECTORY = 569,
    CLCTL_BATCH_BLOCK_KEY = 574,
    CLCTL_BATCH_UNBLOCK_KEY = 577,
    CLCTL_FILESERVER_SHARE_ADD = 4194886,
    CLCTL_FILESERVER_SHARE_DEL = 4194890,
    CLCTL_FILESERVER_SHARE_MODIFY = 4194894,
    CLCTL_FILESERVER_SHARE_REPORT = 593,
    CLCTL_NETNAME_GET_OU_FOR_VCO = 4194926,
    CLCTL_ENABLE_SHARED_VOLUME_DIRECTIO = 4194954,
    CLCTL_DISABLE_SHARED_VOLUME_DIRECTIO = 4194958,
    CLCTL_GET_SHARED_VOLUME_ID = 657,
    CLCTL_SET_CSV_MAINTENANCE_MODE = 4194966,
    CLCTL_SET_SHARED_VOLUME_BACKUP_MODE = 4194970,
    CLCTL_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES = 669,
    CLCTL_STORAGE_GET_SHARED_VOLUME_STATES = 4194978,
    CLCTL_STORAGE_IS_SHARED_VOLUME = 677,
    CLCTL_GET_CLUSDB_TIMESTAMP = 681,
    CLCTL_RW_MODIFY_NOOP = 4194990,
    CLCTL_IS_QUORUM_BLOCKED = 689,
    CLCTL_POOL_GET_DRIVE_INFO = 693,
    CLCTL_GET_GUM_LOCK_OWNER = 697,
    CLCTL_GET_STUCK_NODES = 701,
    CLCTL_INJECT_GEM_FAULT = 705,
    CLCTL_INTRODUCE_GEM_REPAIR_DELAY = 709,
    CLCTL_SEND_DUMMY_GEM_MESSAGES = 713,
    CLCTL_BLOCK_GEM_SEND_RECV = 717,
    CLCTL_GET_GEMID_VECTOR = 721,
    CLCTL_ADD_CRYPTO_CHECKPOINT_EX = 4195030,
    CLCTL_GROUP_GET_LAST_MOVE_TIME = 729,
    CLCTL_SET_STORAGE_CONFIGURATION = 4195042,
    CLCTL_GET_STORAGE_CONFIGURATION = 741,
    CLCTL_GET_STORAGE_CONFIG_ATTRIBUTES = 745,
    CLCTL_REMOVE_NODE = 4195054,
    CLCTL_IS_FEATURE_INSTALLED = 753,
    CLCTL_IS_S2D_FEATURE_SUPPORTED = 757,
    CLCTL_STORAGE_GET_PHYSICAL_DISK_INFO = 761,
    CLCTL_STORAGE_GET_CLUSBFLT_PATHS = 765,
    CLCTL_STORAGE_GET_CLUSBFLT_PATHINFO = 769,
    CLCTL_CLEAR_NODE_CONNECTION_INFO = 4195078,
    CLCTL_SET_DNS_DOMAIN = 4195082,
    CTCTL_GET_ROUTESTATUS_BASIC = 781,
    CTCTL_GET_ROUTESTATUS_EXTENDED = 785,
    CTCTL_GET_FAULT_DOMAIN_STATE = 789,
    CLCTL_NETNAME_SET_PWD_INFOEX = 794,
    CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX2_INT = 8161,
    CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS = 8417,
    CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN = 4202726,
    CLCTL_RESOURCE_PREPARE_UPGRADE = 4202730,
    CLCTL_RESOURCE_UPGRADE_COMPLETED = 4202734,
    CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY = 8433,
    CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY = 4202742,
    CLCTL_REPLICATION_GET_LOG_INFO = 8517,
    CLCTL_REPLICATION_GET_ELIGIBLE_LOGDISKS = 8521,
    CLCTL_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS = 8525,
    CLCTL_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS = 8529,
    CLCTL_REPLICATION_GET_REPLICATED_DISKS = 8533,
    CLCTL_REPLICATION_GET_REPLICA_VOLUMES = 8537,
    CLCTL_REPLICATION_GET_LOG_VOLUME = 8541,
    CLCTL_REPLICATION_GET_RESOURCE_GROUP = 8545,
    CLCTL_REPLICATION_GET_REPLICATED_PARTITION_INFO = 8549,
    CLCTL_GET_STATE_CHANGE_TIME = 11613,
    CLCTL_SET_CLUSTER_S2D_ENABLED = 4205922,
    CLCTL_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES = 4205934,
    CLCTL_GROUPSET_GET_GROUPS = 11633,
    CLCTL_GROUPSET_GET_PROVIDER_GROUPS = 11637,
    CLCTL_GROUPSET_GET_PROVIDER_GROUPSETS = 11641,
    CLCTL_GROUP_GET_PROVIDER_GROUPS = 11645,
    CLCTL_GROUP_GET_PROVIDER_GROUPSETS = 11649,
    CLCTL_GROUP_SET_CCF_FROM_MASTER = 4205958,
    CLCTL_GET_INFRASTRUCTURE_SOFS_BUFFER = 11657,
    CLCTL_SET_INFRASTRUCTURE_SOFS_BUFFER = 4205966,
    CLCTL_NOTIFY_INFRASTRUCTURE_SOFS_CHANGED = 4205970,
    CLCTL_SCALEOUT_COMMAND = 4205974,
    CLCTL_SCALEOUT_CONTROL = 4205978,
    CLCTL_SCALEOUT_GET_CLUSTERS = 4205981,
    CLCTL_RELOAD_AUTOLOGGER_CONFIG = 11730,
    CLCTL_STORAGE_RENAME_SHARED_VOLUME = 11734,
    CLCTL_STORAGE_RENAME_SHARED_VOLUME_GUID = 11738,
    CLCTL_ENUM_AFFINITY_RULE_NAMES = 11741,
    CLCTL_DELETE = 5242886,
    CLCTL_INSTALL_NODE = 5242890,
    CLCTL_EVICT_NODE = 5242894,
    CLCTL_ADD_DEPENDENCY = 5242898,
    CLCTL_REMOVE_DEPENDENCY = 5242902,
    CLCTL_ADD_OWNER = 5242906,
    CLCTL_REMOVE_OWNER = 5242910,
    CLCTL_SET_NAME = 5242918,
    CLCTL_CLUSTER_NAME_CHANGED = 5242922,
    CLCTL_CLUSTER_VERSION_CHANGED = 5242926,
    CLCTL_FIXUP_ON_UPGRADE = 5242930,
    CLCTL_STARTING_PHASE1 = 5242934,
    CLCTL_STARTING_PHASE2 = 5242938,
    CLCTL_HOLD_IO = 5242942,
    CLCTL_RESUME_IO = 5242946,
    CLCTL_FORCE_QUORUM = 5242950,
    CLCTL_INITIALIZE = 5242954,
    CLCTL_STATE_CHANGE_REASON = 5242958,
    CLCTL_PROVIDER_STATE_CHANGE = 5242962,
    CLCTL_LEAVING_GROUP = 5242966,
    CLCTL_JOINING_GROUP = 5242970,
    CLCTL_FSWITNESS_GET_EPOCH_INFO = 1048669,
    CLCTL_FSWITNESS_SET_EPOCH_INFO = 5242978,
    CLCTL_FSWITNESS_RELEASE_LOCK = 5242982,
    CLCTL_NETNAME_CREDS_NOTIFYCAM = 5242986,
    CLCTL_NOTIFY_QUORUM_STATUS = 5243006,
    CLCTL_NOTIFY_MONITOR_SHUTTING_DOWN = 1048705,
    CLCTL_UNDELETE = 5243014,
    CLCTL_GET_OPERATION_CONTEXT = 1057001,
    CLCTL_NOTIFY_OWNER_CHANGE = 5251362,
    CLCTL_VALIDATE_CHANGE_GROUP = 1057061,
    CLCTL_CHECK_DRAIN_VETO = 1057069,
    CLCTL_NOTIFY_DRAIN_COMPLETE = 1057073,
};
pub const CLCTL_UNKNOWN = CLCTL_CODES.CLCTL_UNKNOWN;
pub const CLCTL_GET_CHARACTERISTICS = CLCTL_CODES.CLCTL_GET_CHARACTERISTICS;
pub const CLCTL_GET_FLAGS = CLCTL_CODES.CLCTL_GET_FLAGS;
pub const CLCTL_GET_CLASS_INFO = CLCTL_CODES.CLCTL_GET_CLASS_INFO;
pub const CLCTL_GET_REQUIRED_DEPENDENCIES = CLCTL_CODES.CLCTL_GET_REQUIRED_DEPENDENCIES;
pub const CLCTL_GET_ARB_TIMEOUT = CLCTL_CODES.CLCTL_GET_ARB_TIMEOUT;
pub const CLCTL_GET_FAILURE_INFO = CLCTL_CODES.CLCTL_GET_FAILURE_INFO;
pub const CLCTL_GET_NAME = CLCTL_CODES.CLCTL_GET_NAME;
pub const CLCTL_GET_RESOURCE_TYPE = CLCTL_CODES.CLCTL_GET_RESOURCE_TYPE;
pub const CLCTL_GET_NODE = CLCTL_CODES.CLCTL_GET_NODE;
pub const CLCTL_GET_NETWORK = CLCTL_CODES.CLCTL_GET_NETWORK;
pub const CLCTL_GET_ID = CLCTL_CODES.CLCTL_GET_ID;
pub const CLCTL_GET_FQDN = CLCTL_CODES.CLCTL_GET_FQDN;
pub const CLCTL_GET_CLUSTER_SERVICE_ACCOUNT_NAME = CLCTL_CODES.CLCTL_GET_CLUSTER_SERVICE_ACCOUNT_NAME;
pub const CLCTL_CHECK_VOTER_EVICT = CLCTL_CODES.CLCTL_CHECK_VOTER_EVICT;
pub const CLCTL_CHECK_VOTER_DOWN = CLCTL_CODES.CLCTL_CHECK_VOTER_DOWN;
pub const CLCTL_SHUTDOWN = CLCTL_CODES.CLCTL_SHUTDOWN;
pub const CLCTL_ENUM_COMMON_PROPERTIES = CLCTL_CODES.CLCTL_ENUM_COMMON_PROPERTIES;
pub const CLCTL_GET_RO_COMMON_PROPERTIES = CLCTL_CODES.CLCTL_GET_RO_COMMON_PROPERTIES;
pub const CLCTL_GET_COMMON_PROPERTIES = CLCTL_CODES.CLCTL_GET_COMMON_PROPERTIES;
pub const CLCTL_SET_COMMON_PROPERTIES = CLCTL_CODES.CLCTL_SET_COMMON_PROPERTIES;
pub const CLCTL_VALIDATE_COMMON_PROPERTIES = CLCTL_CODES.CLCTL_VALIDATE_COMMON_PROPERTIES;
pub const CLCTL_GET_COMMON_PROPERTY_FMTS = CLCTL_CODES.CLCTL_GET_COMMON_PROPERTY_FMTS;
pub const CLCTL_GET_COMMON_RESOURCE_PROPERTY_FMTS = CLCTL_CODES.CLCTL_GET_COMMON_RESOURCE_PROPERTY_FMTS;
pub const CLCTL_ENUM_PRIVATE_PROPERTIES = CLCTL_CODES.CLCTL_ENUM_PRIVATE_PROPERTIES;
pub const CLCTL_GET_RO_PRIVATE_PROPERTIES = CLCTL_CODES.CLCTL_GET_RO_PRIVATE_PROPERTIES;
pub const CLCTL_GET_PRIVATE_PROPERTIES = CLCTL_CODES.CLCTL_GET_PRIVATE_PROPERTIES;
pub const CLCTL_SET_PRIVATE_PROPERTIES = CLCTL_CODES.CLCTL_SET_PRIVATE_PROPERTIES;
pub const CLCTL_VALIDATE_PRIVATE_PROPERTIES = CLCTL_CODES.CLCTL_VALIDATE_PRIVATE_PROPERTIES;
pub const CLCTL_GET_PRIVATE_PROPERTY_FMTS = CLCTL_CODES.CLCTL_GET_PRIVATE_PROPERTY_FMTS;
pub const CLCTL_GET_PRIVATE_RESOURCE_PROPERTY_FMTS = CLCTL_CODES.CLCTL_GET_PRIVATE_RESOURCE_PROPERTY_FMTS;
pub const CLCTL_ADD_REGISTRY_CHECKPOINT = CLCTL_CODES.CLCTL_ADD_REGISTRY_CHECKPOINT;
pub const CLCTL_DELETE_REGISTRY_CHECKPOINT = CLCTL_CODES.CLCTL_DELETE_REGISTRY_CHECKPOINT;
pub const CLCTL_GET_REGISTRY_CHECKPOINTS = CLCTL_CODES.CLCTL_GET_REGISTRY_CHECKPOINTS;
pub const CLCTL_ADD_CRYPTO_CHECKPOINT = CLCTL_CODES.CLCTL_ADD_CRYPTO_CHECKPOINT;
pub const CLCTL_DELETE_CRYPTO_CHECKPOINT = CLCTL_CODES.CLCTL_DELETE_CRYPTO_CHECKPOINT;
pub const CLCTL_GET_CRYPTO_CHECKPOINTS = CLCTL_CODES.CLCTL_GET_CRYPTO_CHECKPOINTS;
pub const CLCTL_RESOURCE_UPGRADE_DLL = CLCTL_CODES.CLCTL_RESOURCE_UPGRADE_DLL;
pub const CLCTL_ADD_REGISTRY_CHECKPOINT_64BIT = CLCTL_CODES.CLCTL_ADD_REGISTRY_CHECKPOINT_64BIT;
pub const CLCTL_ADD_REGISTRY_CHECKPOINT_32BIT = CLCTL_CODES.CLCTL_ADD_REGISTRY_CHECKPOINT_32BIT;
pub const CLCTL_GET_LOADBAL_PROCESS_LIST = CLCTL_CODES.CLCTL_GET_LOADBAL_PROCESS_LIST;
pub const CLCTL_SET_ACCOUNT_ACCESS = CLCTL_CODES.CLCTL_SET_ACCOUNT_ACCESS;
pub const CLCTL_GET_NETWORK_NAME = CLCTL_CODES.CLCTL_GET_NETWORK_NAME;
pub const CLCTL_NETNAME_GET_VIRTUAL_SERVER_TOKEN = CLCTL_CODES.CLCTL_NETNAME_GET_VIRTUAL_SERVER_TOKEN;
pub const CLCTL_NETNAME_REGISTER_DNS_RECORDS = CLCTL_CODES.CLCTL_NETNAME_REGISTER_DNS_RECORDS;
pub const CLCTL_GET_DNS_NAME = CLCTL_CODES.CLCTL_GET_DNS_NAME;
pub const CLCTL_NETNAME_SET_PWD_INFO = CLCTL_CODES.CLCTL_NETNAME_SET_PWD_INFO;
pub const CLCTL_NETNAME_DELETE_CO = CLCTL_CODES.CLCTL_NETNAME_DELETE_CO;
pub const CLCTL_NETNAME_VALIDATE_VCO = CLCTL_CODES.CLCTL_NETNAME_VALIDATE_VCO;
pub const CLCTL_NETNAME_RESET_VCO = CLCTL_CODES.CLCTL_NETNAME_RESET_VCO;
pub const CLCTL_NETNAME_REPAIR_VCO = CLCTL_CODES.CLCTL_NETNAME_REPAIR_VCO;
pub const CLCTL_STORAGE_GET_DISK_INFO = CLCTL_CODES.CLCTL_STORAGE_GET_DISK_INFO;
pub const CLCTL_STORAGE_GET_AVAILABLE_DISKS = CLCTL_CODES.CLCTL_STORAGE_GET_AVAILABLE_DISKS;
pub const CLCTL_STORAGE_IS_PATH_VALID = CLCTL_CODES.CLCTL_STORAGE_IS_PATH_VALID;
pub const CLCTL_STORAGE_SYNC_CLUSDISK_DB = CLCTL_CODES.CLCTL_STORAGE_SYNC_CLUSDISK_DB;
pub const CLCTL_STORAGE_GET_DISK_NUMBER_INFO = CLCTL_CODES.CLCTL_STORAGE_GET_DISK_NUMBER_INFO;
pub const CLCTL_QUERY_DELETE = CLCTL_CODES.CLCTL_QUERY_DELETE;
pub const CLCTL_IPADDRESS_RENEW_LEASE = CLCTL_CODES.CLCTL_IPADDRESS_RENEW_LEASE;
pub const CLCTL_IPADDRESS_RELEASE_LEASE = CLCTL_CODES.CLCTL_IPADDRESS_RELEASE_LEASE;
pub const CLCTL_QUERY_MAINTENANCE_MODE = CLCTL_CODES.CLCTL_QUERY_MAINTENANCE_MODE;
pub const CLCTL_SET_MAINTENANCE_MODE = CLCTL_CODES.CLCTL_SET_MAINTENANCE_MODE;
pub const CLCTL_STORAGE_SET_DRIVELETTER = CLCTL_CODES.CLCTL_STORAGE_SET_DRIVELETTER;
pub const CLCTL_STORAGE_GET_DRIVELETTERS = CLCTL_CODES.CLCTL_STORAGE_GET_DRIVELETTERS;
pub const CLCTL_STORAGE_GET_DISK_INFO_EX = CLCTL_CODES.CLCTL_STORAGE_GET_DISK_INFO_EX;
pub const CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX = CLCTL_CODES.CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX;
pub const CLCTL_STORAGE_GET_DISK_INFO_EX2 = CLCTL_CODES.CLCTL_STORAGE_GET_DISK_INFO_EX2;
pub const CLCTL_STORAGE_GET_CLUSPORT_DISK_COUNT = CLCTL_CODES.CLCTL_STORAGE_GET_CLUSPORT_DISK_COUNT;
pub const CLCTL_STORAGE_REMAP_DRIVELETTER = CLCTL_CODES.CLCTL_STORAGE_REMAP_DRIVELETTER;
pub const CLCTL_STORAGE_GET_DISKID = CLCTL_CODES.CLCTL_STORAGE_GET_DISKID;
pub const CLCTL_STORAGE_IS_CLUSTERABLE = CLCTL_CODES.CLCTL_STORAGE_IS_CLUSTERABLE;
pub const CLCTL_STORAGE_REMOVE_VM_OWNERSHIP = CLCTL_CODES.CLCTL_STORAGE_REMOVE_VM_OWNERSHIP;
pub const CLCTL_STORAGE_GET_MOUNTPOINTS = CLCTL_CODES.CLCTL_STORAGE_GET_MOUNTPOINTS;
pub const CLCTL_STORAGE_GET_DIRTY = CLCTL_CODES.CLCTL_STORAGE_GET_DIRTY;
pub const CLCTL_STORAGE_GET_SHARED_VOLUME_INFO = CLCTL_CODES.CLCTL_STORAGE_GET_SHARED_VOLUME_INFO;
pub const CLCTL_STORAGE_IS_CSV_FILE = CLCTL_CODES.CLCTL_STORAGE_IS_CSV_FILE;
pub const CLCTL_STORAGE_GET_RESOURCEID = CLCTL_CODES.CLCTL_STORAGE_GET_RESOURCEID;
pub const CLCTL_VALIDATE_PATH = CLCTL_CODES.CLCTL_VALIDATE_PATH;
pub const CLCTL_VALIDATE_NETNAME = CLCTL_CODES.CLCTL_VALIDATE_NETNAME;
pub const CLCTL_VALIDATE_DIRECTORY = CLCTL_CODES.CLCTL_VALIDATE_DIRECTORY;
pub const CLCTL_BATCH_BLOCK_KEY = CLCTL_CODES.CLCTL_BATCH_BLOCK_KEY;
pub const CLCTL_BATCH_UNBLOCK_KEY = CLCTL_CODES.CLCTL_BATCH_UNBLOCK_KEY;
pub const CLCTL_FILESERVER_SHARE_ADD = CLCTL_CODES.CLCTL_FILESERVER_SHARE_ADD;
pub const CLCTL_FILESERVER_SHARE_DEL = CLCTL_CODES.CLCTL_FILESERVER_SHARE_DEL;
pub const CLCTL_FILESERVER_SHARE_MODIFY = CLCTL_CODES.CLCTL_FILESERVER_SHARE_MODIFY;
pub const CLCTL_FILESERVER_SHARE_REPORT = CLCTL_CODES.CLCTL_FILESERVER_SHARE_REPORT;
pub const CLCTL_NETNAME_GET_OU_FOR_VCO = CLCTL_CODES.CLCTL_NETNAME_GET_OU_FOR_VCO;
pub const CLCTL_ENABLE_SHARED_VOLUME_DIRECTIO = CLCTL_CODES.CLCTL_ENABLE_SHARED_VOLUME_DIRECTIO;
pub const CLCTL_DISABLE_SHARED_VOLUME_DIRECTIO = CLCTL_CODES.CLCTL_DISABLE_SHARED_VOLUME_DIRECTIO;
pub const CLCTL_GET_SHARED_VOLUME_ID = CLCTL_CODES.CLCTL_GET_SHARED_VOLUME_ID;
pub const CLCTL_SET_CSV_MAINTENANCE_MODE = CLCTL_CODES.CLCTL_SET_CSV_MAINTENANCE_MODE;
pub const CLCTL_SET_SHARED_VOLUME_BACKUP_MODE = CLCTL_CODES.CLCTL_SET_SHARED_VOLUME_BACKUP_MODE;
pub const CLCTL_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES = CLCTL_CODES.CLCTL_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES;
pub const CLCTL_STORAGE_GET_SHARED_VOLUME_STATES = CLCTL_CODES.CLCTL_STORAGE_GET_SHARED_VOLUME_STATES;
pub const CLCTL_STORAGE_IS_SHARED_VOLUME = CLCTL_CODES.CLCTL_STORAGE_IS_SHARED_VOLUME;
pub const CLCTL_GET_CLUSDB_TIMESTAMP = CLCTL_CODES.CLCTL_GET_CLUSDB_TIMESTAMP;
pub const CLCTL_RW_MODIFY_NOOP = CLCTL_CODES.CLCTL_RW_MODIFY_NOOP;
pub const CLCTL_IS_QUORUM_BLOCKED = CLCTL_CODES.CLCTL_IS_QUORUM_BLOCKED;
pub const CLCTL_POOL_GET_DRIVE_INFO = CLCTL_CODES.CLCTL_POOL_GET_DRIVE_INFO;
pub const CLCTL_GET_GUM_LOCK_OWNER = CLCTL_CODES.CLCTL_GET_GUM_LOCK_OWNER;
pub const CLCTL_GET_STUCK_NODES = CLCTL_CODES.CLCTL_GET_STUCK_NODES;
pub const CLCTL_INJECT_GEM_FAULT = CLCTL_CODES.CLCTL_INJECT_GEM_FAULT;
pub const CLCTL_INTRODUCE_GEM_REPAIR_DELAY = CLCTL_CODES.CLCTL_INTRODUCE_GEM_REPAIR_DELAY;
pub const CLCTL_SEND_DUMMY_GEM_MESSAGES = CLCTL_CODES.CLCTL_SEND_DUMMY_GEM_MESSAGES;
pub const CLCTL_BLOCK_GEM_SEND_RECV = CLCTL_CODES.CLCTL_BLOCK_GEM_SEND_RECV;
pub const CLCTL_GET_GEMID_VECTOR = CLCTL_CODES.CLCTL_GET_GEMID_VECTOR;
pub const CLCTL_ADD_CRYPTO_CHECKPOINT_EX = CLCTL_CODES.CLCTL_ADD_CRYPTO_CHECKPOINT_EX;
pub const CLCTL_GROUP_GET_LAST_MOVE_TIME = CLCTL_CODES.CLCTL_GROUP_GET_LAST_MOVE_TIME;
pub const CLCTL_SET_STORAGE_CONFIGURATION = CLCTL_CODES.CLCTL_SET_STORAGE_CONFIGURATION;
pub const CLCTL_GET_STORAGE_CONFIGURATION = CLCTL_CODES.CLCTL_GET_STORAGE_CONFIGURATION;
pub const CLCTL_GET_STORAGE_CONFIG_ATTRIBUTES = CLCTL_CODES.CLCTL_GET_STORAGE_CONFIG_ATTRIBUTES;
pub const CLCTL_REMOVE_NODE = CLCTL_CODES.CLCTL_REMOVE_NODE;
pub const CLCTL_IS_FEATURE_INSTALLED = CLCTL_CODES.CLCTL_IS_FEATURE_INSTALLED;
pub const CLCTL_IS_S2D_FEATURE_SUPPORTED = CLCTL_CODES.CLCTL_IS_S2D_FEATURE_SUPPORTED;
pub const CLCTL_STORAGE_GET_PHYSICAL_DISK_INFO = CLCTL_CODES.CLCTL_STORAGE_GET_PHYSICAL_DISK_INFO;
pub const CLCTL_STORAGE_GET_CLUSBFLT_PATHS = CLCTL_CODES.CLCTL_STORAGE_GET_CLUSBFLT_PATHS;
pub const CLCTL_STORAGE_GET_CLUSBFLT_PATHINFO = CLCTL_CODES.CLCTL_STORAGE_GET_CLUSBFLT_PATHINFO;
pub const CLCTL_CLEAR_NODE_CONNECTION_INFO = CLCTL_CODES.CLCTL_CLEAR_NODE_CONNECTION_INFO;
pub const CLCTL_SET_DNS_DOMAIN = CLCTL_CODES.CLCTL_SET_DNS_DOMAIN;
pub const CTCTL_GET_ROUTESTATUS_BASIC = CLCTL_CODES.CTCTL_GET_ROUTESTATUS_BASIC;
pub const CTCTL_GET_ROUTESTATUS_EXTENDED = CLCTL_CODES.CTCTL_GET_ROUTESTATUS_EXTENDED;
pub const CTCTL_GET_FAULT_DOMAIN_STATE = CLCTL_CODES.CTCTL_GET_FAULT_DOMAIN_STATE;
pub const CLCTL_NETNAME_SET_PWD_INFOEX = CLCTL_CODES.CLCTL_NETNAME_SET_PWD_INFOEX;
pub const CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX2_INT = CLCTL_CODES.CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX2_INT;
pub const CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS = CLCTL_CODES.CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS;
pub const CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN = CLCTL_CODES.CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN;
pub const CLCTL_RESOURCE_PREPARE_UPGRADE = CLCTL_CODES.CLCTL_RESOURCE_PREPARE_UPGRADE;
pub const CLCTL_RESOURCE_UPGRADE_COMPLETED = CLCTL_CODES.CLCTL_RESOURCE_UPGRADE_COMPLETED;
pub const CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY = CLCTL_CODES.CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY;
pub const CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY = CLCTL_CODES.CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY;
pub const CLCTL_REPLICATION_GET_LOG_INFO = CLCTL_CODES.CLCTL_REPLICATION_GET_LOG_INFO;
pub const CLCTL_REPLICATION_GET_ELIGIBLE_LOGDISKS = CLCTL_CODES.CLCTL_REPLICATION_GET_ELIGIBLE_LOGDISKS;
pub const CLCTL_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS = CLCTL_CODES.CLCTL_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS;
pub const CLCTL_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS = CLCTL_CODES.CLCTL_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS;
pub const CLCTL_REPLICATION_GET_REPLICATED_DISKS = CLCTL_CODES.CLCTL_REPLICATION_GET_REPLICATED_DISKS;
pub const CLCTL_REPLICATION_GET_REPLICA_VOLUMES = CLCTL_CODES.CLCTL_REPLICATION_GET_REPLICA_VOLUMES;
pub const CLCTL_REPLICATION_GET_LOG_VOLUME = CLCTL_CODES.CLCTL_REPLICATION_GET_LOG_VOLUME;
pub const CLCTL_REPLICATION_GET_RESOURCE_GROUP = CLCTL_CODES.CLCTL_REPLICATION_GET_RESOURCE_GROUP;
pub const CLCTL_REPLICATION_GET_REPLICATED_PARTITION_INFO = CLCTL_CODES.CLCTL_REPLICATION_GET_REPLICATED_PARTITION_INFO;
pub const CLCTL_GET_STATE_CHANGE_TIME = CLCTL_CODES.CLCTL_GET_STATE_CHANGE_TIME;
pub const CLCTL_SET_CLUSTER_S2D_ENABLED = CLCTL_CODES.CLCTL_SET_CLUSTER_S2D_ENABLED;
pub const CLCTL_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES = CLCTL_CODES.CLCTL_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES;
pub const CLCTL_GROUPSET_GET_GROUPS = CLCTL_CODES.CLCTL_GROUPSET_GET_GROUPS;
pub const CLCTL_GROUPSET_GET_PROVIDER_GROUPS = CLCTL_CODES.CLCTL_GROUPSET_GET_PROVIDER_GROUPS;
pub const CLCTL_GROUPSET_GET_PROVIDER_GROUPSETS = CLCTL_CODES.CLCTL_GROUPSET_GET_PROVIDER_GROUPSETS;
pub const CLCTL_GROUP_GET_PROVIDER_GROUPS = CLCTL_CODES.CLCTL_GROUP_GET_PROVIDER_GROUPS;
pub const CLCTL_GROUP_GET_PROVIDER_GROUPSETS = CLCTL_CODES.CLCTL_GROUP_GET_PROVIDER_GROUPSETS;
pub const CLCTL_GROUP_SET_CCF_FROM_MASTER = CLCTL_CODES.CLCTL_GROUP_SET_CCF_FROM_MASTER;
pub const CLCTL_GET_INFRASTRUCTURE_SOFS_BUFFER = CLCTL_CODES.CLCTL_GET_INFRASTRUCTURE_SOFS_BUFFER;
pub const CLCTL_SET_INFRASTRUCTURE_SOFS_BUFFER = CLCTL_CODES.CLCTL_SET_INFRASTRUCTURE_SOFS_BUFFER;
pub const CLCTL_NOTIFY_INFRASTRUCTURE_SOFS_CHANGED = CLCTL_CODES.CLCTL_NOTIFY_INFRASTRUCTURE_SOFS_CHANGED;
pub const CLCTL_SCALEOUT_COMMAND = CLCTL_CODES.CLCTL_SCALEOUT_COMMAND;
pub const CLCTL_SCALEOUT_CONTROL = CLCTL_CODES.CLCTL_SCALEOUT_CONTROL;
pub const CLCTL_SCALEOUT_GET_CLUSTERS = CLCTL_CODES.CLCTL_SCALEOUT_GET_CLUSTERS;
pub const CLCTL_RELOAD_AUTOLOGGER_CONFIG = CLCTL_CODES.CLCTL_RELOAD_AUTOLOGGER_CONFIG;
pub const CLCTL_STORAGE_RENAME_SHARED_VOLUME = CLCTL_CODES.CLCTL_STORAGE_RENAME_SHARED_VOLUME;
pub const CLCTL_STORAGE_RENAME_SHARED_VOLUME_GUID = CLCTL_CODES.CLCTL_STORAGE_RENAME_SHARED_VOLUME_GUID;
pub const CLCTL_ENUM_AFFINITY_RULE_NAMES = CLCTL_CODES.CLCTL_ENUM_AFFINITY_RULE_NAMES;
pub const CLCTL_DELETE = CLCTL_CODES.CLCTL_DELETE;
pub const CLCTL_INSTALL_NODE = CLCTL_CODES.CLCTL_INSTALL_NODE;
pub const CLCTL_EVICT_NODE = CLCTL_CODES.CLCTL_EVICT_NODE;
pub const CLCTL_ADD_DEPENDENCY = CLCTL_CODES.CLCTL_ADD_DEPENDENCY;
pub const CLCTL_REMOVE_DEPENDENCY = CLCTL_CODES.CLCTL_REMOVE_DEPENDENCY;
pub const CLCTL_ADD_OWNER = CLCTL_CODES.CLCTL_ADD_OWNER;
pub const CLCTL_REMOVE_OWNER = CLCTL_CODES.CLCTL_REMOVE_OWNER;
pub const CLCTL_SET_NAME = CLCTL_CODES.CLCTL_SET_NAME;
pub const CLCTL_CLUSTER_NAME_CHANGED = CLCTL_CODES.CLCTL_CLUSTER_NAME_CHANGED;
pub const CLCTL_CLUSTER_VERSION_CHANGED = CLCTL_CODES.CLCTL_CLUSTER_VERSION_CHANGED;
pub const CLCTL_FIXUP_ON_UPGRADE = CLCTL_CODES.CLCTL_FIXUP_ON_UPGRADE;
pub const CLCTL_STARTING_PHASE1 = CLCTL_CODES.CLCTL_STARTING_PHASE1;
pub const CLCTL_STARTING_PHASE2 = CLCTL_CODES.CLCTL_STARTING_PHASE2;
pub const CLCTL_HOLD_IO = CLCTL_CODES.CLCTL_HOLD_IO;
pub const CLCTL_RESUME_IO = CLCTL_CODES.CLCTL_RESUME_IO;
pub const CLCTL_FORCE_QUORUM = CLCTL_CODES.CLCTL_FORCE_QUORUM;
pub const CLCTL_INITIALIZE = CLCTL_CODES.CLCTL_INITIALIZE;
pub const CLCTL_STATE_CHANGE_REASON = CLCTL_CODES.CLCTL_STATE_CHANGE_REASON;
pub const CLCTL_PROVIDER_STATE_CHANGE = CLCTL_CODES.CLCTL_PROVIDER_STATE_CHANGE;
pub const CLCTL_LEAVING_GROUP = CLCTL_CODES.CLCTL_LEAVING_GROUP;
pub const CLCTL_JOINING_GROUP = CLCTL_CODES.CLCTL_JOINING_GROUP;
pub const CLCTL_FSWITNESS_GET_EPOCH_INFO = CLCTL_CODES.CLCTL_FSWITNESS_GET_EPOCH_INFO;
pub const CLCTL_FSWITNESS_SET_EPOCH_INFO = CLCTL_CODES.CLCTL_FSWITNESS_SET_EPOCH_INFO;
pub const CLCTL_FSWITNESS_RELEASE_LOCK = CLCTL_CODES.CLCTL_FSWITNESS_RELEASE_LOCK;
pub const CLCTL_NETNAME_CREDS_NOTIFYCAM = CLCTL_CODES.CLCTL_NETNAME_CREDS_NOTIFYCAM;
pub const CLCTL_NOTIFY_QUORUM_STATUS = CLCTL_CODES.CLCTL_NOTIFY_QUORUM_STATUS;
pub const CLCTL_NOTIFY_MONITOR_SHUTTING_DOWN = CLCTL_CODES.CLCTL_NOTIFY_MONITOR_SHUTTING_DOWN;
pub const CLCTL_UNDELETE = CLCTL_CODES.CLCTL_UNDELETE;
pub const CLCTL_GET_OPERATION_CONTEXT = CLCTL_CODES.CLCTL_GET_OPERATION_CONTEXT;
pub const CLCTL_NOTIFY_OWNER_CHANGE = CLCTL_CODES.CLCTL_NOTIFY_OWNER_CHANGE;
pub const CLCTL_VALIDATE_CHANGE_GROUP = CLCTL_CODES.CLCTL_VALIDATE_CHANGE_GROUP;
pub const CLCTL_CHECK_DRAIN_VETO = CLCTL_CODES.CLCTL_CHECK_DRAIN_VETO;
pub const CLCTL_NOTIFY_DRAIN_COMPLETE = CLCTL_CODES.CLCTL_NOTIFY_DRAIN_COMPLETE;

pub const CLUSCTL_RESOURCE_CODES = extern enum(i32) {
    CLUSCTL_RESOURCE_UNKNOWN = 16777216,
    CLUSCTL_RESOURCE_GET_CHARACTERISTICS = 16777221,
    CLUSCTL_RESOURCE_GET_FLAGS = 16777225,
    CLUSCTL_RESOURCE_GET_CLASS_INFO = 16777229,
    CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES = 16777233,
    CLUSCTL_RESOURCE_GET_NAME = 16777257,
    CLUSCTL_RESOURCE_GET_ID = 16777273,
    CLUSCTL_RESOURCE_GET_RESOURCE_TYPE = 16777261,
    CLUSCTL_RESOURCE_ENUM_COMMON_PROPERTIES = 16777297,
    CLUSCTL_RESOURCE_GET_RO_COMMON_PROPERTIES = 16777301,
    CLUSCTL_RESOURCE_GET_COMMON_PROPERTIES = 16777305,
    CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES = 20971614,
    CLUSCTL_RESOURCE_VALIDATE_COMMON_PROPERTIES = 16777313,
    CLUSCTL_RESOURCE_GET_COMMON_PROPERTY_FMTS = 16777317,
    CLUSCTL_RESOURCE_ENUM_PRIVATE_PROPERTIES = 16777337,
    CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES = 16777341,
    CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES = 16777345,
    CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES = 20971654,
    CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES = 16777353,
    CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTY_FMTS = 16777357,
    CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT = 20971682,
    CLUSCTL_RESOURCE_DELETE_REGISTRY_CHECKPOINT = 20971686,
    CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS = 16777385,
    CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT = 20971694,
    CLUSCTL_RESOURCE_DELETE_CRYPTO_CHECKPOINT = 20971698,
    CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT_EX = 20972246,
    CLUSCTL_RESOURCE_GET_CRYPTO_CHECKPOINTS = 16777397,
    CLUSCTL_RESOURCE_GET_LOADBAL_PROCESS_LIST = 16777417,
    CLUSCTL_RESOURCE_GET_NETWORK_NAME = 16777577,
    CLUSCTL_RESOURCE_NETNAME_GET_VIRTUAL_SERVER_TOKEN = 16777581,
    CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFO = 16777594,
    CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFOEX = 16778010,
    CLUSCTL_RESOURCE_NETNAME_DELETE_CO = 16777598,
    CLUSCTL_RESOURCE_NETNAME_VALIDATE_VCO = 16777601,
    CLUSCTL_RESOURCE_NETNAME_RESET_VCO = 16777605,
    CLUSCTL_RESOURCE_NETNAME_REPAIR_VCO = 16777613,
    CLUSCTL_RESOURCE_NETNAME_REGISTER_DNS_RECORDS = 16777586,
    CLUSCTL_RESOURCE_GET_DNS_NAME = 16777589,
    CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO = 16777617,
    CLUSCTL_RESOURCE_STORAGE_GET_DISK_NUMBER_INFO = 16777633,
    CLUSCTL_RESOURCE_STORAGE_IS_PATH_VALID = 16777625,
    CLUSCTL_RESOURCE_QUERY_DELETE = 16777657,
    CLUSCTL_RESOURCE_UPGRADE_DLL = 20971706,
    CLUSCTL_RESOURCE_IPADDRESS_RENEW_LEASE = 20971966,
    CLUSCTL_RESOURCE_IPADDRESS_RELEASE_LEASE = 20971970,
    CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_64BIT = 20971710,
    CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_32BIT = 20971714,
    CLUSCTL_RESOURCE_QUERY_MAINTENANCE_MODE = 16777697,
    CLUSCTL_RESOURCE_SET_MAINTENANCE_MODE = 20972006,
    CLUSCTL_RESOURCE_STORAGE_SET_DRIVELETTER = 20972010,
    CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX = 16777713,
    CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX2 = 16777721,
    CLUSCTL_RESOURCE_STORAGE_GET_MOUNTPOINTS = 16777745,
    CLUSCTL_RESOURCE_STORAGE_GET_DIRTY = 16777753,
    CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_INFO = 16777765,
    CLUSCTL_RESOURCE_SET_CSV_MAINTENANCE_MODE = 20972182,
    CLUSCTL_RESOURCE_ENABLE_SHARED_VOLUME_DIRECTIO = 20972170,
    CLUSCTL_RESOURCE_DISABLE_SHARED_VOLUME_DIRECTIO = 20972174,
    CLUSCTL_RESOURCE_SET_SHARED_VOLUME_BACKUP_MODE = 20972186,
    CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES = 16777885,
    CLUSCTL_RESOURCE_GET_FAILURE_INFO = 16777241,
    CLUSCTL_RESOURCE_STORAGE_GET_DISKID = 16777733,
    CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_STATES = 20972194,
    CLUSCTL_RESOURCE_STORAGE_IS_SHARED_VOLUME = 16777893,
    CLUSCTL_RESOURCE_IS_QUORUM_BLOCKED = 16777905,
    CLUSCTL_RESOURCE_POOL_GET_DRIVE_INFO = 16777909,
    CLUSCTL_RESOURCE_RLUA_GET_VIRTUAL_SERVER_TOKEN = 16777581,
    CLUSCTL_RESOURCE_RLUA_SET_PWD_INFO = 16777594,
    CLUSCTL_RESOURCE_RLUA_SET_PWD_INFOEX = 16778010,
    CLUSCTL_RESOURCE_DELETE = 22020102,
    CLUSCTL_RESOURCE_UNDELETE = 22020230,
    CLUSCTL_RESOURCE_INSTALL_NODE = 22020106,
    CLUSCTL_RESOURCE_EVICT_NODE = 22020110,
    CLUSCTL_RESOURCE_ADD_DEPENDENCY = 22020114,
    CLUSCTL_RESOURCE_REMOVE_DEPENDENCY = 22020118,
    CLUSCTL_RESOURCE_ADD_OWNER = 22020122,
    CLUSCTL_RESOURCE_REMOVE_OWNER = 22020126,
    CLUSCTL_RESOURCE_SET_NAME = 22020134,
    CLUSCTL_RESOURCE_CLUSTER_NAME_CHANGED = 22020138,
    CLUSCTL_RESOURCE_CLUSTER_VERSION_CHANGED = 22020142,
    CLUSCTL_RESOURCE_FORCE_QUORUM = 22020166,
    CLUSCTL_RESOURCE_INITIALIZE = 22020170,
    CLUSCTL_RESOURCE_STATE_CHANGE_REASON = 22020174,
    CLUSCTL_RESOURCE_PROVIDER_STATE_CHANGE = 22020178,
    CLUSCTL_RESOURCE_LEAVING_GROUP = 22020182,
    CLUSCTL_RESOURCE_JOINING_GROUP = 22020186,
    CLUSCTL_RESOURCE_FSWITNESS_GET_EPOCH_INFO = 17825885,
    CLUSCTL_RESOURCE_FSWITNESS_SET_EPOCH_INFO = 22020194,
    CLUSCTL_RESOURCE_FSWITNESS_RELEASE_LOCK = 22020198,
    CLUSCTL_RESOURCE_NETNAME_CREDS_NOTIFYCAM = 22020202,
    CLUSCTL_RESOURCE_GET_OPERATION_CONTEXT = 17834217,
    CLUSCTL_RESOURCE_RW_MODIFY_NOOP = 20972206,
    CLUSCTL_RESOURCE_NOTIFY_QUORUM_STATUS = 22020222,
    CLUSCTL_RESOURCE_NOTIFY_OWNER_CHANGE = 22028578,
    CLUSCTL_RESOURCE_VALIDATE_CHANGE_GROUP = 17834277,
    CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME = 16788950,
    CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME_GUID = 16788954,
    CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN = 20979942,
    CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY = 20979958,
    CLUSCTL_RESOURCE_PREPARE_UPGRADE = 20979946,
    CLUSCTL_RESOURCE_UPGRADE_COMPLETED = 20979950,
    CLUSCTL_RESOURCE_GET_STATE_CHANGE_TIME = 16788829,
    CLUSCTL_RESOURCE_GET_INFRASTRUCTURE_SOFS_BUFFER = 16788873,
    CLUSCTL_RESOURCE_SET_INFRASTRUCTURE_SOFS_BUFFER = 20983182,
    CLUSCTL_RESOURCE_SCALEOUT_COMMAND = 20983190,
    CLUSCTL_RESOURCE_SCALEOUT_CONTROL = 20983194,
    CLUSCTL_RESOURCE_SCALEOUT_GET_CLUSTERS = 20983197,
    CLUSCTL_RESOURCE_CHECK_DRAIN_VETO = 17834285,
    CLUSCTL_RESOURCE_NOTIFY_DRAIN_COMPLETE = 17834289,
};
pub const CLUSCTL_RESOURCE_UNKNOWN = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_UNKNOWN;
pub const CLUSCTL_RESOURCE_GET_CHARACTERISTICS = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_CHARACTERISTICS;
pub const CLUSCTL_RESOURCE_GET_FLAGS = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_FLAGS;
pub const CLUSCTL_RESOURCE_GET_CLASS_INFO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_CLASS_INFO;
pub const CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES;
pub const CLUSCTL_RESOURCE_GET_NAME = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_NAME;
pub const CLUSCTL_RESOURCE_GET_ID = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_ID;
pub const CLUSCTL_RESOURCE_GET_RESOURCE_TYPE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_RESOURCE_TYPE;
pub const CLUSCTL_RESOURCE_ENUM_COMMON_PROPERTIES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_ENUM_COMMON_PROPERTIES;
pub const CLUSCTL_RESOURCE_GET_RO_COMMON_PROPERTIES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_RO_COMMON_PROPERTIES;
pub const CLUSCTL_RESOURCE_GET_COMMON_PROPERTIES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_COMMON_PROPERTIES;
pub const CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES;
pub const CLUSCTL_RESOURCE_VALIDATE_COMMON_PROPERTIES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_VALIDATE_COMMON_PROPERTIES;
pub const CLUSCTL_RESOURCE_GET_COMMON_PROPERTY_FMTS = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_COMMON_PROPERTY_FMTS;
pub const CLUSCTL_RESOURCE_ENUM_PRIVATE_PROPERTIES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_ENUM_PRIVATE_PROPERTIES;
pub const CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES;
pub const CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES;
pub const CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES;
pub const CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES;
pub const CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTY_FMTS = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTY_FMTS;
pub const CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT;
pub const CLUSCTL_RESOURCE_DELETE_REGISTRY_CHECKPOINT = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_DELETE_REGISTRY_CHECKPOINT;
pub const CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS;
pub const CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT;
pub const CLUSCTL_RESOURCE_DELETE_CRYPTO_CHECKPOINT = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_DELETE_CRYPTO_CHECKPOINT;
pub const CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT_EX = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT_EX;
pub const CLUSCTL_RESOURCE_GET_CRYPTO_CHECKPOINTS = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_CRYPTO_CHECKPOINTS;
pub const CLUSCTL_RESOURCE_GET_LOADBAL_PROCESS_LIST = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_LOADBAL_PROCESS_LIST;
pub const CLUSCTL_RESOURCE_GET_NETWORK_NAME = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_NETWORK_NAME;
pub const CLUSCTL_RESOURCE_NETNAME_GET_VIRTUAL_SERVER_TOKEN = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_NETNAME_GET_VIRTUAL_SERVER_TOKEN;
pub const CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFO;
pub const CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFOEX = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFOEX;
pub const CLUSCTL_RESOURCE_NETNAME_DELETE_CO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_NETNAME_DELETE_CO;
pub const CLUSCTL_RESOURCE_NETNAME_VALIDATE_VCO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_NETNAME_VALIDATE_VCO;
pub const CLUSCTL_RESOURCE_NETNAME_RESET_VCO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_NETNAME_RESET_VCO;
pub const CLUSCTL_RESOURCE_NETNAME_REPAIR_VCO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_NETNAME_REPAIR_VCO;
pub const CLUSCTL_RESOURCE_NETNAME_REGISTER_DNS_RECORDS = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_NETNAME_REGISTER_DNS_RECORDS;
pub const CLUSCTL_RESOURCE_GET_DNS_NAME = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_DNS_NAME;
pub const CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO;
pub const CLUSCTL_RESOURCE_STORAGE_GET_DISK_NUMBER_INFO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_GET_DISK_NUMBER_INFO;
pub const CLUSCTL_RESOURCE_STORAGE_IS_PATH_VALID = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_IS_PATH_VALID;
pub const CLUSCTL_RESOURCE_QUERY_DELETE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_QUERY_DELETE;
pub const CLUSCTL_RESOURCE_UPGRADE_DLL = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_UPGRADE_DLL;
pub const CLUSCTL_RESOURCE_IPADDRESS_RENEW_LEASE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_IPADDRESS_RENEW_LEASE;
pub const CLUSCTL_RESOURCE_IPADDRESS_RELEASE_LEASE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_IPADDRESS_RELEASE_LEASE;
pub const CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_64BIT = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_64BIT;
pub const CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_32BIT = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_32BIT;
pub const CLUSCTL_RESOURCE_QUERY_MAINTENANCE_MODE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_QUERY_MAINTENANCE_MODE;
pub const CLUSCTL_RESOURCE_SET_MAINTENANCE_MODE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_SET_MAINTENANCE_MODE;
pub const CLUSCTL_RESOURCE_STORAGE_SET_DRIVELETTER = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_SET_DRIVELETTER;
pub const CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX;
pub const CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX2 = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX2;
pub const CLUSCTL_RESOURCE_STORAGE_GET_MOUNTPOINTS = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_GET_MOUNTPOINTS;
pub const CLUSCTL_RESOURCE_STORAGE_GET_DIRTY = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_GET_DIRTY;
pub const CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_INFO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_INFO;
pub const CLUSCTL_RESOURCE_SET_CSV_MAINTENANCE_MODE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_SET_CSV_MAINTENANCE_MODE;
pub const CLUSCTL_RESOURCE_ENABLE_SHARED_VOLUME_DIRECTIO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_ENABLE_SHARED_VOLUME_DIRECTIO;
pub const CLUSCTL_RESOURCE_DISABLE_SHARED_VOLUME_DIRECTIO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_DISABLE_SHARED_VOLUME_DIRECTIO;
pub const CLUSCTL_RESOURCE_SET_SHARED_VOLUME_BACKUP_MODE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_SET_SHARED_VOLUME_BACKUP_MODE;
pub const CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES;
pub const CLUSCTL_RESOURCE_GET_FAILURE_INFO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_FAILURE_INFO;
pub const CLUSCTL_RESOURCE_STORAGE_GET_DISKID = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_GET_DISKID;
pub const CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_STATES = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_STATES;
pub const CLUSCTL_RESOURCE_STORAGE_IS_SHARED_VOLUME = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_IS_SHARED_VOLUME;
pub const CLUSCTL_RESOURCE_IS_QUORUM_BLOCKED = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_IS_QUORUM_BLOCKED;
pub const CLUSCTL_RESOURCE_POOL_GET_DRIVE_INFO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_POOL_GET_DRIVE_INFO;
pub const CLUSCTL_RESOURCE_RLUA_GET_VIRTUAL_SERVER_TOKEN = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_RLUA_GET_VIRTUAL_SERVER_TOKEN;
pub const CLUSCTL_RESOURCE_RLUA_SET_PWD_INFO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_RLUA_SET_PWD_INFO;
pub const CLUSCTL_RESOURCE_RLUA_SET_PWD_INFOEX = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_RLUA_SET_PWD_INFOEX;
pub const CLUSCTL_RESOURCE_DELETE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_DELETE;
pub const CLUSCTL_RESOURCE_UNDELETE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_UNDELETE;
pub const CLUSCTL_RESOURCE_INSTALL_NODE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_INSTALL_NODE;
pub const CLUSCTL_RESOURCE_EVICT_NODE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_EVICT_NODE;
pub const CLUSCTL_RESOURCE_ADD_DEPENDENCY = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_ADD_DEPENDENCY;
pub const CLUSCTL_RESOURCE_REMOVE_DEPENDENCY = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_REMOVE_DEPENDENCY;
pub const CLUSCTL_RESOURCE_ADD_OWNER = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_ADD_OWNER;
pub const CLUSCTL_RESOURCE_REMOVE_OWNER = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_REMOVE_OWNER;
pub const CLUSCTL_RESOURCE_SET_NAME = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_SET_NAME;
pub const CLUSCTL_RESOURCE_CLUSTER_NAME_CHANGED = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_CLUSTER_NAME_CHANGED;
pub const CLUSCTL_RESOURCE_CLUSTER_VERSION_CHANGED = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_CLUSTER_VERSION_CHANGED;
pub const CLUSCTL_RESOURCE_FORCE_QUORUM = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_FORCE_QUORUM;
pub const CLUSCTL_RESOURCE_INITIALIZE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_INITIALIZE;
pub const CLUSCTL_RESOURCE_STATE_CHANGE_REASON = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STATE_CHANGE_REASON;
pub const CLUSCTL_RESOURCE_PROVIDER_STATE_CHANGE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_PROVIDER_STATE_CHANGE;
pub const CLUSCTL_RESOURCE_LEAVING_GROUP = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_LEAVING_GROUP;
pub const CLUSCTL_RESOURCE_JOINING_GROUP = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_JOINING_GROUP;
pub const CLUSCTL_RESOURCE_FSWITNESS_GET_EPOCH_INFO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_FSWITNESS_GET_EPOCH_INFO;
pub const CLUSCTL_RESOURCE_FSWITNESS_SET_EPOCH_INFO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_FSWITNESS_SET_EPOCH_INFO;
pub const CLUSCTL_RESOURCE_FSWITNESS_RELEASE_LOCK = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_FSWITNESS_RELEASE_LOCK;
pub const CLUSCTL_RESOURCE_NETNAME_CREDS_NOTIFYCAM = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_NETNAME_CREDS_NOTIFYCAM;
pub const CLUSCTL_RESOURCE_GET_OPERATION_CONTEXT = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_OPERATION_CONTEXT;
pub const CLUSCTL_RESOURCE_RW_MODIFY_NOOP = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_RW_MODIFY_NOOP;
pub const CLUSCTL_RESOURCE_NOTIFY_QUORUM_STATUS = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_NOTIFY_QUORUM_STATUS;
pub const CLUSCTL_RESOURCE_NOTIFY_OWNER_CHANGE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_NOTIFY_OWNER_CHANGE;
pub const CLUSCTL_RESOURCE_VALIDATE_CHANGE_GROUP = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_VALIDATE_CHANGE_GROUP;
pub const CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME;
pub const CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME_GUID = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME_GUID;
pub const CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN = CLUSCTL_RESOURCE_CODES.CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN;
pub const CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY = CLUSCTL_RESOURCE_CODES.CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY;
pub const CLUSCTL_RESOURCE_PREPARE_UPGRADE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_PREPARE_UPGRADE;
pub const CLUSCTL_RESOURCE_UPGRADE_COMPLETED = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_UPGRADE_COMPLETED;
pub const CLUSCTL_RESOURCE_GET_STATE_CHANGE_TIME = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_STATE_CHANGE_TIME;
pub const CLUSCTL_RESOURCE_GET_INFRASTRUCTURE_SOFS_BUFFER = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_GET_INFRASTRUCTURE_SOFS_BUFFER;
pub const CLUSCTL_RESOURCE_SET_INFRASTRUCTURE_SOFS_BUFFER = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_SET_INFRASTRUCTURE_SOFS_BUFFER;
pub const CLUSCTL_RESOURCE_SCALEOUT_COMMAND = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_SCALEOUT_COMMAND;
pub const CLUSCTL_RESOURCE_SCALEOUT_CONTROL = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_SCALEOUT_CONTROL;
pub const CLUSCTL_RESOURCE_SCALEOUT_GET_CLUSTERS = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_SCALEOUT_GET_CLUSTERS;
pub const CLUSCTL_RESOURCE_CHECK_DRAIN_VETO = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_CHECK_DRAIN_VETO;
pub const CLUSCTL_RESOURCE_NOTIFY_DRAIN_COMPLETE = CLUSCTL_RESOURCE_CODES.CLUSCTL_RESOURCE_NOTIFY_DRAIN_COMPLETE;

pub const CLUSCTL_RESOURCE_TYPE_CODES = extern enum(i32) {
    CLUSCTL_RESOURCE_TYPE_UNKNOWN = 33554432,
    CLUSCTL_RESOURCE_TYPE_GET_CHARACTERISTICS = 33554437,
    CLUSCTL_RESOURCE_TYPE_GET_FLAGS = 33554441,
    CLUSCTL_RESOURCE_TYPE_GET_CLASS_INFO = 33554445,
    CLUSCTL_RESOURCE_TYPE_GET_REQUIRED_DEPENDENCIES = 33554449,
    CLUSCTL_RESOURCE_TYPE_GET_ARB_TIMEOUT = 33554453,
    CLUSCTL_RESOURCE_TYPE_ENUM_COMMON_PROPERTIES = 33554513,
    CLUSCTL_RESOURCE_TYPE_GET_RO_COMMON_PROPERTIES = 33554517,
    CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTIES = 33554521,
    CLUSCTL_RESOURCE_TYPE_VALIDATE_COMMON_PROPERTIES = 33554529,
    CLUSCTL_RESOURCE_TYPE_SET_COMMON_PROPERTIES = 37748830,
    CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTY_FMTS = 33554533,
    CLUSCTL_RESOURCE_TYPE_GET_COMMON_RESOURCE_PROPERTY_FMTS = 33554537,
    CLUSCTL_RESOURCE_TYPE_ENUM_PRIVATE_PROPERTIES = 33554553,
    CLUSCTL_RESOURCE_TYPE_GET_RO_PRIVATE_PROPERTIES = 33554557,
    CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTIES = 33554561,
    CLUSCTL_RESOURCE_TYPE_SET_PRIVATE_PROPERTIES = 37748870,
    CLUSCTL_RESOURCE_TYPE_VALIDATE_PRIVATE_PROPERTIES = 33554569,
    CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTY_FMTS = 33554573,
    CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_RESOURCE_PROPERTY_FMTS = 33554577,
    CLUSCTL_RESOURCE_TYPE_GET_REGISTRY_CHECKPOINTS = 33554601,
    CLUSCTL_RESOURCE_TYPE_GET_CRYPTO_CHECKPOINTS = 33554613,
    CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS = 33554837,
    CLUSCTL_RESOURCE_TYPE_STORAGE_SYNC_CLUSDISK_DB = 37749150,
    CLUSCTL_RESOURCE_TYPE_NETNAME_VALIDATE_NETNAME = 33554997,
    CLUSCTL_RESOURCE_TYPE_NETNAME_GET_OU_FOR_VCO = 37749358,
    CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_PATH = 33554993,
    CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_DIRECTORY = 33555001,
    CLUSCTL_RESOURCE_TYPE_GEN_SCRIPT_VALIDATE_PATH = 33554993,
    CLUSCTL_RESOURCE_TYPE_QUERY_DELETE = 33554873,
    CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DRIVELETTERS = 33554925,
    CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX = 33554933,
    CLUSCTL_RESOURCE_TYPE_STORAGE_REMAP_DRIVELETTER = 33554945,
    CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DISKID = 33554949,
    CLUSCTL_RESOURCE_TYPE_STORAGE_GET_RESOURCEID = 33554989,
    CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CLUSTERABLE = 33554953,
    CLUSCTL_RESOURCE_TYPE_STORAGE_REMOVE_VM_OWNERSHIP = 37749262,
    CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CSV_FILE = 16777769,
    CLUSCTL_RESOURCE_TYPE_WITNESS_VALIDATE_PATH = 33554993,
    CLUSCTL_RESOURCE_TYPE_INSTALL_NODE = 38797322,
    CLUSCTL_RESOURCE_TYPE_EVICT_NODE = 38797326,
    CLUSCTL_RESOURCE_TYPE_CLUSTER_VERSION_CHANGED = 38797358,
    CLUSCTL_RESOURCE_TYPE_FIXUP_ON_UPGRADE = 38797362,
    CLUSCTL_RESOURCE_TYPE_STARTING_PHASE1 = 38797366,
    CLUSCTL_RESOURCE_TYPE_STARTING_PHASE2 = 38797370,
    CLUSCTL_RESOURCE_TYPE_HOLD_IO = 38797374,
    CLUSCTL_RESOURCE_TYPE_RESUME_IO = 38797378,
    CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INT = 33562593,
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_LOGDISKS = 33562953,
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS = 33562957,
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS = 33562961,
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_DISKS = 33562965,
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICA_VOLUMES = 33562969,
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_VOLUME = 33562973,
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_RESOURCE_GROUP = 33562977,
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_PARTITION_INFO = 33562981,
    CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_INFO = 33562949,
    CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS = 33562849,
    CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY = 33562865,
    CLUSCTL_RESOURCE_TYPE_PREPARE_UPGRADE = 37757162,
    CLUSCTL_RESOURCE_TYPE_UPGRADE_COMPLETED = 37757166,
    CLUSCTL_RESOURCE_TYPE_NOTIFY_MONITOR_SHUTTING_DOWN = 34603137,
    CLUSCTL_RESOURCE_TYPE_CHECK_DRAIN_VETO = 34611501,
    CLUSCTL_RESOURCE_TYPE_NOTIFY_DRAIN_COMPLETE = 34611505,
};
pub const CLUSCTL_RESOURCE_TYPE_UNKNOWN = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_UNKNOWN;
pub const CLUSCTL_RESOURCE_TYPE_GET_CHARACTERISTICS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_CHARACTERISTICS;
pub const CLUSCTL_RESOURCE_TYPE_GET_FLAGS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_FLAGS;
pub const CLUSCTL_RESOURCE_TYPE_GET_CLASS_INFO = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_CLASS_INFO;
pub const CLUSCTL_RESOURCE_TYPE_GET_REQUIRED_DEPENDENCIES = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_REQUIRED_DEPENDENCIES;
pub const CLUSCTL_RESOURCE_TYPE_GET_ARB_TIMEOUT = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_ARB_TIMEOUT;
pub const CLUSCTL_RESOURCE_TYPE_ENUM_COMMON_PROPERTIES = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_ENUM_COMMON_PROPERTIES;
pub const CLUSCTL_RESOURCE_TYPE_GET_RO_COMMON_PROPERTIES = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_RO_COMMON_PROPERTIES;
pub const CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTIES = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTIES;
pub const CLUSCTL_RESOURCE_TYPE_VALIDATE_COMMON_PROPERTIES = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_VALIDATE_COMMON_PROPERTIES;
pub const CLUSCTL_RESOURCE_TYPE_SET_COMMON_PROPERTIES = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_SET_COMMON_PROPERTIES;
pub const CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTY_FMTS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTY_FMTS;
pub const CLUSCTL_RESOURCE_TYPE_GET_COMMON_RESOURCE_PROPERTY_FMTS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_COMMON_RESOURCE_PROPERTY_FMTS;
pub const CLUSCTL_RESOURCE_TYPE_ENUM_PRIVATE_PROPERTIES = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_ENUM_PRIVATE_PROPERTIES;
pub const CLUSCTL_RESOURCE_TYPE_GET_RO_PRIVATE_PROPERTIES = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_RO_PRIVATE_PROPERTIES;
pub const CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTIES = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTIES;
pub const CLUSCTL_RESOURCE_TYPE_SET_PRIVATE_PROPERTIES = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_SET_PRIVATE_PROPERTIES;
pub const CLUSCTL_RESOURCE_TYPE_VALIDATE_PRIVATE_PROPERTIES = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_VALIDATE_PRIVATE_PROPERTIES;
pub const CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTY_FMTS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTY_FMTS;
pub const CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_RESOURCE_PROPERTY_FMTS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_RESOURCE_PROPERTY_FMTS;
pub const CLUSCTL_RESOURCE_TYPE_GET_REGISTRY_CHECKPOINTS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_REGISTRY_CHECKPOINTS;
pub const CLUSCTL_RESOURCE_TYPE_GET_CRYPTO_CHECKPOINTS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GET_CRYPTO_CHECKPOINTS;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_SYNC_CLUSDISK_DB = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STORAGE_SYNC_CLUSDISK_DB;
pub const CLUSCTL_RESOURCE_TYPE_NETNAME_VALIDATE_NETNAME = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_NETNAME_VALIDATE_NETNAME;
pub const CLUSCTL_RESOURCE_TYPE_NETNAME_GET_OU_FOR_VCO = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_NETNAME_GET_OU_FOR_VCO;
pub const CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_PATH = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_PATH;
pub const CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_DIRECTORY = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_DIRECTORY;
pub const CLUSCTL_RESOURCE_TYPE_GEN_SCRIPT_VALIDATE_PATH = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_GEN_SCRIPT_VALIDATE_PATH;
pub const CLUSCTL_RESOURCE_TYPE_QUERY_DELETE = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_QUERY_DELETE;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DRIVELETTERS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DRIVELETTERS;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_REMAP_DRIVELETTER = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STORAGE_REMAP_DRIVELETTER;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DISKID = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DISKID;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_RESOURCEID = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STORAGE_GET_RESOURCEID;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CLUSTERABLE = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CLUSTERABLE;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_REMOVE_VM_OWNERSHIP = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STORAGE_REMOVE_VM_OWNERSHIP;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CSV_FILE = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CSV_FILE;
pub const CLUSCTL_RESOURCE_TYPE_WITNESS_VALIDATE_PATH = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_WITNESS_VALIDATE_PATH;
pub const CLUSCTL_RESOURCE_TYPE_INSTALL_NODE = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_INSTALL_NODE;
pub const CLUSCTL_RESOURCE_TYPE_EVICT_NODE = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_EVICT_NODE;
pub const CLUSCTL_RESOURCE_TYPE_CLUSTER_VERSION_CHANGED = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_CLUSTER_VERSION_CHANGED;
pub const CLUSCTL_RESOURCE_TYPE_FIXUP_ON_UPGRADE = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_FIXUP_ON_UPGRADE;
pub const CLUSCTL_RESOURCE_TYPE_STARTING_PHASE1 = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STARTING_PHASE1;
pub const CLUSCTL_RESOURCE_TYPE_STARTING_PHASE2 = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STARTING_PHASE2;
pub const CLUSCTL_RESOURCE_TYPE_HOLD_IO = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_HOLD_IO;
pub const CLUSCTL_RESOURCE_TYPE_RESUME_IO = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_RESUME_IO;
pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INT = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INT;
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_LOGDISKS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_LOGDISKS;
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS;
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS;
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_DISKS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_DISKS;
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICA_VOLUMES = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICA_VOLUMES;
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_VOLUME = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_VOLUME;
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_RESOURCE_GROUP = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_RESOURCE_GROUP;
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_PARTITION_INFO = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_PARTITION_INFO;
pub const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_INFO = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_INFO;
pub const CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS;
pub const CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY;
pub const CLUSCTL_RESOURCE_TYPE_PREPARE_UPGRADE = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_PREPARE_UPGRADE;
pub const CLUSCTL_RESOURCE_TYPE_UPGRADE_COMPLETED = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_UPGRADE_COMPLETED;
pub const CLUSCTL_RESOURCE_TYPE_NOTIFY_MONITOR_SHUTTING_DOWN = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_NOTIFY_MONITOR_SHUTTING_DOWN;
pub const CLUSCTL_RESOURCE_TYPE_CHECK_DRAIN_VETO = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_CHECK_DRAIN_VETO;
pub const CLUSCTL_RESOURCE_TYPE_NOTIFY_DRAIN_COMPLETE = CLUSCTL_RESOURCE_TYPE_CODES.CLUSCTL_RESOURCE_TYPE_NOTIFY_DRAIN_COMPLETE;

pub const CLUSCTL_GROUP_CODES = extern enum(i32) {
    CLUSCTL_GROUP_UNKNOWN = 50331648,
    CLUSCTL_GROUP_GET_CHARACTERISTICS = 50331653,
    CLUSCTL_GROUP_GET_FLAGS = 50331657,
    CLUSCTL_GROUP_GET_NAME = 50331689,
    CLUSCTL_GROUP_GET_ID = 50331705,
    CLUSCTL_GROUP_ENUM_COMMON_PROPERTIES = 50331729,
    CLUSCTL_GROUP_GET_RO_COMMON_PROPERTIES = 50331733,
    CLUSCTL_GROUP_GET_COMMON_PROPERTIES = 50331737,
    CLUSCTL_GROUP_SET_COMMON_PROPERTIES = 54526046,
    CLUSCTL_GROUP_VALIDATE_COMMON_PROPERTIES = 50331745,
    CLUSCTL_GROUP_ENUM_PRIVATE_PROPERTIES = 50331769,
    CLUSCTL_GROUP_GET_RO_PRIVATE_PROPERTIES = 50331773,
    CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES = 50331777,
    CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES = 54526086,
    CLUSCTL_GROUP_VALIDATE_PRIVATE_PROPERTIES = 50331785,
    CLUSCTL_GROUP_QUERY_DELETE = 50332089,
    CLUSCTL_GROUP_GET_COMMON_PROPERTY_FMTS = 50331749,
    CLUSCTL_GROUP_GET_PRIVATE_PROPERTY_FMTS = 50331789,
    CLUSCTL_GROUP_GET_FAILURE_INFO = 50331673,
    CLUSCTL_GROUP_GET_LAST_MOVE_TIME = 50332377,
    CLUSCTL_GROUP_SET_CCF_FROM_MASTER = 54537606,
};
pub const CLUSCTL_GROUP_UNKNOWN = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_UNKNOWN;
pub const CLUSCTL_GROUP_GET_CHARACTERISTICS = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_GET_CHARACTERISTICS;
pub const CLUSCTL_GROUP_GET_FLAGS = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_GET_FLAGS;
pub const CLUSCTL_GROUP_GET_NAME = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_GET_NAME;
pub const CLUSCTL_GROUP_GET_ID = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_GET_ID;
pub const CLUSCTL_GROUP_ENUM_COMMON_PROPERTIES = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_ENUM_COMMON_PROPERTIES;
pub const CLUSCTL_GROUP_GET_RO_COMMON_PROPERTIES = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_GET_RO_COMMON_PROPERTIES;
pub const CLUSCTL_GROUP_GET_COMMON_PROPERTIES = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_GET_COMMON_PROPERTIES;
pub const CLUSCTL_GROUP_SET_COMMON_PROPERTIES = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_SET_COMMON_PROPERTIES;
pub const CLUSCTL_GROUP_VALIDATE_COMMON_PROPERTIES = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_VALIDATE_COMMON_PROPERTIES;
pub const CLUSCTL_GROUP_ENUM_PRIVATE_PROPERTIES = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_ENUM_PRIVATE_PROPERTIES;
pub const CLUSCTL_GROUP_GET_RO_PRIVATE_PROPERTIES = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_GET_RO_PRIVATE_PROPERTIES;
pub const CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES;
pub const CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES;
pub const CLUSCTL_GROUP_VALIDATE_PRIVATE_PROPERTIES = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_VALIDATE_PRIVATE_PROPERTIES;
pub const CLUSCTL_GROUP_QUERY_DELETE = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_QUERY_DELETE;
pub const CLUSCTL_GROUP_GET_COMMON_PROPERTY_FMTS = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_GET_COMMON_PROPERTY_FMTS;
pub const CLUSCTL_GROUP_GET_PRIVATE_PROPERTY_FMTS = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_GET_PRIVATE_PROPERTY_FMTS;
pub const CLUSCTL_GROUP_GET_FAILURE_INFO = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_GET_FAILURE_INFO;
pub const CLUSCTL_GROUP_GET_LAST_MOVE_TIME = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_GET_LAST_MOVE_TIME;
pub const CLUSCTL_GROUP_SET_CCF_FROM_MASTER = CLUSCTL_GROUP_CODES.CLUSCTL_GROUP_SET_CCF_FROM_MASTER;

pub const CLUSCTL_NODE_CODES = extern enum(i32) {
    CLUSCTL_NODE_UNKNOWN = 67108864,
    CLUSCTL_NODE_GET_CHARACTERISTICS = 67108869,
    CLUSCTL_NODE_GET_FLAGS = 67108873,
    CLUSCTL_NODE_GET_NAME = 67108905,
    CLUSCTL_NODE_GET_ID = 67108921,
    CLUSCTL_NODE_ENUM_COMMON_PROPERTIES = 67108945,
    CLUSCTL_NODE_GET_RO_COMMON_PROPERTIES = 67108949,
    CLUSCTL_NODE_GET_COMMON_PROPERTIES = 67108953,
    CLUSCTL_NODE_SET_COMMON_PROPERTIES = 71303262,
    CLUSCTL_NODE_VALIDATE_COMMON_PROPERTIES = 67108961,
    CLUSCTL_NODE_ENUM_PRIVATE_PROPERTIES = 67108985,
    CLUSCTL_NODE_GET_RO_PRIVATE_PROPERTIES = 67108989,
    CLUSCTL_NODE_GET_PRIVATE_PROPERTIES = 67108993,
    CLUSCTL_NODE_SET_PRIVATE_PROPERTIES = 71303302,
    CLUSCTL_NODE_VALIDATE_PRIVATE_PROPERTIES = 67109001,
    CLUSCTL_NODE_GET_COMMON_PROPERTY_FMTS = 67108965,
    CLUSCTL_NODE_GET_PRIVATE_PROPERTY_FMTS = 67109005,
    CLUSCTL_NODE_GET_CLUSTER_SERVICE_ACCOUNT_NAME = 67108929,
    CLUSCTL_NODE_GET_STUCK_NODES = 67109565,
    CLUSCTL_NODE_INJECT_GEM_FAULT = 67109569,
    CLUSCTL_NODE_INTRODUCE_GEM_REPAIR_DELAY = 67109573,
    CLUSCTL_NODE_SEND_DUMMY_GEM_MESSAGES = 67109577,
    CLUSCTL_NODE_BLOCK_GEM_SEND_RECV = 67109581,
    CLUSCTL_NODE_GET_GEMID_VECTOR = 67109585,
};
pub const CLUSCTL_NODE_UNKNOWN = CLUSCTL_NODE_CODES.CLUSCTL_NODE_UNKNOWN;
pub const CLUSCTL_NODE_GET_CHARACTERISTICS = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_CHARACTERISTICS;
pub const CLUSCTL_NODE_GET_FLAGS = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_FLAGS;
pub const CLUSCTL_NODE_GET_NAME = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_NAME;
pub const CLUSCTL_NODE_GET_ID = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_ID;
pub const CLUSCTL_NODE_ENUM_COMMON_PROPERTIES = CLUSCTL_NODE_CODES.CLUSCTL_NODE_ENUM_COMMON_PROPERTIES;
pub const CLUSCTL_NODE_GET_RO_COMMON_PROPERTIES = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_RO_COMMON_PROPERTIES;
pub const CLUSCTL_NODE_GET_COMMON_PROPERTIES = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_COMMON_PROPERTIES;
pub const CLUSCTL_NODE_SET_COMMON_PROPERTIES = CLUSCTL_NODE_CODES.CLUSCTL_NODE_SET_COMMON_PROPERTIES;
pub const CLUSCTL_NODE_VALIDATE_COMMON_PROPERTIES = CLUSCTL_NODE_CODES.CLUSCTL_NODE_VALIDATE_COMMON_PROPERTIES;
pub const CLUSCTL_NODE_ENUM_PRIVATE_PROPERTIES = CLUSCTL_NODE_CODES.CLUSCTL_NODE_ENUM_PRIVATE_PROPERTIES;
pub const CLUSCTL_NODE_GET_RO_PRIVATE_PROPERTIES = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_RO_PRIVATE_PROPERTIES;
pub const CLUSCTL_NODE_GET_PRIVATE_PROPERTIES = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_PRIVATE_PROPERTIES;
pub const CLUSCTL_NODE_SET_PRIVATE_PROPERTIES = CLUSCTL_NODE_CODES.CLUSCTL_NODE_SET_PRIVATE_PROPERTIES;
pub const CLUSCTL_NODE_VALIDATE_PRIVATE_PROPERTIES = CLUSCTL_NODE_CODES.CLUSCTL_NODE_VALIDATE_PRIVATE_PROPERTIES;
pub const CLUSCTL_NODE_GET_COMMON_PROPERTY_FMTS = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_COMMON_PROPERTY_FMTS;
pub const CLUSCTL_NODE_GET_PRIVATE_PROPERTY_FMTS = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_PRIVATE_PROPERTY_FMTS;
pub const CLUSCTL_NODE_GET_CLUSTER_SERVICE_ACCOUNT_NAME = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_CLUSTER_SERVICE_ACCOUNT_NAME;
pub const CLUSCTL_NODE_GET_STUCK_NODES = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_STUCK_NODES;
pub const CLUSCTL_NODE_INJECT_GEM_FAULT = CLUSCTL_NODE_CODES.CLUSCTL_NODE_INJECT_GEM_FAULT;
pub const CLUSCTL_NODE_INTRODUCE_GEM_REPAIR_DELAY = CLUSCTL_NODE_CODES.CLUSCTL_NODE_INTRODUCE_GEM_REPAIR_DELAY;
pub const CLUSCTL_NODE_SEND_DUMMY_GEM_MESSAGES = CLUSCTL_NODE_CODES.CLUSCTL_NODE_SEND_DUMMY_GEM_MESSAGES;
pub const CLUSCTL_NODE_BLOCK_GEM_SEND_RECV = CLUSCTL_NODE_CODES.CLUSCTL_NODE_BLOCK_GEM_SEND_RECV;
pub const CLUSCTL_NODE_GET_GEMID_VECTOR = CLUSCTL_NODE_CODES.CLUSCTL_NODE_GET_GEMID_VECTOR;

pub const CLUSCTL_NETWORK_CODES = extern enum(i32) {
    CLUSCTL_NETWORK_UNKNOWN = 83886080,
    CLUSCTL_NETWORK_GET_CHARACTERISTICS = 83886085,
    CLUSCTL_NETWORK_GET_FLAGS = 83886089,
    CLUSCTL_NETWORK_GET_NAME = 83886121,
    CLUSCTL_NETWORK_GET_ID = 83886137,
    CLUSCTL_NETWORK_ENUM_COMMON_PROPERTIES = 83886161,
    CLUSCTL_NETWORK_GET_RO_COMMON_PROPERTIES = 83886165,
    CLUSCTL_NETWORK_GET_COMMON_PROPERTIES = 83886169,
    CLUSCTL_NETWORK_SET_COMMON_PROPERTIES = 88080478,
    CLUSCTL_NETWORK_VALIDATE_COMMON_PROPERTIES = 83886177,
    CLUSCTL_NETWORK_ENUM_PRIVATE_PROPERTIES = 83886201,
    CLUSCTL_NETWORK_GET_RO_PRIVATE_PROPERTIES = 83886205,
    CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES = 83886209,
    CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES = 88080518,
    CLUSCTL_NETWORK_VALIDATE_PRIVATE_PROPERTIES = 83886217,
    CLUSCTL_NETWORK_GET_COMMON_PROPERTY_FMTS = 83886181,
    CLUSCTL_NETWORK_GET_PRIVATE_PROPERTY_FMTS = 83886221,
};
pub const CLUSCTL_NETWORK_UNKNOWN = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_UNKNOWN;
pub const CLUSCTL_NETWORK_GET_CHARACTERISTICS = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_GET_CHARACTERISTICS;
pub const CLUSCTL_NETWORK_GET_FLAGS = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_GET_FLAGS;
pub const CLUSCTL_NETWORK_GET_NAME = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_GET_NAME;
pub const CLUSCTL_NETWORK_GET_ID = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_GET_ID;
pub const CLUSCTL_NETWORK_ENUM_COMMON_PROPERTIES = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_ENUM_COMMON_PROPERTIES;
pub const CLUSCTL_NETWORK_GET_RO_COMMON_PROPERTIES = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_GET_RO_COMMON_PROPERTIES;
pub const CLUSCTL_NETWORK_GET_COMMON_PROPERTIES = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_GET_COMMON_PROPERTIES;
pub const CLUSCTL_NETWORK_SET_COMMON_PROPERTIES = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_SET_COMMON_PROPERTIES;
pub const CLUSCTL_NETWORK_VALIDATE_COMMON_PROPERTIES = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_VALIDATE_COMMON_PROPERTIES;
pub const CLUSCTL_NETWORK_ENUM_PRIVATE_PROPERTIES = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_ENUM_PRIVATE_PROPERTIES;
pub const CLUSCTL_NETWORK_GET_RO_PRIVATE_PROPERTIES = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_GET_RO_PRIVATE_PROPERTIES;
pub const CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES;
pub const CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES;
pub const CLUSCTL_NETWORK_VALIDATE_PRIVATE_PROPERTIES = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_VALIDATE_PRIVATE_PROPERTIES;
pub const CLUSCTL_NETWORK_GET_COMMON_PROPERTY_FMTS = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_GET_COMMON_PROPERTY_FMTS;
pub const CLUSCTL_NETWORK_GET_PRIVATE_PROPERTY_FMTS = CLUSCTL_NETWORK_CODES.CLUSCTL_NETWORK_GET_PRIVATE_PROPERTY_FMTS;

pub const CLUSCTL_NETINTERFACE_CODES = extern enum(i32) {
    CLUSCTL_NETINTERFACE_UNKNOWN = 100663296,
    CLUSCTL_NETINTERFACE_GET_CHARACTERISTICS = 100663301,
    CLUSCTL_NETINTERFACE_GET_FLAGS = 100663305,
    CLUSCTL_NETINTERFACE_GET_NAME = 100663337,
    CLUSCTL_NETINTERFACE_GET_ID = 100663353,
    CLUSCTL_NETINTERFACE_GET_NODE = 100663345,
    CLUSCTL_NETINTERFACE_GET_NETWORK = 100663349,
    CLUSCTL_NETINTERFACE_ENUM_COMMON_PROPERTIES = 100663377,
    CLUSCTL_NETINTERFACE_GET_RO_COMMON_PROPERTIES = 100663381,
    CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTIES = 100663385,
    CLUSCTL_NETINTERFACE_SET_COMMON_PROPERTIES = 104857694,
    CLUSCTL_NETINTERFACE_VALIDATE_COMMON_PROPERTIES = 100663393,
    CLUSCTL_NETINTERFACE_ENUM_PRIVATE_PROPERTIES = 100663417,
    CLUSCTL_NETINTERFACE_GET_RO_PRIVATE_PROPERTIES = 100663421,
    CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTIES = 100663425,
    CLUSCTL_NETINTERFACE_SET_PRIVATE_PROPERTIES = 104857734,
    CLUSCTL_NETINTERFACE_VALIDATE_PRIVATE_PROPERTIES = 100663433,
    CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTY_FMTS = 100663397,
    CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTY_FMTS = 100663437,
};
pub const CLUSCTL_NETINTERFACE_UNKNOWN = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_UNKNOWN;
pub const CLUSCTL_NETINTERFACE_GET_CHARACTERISTICS = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_GET_CHARACTERISTICS;
pub const CLUSCTL_NETINTERFACE_GET_FLAGS = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_GET_FLAGS;
pub const CLUSCTL_NETINTERFACE_GET_NAME = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_GET_NAME;
pub const CLUSCTL_NETINTERFACE_GET_ID = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_GET_ID;
pub const CLUSCTL_NETINTERFACE_GET_NODE = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_GET_NODE;
pub const CLUSCTL_NETINTERFACE_GET_NETWORK = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_GET_NETWORK;
pub const CLUSCTL_NETINTERFACE_ENUM_COMMON_PROPERTIES = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_ENUM_COMMON_PROPERTIES;
pub const CLUSCTL_NETINTERFACE_GET_RO_COMMON_PROPERTIES = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_GET_RO_COMMON_PROPERTIES;
pub const CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTIES = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTIES;
pub const CLUSCTL_NETINTERFACE_SET_COMMON_PROPERTIES = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_SET_COMMON_PROPERTIES;
pub const CLUSCTL_NETINTERFACE_VALIDATE_COMMON_PROPERTIES = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_VALIDATE_COMMON_PROPERTIES;
pub const CLUSCTL_NETINTERFACE_ENUM_PRIVATE_PROPERTIES = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_ENUM_PRIVATE_PROPERTIES;
pub const CLUSCTL_NETINTERFACE_GET_RO_PRIVATE_PROPERTIES = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_GET_RO_PRIVATE_PROPERTIES;
pub const CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTIES = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTIES;
pub const CLUSCTL_NETINTERFACE_SET_PRIVATE_PROPERTIES = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_SET_PRIVATE_PROPERTIES;
pub const CLUSCTL_NETINTERFACE_VALIDATE_PRIVATE_PROPERTIES = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_VALIDATE_PRIVATE_PROPERTIES;
pub const CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTY_FMTS = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTY_FMTS;
pub const CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTY_FMTS = CLUSCTL_NETINTERFACE_CODES.CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTY_FMTS;

pub const CLUSCTL_CLUSTER_CODES = extern enum(i32) {
    CLUSCTL_CLUSTER_UNKNOWN = 117440512,
    CLUSCTL_CLUSTER_GET_FQDN = 117440573,
    CLUSCTL_CLUSTER_SET_STORAGE_CONFIGURATION = 121635554,
    CLUSCTL_CLUSTER_GET_STORAGE_CONFIGURATION = 117441253,
    CLUSCTL_CLUSTER_GET_STORAGE_CONFIG_ATTRIBUTES = 117441257,
    CLUSCTL_CLUSTER_ENUM_COMMON_PROPERTIES = 117440593,
    CLUSCTL_CLUSTER_GET_RO_COMMON_PROPERTIES = 117440597,
    CLUSCTL_CLUSTER_GET_COMMON_PROPERTIES = 117440601,
    CLUSCTL_CLUSTER_SET_COMMON_PROPERTIES = 121634910,
    CLUSCTL_CLUSTER_VALIDATE_COMMON_PROPERTIES = 117440609,
    CLUSCTL_CLUSTER_ENUM_PRIVATE_PROPERTIES = 117440633,
    CLUSCTL_CLUSTER_GET_RO_PRIVATE_PROPERTIES = 117440637,
    CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTIES = 117440641,
    CLUSCTL_CLUSTER_SET_PRIVATE_PROPERTIES = 121634950,
    CLUSCTL_CLUSTER_VALIDATE_PRIVATE_PROPERTIES = 117440649,
    CLUSCTL_CLUSTER_GET_COMMON_PROPERTY_FMTS = 117440613,
    CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTY_FMTS = 117440653,
    CLUSCTL_CLUSTER_CHECK_VOTER_EVICT = 117440581,
    CLUSCTL_CLUSTER_CHECK_VOTER_DOWN = 117440585,
    CLUSCTL_CLUSTER_SHUTDOWN = 117440589,
    CLUSCTL_CLUSTER_BATCH_BLOCK_KEY = 117441086,
    CLUSCTL_CLUSTER_BATCH_UNBLOCK_KEY = 117441089,
    CLUSCTL_CLUSTER_GET_SHARED_VOLUME_ID = 117441169,
    CLUSCTL_CLUSTER_GET_CLUSDB_TIMESTAMP = 117441193,
    CLUSCTL_CLUSTER_GET_GUM_LOCK_OWNER = 117441209,
    CLUSCTL_CLUSTER_REMOVE_NODE = 121635566,
    CLUSCTL_CLUSTER_SET_ACCOUNT_ACCESS = 121635058,
    CLUSCTL_CLUSTER_CLEAR_NODE_CONNECTION_INFO = 121635590,
    CLUSCTL_CLUSTER_SET_DNS_DOMAIN = 121635594,
    CLUSCTL_CLUSTER_SET_CLUSTER_S2D_ENABLED = 121646434,
    CLUSCTL_CLUSTER_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES = 121646446,
    CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME = 117452246,
    CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME_GUID = 117452250,
    CLUSCTL_CLUSTER_RELOAD_AUTOLOGGER_CONFIG = 117452242,
    CLUSCTL_CLUSTER_ENUM_AFFINITY_RULE_NAMES = 117452253,
};
pub const CLUSCTL_CLUSTER_UNKNOWN = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_UNKNOWN;
pub const CLUSCTL_CLUSTER_GET_FQDN = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_GET_FQDN;
pub const CLUSCTL_CLUSTER_SET_STORAGE_CONFIGURATION = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_SET_STORAGE_CONFIGURATION;
pub const CLUSCTL_CLUSTER_GET_STORAGE_CONFIGURATION = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_GET_STORAGE_CONFIGURATION;
pub const CLUSCTL_CLUSTER_GET_STORAGE_CONFIG_ATTRIBUTES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_GET_STORAGE_CONFIG_ATTRIBUTES;
pub const CLUSCTL_CLUSTER_ENUM_COMMON_PROPERTIES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_ENUM_COMMON_PROPERTIES;
pub const CLUSCTL_CLUSTER_GET_RO_COMMON_PROPERTIES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_GET_RO_COMMON_PROPERTIES;
pub const CLUSCTL_CLUSTER_GET_COMMON_PROPERTIES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_GET_COMMON_PROPERTIES;
pub const CLUSCTL_CLUSTER_SET_COMMON_PROPERTIES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_SET_COMMON_PROPERTIES;
pub const CLUSCTL_CLUSTER_VALIDATE_COMMON_PROPERTIES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_VALIDATE_COMMON_PROPERTIES;
pub const CLUSCTL_CLUSTER_ENUM_PRIVATE_PROPERTIES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_ENUM_PRIVATE_PROPERTIES;
pub const CLUSCTL_CLUSTER_GET_RO_PRIVATE_PROPERTIES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_GET_RO_PRIVATE_PROPERTIES;
pub const CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTIES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTIES;
pub const CLUSCTL_CLUSTER_SET_PRIVATE_PROPERTIES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_SET_PRIVATE_PROPERTIES;
pub const CLUSCTL_CLUSTER_VALIDATE_PRIVATE_PROPERTIES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_VALIDATE_PRIVATE_PROPERTIES;
pub const CLUSCTL_CLUSTER_GET_COMMON_PROPERTY_FMTS = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_GET_COMMON_PROPERTY_FMTS;
pub const CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTY_FMTS = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTY_FMTS;
pub const CLUSCTL_CLUSTER_CHECK_VOTER_EVICT = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_CHECK_VOTER_EVICT;
pub const CLUSCTL_CLUSTER_CHECK_VOTER_DOWN = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_CHECK_VOTER_DOWN;
pub const CLUSCTL_CLUSTER_SHUTDOWN = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_SHUTDOWN;
pub const CLUSCTL_CLUSTER_BATCH_BLOCK_KEY = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_BATCH_BLOCK_KEY;
pub const CLUSCTL_CLUSTER_BATCH_UNBLOCK_KEY = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_BATCH_UNBLOCK_KEY;
pub const CLUSCTL_CLUSTER_GET_SHARED_VOLUME_ID = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_GET_SHARED_VOLUME_ID;
pub const CLUSCTL_CLUSTER_GET_CLUSDB_TIMESTAMP = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_GET_CLUSDB_TIMESTAMP;
pub const CLUSCTL_CLUSTER_GET_GUM_LOCK_OWNER = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_GET_GUM_LOCK_OWNER;
pub const CLUSCTL_CLUSTER_REMOVE_NODE = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_REMOVE_NODE;
pub const CLUSCTL_CLUSTER_SET_ACCOUNT_ACCESS = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_SET_ACCOUNT_ACCESS;
pub const CLUSCTL_CLUSTER_CLEAR_NODE_CONNECTION_INFO = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_CLEAR_NODE_CONNECTION_INFO;
pub const CLUSCTL_CLUSTER_SET_DNS_DOMAIN = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_SET_DNS_DOMAIN;
pub const CLUSCTL_CLUSTER_SET_CLUSTER_S2D_ENABLED = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_SET_CLUSTER_S2D_ENABLED;
pub const CLUSCTL_CLUSTER_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES;
pub const CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME;
pub const CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME_GUID = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME_GUID;
pub const CLUSCTL_CLUSTER_RELOAD_AUTOLOGGER_CONFIG = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_RELOAD_AUTOLOGGER_CONFIG;
pub const CLUSCTL_CLUSTER_ENUM_AFFINITY_RULE_NAMES = CLUSCTL_CLUSTER_CODES.CLUSCTL_CLUSTER_ENUM_AFFINITY_RULE_NAMES;

pub const CLUSCTL_GROUPSET_CODES = extern enum(i32) {
    CLUSCTL_GROUPSET_GET_COMMON_PROPERTIES = 134217817,
    CLUSCTL_GROUPSET_GET_RO_COMMON_PROPERTIES = 134217813,
    CLUSCTL_GROUPSET_SET_COMMON_PROPERTIES = 138412126,
    CLUSCTL_GROUPSET_GET_GROUPS = 134229361,
    CLUSCTL_GROUPSET_GET_PROVIDER_GROUPS = 134229365,
    CLUSCTL_GROUPSET_GET_PROVIDER_GROUPSETS = 134229369,
    CLUSCTL_GROUP_GET_PROVIDER_GROUPS = 134229373,
    CLUSCTL_GROUP_GET_PROVIDER_GROUPSETS = 134229377,
    CLUSCTL_GROUPSET_GET_ID = 134217785,
};
pub const CLUSCTL_GROUPSET_GET_COMMON_PROPERTIES = CLUSCTL_GROUPSET_CODES.CLUSCTL_GROUPSET_GET_COMMON_PROPERTIES;
pub const CLUSCTL_GROUPSET_GET_RO_COMMON_PROPERTIES = CLUSCTL_GROUPSET_CODES.CLUSCTL_GROUPSET_GET_RO_COMMON_PROPERTIES;
pub const CLUSCTL_GROUPSET_SET_COMMON_PROPERTIES = CLUSCTL_GROUPSET_CODES.CLUSCTL_GROUPSET_SET_COMMON_PROPERTIES;
pub const CLUSCTL_GROUPSET_GET_GROUPS = CLUSCTL_GROUPSET_CODES.CLUSCTL_GROUPSET_GET_GROUPS;
pub const CLUSCTL_GROUPSET_GET_PROVIDER_GROUPS = CLUSCTL_GROUPSET_CODES.CLUSCTL_GROUPSET_GET_PROVIDER_GROUPS;
pub const CLUSCTL_GROUPSET_GET_PROVIDER_GROUPSETS = CLUSCTL_GROUPSET_CODES.CLUSCTL_GROUPSET_GET_PROVIDER_GROUPSETS;
pub const CLUSCTL_GROUP_GET_PROVIDER_GROUPS = CLUSCTL_GROUPSET_CODES.CLUSCTL_GROUP_GET_PROVIDER_GROUPS;
pub const CLUSCTL_GROUP_GET_PROVIDER_GROUPSETS = CLUSCTL_GROUPSET_CODES.CLUSCTL_GROUP_GET_PROVIDER_GROUPSETS;
pub const CLUSCTL_GROUPSET_GET_ID = CLUSCTL_GROUPSET_CODES.CLUSCTL_GROUPSET_GET_ID;

pub const CLUSCTL_AFFINITYRULE_CODES = extern enum(i32) {
    CLUSCTL_AFFINITYRULE_GET_COMMON_PROPERTIES = 150995033,
    CLUSCTL_AFFINITYRULE_GET_RO_COMMON_PROPERTIES = 150995029,
    CLUSCTL_AFFINITYRULE_SET_COMMON_PROPERTIES = 155189342,
    CLUSCTL_AFFINITYRULE_GET_ID = 150995001,
    CLUSCTL_AFFINITYRULE_GET_GROUPNAMES = 151006577,
};
pub const CLUSCTL_AFFINITYRULE_GET_COMMON_PROPERTIES = CLUSCTL_AFFINITYRULE_CODES.CLUSCTL_AFFINITYRULE_GET_COMMON_PROPERTIES;
pub const CLUSCTL_AFFINITYRULE_GET_RO_COMMON_PROPERTIES = CLUSCTL_AFFINITYRULE_CODES.CLUSCTL_AFFINITYRULE_GET_RO_COMMON_PROPERTIES;
pub const CLUSCTL_AFFINITYRULE_SET_COMMON_PROPERTIES = CLUSCTL_AFFINITYRULE_CODES.CLUSCTL_AFFINITYRULE_SET_COMMON_PROPERTIES;
pub const CLUSCTL_AFFINITYRULE_GET_ID = CLUSCTL_AFFINITYRULE_CODES.CLUSCTL_AFFINITYRULE_GET_ID;
pub const CLUSCTL_AFFINITYRULE_GET_GROUPNAMES = CLUSCTL_AFFINITYRULE_CODES.CLUSCTL_AFFINITYRULE_GET_GROUPNAMES;

pub const CLUSTER_RESOURCE_CLASS = extern enum(i32) {
    CLUS_RESCLASS_UNKNOWN = 0,
    CLUS_RESCLASS_STORAGE = 1,
    CLUS_RESCLASS_NETWORK = 2,
    CLUS_RESCLASS_USER = 32768,
};
pub const CLUS_RESCLASS_UNKNOWN = CLUSTER_RESOURCE_CLASS.CLUS_RESCLASS_UNKNOWN;
pub const CLUS_RESCLASS_STORAGE = CLUSTER_RESOURCE_CLASS.CLUS_RESCLASS_STORAGE;
pub const CLUS_RESCLASS_NETWORK = CLUSTER_RESOURCE_CLASS.CLUS_RESCLASS_NETWORK;
pub const CLUS_RESCLASS_USER = CLUSTER_RESOURCE_CLASS.CLUS_RESCLASS_USER;

pub const CLUS_RESSUBCLASS = extern enum(i32) {
    SHARED = -2147483648,
};
pub const CLUS_RESSUBCLASS_SHARED = CLUS_RESSUBCLASS.SHARED;

pub const CLUS_RESSUBCLASS_STORAGE = extern enum(i32) {
    SHARED_BUS = -2147483648,
    DISK = 1073741824,
    REPLICATION = 268435456,
};
pub const CLUS_RESSUBCLASS_STORAGE_SHARED_BUS = CLUS_RESSUBCLASS_STORAGE.SHARED_BUS;
pub const CLUS_RESSUBCLASS_STORAGE_DISK = CLUS_RESSUBCLASS_STORAGE.DISK;
pub const CLUS_RESSUBCLASS_STORAGE_REPLICATION = CLUS_RESSUBCLASS_STORAGE.REPLICATION;

pub const CLUS_RESSUBCLASS_NETWORK = extern enum(i32) {
    INTERNET_PROTOCOL = -2147483648,
};
pub const CLUS_RESSUBCLASS_NETWORK_INTERNET_PROTOCOL = CLUS_RESSUBCLASS_NETWORK.INTERNET_PROTOCOL;

pub const CLUS_CHARACTERISTICS = extern enum(i32) {
    CLUS_CHAR_UNKNOWN = 0,
    CLUS_CHAR_QUORUM = 1,
    CLUS_CHAR_DELETE_REQUIRES_ALL_NODES = 2,
    CLUS_CHAR_LOCAL_QUORUM = 4,
    CLUS_CHAR_LOCAL_QUORUM_DEBUG = 8,
    CLUS_CHAR_REQUIRES_STATE_CHANGE_REASON = 16,
    CLUS_CHAR_BROADCAST_DELETE = 32,
    CLUS_CHAR_SINGLE_CLUSTER_INSTANCE = 64,
    CLUS_CHAR_SINGLE_GROUP_INSTANCE = 128,
    CLUS_CHAR_COEXIST_IN_SHARED_VOLUME_GROUP = 256,
    CLUS_CHAR_PLACEMENT_DATA = 512,
    CLUS_CHAR_MONITOR_DETACH = 1024,
    CLUS_CHAR_MONITOR_REATTACH = 2048,
    CLUS_CHAR_OPERATION_CONTEXT = 4096,
    CLUS_CHAR_CLONES = 8192,
    CLUS_CHAR_NOT_PREEMPTABLE = 16384,
    CLUS_CHAR_NOTIFY_NEW_OWNER = 32768,
    CLUS_CHAR_SUPPORTS_UNMONITORED_STATE = 65536,
    CLUS_CHAR_INFRASTRUCTURE = 131072,
    CLUS_CHAR_VETO_DRAIN = 262144,
};
pub const CLUS_CHAR_UNKNOWN = CLUS_CHARACTERISTICS.CLUS_CHAR_UNKNOWN;
pub const CLUS_CHAR_QUORUM = CLUS_CHARACTERISTICS.CLUS_CHAR_QUORUM;
pub const CLUS_CHAR_DELETE_REQUIRES_ALL_NODES = CLUS_CHARACTERISTICS.CLUS_CHAR_DELETE_REQUIRES_ALL_NODES;
pub const CLUS_CHAR_LOCAL_QUORUM = CLUS_CHARACTERISTICS.CLUS_CHAR_LOCAL_QUORUM;
pub const CLUS_CHAR_LOCAL_QUORUM_DEBUG = CLUS_CHARACTERISTICS.CLUS_CHAR_LOCAL_QUORUM_DEBUG;
pub const CLUS_CHAR_REQUIRES_STATE_CHANGE_REASON = CLUS_CHARACTERISTICS.CLUS_CHAR_REQUIRES_STATE_CHANGE_REASON;
pub const CLUS_CHAR_BROADCAST_DELETE = CLUS_CHARACTERISTICS.CLUS_CHAR_BROADCAST_DELETE;
pub const CLUS_CHAR_SINGLE_CLUSTER_INSTANCE = CLUS_CHARACTERISTICS.CLUS_CHAR_SINGLE_CLUSTER_INSTANCE;
pub const CLUS_CHAR_SINGLE_GROUP_INSTANCE = CLUS_CHARACTERISTICS.CLUS_CHAR_SINGLE_GROUP_INSTANCE;
pub const CLUS_CHAR_COEXIST_IN_SHARED_VOLUME_GROUP = CLUS_CHARACTERISTICS.CLUS_CHAR_COEXIST_IN_SHARED_VOLUME_GROUP;
pub const CLUS_CHAR_PLACEMENT_DATA = CLUS_CHARACTERISTICS.CLUS_CHAR_PLACEMENT_DATA;
pub const CLUS_CHAR_MONITOR_DETACH = CLUS_CHARACTERISTICS.CLUS_CHAR_MONITOR_DETACH;
pub const CLUS_CHAR_MONITOR_REATTACH = CLUS_CHARACTERISTICS.CLUS_CHAR_MONITOR_REATTACH;
pub const CLUS_CHAR_OPERATION_CONTEXT = CLUS_CHARACTERISTICS.CLUS_CHAR_OPERATION_CONTEXT;
pub const CLUS_CHAR_CLONES = CLUS_CHARACTERISTICS.CLUS_CHAR_CLONES;
pub const CLUS_CHAR_NOT_PREEMPTABLE = CLUS_CHARACTERISTICS.CLUS_CHAR_NOT_PREEMPTABLE;
pub const CLUS_CHAR_NOTIFY_NEW_OWNER = CLUS_CHARACTERISTICS.CLUS_CHAR_NOTIFY_NEW_OWNER;
pub const CLUS_CHAR_SUPPORTS_UNMONITORED_STATE = CLUS_CHARACTERISTICS.CLUS_CHAR_SUPPORTS_UNMONITORED_STATE;
pub const CLUS_CHAR_INFRASTRUCTURE = CLUS_CHARACTERISTICS.CLUS_CHAR_INFRASTRUCTURE;
pub const CLUS_CHAR_VETO_DRAIN = CLUS_CHARACTERISTICS.CLUS_CHAR_VETO_DRAIN;

pub const CLUS_FLAGS = extern enum(i32) {
    CLUS_FLAG_CORE = 1,
};
pub const CLUS_FLAG_CORE = CLUS_FLAGS.CLUS_FLAG_CORE;

pub const CLUSPROP_SYNTAX = u32; // TODO: implement StructOrUnion types?

pub const CLUSPROP_VALUE = extern struct {
    Syntax: CLUSPROP_SYNTAX,
    cbLength: u32,
};

pub const CLUSPROP_BINARY = extern struct {
    __AnonymousBase_clusapi_L5092_C41: CLUSPROP_VALUE,
    rgb: u8,
};

pub const CLUSPROP_WORD = extern struct {
    __AnonymousBase_clusapi_L5102_C39: CLUSPROP_VALUE,
    w: u16,
};

pub const CLUSPROP_DWORD = extern struct {
    __AnonymousBase_clusapi_L5112_C40: CLUSPROP_VALUE,
    dw: u32,
};

pub const CLUSPROP_LONG = extern struct {
    __AnonymousBase_clusapi_L5122_C39: CLUSPROP_VALUE,
    l: i32,
};

pub const CLUSPROP_SZ = extern struct {
    __AnonymousBase_clusapi_L5132_C37: CLUSPROP_VALUE,
    sz: u16,
};

pub const CLUSPROP_ULARGE_INTEGER = extern struct {
    __AnonymousBase_clusapi_L5149_C14: CLUSPROP_VALUE,
    li: ULARGE_INTEGER,
};

pub const CLUSPROP_LARGE_INTEGER = extern struct {
    __AnonymousBase_clusapi_L5162_C14: CLUSPROP_VALUE,
    li: LARGE_INTEGER,
};

pub const CLUSPROP_SECURITY_DESCRIPTOR = extern struct {
    __AnonymousBase_clusapi_L5174_C54: CLUSPROP_VALUE,
    Anonymous: CLUSPROP_SECURITY_DESCRIPTOR._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CLUSPROP_FILETIME = extern struct {
    __AnonymousBase_clusapi_L5188_C14: CLUSPROP_VALUE,
    ft: FILETIME,
};

pub const CLUS_RESOURCE_CLASS_INFO = extern struct {
    Anonymous: CLUS_RESOURCE_CLASS_INFO._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CLUSPROP_RESOURCE_CLASS = extern struct {
    __AnonymousBase_clusapi_L5213_C14: CLUSPROP_VALUE,
    rc: CLUSTER_RESOURCE_CLASS,
};

pub const CLUSPROP_RESOURCE_CLASS_INFO = extern struct {
    __AnonymousBase_clusapi_L5224_C14: CLUSPROP_VALUE,
    __AnonymousBase_clusapi_L5225_C14: CLUS_RESOURCE_CLASS_INFO,
};

pub const CLUSPROP_REQUIRED_DEPENDENCY = u32; // TODO: implement StructOrUnion types?

pub const CLUSPROP_PIFLAGS = extern enum(i32) {
    CLUSPROP_PIFLAG_STICKY = 1,
    CLUSPROP_PIFLAG_REMOVABLE = 2,
    CLUSPROP_PIFLAG_USABLE = 4,
    CLUSPROP_PIFLAG_DEFAULT_QUORUM = 8,
    CLUSPROP_PIFLAG_USABLE_FOR_CSV = 16,
    CLUSPROP_PIFLAG_ENCRYPTION_ENABLED = 32,
    CLUSPROP_PIFLAG_RAW = 64,
    CLUSPROP_PIFLAG_UNKNOWN = -2147483648,
};
pub const CLUSPROP_PIFLAG_STICKY = CLUSPROP_PIFLAGS.CLUSPROP_PIFLAG_STICKY;
pub const CLUSPROP_PIFLAG_REMOVABLE = CLUSPROP_PIFLAGS.CLUSPROP_PIFLAG_REMOVABLE;
pub const CLUSPROP_PIFLAG_USABLE = CLUSPROP_PIFLAGS.CLUSPROP_PIFLAG_USABLE;
pub const CLUSPROP_PIFLAG_DEFAULT_QUORUM = CLUSPROP_PIFLAGS.CLUSPROP_PIFLAG_DEFAULT_QUORUM;
pub const CLUSPROP_PIFLAG_USABLE_FOR_CSV = CLUSPROP_PIFLAGS.CLUSPROP_PIFLAG_USABLE_FOR_CSV;
pub const CLUSPROP_PIFLAG_ENCRYPTION_ENABLED = CLUSPROP_PIFLAGS.CLUSPROP_PIFLAG_ENCRYPTION_ENABLED;
pub const CLUSPROP_PIFLAG_RAW = CLUSPROP_PIFLAGS.CLUSPROP_PIFLAG_RAW;
pub const CLUSPROP_PIFLAG_UNKNOWN = CLUSPROP_PIFLAGS.CLUSPROP_PIFLAG_UNKNOWN;

pub const CLUS_FORCE_QUORUM_INFO = extern struct {
    dwSize: u32,
    dwNodeBitMask: u32,
    dwMaxNumberofNodes: u32,
    multiszNodeList: [1]u16,
};

pub const CLUS_PARTITION_INFO = extern struct {
    dwFlags: u32,
    szDeviceName: [260]u16,
    szVolumeLabel: [260]u16,
    dwSerialNumber: u32,
    rgdwMaximumComponentLength: u32,
    dwFileSystemFlags: u32,
    szFileSystem: [32]u16,
};

pub const CLUS_PARTITION_INFO_EX = extern struct {
    dwFlags: u32,
    szDeviceName: [260]u16,
    szVolumeLabel: [260]u16,
    dwSerialNumber: u32,
    rgdwMaximumComponentLength: u32,
    dwFileSystemFlags: u32,
    szFileSystem: [32]u16,
    TotalSizeInBytes: ULARGE_INTEGER,
    FreeSizeInBytes: ULARGE_INTEGER,
    DeviceNumber: u32,
    PartitionNumber: u32,
    VolumeGuid: Guid,
};

pub const CLUS_PARTITION_INFO_EX2 = extern struct {
    GptPartitionId: Guid,
    szPartitionName: [260]u16,
    EncryptionFlags: u32,
};

pub const CLUSTER_CSV_VOLUME_FAULT_STATE = extern enum(i32) {
    VolumeStateNoFaults = 0,
    VolumeStateNoDirectIO = 1,
    VolumeStateNoAccess = 2,
    VolumeStateInMaintenance = 4,
    VolumeStateDismounted = 8,
};
pub const VolumeStateNoFaults = CLUSTER_CSV_VOLUME_FAULT_STATE.VolumeStateNoFaults;
pub const VolumeStateNoDirectIO = CLUSTER_CSV_VOLUME_FAULT_STATE.VolumeStateNoDirectIO;
pub const VolumeStateNoAccess = CLUSTER_CSV_VOLUME_FAULT_STATE.VolumeStateNoAccess;
pub const VolumeStateInMaintenance = CLUSTER_CSV_VOLUME_FAULT_STATE.VolumeStateInMaintenance;
pub const VolumeStateDismounted = CLUSTER_CSV_VOLUME_FAULT_STATE.VolumeStateDismounted;

pub const CLUSTER_SHARED_VOLUME_BACKUP_STATE = extern enum(i32) {
    VolumeBackupNone = 0,
    VolumeBackupInProgress = 1,
};
pub const VolumeBackupNone = CLUSTER_SHARED_VOLUME_BACKUP_STATE.VolumeBackupNone;
pub const VolumeBackupInProgress = CLUSTER_SHARED_VOLUME_BACKUP_STATE.VolumeBackupInProgress;

pub const CLUS_CSV_VOLUME_INFO = extern struct {
    VolumeOffset: ULARGE_INTEGER,
    PartitionNumber: u32,
    FaultState: CLUSTER_CSV_VOLUME_FAULT_STATE,
    BackupState: CLUSTER_SHARED_VOLUME_BACKUP_STATE,
    szVolumeFriendlyName: [260]u16,
    szVolumeName: [50]u16,
};

pub const CLUS_CSV_VOLUME_NAME = extern struct {
    VolumeOffset: LARGE_INTEGER,
    szVolumeName: [260]u16,
    szRootPath: [263]u16,
};

pub const CLUSTER_SHARED_VOLUME_STATE = extern enum(i32) {
    SharedVolumeStateUnavailable = 0,
    SharedVolumeStatePaused = 1,
    SharedVolumeStateActive = 2,
    SharedVolumeStateActiveRedirected = 3,
    SharedVolumeStateActiveVolumeRedirected = 4,
};
pub const SharedVolumeStateUnavailable = CLUSTER_SHARED_VOLUME_STATE.SharedVolumeStateUnavailable;
pub const SharedVolumeStatePaused = CLUSTER_SHARED_VOLUME_STATE.SharedVolumeStatePaused;
pub const SharedVolumeStateActive = CLUSTER_SHARED_VOLUME_STATE.SharedVolumeStateActive;
pub const SharedVolumeStateActiveRedirected = CLUSTER_SHARED_VOLUME_STATE.SharedVolumeStateActiveRedirected;
pub const SharedVolumeStateActiveVolumeRedirected = CLUSTER_SHARED_VOLUME_STATE.SharedVolumeStateActiveVolumeRedirected;

pub const CLUSTER_SHARED_VOLUME_STATE_INFO = extern struct {
    szVolumeName: [260]u16,
    szNodeName: [260]u16,
    VolumeState: CLUSTER_SHARED_VOLUME_STATE,
};

pub const CLUSTER_SHARED_VOLUME_STATE_INFO_EX = extern struct {
    szVolumeName: [260]u16,
    szNodeName: [260]u16,
    VolumeState: CLUSTER_SHARED_VOLUME_STATE,
    szVolumeFriendlyName: [260]u16,
    RedirectedIOReason: u64,
    VolumeRedirectedIOReason: u64,
};

pub const CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE = extern enum(i32) {
    ClusterSharedVolumeRenameInputTypeNone = 0,
    ClusterSharedVolumeRenameInputTypeVolumeOffset = 1,
    ClusterSharedVolumeRenameInputTypeVolumeId = 2,
    ClusterSharedVolumeRenameInputTypeVolumeName = 3,
    ClusterSharedVolumeRenameInputTypeVolumeGuid = 4,
};
pub const ClusterSharedVolumeRenameInputTypeNone = CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE.ClusterSharedVolumeRenameInputTypeNone;
pub const ClusterSharedVolumeRenameInputTypeVolumeOffset = CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE.ClusterSharedVolumeRenameInputTypeVolumeOffset;
pub const ClusterSharedVolumeRenameInputTypeVolumeId = CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE.ClusterSharedVolumeRenameInputTypeVolumeId;
pub const ClusterSharedVolumeRenameInputTypeVolumeName = CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE.ClusterSharedVolumeRenameInputTypeVolumeName;
pub const ClusterSharedVolumeRenameInputTypeVolumeGuid = CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE.ClusterSharedVolumeRenameInputTypeVolumeGuid;

pub const CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME = extern struct {
    InputType: CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE,
    Anonymous: CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME = extern struct {
    NewVolumeName: [260]u16,
};

pub const CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME = extern struct {
    NewVolumeName: [260]u16,
    NewVolumeGuid: [50]u16,
};

pub const CLUSTER_SHARED_VOLUME_RENAME_INPUT = extern struct {
    __AnonymousBase_clusapi_L5427_C14: CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME,
    __AnonymousBase_clusapi_L5428_C14: CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME,
};

pub const CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT = extern struct {
    __AnonymousBase_clusapi_L5438_C14: CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME,
    __AnonymousBase_clusapi_L5439_C14: CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME,
};

pub const CLUS_CHKDSK_INFO = extern struct {
    PartitionNumber: u32,
    ChkdskState: u32,
    FileIdCount: u32,
    FileIdList: [1]u64,
};

pub const CLUS_DISK_NUMBER_INFO = extern struct {
    DiskNumber: u32,
    BytesPerSector: u32,
};

pub const CLUS_SHARED_VOLUME_BACKUP_MODE = extern struct {
    BackupState: CLUSTER_SHARED_VOLUME_BACKUP_STATE,
    DelayTimerInSecs: u32,
    VolumeName: [260]u16,
};

pub const CLUSPROP_PARTITION_INFO = extern struct {
    __AnonymousBase_clusapi_L5470_C14: CLUSPROP_VALUE,
    __AnonymousBase_clusapi_L5471_C14: CLUS_PARTITION_INFO,
};

pub const CLUSPROP_PARTITION_INFO_EX = extern struct {
    __AnonymousBase_clusapi_L5482_C14: CLUSPROP_VALUE,
    __AnonymousBase_clusapi_L5483_C14: CLUS_PARTITION_INFO_EX,
};

pub const CLUSPROP_PARTITION_INFO_EX2 = extern struct {
    __AnonymousBase_clusapi_L5496_C14: CLUSPROP_PARTITION_INFO_EX,
    __AnonymousBase_clusapi_L5497_C14: CLUS_PARTITION_INFO_EX2,
};

pub const CLUS_FTSET_INFO = extern struct {
    dwRootSignature: u32,
    dwFtType: u32,
};

pub const CLUSPROP_FTSET_INFO = extern struct {
    __AnonymousBase_clusapi_L5518_C14: CLUSPROP_VALUE,
    __AnonymousBase_clusapi_L5519_C14: CLUS_FTSET_INFO,
};

pub const CLUS_SCSI_ADDRESS = extern struct {
    Anonymous: CLUS_SCSI_ADDRESS._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const CLUSPROP_SCSI_ADDRESS = extern struct {
    __AnonymousBase_clusapi_L5546_C14: CLUSPROP_VALUE,
    __AnonymousBase_clusapi_L5547_C14: CLUS_SCSI_ADDRESS,
};

pub const CLUS_NETNAME_VS_TOKEN_INFO = extern struct {
    ProcessID: u32,
    DesiredAccess: u32,
    InheritHandle: BOOL,
};

pub const CLUS_NETNAME_PWD_INFO = extern struct {
    Flags: u32,
    Password: [16]u16,
    CreatingDC: [258]u16,
    ObjectGuid: [64]u16,
};

pub const CLUS_NETNAME_PWD_INFOEX = extern struct {
    Flags: u32,
    Password: [128]u16,
    CreatingDC: [258]u16,
    ObjectGuid: [64]u16,
};

pub const CLUS_DNN_LEADER_STATUS = extern struct {
    IsOnline: BOOL,
    IsFileServerPresent: BOOL,
};

pub const CLUS_DNN_SODAFS_CLONE_STATUS = extern struct {
    NodeId: u32,
    Status: CLUSTER_RESOURCE_STATE,
};

pub const CLUS_NETNAME_IP_INFO_ENTRY = extern struct {
    NodeId: u32,
    AddressSize: u32,
    Address: [1]u8,
};

pub const CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL = extern struct {
    szName: [64]u16,
    NumEntries: u32,
    IpInfo: [1]CLUS_NETNAME_IP_INFO_ENTRY,
};

pub const CLUS_MAINTENANCE_MODE_INFO = extern struct {
    InMaintenance: BOOL,
};

pub const CLUS_CSV_MAINTENANCE_MODE_INFO = extern struct {
    InMaintenance: BOOL,
    VolumeName: [260]u16,
};

pub const MAINTENANCE_MODE_TYPE_ENUM = extern enum(i32) {
    MaintenanceModeTypeDisableIsAliveCheck = 1,
    MaintenanceModeTypeOfflineResource = 2,
    MaintenanceModeTypeUnclusterResource = 3,
};
pub const MaintenanceModeTypeDisableIsAliveCheck = MAINTENANCE_MODE_TYPE_ENUM.MaintenanceModeTypeDisableIsAliveCheck;
pub const MaintenanceModeTypeOfflineResource = MAINTENANCE_MODE_TYPE_ENUM.MaintenanceModeTypeOfflineResource;
pub const MaintenanceModeTypeUnclusterResource = MAINTENANCE_MODE_TYPE_ENUM.MaintenanceModeTypeUnclusterResource;

pub const CLUS_MAINTENANCE_MODE_INFOEX = extern struct {
    InMaintenance: BOOL,
    MaintainenceModeType: MAINTENANCE_MODE_TYPE_ENUM,
    InternalState: CLUSTER_RESOURCE_STATE,
    Signature: u32,
};

pub const CLUS_SET_MAINTENANCE_MODE_INPUT = extern struct {
    InMaintenance: BOOL,
    ExtraParameterSize: u32,
    ExtraParameter: [1]u8,
};

pub const CLUS_STORAGE_SET_DRIVELETTER = extern struct {
    PartitionNumber: u32,
    DriveLetterMask: u32,
};

pub const CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS = extern struct {
    AvailDrivelettersMask: u32,
};

pub const CLUS_STORAGE_REMAP_DRIVELETTER = extern struct {
    CurrentDriveLetterMask: u32,
    TargetDriveLetterMask: u32,
};

pub const CLUS_PROVIDER_STATE_CHANGE_INFO = extern struct {
    dwSize: u32,
    resourceState: CLUSTER_RESOURCE_STATE,
    szProviderId: [1]u16,
};

pub const CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT = extern struct {
    FileServerName: [16]u16,
};

pub const CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT = extern struct {
    FileServerName: [260]u16,
};

pub const CLUSPROP_LIST = extern struct {
    nPropertyCount: u32,
    PropertyName: CLUSPROP_SZ,
};

pub const CLUSPROP_IPADDR_ENABLENETBIOS = extern enum(i32) {
    DISABLED = 0,
    ENABLED = 1,
    TRACK_NIC = 2,
};
pub const CLUSPROP_IPADDR_ENABLENETBIOS_DISABLED = CLUSPROP_IPADDR_ENABLENETBIOS.DISABLED;
pub const CLUSPROP_IPADDR_ENABLENETBIOS_ENABLED = CLUSPROP_IPADDR_ENABLENETBIOS.ENABLED;
pub const CLUSPROP_IPADDR_ENABLENETBIOS_TRACK_NIC = CLUSPROP_IPADDR_ENABLENETBIOS.TRACK_NIC;

pub const FILESHARE_CHANGE_ENUM = extern enum(i32) {
    FILESHARE_CHANGE_NONE = 0,
    FILESHARE_CHANGE_ADD = 1,
    FILESHARE_CHANGE_DEL = 2,
    FILESHARE_CHANGE_MODIFY = 3,
};
pub const FILESHARE_CHANGE_NONE = FILESHARE_CHANGE_ENUM.FILESHARE_CHANGE_NONE;
pub const FILESHARE_CHANGE_ADD = FILESHARE_CHANGE_ENUM.FILESHARE_CHANGE_ADD;
pub const FILESHARE_CHANGE_DEL = FILESHARE_CHANGE_ENUM.FILESHARE_CHANGE_DEL;
pub const FILESHARE_CHANGE_MODIFY = FILESHARE_CHANGE_ENUM.FILESHARE_CHANGE_MODIFY;

pub const FILESHARE_CHANGE = extern struct {
    Change: FILESHARE_CHANGE_ENUM,
    ShareName: [84]u16,
};

pub const FILESHARE_CHANGE_LIST = extern struct {
    NumEntries: u32,
    ChangeEntry: [1]FILESHARE_CHANGE,
};

pub const CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT = extern struct {
    GetTickCount64: u64,
    GetSystemTime: SYSTEMTIME,
    NodeId: u32,
};

pub const CLUSPROP_BUFFER_HELPER = u32; // TODO: implement StructOrUnion types?

pub const CLUSTER_RESOURCE_ENUM = extern enum(i32) {
    DEPENDS = 1,
    PROVIDES = 2,
    NODES = 4,
    ALL = 7,
};
pub const CLUSTER_RESOURCE_ENUM_DEPENDS = CLUSTER_RESOURCE_ENUM.DEPENDS;
pub const CLUSTER_RESOURCE_ENUM_PROVIDES = CLUSTER_RESOURCE_ENUM.PROVIDES;
pub const CLUSTER_RESOURCE_ENUM_NODES = CLUSTER_RESOURCE_ENUM.NODES;
pub const CLUSTER_RESOURCE_ENUM_ALL = CLUSTER_RESOURCE_ENUM.ALL;

pub const CLUSTER_RESOURCE_TYPE_ENUM = extern enum(i32) {
    NODES = 1,
    RESOURCES = 2,
    ALL = 3,
};
pub const CLUSTER_RESOURCE_TYPE_ENUM_NODES = CLUSTER_RESOURCE_TYPE_ENUM.NODES;
pub const CLUSTER_RESOURCE_TYPE_ENUM_RESOURCES = CLUSTER_RESOURCE_TYPE_ENUM.RESOURCES;
pub const CLUSTER_RESOURCE_TYPE_ENUM_ALL = CLUSTER_RESOURCE_TYPE_ENUM.ALL;

pub const PCLUSAPI_CLUSTER_RESOURCE_OPEN_ENUM = fn(
    hResource: *_HRESOURCE,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESENUM;

pub const PCLUSAPI_CLUSTER_RESOURCE_GET_ENUM_COUNT = fn(
    hResEnum: *_HRESENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_RESOURCE_ENUM = fn(
    hResEnum: *_HRESENUM,
    dwIndex: u32,
    lpdwType: *u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_RESOURCE_CLOSE_ENUM = fn(
    hResEnum: *_HRESENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CREATE_CLUSTER_RESOURCE_TYPE = fn(
    hCluster: *_HCLUSTER,
    lpszResourceTypeName: [*:0]const u16,
    lpszDisplayName: [*:0]const u16,
    lpszResourceTypeDll: [*:0]const u16,
    dwLooksAlivePollInterval: u32,
    dwIsAlivePollInterval: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_DELETE_CLUSTER_RESOURCE_TYPE = fn(
    hCluster: *_HCLUSTER,
    lpszResourceTypeName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_RESOURCE_TYPE_OPEN_ENUM = fn(
    hCluster: *_HCLUSTER,
    lpszResourceTypeName: [*:0]const u16,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESTYPEENUM;

pub const PCLUSAPI_CLUSTER_RESOURCE_TYPE_GET_ENUM_COUNT = fn(
    hResTypeEnum: *_HRESTYPEENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_RESOURCE_TYPE_ENUM = fn(
    hResTypeEnum: *_HRESTYPEENUM,
    dwIndex: u32,
    lpdwType: *u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_RESOURCE_TYPE_CLOSE_ENUM = fn(
    hResTypeEnum: *_HRESTYPEENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLUSTER_NETWORK_ENUM = extern enum(i32) {
    NETINTERFACES = 1,
    ALL = 1,
};
pub const CLUSTER_NETWORK_ENUM_NETINTERFACES = CLUSTER_NETWORK_ENUM.NETINTERFACES;
pub const CLUSTER_NETWORK_ENUM_ALL = CLUSTER_NETWORK_ENUM.ALL;

pub const CLUSTER_NETWORK_STATE = extern enum(i32) {
    ClusterNetworkStateUnknown = -1,
    ClusterNetworkUnavailable = 0,
    ClusterNetworkDown = 1,
    ClusterNetworkPartitioned = 2,
    ClusterNetworkUp = 3,
};
pub const ClusterNetworkStateUnknown = CLUSTER_NETWORK_STATE.ClusterNetworkStateUnknown;
pub const ClusterNetworkUnavailable = CLUSTER_NETWORK_STATE.ClusterNetworkUnavailable;
pub const ClusterNetworkDown = CLUSTER_NETWORK_STATE.ClusterNetworkDown;
pub const ClusterNetworkPartitioned = CLUSTER_NETWORK_STATE.ClusterNetworkPartitioned;
pub const ClusterNetworkUp = CLUSTER_NETWORK_STATE.ClusterNetworkUp;

pub const CLUSTER_NETWORK_ROLE = extern enum(i32) {
    ClusterNetworkRoleNone = 0,
    ClusterNetworkRoleInternalUse = 1,
    ClusterNetworkRoleClientAccess = 2,
    ClusterNetworkRoleInternalAndClient = 3,
};
pub const ClusterNetworkRoleNone = CLUSTER_NETWORK_ROLE.ClusterNetworkRoleNone;
pub const ClusterNetworkRoleInternalUse = CLUSTER_NETWORK_ROLE.ClusterNetworkRoleInternalUse;
pub const ClusterNetworkRoleClientAccess = CLUSTER_NETWORK_ROLE.ClusterNetworkRoleClientAccess;
pub const ClusterNetworkRoleInternalAndClient = CLUSTER_NETWORK_ROLE.ClusterNetworkRoleInternalAndClient;

pub const PCLUSAPI_OPEN_CLUSTER_NETWORK = fn(
    hCluster: *_HCLUSTER,
    lpszNetworkName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HNETWORK;

pub const PCLUSAPI_OPEN_CLUSTER_NETWORK_EX = fn(
    hCluster: *_HCLUSTER,
    lpszNetworkName: ?[*:0]const u16,
    dwDesiredAccess: u32,
    lpdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *_HNETWORK;

pub const PCLUSAPI_CLOSE_CLUSTER_NETWORK = fn(
    hNetwork: *_HNETWORK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSAPI_GET_CLUSTER_FROM_NETWORK = fn(
    hNetwork: *_HNETWORK,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub const PCLUSAPI_CLUSTER_NETWORK_OPEN_ENUM = fn(
    hNetwork: *_HNETWORK,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) *_HNETWORKENUM;

pub const PCLUSAPI_CLUSTER_NETWORK_GET_ENUM_COUNT = fn(
    hNetworkEnum: *_HNETWORKENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_NETWORK_ENUM = fn(
    hNetworkEnum: *_HNETWORKENUM,
    dwIndex: u32,
    lpdwType: *u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_NETWORK_CLOSE_ENUM = fn(
    hNetworkEnum: *_HNETWORKENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_NETWORK_STATE = fn(
    hNetwork: *_HNETWORK,
) callconv(@import("std").os.windows.WINAPI) CLUSTER_NETWORK_STATE;

pub const PCLUSAPI_SET_CLUSTER_NETWORK_NAME = fn(
    hNetwork: *_HNETWORK,
    lpszName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_NETWORK_ID = fn(
    hNetwork: *_HNETWORK,
    lpszNetworkId: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_NETWORK_CONTROL = fn(
    hNetwork: *_HNETWORK,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLUSTER_NETINTERFACE_STATE = extern enum(i32) {
    ClusterNetInterfaceStateUnknown = -1,
    ClusterNetInterfaceUnavailable = 0,
    ClusterNetInterfaceFailed = 1,
    ClusterNetInterfaceUnreachable = 2,
    ClusterNetInterfaceUp = 3,
};
pub const ClusterNetInterfaceStateUnknown = CLUSTER_NETINTERFACE_STATE.ClusterNetInterfaceStateUnknown;
pub const ClusterNetInterfaceUnavailable = CLUSTER_NETINTERFACE_STATE.ClusterNetInterfaceUnavailable;
pub const ClusterNetInterfaceFailed = CLUSTER_NETINTERFACE_STATE.ClusterNetInterfaceFailed;
pub const ClusterNetInterfaceUnreachable = CLUSTER_NETINTERFACE_STATE.ClusterNetInterfaceUnreachable;
pub const ClusterNetInterfaceUp = CLUSTER_NETINTERFACE_STATE.ClusterNetInterfaceUp;

pub const PCLUSAPI_OPEN_CLUSTER_NET_INTERFACE = fn(
    hCluster: *_HCLUSTER,
    lpszInterfaceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HNETINTERFACE;

pub const PCLUSAPI_OPEN_CLUSTER_NETINTERFACE_EX = fn(
    hCluster: *_HCLUSTER,
    lpszNetInterfaceName: ?[*:0]const u16,
    dwDesiredAccess: u32,
    lpdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *_HNETINTERFACE;

pub const PCLUSAPI_GET_CLUSTER_NET_INTERFACE = fn(
    hCluster: *_HCLUSTER,
    lpszNodeName: [*:0]const u16,
    lpszNetworkName: [*:0]const u16,
    lpszInterfaceName: ?[*:0]u16,
    lpcchInterfaceName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLOSE_CLUSTER_NET_INTERFACE = fn(
    hNetInterface: *_HNETINTERFACE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSAPI_GET_CLUSTER_FROM_NET_INTERFACE = fn(
    hNetInterface: *_HNETINTERFACE,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub const PCLUSAPI_GET_CLUSTER_NET_INTERFACE_STATE = fn(
    hNetInterface: *_HNETINTERFACE,
) callconv(@import("std").os.windows.WINAPI) CLUSTER_NETINTERFACE_STATE;

pub const PCLUSAPI_CLUSTER_NET_INTERFACE_CONTROL = fn(
    hNetInterface: *_HNETINTERFACE,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_GET_CLUSTER_KEY = fn(
    hCluster: *_HCLUSTER,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub const PCLUSAPI_GET_CLUSTER_GROUP_KEY = fn(
    hGroup: *_HGROUP,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub const PCLUSAPI_GET_CLUSTER_RESOURCE_KEY = fn(
    hResource: *_HRESOURCE,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub const PCLUSAPI_GET_CLUSTER_NODE_KEY = fn(
    hNode: *_HNODE,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub const PCLUSAPI_GET_CLUSTER_NETWORK_KEY = fn(
    hNetwork: *_HNETWORK,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub const PCLUSAPI_GET_CLUSTER_NET_INTERFACE_KEY = fn(
    hNetInterface: *_HNETINTERFACE,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub const PCLUSAPI_CLUSTER_REG_CREATE_KEY = fn(
    hKey: HKEY,
    lpszSubKey: [*:0]const u16,
    dwOptions: u32,
    samDesired: u32,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
    phkResult: *HKEY,
    lpdwDisposition: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSAPI_CLUSTER_REG_OPEN_KEY = fn(
    hKey: HKEY,
    lpszSubKey: [*:0]const u16,
    samDesired: u32,
    phkResult: *HKEY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSAPI_CLUSTER_REG_DELETE_KEY = fn(
    hKey: HKEY,
    lpszSubKey: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSAPI_CLUSTER_REG_CLOSE_KEY = fn(
    hKey: HKEY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSAPI_CLUSTER_REG_ENUM_KEY = fn(
    hKey: HKEY,
    dwIndex: u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
    lpftLastWriteTime: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSAPI_CLUSTER_REG_SET_VALUE = fn(
    hKey: HKEY,
    lpszValueName: [*:0]const u16,
    dwType: u32,
    lpData: *const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_REG_DELETE_VALUE = fn(
    hKey: HKEY,
    lpszValueName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_REG_QUERY_VALUE = fn(
    hKey: HKEY,
    lpszValueName: [*:0]const u16,
    lpdwValueType: ?*u32,
    lpData: ?[*:0]u8,
    lpcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSAPI_CLUSTER_REG_ENUM_VALUE = fn(
    hKey: HKEY,
    dwIndex: u32,
    lpszValueName: [*:0]u16,
    lpcchValueName: *u32,
    lpdwType: *u32,
    lpData: ?[*:0]u8,
    lpcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUSTER_REG_QUERY_INFO_KEY = fn(
    hKey: HKEY,
    lpcSubKeys: *u32,
    lpcbMaxSubKeyLen: *u32,
    lpcValues: *u32,
    lpcbMaxValueNameLen: *u32,
    lpcbMaxValueLen: *u32,
    lpcbSecurityDescriptor: *u32,
    lpftLastWriteTime: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSAPI_CLUSTER_REG_GET_KEY_SECURITY = fn(
    hKey: HKEY,
    RequestedInformation: u32,
    pSecurityDescriptor: [*]u8,
    lpcbSecurityDescriptor: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSAPI_CLUSTER_REG_SET_KEY_SECURITY = fn(
    hKey: HKEY,
    SecurityInformation: u32,
    pSecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSAPI_CLUSTER_REG_SYNC_DATABASE = fn(
    hCluster: *_HCLUSTER,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSAPI_CLUSTER_REG_CREATE_BATCH = fn(
    hKey: HKEY,
    pHREGBATCH: **_HREGBATCH,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_BATCH_ADD_COMMAND = fn(
    hRegBatch: *_HREGBATCH,
    dwCommand: CLUSTER_REG_COMMAND,
    wzName: ?PWSTR,
    dwOptions: u32,
    lpData: ?[*]const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_CLOSE_BATCH = fn(
    hRegBatch: *_HREGBATCH,
    bCommit: BOOL,
    failedCommandNumber: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_BATCH_READ_COMMAND = fn(
    hBatchNotification: *_HREGBATCHNOTIFICATION,
    pBatchCommand: *CLUSTER_BATCH_COMMAND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_BATCH_CLOSE_NOTIFICATION = fn(
    hBatchNotification: *_HREGBATCHNOTIFICATION,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_CREATE_BATCH_NOTIFY_PORT = fn(
    hKey: HKEY,
    phBatchNotifyPort: **_HREGBATCHPORT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_CLOSE_BATCH_NOTIFY_PORT = fn(
    hBatchNotifyPort: *_HREGBATCHPORT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_GET_BATCH_NOTIFICATION = fn(
    hBatchNotify: *_HREGBATCHPORT,
    phBatchNotification: **_HREGBATCHNOTIFICATION,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_CREATE_READ_BATCH = fn(
    hKey: HKEY,
    phRegReadBatch: **_HREGREADBATCH,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_READ_BATCH_ADD_COMMAND = fn(
    hRegReadBatch: *_HREGREADBATCH,
    wzSubkeyName: [*:0]const u16,
    wzValueName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_CLOSE_READ_BATCH = fn(
    hRegReadBatch: *_HREGREADBATCH,
    phRegReadBatchReply: **_HREGREADBATCHREPLY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_CLOSE_READ_BATCH_EX = fn(
    hRegReadBatch: *_HREGREADBATCH,
    flags: u32,
    phRegReadBatchReply: **_HREGREADBATCHREPLY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_READ_BATCH_REPLY_NEXT_COMMAND = fn(
    hRegReadBatchReply: *_HREGREADBATCHREPLY,
    pBatchCommand: *CLUSTER_READ_BATCH_COMMAND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_REG_CLOSE_READ_BATCH_REPLY = fn(
    hRegReadBatchReply: *_HREGREADBATCHREPLY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PCLUSTER_SET_ACCOUNT_ACCESS = fn(
    hCluster: *_HCLUSTER,
    szAccountSID: [*:0]const u16,
    dwAccess: u32,
    dwControlType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLUSTER_SETUP_PHASE = extern enum(i32) {
    ClusterSetupPhaseInitialize = 1,
    ClusterSetupPhaseValidateNodeState = 100,
    ClusterSetupPhaseValidateNetft = 102,
    ClusterSetupPhaseValidateClusDisk = 103,
    ClusterSetupPhaseConfigureClusSvc = 104,
    ClusterSetupPhaseStartingClusSvc = 105,
    ClusterSetupPhaseQueryClusterNameAccount = 106,
    ClusterSetupPhaseValidateClusterNameAccount = 107,
    ClusterSetupPhaseCreateClusterAccount = 108,
    ClusterSetupPhaseConfigureClusterAccount = 109,
    ClusterSetupPhaseFormingCluster = 200,
    ClusterSetupPhaseAddClusterProperties = 201,
    ClusterSetupPhaseCreateResourceTypes = 202,
    ClusterSetupPhaseCreateGroups = 203,
    ClusterSetupPhaseCreateIPAddressResources = 204,
    ClusterSetupPhaseCreateNetworkName = 205,
    ClusterSetupPhaseClusterGroupOnline = 206,
    ClusterSetupPhaseGettingCurrentMembership = 300,
    ClusterSetupPhaseAddNodeToCluster = 301,
    ClusterSetupPhaseNodeUp = 302,
    ClusterSetupPhaseMoveGroup = 400,
    ClusterSetupPhaseDeleteGroup = 401,
    ClusterSetupPhaseCleanupCOs = 402,
    ClusterSetupPhaseOfflineGroup = 403,
    ClusterSetupPhaseEvictNode = 404,
    ClusterSetupPhaseCleanupNode = 405,
    ClusterSetupPhaseCoreGroupCleanup = 406,
    ClusterSetupPhaseFailureCleanup = 999,
};
pub const ClusterSetupPhaseInitialize = CLUSTER_SETUP_PHASE.ClusterSetupPhaseInitialize;
pub const ClusterSetupPhaseValidateNodeState = CLUSTER_SETUP_PHASE.ClusterSetupPhaseValidateNodeState;
pub const ClusterSetupPhaseValidateNetft = CLUSTER_SETUP_PHASE.ClusterSetupPhaseValidateNetft;
pub const ClusterSetupPhaseValidateClusDisk = CLUSTER_SETUP_PHASE.ClusterSetupPhaseValidateClusDisk;
pub const ClusterSetupPhaseConfigureClusSvc = CLUSTER_SETUP_PHASE.ClusterSetupPhaseConfigureClusSvc;
pub const ClusterSetupPhaseStartingClusSvc = CLUSTER_SETUP_PHASE.ClusterSetupPhaseStartingClusSvc;
pub const ClusterSetupPhaseQueryClusterNameAccount = CLUSTER_SETUP_PHASE.ClusterSetupPhaseQueryClusterNameAccount;
pub const ClusterSetupPhaseValidateClusterNameAccount = CLUSTER_SETUP_PHASE.ClusterSetupPhaseValidateClusterNameAccount;
pub const ClusterSetupPhaseCreateClusterAccount = CLUSTER_SETUP_PHASE.ClusterSetupPhaseCreateClusterAccount;
pub const ClusterSetupPhaseConfigureClusterAccount = CLUSTER_SETUP_PHASE.ClusterSetupPhaseConfigureClusterAccount;
pub const ClusterSetupPhaseFormingCluster = CLUSTER_SETUP_PHASE.ClusterSetupPhaseFormingCluster;
pub const ClusterSetupPhaseAddClusterProperties = CLUSTER_SETUP_PHASE.ClusterSetupPhaseAddClusterProperties;
pub const ClusterSetupPhaseCreateResourceTypes = CLUSTER_SETUP_PHASE.ClusterSetupPhaseCreateResourceTypes;
pub const ClusterSetupPhaseCreateGroups = CLUSTER_SETUP_PHASE.ClusterSetupPhaseCreateGroups;
pub const ClusterSetupPhaseCreateIPAddressResources = CLUSTER_SETUP_PHASE.ClusterSetupPhaseCreateIPAddressResources;
pub const ClusterSetupPhaseCreateNetworkName = CLUSTER_SETUP_PHASE.ClusterSetupPhaseCreateNetworkName;
pub const ClusterSetupPhaseClusterGroupOnline = CLUSTER_SETUP_PHASE.ClusterSetupPhaseClusterGroupOnline;
pub const ClusterSetupPhaseGettingCurrentMembership = CLUSTER_SETUP_PHASE.ClusterSetupPhaseGettingCurrentMembership;
pub const ClusterSetupPhaseAddNodeToCluster = CLUSTER_SETUP_PHASE.ClusterSetupPhaseAddNodeToCluster;
pub const ClusterSetupPhaseNodeUp = CLUSTER_SETUP_PHASE.ClusterSetupPhaseNodeUp;
pub const ClusterSetupPhaseMoveGroup = CLUSTER_SETUP_PHASE.ClusterSetupPhaseMoveGroup;
pub const ClusterSetupPhaseDeleteGroup = CLUSTER_SETUP_PHASE.ClusterSetupPhaseDeleteGroup;
pub const ClusterSetupPhaseCleanupCOs = CLUSTER_SETUP_PHASE.ClusterSetupPhaseCleanupCOs;
pub const ClusterSetupPhaseOfflineGroup = CLUSTER_SETUP_PHASE.ClusterSetupPhaseOfflineGroup;
pub const ClusterSetupPhaseEvictNode = CLUSTER_SETUP_PHASE.ClusterSetupPhaseEvictNode;
pub const ClusterSetupPhaseCleanupNode = CLUSTER_SETUP_PHASE.ClusterSetupPhaseCleanupNode;
pub const ClusterSetupPhaseCoreGroupCleanup = CLUSTER_SETUP_PHASE.ClusterSetupPhaseCoreGroupCleanup;
pub const ClusterSetupPhaseFailureCleanup = CLUSTER_SETUP_PHASE.ClusterSetupPhaseFailureCleanup;

pub const CLUSTER_SETUP_PHASE_TYPE = extern enum(i32) {
    ClusterSetupPhaseStart = 1,
    ClusterSetupPhaseContinue = 2,
    ClusterSetupPhaseEnd = 3,
    ClusterSetupPhaseReport = 4,
};
pub const ClusterSetupPhaseStart = CLUSTER_SETUP_PHASE_TYPE.ClusterSetupPhaseStart;
pub const ClusterSetupPhaseContinue = CLUSTER_SETUP_PHASE_TYPE.ClusterSetupPhaseContinue;
pub const ClusterSetupPhaseEnd = CLUSTER_SETUP_PHASE_TYPE.ClusterSetupPhaseEnd;
pub const ClusterSetupPhaseReport = CLUSTER_SETUP_PHASE_TYPE.ClusterSetupPhaseReport;

pub const CLUSTER_SETUP_PHASE_SEVERITY = extern enum(i32) {
    ClusterSetupPhaseInformational = 1,
    ClusterSetupPhaseWarning = 2,
    ClusterSetupPhaseFatal = 3,
};
pub const ClusterSetupPhaseInformational = CLUSTER_SETUP_PHASE_SEVERITY.ClusterSetupPhaseInformational;
pub const ClusterSetupPhaseWarning = CLUSTER_SETUP_PHASE_SEVERITY.ClusterSetupPhaseWarning;
pub const ClusterSetupPhaseFatal = CLUSTER_SETUP_PHASE_SEVERITY.ClusterSetupPhaseFatal;

pub const PCLUSTER_SETUP_PROGRESS_CALLBACK = fn(
    pvCallbackArg: *c_void,
    eSetupPhase: CLUSTER_SETUP_PHASE,
    ePhaseType: CLUSTER_SETUP_PHASE_TYPE,
    ePhaseSeverity: CLUSTER_SETUP_PHASE_SEVERITY,
    dwPercentComplete: u32,
    lpszObjectName: ?[*:0]const u16,
    dwStatus: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSAPI_CREATE_CLUSTER = fn(
    pConfig: *CREATE_CLUSTER_CONFIG,
    pfnProgressCallback: ?PCLUSTER_SETUP_PROGRESS_CALLBACK,
    pvCallbackArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub const PCLUSAPI_CREATE_CLUSTER_CNOLESS = fn(
    pConfig: *CREATE_CLUSTER_CONFIG,
    pfnProgressCallback: ?PCLUSTER_SETUP_PROGRESS_CALLBACK,
    pvCallbackArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub const PCLUSAPI_CREATE_CLUSTER_NAME_ACCOUNT = fn(
    hCluster: *_HCLUSTER,
    pConfig: *CREATE_CLUSTER_NAME_ACCOUNT,
    pfnProgressCallback: ?PCLUSTER_SETUP_PROGRESS_CALLBACK,
    pvCallbackArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_REMOVE_CLUSTER_NAME_ACCOUNT = fn(
    hCluster: *_HCLUSTER,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_ADD_CLUSTER_NODE = fn(
    hCluster: *_HCLUSTER,
    lpszNodeName: [*:0]const u16,
    pfnProgressCallback: ?PCLUSTER_SETUP_PROGRESS_CALLBACK,
    pvCallbackArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HNODE;

pub const PCLUSAPI_DESTROY_CLUSTER = fn(
    hCluster: *_HCLUSTER,
    pfnProgressCallback: ?PCLUSTER_SETUP_PROGRESS_CALLBACK,
    pvCallbackArg: ?*c_void,
    fdeleteVirtualComputerObjects: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PLACEMENT_OPTIONS = extern enum(i32) {
    MIN_VALUE = 0,
    DEFAULT_PLACEMENT_OPTIONS = 0,
    DISABLE_CSV_VM_DEPENDENCY = 1,
    CONSIDER_OFFLINE_VMS = 2,
    DONT_USE_MEMORY = 4,
    DONT_USE_CPU = 8,
    DONT_USE_LOCAL_TEMP_DISK = 16,
    DONT_RESUME_VMS_WITH_EXISTING_TEMP_DISK = 32,
    SAVE_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE = 64,
    DONT_RESUME_AVAILABILTY_SET_VMS_WITH_EXISTING_TEMP_DISK = 128,
    SAVE_AVAILABILTY_SET_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE = 256,
    AVAILABILITY_SET_DOMAIN_AFFINITY = 512,
    ALL = 1023,
};
pub const PLACEMENT_OPTIONS_MIN_VALUE = PLACEMENT_OPTIONS.MIN_VALUE;
pub const PLACEMENT_OPTIONS_DEFAULT_PLACEMENT_OPTIONS = PLACEMENT_OPTIONS.DEFAULT_PLACEMENT_OPTIONS;
pub const PLACEMENT_OPTIONS_DISABLE_CSV_VM_DEPENDENCY = PLACEMENT_OPTIONS.DISABLE_CSV_VM_DEPENDENCY;
pub const PLACEMENT_OPTIONS_CONSIDER_OFFLINE_VMS = PLACEMENT_OPTIONS.CONSIDER_OFFLINE_VMS;
pub const PLACEMENT_OPTIONS_DONT_USE_MEMORY = PLACEMENT_OPTIONS.DONT_USE_MEMORY;
pub const PLACEMENT_OPTIONS_DONT_USE_CPU = PLACEMENT_OPTIONS.DONT_USE_CPU;
pub const PLACEMENT_OPTIONS_DONT_USE_LOCAL_TEMP_DISK = PLACEMENT_OPTIONS.DONT_USE_LOCAL_TEMP_DISK;
pub const PLACEMENT_OPTIONS_DONT_RESUME_VMS_WITH_EXISTING_TEMP_DISK = PLACEMENT_OPTIONS.DONT_RESUME_VMS_WITH_EXISTING_TEMP_DISK;
pub const PLACEMENT_OPTIONS_SAVE_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE = PLACEMENT_OPTIONS.SAVE_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE;
pub const PLACEMENT_OPTIONS_DONT_RESUME_AVAILABILTY_SET_VMS_WITH_EXISTING_TEMP_DISK = PLACEMENT_OPTIONS.DONT_RESUME_AVAILABILTY_SET_VMS_WITH_EXISTING_TEMP_DISK;
pub const PLACEMENT_OPTIONS_SAVE_AVAILABILTY_SET_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE = PLACEMENT_OPTIONS.SAVE_AVAILABILTY_SET_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE;
pub const PLACEMENT_OPTIONS_AVAILABILITY_SET_DOMAIN_AFFINITY = PLACEMENT_OPTIONS.AVAILABILITY_SET_DOMAIN_AFFINITY;
pub const PLACEMENT_OPTIONS_ALL = PLACEMENT_OPTIONS.ALL;

pub const GRP_PLACEMENT_OPTIONS = extern enum(i32) {
    MIN_VALUE = 0,
    DEFAULT = 0,
    DISABLE_AUTOBALANCING = 1,
    ALL = 1,
};
pub const GRP_PLACEMENT_OPTIONS_MIN_VALUE = GRP_PLACEMENT_OPTIONS.MIN_VALUE;
pub const GRP_PLACEMENT_OPTIONS_DEFAULT = GRP_PLACEMENT_OPTIONS.DEFAULT;
pub const GRP_PLACEMENT_OPTIONS_DISABLE_AUTOBALANCING = GRP_PLACEMENT_OPTIONS.DISABLE_AUTOBALANCING;
pub const GRP_PLACEMENT_OPTIONS_ALL = GRP_PLACEMENT_OPTIONS.ALL;

pub const SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO = extern struct {
    PartitionOffset: u64,
    Capabilities: u32,
};

pub const SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY = extern struct {
    Count: u32,
    PartitionArray: [1]SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO,
};

pub const SR_REPLICATED_DISK_TYPE = extern enum(i32) {
    SrReplicatedDiskTypeNone = 0,
    SrReplicatedDiskTypeSource = 1,
    SrReplicatedDiskTypeLogSource = 2,
    SrReplicatedDiskTypeDestination = 3,
    SrReplicatedDiskTypeLogDestination = 4,
    SrReplicatedDiskTypeNotInParthership = 5,
    SrReplicatedDiskTypeLogNotInParthership = 6,
    SrReplicatedDiskTypeOther = 7,
};
pub const SrReplicatedDiskTypeNone = SR_REPLICATED_DISK_TYPE.SrReplicatedDiskTypeNone;
pub const SrReplicatedDiskTypeSource = SR_REPLICATED_DISK_TYPE.SrReplicatedDiskTypeSource;
pub const SrReplicatedDiskTypeLogSource = SR_REPLICATED_DISK_TYPE.SrReplicatedDiskTypeLogSource;
pub const SrReplicatedDiskTypeDestination = SR_REPLICATED_DISK_TYPE.SrReplicatedDiskTypeDestination;
pub const SrReplicatedDiskTypeLogDestination = SR_REPLICATED_DISK_TYPE.SrReplicatedDiskTypeLogDestination;
pub const SrReplicatedDiskTypeNotInParthership = SR_REPLICATED_DISK_TYPE.SrReplicatedDiskTypeNotInParthership;
pub const SrReplicatedDiskTypeLogNotInParthership = SR_REPLICATED_DISK_TYPE.SrReplicatedDiskTypeLogNotInParthership;
pub const SrReplicatedDiskTypeOther = SR_REPLICATED_DISK_TYPE.SrReplicatedDiskTypeOther;

pub const SR_DISK_REPLICATION_ELIGIBLE = extern enum(i32) {
    SrDiskReplicationEligibleNone = 0,
    SrDiskReplicationEligibleYes = 1,
    SrDiskReplicationEligibleOffline = 2,
    SrDiskReplicationEligibleNotGpt = 3,
    SrDiskReplicationEligiblePartitionLayoutMismatch = 4,
    SrDiskReplicationEligibleInsufficientFreeSpace = 5,
    SrDiskReplicationEligibleNotInSameSite = 6,
    SrDiskReplicationEligibleInSameSite = 7,
    SrDiskReplicationEligibleFileSystemNotSupported = 8,
    SrDiskReplicationEligibleAlreadyInReplication = 9,
    SrDiskReplicationEligibleSameAsSpecifiedDisk = 10,
    SrDiskReplicationEligibleOther = 9999,
};
pub const SrDiskReplicationEligibleNone = SR_DISK_REPLICATION_ELIGIBLE.SrDiskReplicationEligibleNone;
pub const SrDiskReplicationEligibleYes = SR_DISK_REPLICATION_ELIGIBLE.SrDiskReplicationEligibleYes;
pub const SrDiskReplicationEligibleOffline = SR_DISK_REPLICATION_ELIGIBLE.SrDiskReplicationEligibleOffline;
pub const SrDiskReplicationEligibleNotGpt = SR_DISK_REPLICATION_ELIGIBLE.SrDiskReplicationEligibleNotGpt;
pub const SrDiskReplicationEligiblePartitionLayoutMismatch = SR_DISK_REPLICATION_ELIGIBLE.SrDiskReplicationEligiblePartitionLayoutMismatch;
pub const SrDiskReplicationEligibleInsufficientFreeSpace = SR_DISK_REPLICATION_ELIGIBLE.SrDiskReplicationEligibleInsufficientFreeSpace;
pub const SrDiskReplicationEligibleNotInSameSite = SR_DISK_REPLICATION_ELIGIBLE.SrDiskReplicationEligibleNotInSameSite;
pub const SrDiskReplicationEligibleInSameSite = SR_DISK_REPLICATION_ELIGIBLE.SrDiskReplicationEligibleInSameSite;
pub const SrDiskReplicationEligibleFileSystemNotSupported = SR_DISK_REPLICATION_ELIGIBLE.SrDiskReplicationEligibleFileSystemNotSupported;
pub const SrDiskReplicationEligibleAlreadyInReplication = SR_DISK_REPLICATION_ELIGIBLE.SrDiskReplicationEligibleAlreadyInReplication;
pub const SrDiskReplicationEligibleSameAsSpecifiedDisk = SR_DISK_REPLICATION_ELIGIBLE.SrDiskReplicationEligibleSameAsSpecifiedDisk;
pub const SrDiskReplicationEligibleOther = SR_DISK_REPLICATION_ELIGIBLE.SrDiskReplicationEligibleOther;

pub const SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS = extern struct {
    DataDiskGuid: Guid,
    IncludeOfflineDisks: u8,
};

pub const SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS = extern struct {
    SourceDataDiskGuid: Guid,
    TargetReplicationGroupGuid: Guid,
    SkipConnectivityCheck: u8,
    IncludeOfflineDisks: u8,
};

pub const SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS = extern struct {
    DataDiskGuid: Guid,
    IncludeAvailableStoargeDisks: u8,
};

pub const SR_RESOURCE_TYPE_DISK_INFO = extern struct {
    Reason: SR_DISK_REPLICATION_ELIGIBLE,
    DiskGuid: Guid,
};

pub const SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT = extern struct {
    Count: u16,
    DiskInfo: [1]SR_RESOURCE_TYPE_DISK_INFO,
};

pub const SR_RESOURCE_TYPE_REPLICATED_DISK = extern struct {
    Type: SR_REPLICATED_DISK_TYPE,
    ClusterDiskResourceGuid: Guid,
    ReplicationGroupId: Guid,
    ReplicationGroupName: [260]u16,
};

pub const SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT = extern struct {
    Count: u16,
    ReplicatedDisks: [1]SR_RESOURCE_TYPE_REPLICATED_DISK,
};

pub const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT = extern struct {
    dwFlags: u32,
    guidPoolFilter: Guid,
};

pub const RESOURCE_STATUS = extern struct {
    ResourceState: CLUSTER_RESOURCE_STATE,
    CheckPoint: u32,
    WaitHint: u32,
    EventHandle: HANDLE,
};

pub const NodeUtilizationInfoElement = extern struct {
    Id: u64,
    AvailableMemory: u64,
    AvailableMemoryAfterReclamation: u64,
};

pub const ResourceUtilizationInfoElement = extern struct {
    PhysicalNumaId: u64,
    CurrentMemory: u64,
};

pub const VM_RESDLL_CONTEXT = extern enum(i32) {
    VmResdllContextTurnOff = 0,
    VmResdllContextSave = 1,
    VmResdllContextShutdown = 2,
    VmResdllContextShutdownForce = 3,
    VmResdllContextLiveMigration = 4,
};
pub const VmResdllContextTurnOff = VM_RESDLL_CONTEXT.VmResdllContextTurnOff;
pub const VmResdllContextSave = VM_RESDLL_CONTEXT.VmResdllContextSave;
pub const VmResdllContextShutdown = VM_RESDLL_CONTEXT.VmResdllContextShutdown;
pub const VmResdllContextShutdownForce = VM_RESDLL_CONTEXT.VmResdllContextShutdownForce;
pub const VmResdllContextLiveMigration = VM_RESDLL_CONTEXT.VmResdllContextLiveMigration;

pub const RESDLL_CONTEXT_OPERATION_TYPE = extern enum(i32) {
    ResdllContextOperationTypeFailback = 0,
    ResdllContextOperationTypeDrain = 1,
    ResdllContextOperationTypeDrainFailure = 2,
    ResdllContextOperationTypeEmbeddedFailure = 3,
    ResdllContextOperationTypePreemption = 4,
    ResdllContextOperationTypeNetworkDisconnect = 5,
    ResdllContextOperationTypeNetworkDisconnectMoveRetry = 6,
};
pub const ResdllContextOperationTypeFailback = RESDLL_CONTEXT_OPERATION_TYPE.ResdllContextOperationTypeFailback;
pub const ResdllContextOperationTypeDrain = RESDLL_CONTEXT_OPERATION_TYPE.ResdllContextOperationTypeDrain;
pub const ResdllContextOperationTypeDrainFailure = RESDLL_CONTEXT_OPERATION_TYPE.ResdllContextOperationTypeDrainFailure;
pub const ResdllContextOperationTypeEmbeddedFailure = RESDLL_CONTEXT_OPERATION_TYPE.ResdllContextOperationTypeEmbeddedFailure;
pub const ResdllContextOperationTypePreemption = RESDLL_CONTEXT_OPERATION_TYPE.ResdllContextOperationTypePreemption;
pub const ResdllContextOperationTypeNetworkDisconnect = RESDLL_CONTEXT_OPERATION_TYPE.ResdllContextOperationTypeNetworkDisconnect;
pub const ResdllContextOperationTypeNetworkDisconnectMoveRetry = RESDLL_CONTEXT_OPERATION_TYPE.ResdllContextOperationTypeNetworkDisconnectMoveRetry;

pub const GET_OPERATION_CONTEXT_PARAMS = extern struct {
    Size: u32,
    Version: u32,
    Type: RESDLL_CONTEXT_OPERATION_TYPE,
    Priority: u32,
};

pub const RESOURCE_STATUS_EX = extern struct {
    ResourceState: CLUSTER_RESOURCE_STATE,
    CheckPoint: u32,
    EventHandle: HANDLE,
    ApplicationSpecificErrorCode: u32,
    Flags: u32,
    WaitHint: u32,
};

pub const PSET_RESOURCE_STATUS_ROUTINE_EX = fn(
    ResourceHandle: ?*c_void,
    ResourceStatus: *RESOURCE_STATUS_EX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PSET_RESOURCE_STATUS_ROUTINE = fn(
    ResourceHandle: ?*c_void,
    ResourceStatus: *RESOURCE_STATUS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PQUORUM_RESOURCE_LOST = fn(
    Resource: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LOG_LEVEL = extern enum(i32) {
    LOG_INFORMATION = 0,
    LOG_WARNING = 1,
    LOG_ERROR = 2,
    LOG_SEVERE = 3,
};
pub const LOG_INFORMATION = LOG_LEVEL.LOG_INFORMATION;
pub const LOG_WARNING = LOG_LEVEL.LOG_WARNING;
pub const LOG_ERROR = LOG_LEVEL.LOG_ERROR;
pub const LOG_SEVERE = LOG_LEVEL.LOG_SEVERE;

pub const PLOG_EVENT_ROUTINE = fn(
    ResourceHandle: ?*c_void,
    LogLevel: LOG_LEVEL,
    FormatString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) void;

pub const POPEN_ROUTINE = fn(
    ResourceName: [*:0]const u16,
    ResourceKey: HKEY,
    ResourceHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PCLOSE_ROUTINE = fn(
    Resource: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PONLINE_ROUTINE = fn(
    Resource: *c_void,
    EventHandle: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const POFFLINE_ROUTINE = fn(
    Resource: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PTERMINATE_ROUTINE = fn(
    Resource: *c_void,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PIS_ALIVE_ROUTINE = fn(
    Resource: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PLOOKS_ALIVE_ROUTINE = fn(
    Resource: *c_void,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PARBITRATE_ROUTINE = fn(
    Resource: *c_void,
    LostQuorumResource: PQUORUM_RESOURCE_LOST,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRELEASE_ROUTINE = fn(
    Resource: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESOURCE_CONTROL_ROUTINE = fn(
    Resource: *c_void,
    ControlCode: u32,
    InBuffer: *c_void,
    InBufferSize: u32,
    OutBuffer: *c_void,
    OutBufferSize: u32,
    BytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESOURCE_TYPE_CONTROL_ROUTINE = fn(
    ResourceTypeName: [*:0]const u16,
    ControlCode: u32,
    InBuffer: *c_void,
    InBufferSize: u32,
    OutBuffer: *c_void,
    OutBufferSize: u32,
    BytesReturned: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const POPEN_V2_ROUTINE = fn(
    ResourceName: [*:0]const u16,
    ResourceKey: HKEY,
    ResourceHandle: ?*c_void,
    OpenFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PONLINE_V2_ROUTINE = fn(
    Resource: *c_void,
    EventHandle: *HANDLE,
    OnlineFlags: u32,
    InBuffer: ?[*:0]u8,
    InBufferSize: u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const POFFLINE_V2_ROUTINE = fn(
    Resource: *c_void,
    DestinationNodeName: ?[*:0]const u16,
    OfflineFlags: u32,
    InBuffer: ?[*:0]u8,
    InBufferSize: u32,
    Reserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCANCEL_ROUTINE = fn(
    Resource: *c_void,
    CancelFlags_RESERVED: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PBEGIN_RESCALL_ROUTINE = fn(
    Resource: *c_void,
    ControlCode: u32,
    InBuffer: *c_void,
    InBufferSize: u32,
    OutBuffer: *c_void,
    OutBufferSize: u32,
    BytesReturned: *u32,
    context: i64,
    ReturnedAsynchronously: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PBEGIN_RESTYPECALL_ROUTINE = fn(
    ResourceTypeName: [*:0]const u16,
    ControlCode: u32,
    InBuffer: *c_void,
    InBufferSize: u32,
    OutBuffer: *c_void,
    OutBufferSize: u32,
    BytesReturned: *u32,
    context: i64,
    ReturnedAsynchronously: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const RESOURCE_EXIT_STATE = extern enum(i32) {
    ResourceExitStateContinue = 0,
    ResourceExitStateTerminate = 1,
    ResourceExitStateMax = 2,
};
pub const ResourceExitStateContinue = RESOURCE_EXIT_STATE.ResourceExitStateContinue;
pub const ResourceExitStateTerminate = RESOURCE_EXIT_STATE.ResourceExitStateTerminate;
pub const ResourceExitStateMax = RESOURCE_EXIT_STATE.ResourceExitStateMax;

pub const PBEGIN_RESCALL_AS_USER_ROUTINE = fn(
    Resource: *c_void,
    TokenHandle: HANDLE,
    ControlCode: u32,
    InBuffer: *c_void,
    InBufferSize: u32,
    OutBuffer: *c_void,
    OutBufferSize: u32,
    BytesReturned: *u32,
    context: i64,
    ReturnedAsynchronously: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PBEGIN_RESTYPECALL_AS_USER_ROUTINE = fn(
    ResourceTypeName: [*:0]const u16,
    TokenHandle: HANDLE,
    ControlCode: u32,
    InBuffer: *c_void,
    InBufferSize: u32,
    OutBuffer: *c_void,
    OutBufferSize: u32,
    BytesReturned: *u32,
    context: i64,
    ReturnedAsynchronously: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLRES_V1_FUNCTIONS = extern struct {
    Open: POPEN_ROUTINE,
    Close: PCLOSE_ROUTINE,
    Online: PONLINE_ROUTINE,
    Offline: POFFLINE_ROUTINE,
    Terminate: PTERMINATE_ROUTINE,
    LooksAlive: PLOOKS_ALIVE_ROUTINE,
    IsAlive: PIS_ALIVE_ROUTINE,
    Arbitrate: PARBITRATE_ROUTINE,
    Release: PRELEASE_ROUTINE,
    ResourceControl: PRESOURCE_CONTROL_ROUTINE,
    ResourceTypeControl: PRESOURCE_TYPE_CONTROL_ROUTINE,
};

pub const CLRES_V2_FUNCTIONS = extern struct {
    Open: POPEN_V2_ROUTINE,
    Close: PCLOSE_ROUTINE,
    Online: PONLINE_V2_ROUTINE,
    Offline: POFFLINE_V2_ROUTINE,
    Terminate: PTERMINATE_ROUTINE,
    LooksAlive: PLOOKS_ALIVE_ROUTINE,
    IsAlive: PIS_ALIVE_ROUTINE,
    Arbitrate: PARBITRATE_ROUTINE,
    Release: PRELEASE_ROUTINE,
    ResourceControl: PRESOURCE_CONTROL_ROUTINE,
    ResourceTypeControl: PRESOURCE_TYPE_CONTROL_ROUTINE,
    Cancel: PCANCEL_ROUTINE,
};

pub const CLRES_V3_FUNCTIONS = extern struct {
    Open: POPEN_V2_ROUTINE,
    Close: PCLOSE_ROUTINE,
    Online: PONLINE_V2_ROUTINE,
    Offline: POFFLINE_V2_ROUTINE,
    Terminate: PTERMINATE_ROUTINE,
    LooksAlive: PLOOKS_ALIVE_ROUTINE,
    IsAlive: PIS_ALIVE_ROUTINE,
    Arbitrate: PARBITRATE_ROUTINE,
    Release: PRELEASE_ROUTINE,
    BeginResourceControl: PBEGIN_RESCALL_ROUTINE,
    BeginResourceTypeControl: PBEGIN_RESTYPECALL_ROUTINE,
    Cancel: PCANCEL_ROUTINE,
};

pub const CLRES_V4_FUNCTIONS = extern struct {
    Open: POPEN_V2_ROUTINE,
    Close: PCLOSE_ROUTINE,
    Online: PONLINE_V2_ROUTINE,
    Offline: POFFLINE_V2_ROUTINE,
    Terminate: PTERMINATE_ROUTINE,
    LooksAlive: PLOOKS_ALIVE_ROUTINE,
    IsAlive: PIS_ALIVE_ROUTINE,
    Arbitrate: PARBITRATE_ROUTINE,
    Release: PRELEASE_ROUTINE,
    BeginResourceControl: PBEGIN_RESCALL_ROUTINE,
    BeginResourceTypeControl: PBEGIN_RESTYPECALL_ROUTINE,
    Cancel: PCANCEL_ROUTINE,
    BeginResourceControlAsUser: PBEGIN_RESCALL_AS_USER_ROUTINE,
    BeginResourceTypeControlAsUser: PBEGIN_RESTYPECALL_AS_USER_ROUTINE,
};

pub const CLRES_FUNCTION_TABLE = extern struct {
    TableSize: u32,
    Version: u32,
    Anonymous: CLRES_FUNCTION_TABLE._Anonymous_e__Union,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const RESUTIL_LARGEINT_DATA = extern struct {
    Default: LARGE_INTEGER,
    Minimum: LARGE_INTEGER,
    Maximum: LARGE_INTEGER,
};

pub const RESUTIL_ULARGEINT_DATA = extern struct {
    Default: ULARGE_INTEGER,
    Minimum: ULARGE_INTEGER,
    Maximum: ULARGE_INTEGER,
};

pub const RESUTIL_FILETIME_DATA = extern struct {
    Default: FILETIME,
    Minimum: FILETIME,
    Maximum: FILETIME,
};

pub const RESUTIL_PROPERTY_ITEM = extern struct {
    Name: PWSTR,
    KeyName: PWSTR,
    Format: u32,
    Anonymous: RESUTIL_PROPERTY_ITEM._Anonymous_e__Union,
    Minimum: u32,
    Maximum: u32,
    Flags: u32,
    Offset: u32,
    const _Anonymous_e__Union = u32; // TODO: generate this nested type!
};

pub const PSTARTUP_ROUTINE = fn(
    ResourceType: [*:0]const u16,
    MinVersionSupported: u32,
    MaxVersionSupported: u32,
    SetResourceStatus: PSET_RESOURCE_STATUS_ROUTINE,
    LogEvent: PLOG_EVENT_ROUTINE,
    FunctionTable: **CLRES_FUNCTION_TABLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const FAILURE_TYPE = extern enum(i32) {
    GENERAL = 0,
    EMBEDDED = 1,
    NETWORK_LOSS = 2,
};
pub const FAILURE_TYPE_GENERAL = FAILURE_TYPE.GENERAL;
pub const FAILURE_TYPE_EMBEDDED = FAILURE_TYPE.EMBEDDED;
pub const FAILURE_TYPE_NETWORK_LOSS = FAILURE_TYPE.NETWORK_LOSS;

pub const CLUSTER_RESOURCE_APPLICATION_STATE = extern enum(i32) {
    ClusterResourceApplicationStateUnknown = 1,
    ClusterResourceApplicationOSHeartBeat = 2,
    ClusterResourceApplicationReady = 3,
};
pub const ClusterResourceApplicationStateUnknown = CLUSTER_RESOURCE_APPLICATION_STATE.ClusterResourceApplicationStateUnknown;
pub const ClusterResourceApplicationOSHeartBeat = CLUSTER_RESOURCE_APPLICATION_STATE.ClusterResourceApplicationOSHeartBeat;
pub const ClusterResourceApplicationReady = CLUSTER_RESOURCE_APPLICATION_STATE.ClusterResourceApplicationReady;

pub const PSET_RESOURCE_LOCKED_MODE_ROUTINE = fn(
    ResourceHandle: ?*c_void,
    LockedModeEnabled: BOOL,
    LockedModeReason: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PSIGNAL_FAILURE_ROUTINE = fn(
    ResourceHandle: ?*c_void,
    FailureType: FAILURE_TYPE,
    ApplicationSpecificErrorCode: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE = fn(
    ResourceHandle: ?*c_void,
    propertyListBuffer: *u8,
    propertyListBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PEND_CONTROL_CALL = fn(
    context: i64,
    status: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PEND_TYPE_CONTROL_CALL = fn(
    context: i64,
    status: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PEXTEND_RES_CONTROL_CALL = fn(
    context: i64,
    newTimeoutInMs: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PEXTEND_RES_TYPE_CONTROL_CALL = fn(
    context: i64,
    newTimeoutInMs: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRAISE_RES_TYPE_NOTIFICATION = fn(
    ResourceType: [*:0]const u16,
    pPayload: [*:0]const u8,
    payloadSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCHANGE_RESOURCE_PROCESS_FOR_DUMPS = fn(
    resource: ?*c_void,
    processName: [*:0]const u16,
    processId: u32,
    isAdd: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS = fn(
    resourceTypeName: [*:0]const u16,
    processName: [*:0]const u16,
    processId: u32,
    isAdd: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PSET_INTERNAL_STATE = fn(
    param0: ?*c_void,
    stateType: CLUSTER_RESOURCE_APPLICATION_STATE,
    active: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PSET_RESOURCE_LOCKED_MODE_EX_ROUTINE = fn(
    ResourceHandle: ?*c_void,
    LockedModeEnabled: BOOL,
    LockedModeReason: u32,
    LockedModeFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLRES_CALLBACK_FUNCTION_TABLE = extern struct {
    LogEvent: PLOG_EVENT_ROUTINE,
    SetResourceStatusEx: PSET_RESOURCE_STATUS_ROUTINE_EX,
    SetResourceLockedMode: PSET_RESOURCE_LOCKED_MODE_ROUTINE,
    SignalFailure: PSIGNAL_FAILURE_ROUTINE,
    SetResourceInMemoryNodeLocalProperties: PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE,
    EndControlCall: PEND_CONTROL_CALL,
    EndTypeControlCall: PEND_TYPE_CONTROL_CALL,
    ExtendControlCall: PEXTEND_RES_CONTROL_CALL,
    ExtendTypeControlCall: PEXTEND_RES_TYPE_CONTROL_CALL,
    RaiseResTypeNotification: PRAISE_RES_TYPE_NOTIFICATION,
    ChangeResourceProcessForDumps: PCHANGE_RESOURCE_PROCESS_FOR_DUMPS,
    ChangeResTypeProcessForDumps: PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS,
    SetInternalState: PSET_INTERNAL_STATE,
    SetResourceLockedModeEx: PSET_RESOURCE_LOCKED_MODE_EX_ROUTINE,
};

pub const PSTARTUP_EX_ROUTINE = fn(
    ResourceType: [*:0]const u16,
    MinVersionSupported: u32,
    MaxVersionSupported: u32,
    MonitorCallbackFunctions: *CLRES_CALLBACK_FUNCTION_TABLE,
    ResourceDllInterfaceFunctions: **CLRES_FUNCTION_TABLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const RESOURCE_MONITOR_STATE = extern enum(i32) {
    RmonInitializing = 0,
    RmonIdle = 1,
    RmonStartingResource = 2,
    RmonInitializingResource = 3,
    RmonOnlineResource = 4,
    RmonOfflineResource = 5,
    RmonShutdownResource = 6,
    RmonDeletingResource = 7,
    RmonIsAlivePoll = 8,
    RmonLooksAlivePoll = 9,
    RmonArbitrateResource = 10,
    RmonReleaseResource = 11,
    RmonResourceControl = 12,
    RmonResourceTypeControl = 13,
    RmonTerminateResource = 14,
    RmonDeadlocked = 15,
};
pub const RmonInitializing = RESOURCE_MONITOR_STATE.RmonInitializing;
pub const RmonIdle = RESOURCE_MONITOR_STATE.RmonIdle;
pub const RmonStartingResource = RESOURCE_MONITOR_STATE.RmonStartingResource;
pub const RmonInitializingResource = RESOURCE_MONITOR_STATE.RmonInitializingResource;
pub const RmonOnlineResource = RESOURCE_MONITOR_STATE.RmonOnlineResource;
pub const RmonOfflineResource = RESOURCE_MONITOR_STATE.RmonOfflineResource;
pub const RmonShutdownResource = RESOURCE_MONITOR_STATE.RmonShutdownResource;
pub const RmonDeletingResource = RESOURCE_MONITOR_STATE.RmonDeletingResource;
pub const RmonIsAlivePoll = RESOURCE_MONITOR_STATE.RmonIsAlivePoll;
pub const RmonLooksAlivePoll = RESOURCE_MONITOR_STATE.RmonLooksAlivePoll;
pub const RmonArbitrateResource = RESOURCE_MONITOR_STATE.RmonArbitrateResource;
pub const RmonReleaseResource = RESOURCE_MONITOR_STATE.RmonReleaseResource;
pub const RmonResourceControl = RESOURCE_MONITOR_STATE.RmonResourceControl;
pub const RmonResourceTypeControl = RESOURCE_MONITOR_STATE.RmonResourceTypeControl;
pub const RmonTerminateResource = RESOURCE_MONITOR_STATE.RmonTerminateResource;
pub const RmonDeadlocked = RESOURCE_MONITOR_STATE.RmonDeadlocked;

pub const MONITOR_STATE = extern struct {
    LastUpdate: LARGE_INTEGER,
    State: RESOURCE_MONITOR_STATE,
    ActiveResource: HANDLE,
    ResmonStop: BOOL,
};

pub const POST_UPGRADE_VERSION_INFO = extern struct {
    newMajorVersion: u32,
    newUpgradeVersion: u32,
    oldMajorVersion: u32,
    oldUpgradeVersion: u32,
    reserved: u32,
};

pub const CLUSTER_HEALTH_FAULT = extern struct {
    Id: PWSTR,
    ErrorType: u32,
    ErrorCode: u32,
    Description: PWSTR,
    Provider: PWSTR,
    Flags: u32,
    Reserved: u32,
};

pub const CLUSTER_HEALTH_FAULT_ARRAY = extern struct {
    numFaults: u32,
    faults: *CLUSTER_HEALTH_FAULT,
};

pub const PRESUTIL_START_RESOURCE_SERVICE = fn(
    pszServiceName: [*:0]const u16,
    phServiceHandle: **SC_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_VERIFY_RESOURCE_SERVICE = fn(
    pszServiceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_STOP_RESOURCE_SERVICE = fn(
    pszServiceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_VERIFY_SERVICE = fn(
    hServiceHandle: *SC_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_STOP_SERVICE = fn(
    hServiceHandle: *SC_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_CREATE_DIRECTORY_TREE = fn(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_IS_PATH_VALID = fn(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PRESUTIL_ENUM_PROPERTIES = fn(
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pszOutProperties: [*:0]u16,
    cbOutPropertiesSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_ENUM_PRIVATE_PROPERTIES = fn(
    hkeyClusterKey: HKEY,
    pszOutProperties: [*:0]u16,
    cbOutPropertiesSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_PROPERTIES = fn(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pOutPropertyList: [*]u8,
    cbOutPropertyListSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_ALL_PROPERTIES = fn(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pOutPropertyList: [*]u8,
    cbOutPropertyListSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_PRIVATE_PROPERTIES = fn(
    hkeyClusterKey: HKEY,
    pOutPropertyList: [*]u8,
    cbOutPropertyListSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_PROPERTY_SIZE = fn(
    hkeyClusterKey: HKEY,
    pPropertyTableItem: *const RESUTIL_PROPERTY_ITEM,
    pcbOutPropertyListSize: *u32,
    pnPropertyCount: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_PROPERTY = fn(
    hkeyClusterKey: HKEY,
    pPropertyTableItem: *const RESUTIL_PROPERTY_ITEM,
    pOutPropertyItem: [*]*c_void,
    pcbOutPropertyItemSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_VERIFY_PROPERTY_TABLE = fn(
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    Reserved: *c_void,
    bAllowUnknownProperties: BOOL,
    pInPropertyList: [*]const u8,
    cbInPropertyListSize: u32,
    pOutParams: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_PROPERTY_TABLE = fn(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    Reserved: *c_void,
    bAllowUnknownProperties: BOOL,
    pInPropertyList: [*]const u8,
    cbInPropertyListSize: u32,
    pOutParams: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_PROPERTY_TABLE_EX = fn(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    Reserved: *c_void,
    bAllowUnknownProperties: BOOL,
    pInPropertyList: *const c_void,
    cbInPropertyListSize: u32,
    bForceWrite: BOOL,
    pOutParams: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK = fn(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    Reserved: *c_void,
    pInParams: *const u8,
    pInPropertyList: *const c_void,
    cbInPropertyListSize: u32,
    pOutParams: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK_EX = fn(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    Reserved: *c_void,
    pInParams: *const u8,
    pInPropertyList: *const c_void,
    cbInPropertyListSize: u32,
    bForceWrite: BOOL,
    pOutParams: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_UNKNOWN_PROPERTIES = fn(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pInPropertyList: [*]const u8,
    cbInPropertyListSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_PROPERTIES_TO_PARAMETER_BLOCK = fn(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pOutParams: *u8,
    bCheckForRequiredProperties: BOOL,
    pszNameOfPropInError: *PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_PROPERTY_LIST_FROM_PARAMETER_BLOCK = fn(
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pOutPropertyList: ?[*]u8,
    pcbOutPropertyListSize: *u32,
    pInParams: *const u8,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_DUP_PARAMETER_BLOCK = fn(
    pOutParams: *u8,
    pInParams: *const u8,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_FREE_PARAMETER_BLOCK = fn(
    pOutParams: *u8,
    pInParams: *const u8,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PRESUTIL_ADD_UNKNOWN_PROPERTIES = fn(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pOutPropertyList: *c_void,
    pcbOutPropertyListSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_PRIVATE_PROPERTY_LIST = fn(
    hkeyClusterKey: HKEY,
    pInPropertyList: [*]const u8,
    cbInPropertyListSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_VERIFY_PRIVATE_PROPERTY_LIST = fn(
    pInPropertyList: [*]const u8,
    cbInPropertyListSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_DUP_STRING = fn(
    pszInString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub const PRESUTIL_GET_BINARY_VALUE = fn(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    ppbOutValue: ?[*]?*u8,
    pcbOutValueSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_SZ_VALUE = fn(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub const PRESUTIL_GET_EXPAND_SZ_VALUE = fn(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    bExpand: BOOL,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub const PRESUTIL_GET_DWORD_VALUE = fn(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    pdwOutValue: *u32,
    dwDefaultValue: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_QWORD_VALUE = fn(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    pqwOutValue: *u64,
    qwDefaultValue: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_BINARY_VALUE = fn(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    pbNewValue: [*:0]const u8,
    cbNewValueSize: u32,
    ppbOutValue: ?[*]?*u8,
    pcbOutValueSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_SZ_VALUE = fn(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    pszNewValue: [*:0]const u16,
    ppszOutString: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_EXPAND_SZ_VALUE = fn(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    pszNewValue: [*:0]const u16,
    ppszOutString: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_MULTI_SZ_VALUE = fn(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    pszNewValue: [*:0]const u16,
    cbNewValueSize: u32,
    ppszOutValue: ?[*]?PWSTR,
    pcbOutValueSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_DWORD_VALUE = fn(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    dwNewValue: u32,
    pdwOutValue: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_QWORD_VALUE = fn(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    qwNewValue: u64,
    pqwOutValue: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_BINARY_PROPERTY = fn(
    ppbOutValue: **u8,
    pcbOutValueSize: *u32,
    pValueStruct: *const CLUSPROP_BINARY,
    pbOldValue: ?[*:0]const u8,
    cbOldValueSize: u32,
    ppPropertyList: [*]*u8,
    pcbPropertyListSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_SZ_PROPERTY = fn(
    ppszOutValue: *PWSTR,
    pValueStruct: *const CLUSPROP_SZ,
    pszOldValue: ?[*:0]const u16,
    ppPropertyList: [*]*u8,
    pcbPropertyListSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_MULTI_SZ_PROPERTY = fn(
    ppszOutValue: *PWSTR,
    pcbOutValueSize: *u32,
    pValueStruct: *const CLUSPROP_SZ,
    pszOldValue: ?[*:0]const u16,
    cbOldValueSize: u32,
    ppPropertyList: [*]*u8,
    pcbPropertyListSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_DWORD_PROPERTY = fn(
    pdwOutValue: *u32,
    pValueStruct: *const CLUSPROP_DWORD,
    dwOldValue: u32,
    dwMinimum: u32,
    dwMaximum: u32,
    ppPropertyList: **u8,
    pcbPropertyListSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_LONG_PROPERTY = fn(
    plOutValue: *i32,
    pValueStruct: *const CLUSPROP_LONG,
    lOldValue: i32,
    lMinimum: i32,
    lMaximum: i32,
    ppPropertyList: **u8,
    pcbPropertyListSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_FILETIME_PROPERTY = fn(
    pftOutValue: *FILETIME,
    pValueStruct: *const CLUSPROP_FILETIME,
    ftOldValue: FILETIME,
    ftMinimum: FILETIME,
    ftMaximum: FILETIME,
    ppPropertyList: **u8,
    pcbPropertyListSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_ENVIRONMENT_WITH_NET_NAME = fn(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub const PRESUTIL_FREE_ENVIRONMENT = fn(
    lpEnvironment: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_EXPAND_ENVIRONMENT_STRINGS = fn(
    pszSrc: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub const PRESUTIL_SET_RESOURCE_SERVICE_ENVIRONMENT = fn(
    pszServiceName: [*:0]const u16,
    hResource: *_HRESOURCE,
    pfnLogEvent: PLOG_EVENT_ROUTINE,
    hResourceHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_REMOVE_RESOURCE_SERVICE_ENVIRONMENT = fn(
    pszServiceName: [*:0]const u16,
    pfnLogEvent: PLOG_EVENT_ROUTINE,
    hResourceHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS = fn(
    pszServiceName: [*:0]const u16,
    schSCMHandle: *SC_HANDLE__,
    phService: **SC_HANDLE__,
    pfnLogEvent: PLOG_EVENT_ROUTINE,
    hResourceHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_FIND_SZ_PROPERTY = fn(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pszPropertyValue: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_FIND_EXPAND_SZ_PROPERTY = fn(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pszPropertyValue: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_FIND_EXPANDED_SZ_PROPERTY = fn(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pszPropertyValue: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_FIND_DWORD_PROPERTY = fn(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pdwPropertyValue: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_FIND_BINARY_PROPERTY = fn(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pbPropertyValue: ?[*]?*u8,
    pcbPropertyValueSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_FIND_MULTI_SZ_PROPERTY = fn(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pszPropertyValue: [*]PWSTR,
    pcbPropertyValueSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_FIND_LONG_PROPERTY = fn(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    plPropertyValue: *i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_FIND_ULARGEINTEGER_PROPERTY = fn(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    plPropertyValue: *u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_FIND_FILETIME_PROPERTY = fn(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pftPropertyValue: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLUS_WORKER = extern struct {
    hThread: HANDLE,
    Terminate: BOOL,
};

pub const PWORKER_START_ROUTINE = fn(
    pWorker: *CLUS_WORKER,
    lpThreadParameter: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPI_CLUS_WORKER_CREATE = fn(
    lpWorker: *CLUS_WORKER,
    lpStartAddress: PWORKER_START_ROUTINE,
    lpParameter: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSAPIClusWorkerCheckTerminate = fn(
    lpWorker: *CLUS_WORKER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSAPI_CLUS_WORKER_TERMINATE = fn(
    lpWorker: *CLUS_WORKER,
) callconv(@import("std").os.windows.WINAPI) void;

pub const LPRESOURCE_CALLBACK = fn(
    param0: *_HRESOURCE,
    param1: *_HRESOURCE,
    param2: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPRESOURCE_CALLBACK_EX = fn(
    param0: *_HCLUSTER,
    param1: *_HRESOURCE,
    param2: *_HRESOURCE,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPGROUP_CALLBACK_EX = fn(
    param0: *_HCLUSTER,
    param1: *_HGROUP,
    param2: *_HGROUP,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const LPNODE_CALLBACK = fn(
    param0: *_HCLUSTER,
    param1: *_HNODE,
    param2: CLUSTER_NODE_STATE,
    param3: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_RESOURCES_EQUAL = fn(
    hSelf: *_HRESOURCE,
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PRESUTIL_RESOURCE_TYPES_EQUAL = fn(
    lpszResourceTypeName: [*:0]const u16,
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PRESUTIL_IS_RESOURCE_CLASS_EQUAL = fn(
    prci: *CLUS_RESOURCE_CLASS_INFO,
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PRESUTIL_ENUM_RESOURCES = fn(
    hSelf: *_HRESOURCE,
    lpszResTypeName: [*:0]const u16,
    pResCallBack: LPRESOURCE_CALLBACK,
    pParameter: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_ENUM_RESOURCES_EX = fn(
    hCluster: *_HCLUSTER,
    hSelf: *_HRESOURCE,
    lpszResTypeName: [*:0]const u16,
    pResCallBack: LPRESOURCE_CALLBACK_EX,
    pParameter: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_RESOURCE_DEPENDENCY = fn(
    hSelf: HANDLE,
    lpszResourceType: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub const PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME = fn(
    hCluster: *_HCLUSTER,
    hSelf: HANDLE,
    lpszResourceType: [*:0]const u16,
    bRecurse: BOOL,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub const PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS = fn(
    hCluster: *_HCLUSTER,
    hSelf: HANDLE,
    prci: *CLUS_RESOURCE_CLASS_INFO,
    bRecurse: BOOL,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub const PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY = fn(
    lpszResourceName: [*:0]const u16,
    lpszResourceType: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub const PRESUTIL_GET_RESOURCE_DEPENDENTIP_ADDRESS_PROPS = fn(
    hResource: *_HRESOURCE,
    pszAddress: [*:0]u16,
    pcchAddress: *u32,
    pszSubnetMask: [*:0]u16,
    pcchSubnetMask: *u32,
    pszNetwork: [*:0]u16,
    pcchNetwork: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_FIND_DEPENDENT_DISK_RESOURCE_DRIVE_LETTER = fn(
    hCluster: *_HCLUSTER,
    hResource: *_HRESOURCE,
    pszDriveLetter: [*:0]u16,
    pcchDriveLetter: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_TERMINATE_SERVICE_PROCESS_FROM_RES_DLL = fn(
    dwServicePid: u32,
    bOffline: BOOL,
    pdwResourceState: *u32,
    pfnLogEvent: PLOG_EVENT_ROUTINE,
    hResourceHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_PROPERTY_FORMATS = fn(
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pOutPropertyFormatList: [*]u8,
    cbPropertyFormatListSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_CORE_CLUSTER_RESOURCES = fn(
    hCluster: *_HCLUSTER,
    phClusterNameResource: **_HRESOURCE,
    phClusterIPAddressResource: **_HRESOURCE,
    phClusterQuorumResource: **_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_RESOURCE_NAME = fn(
    hResource: *_HRESOURCE,
    pszResourceName: [*:0]u16,
    pcchResourceNameInOut: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLUSTER_ROLE = extern enum(i32) {
    ClusterRoleDHCP = 0,
    ClusterRoleDTC = 1,
    ClusterRoleFileServer = 2,
    ClusterRoleGenericApplication = 3,
    ClusterRoleGenericScript = 4,
    ClusterRoleGenericService = 5,
    ClusterRoleISCSINameServer = 6,
    ClusterRoleMSMQ = 7,
    ClusterRoleNFS = 8,
    ClusterRolePrintServer = 9,
    ClusterRoleStandAloneNamespaceServer = 10,
    ClusterRoleVolumeShadowCopyServiceTask = 11,
    ClusterRoleWINS = 12,
    ClusterRoleTaskScheduler = 13,
    ClusterRoleNetworkFileSystem = 14,
    ClusterRoleDFSReplicatedFolder = 15,
    ClusterRoleDistributedFileSystem = 16,
    ClusterRoleDistributedNetworkName = 17,
    ClusterRoleFileShare = 18,
    ClusterRoleFileShareWitness = 19,
    ClusterRoleHardDisk = 20,
    ClusterRoleIPAddress = 21,
    ClusterRoleIPV6Address = 22,
    ClusterRoleIPV6TunnelAddress = 23,
    ClusterRoleISCSITargetServer = 24,
    ClusterRoleNetworkName = 25,
    ClusterRolePhysicalDisk = 26,
    ClusterRoleSODAFileServer = 27,
    ClusterRoleStoragePool = 28,
    ClusterRoleVirtualMachine = 29,
    ClusterRoleVirtualMachineConfiguration = 30,
    ClusterRoleVirtualMachineReplicaBroker = 31,
};
pub const ClusterRoleDHCP = CLUSTER_ROLE.ClusterRoleDHCP;
pub const ClusterRoleDTC = CLUSTER_ROLE.ClusterRoleDTC;
pub const ClusterRoleFileServer = CLUSTER_ROLE.ClusterRoleFileServer;
pub const ClusterRoleGenericApplication = CLUSTER_ROLE.ClusterRoleGenericApplication;
pub const ClusterRoleGenericScript = CLUSTER_ROLE.ClusterRoleGenericScript;
pub const ClusterRoleGenericService = CLUSTER_ROLE.ClusterRoleGenericService;
pub const ClusterRoleISCSINameServer = CLUSTER_ROLE.ClusterRoleISCSINameServer;
pub const ClusterRoleMSMQ = CLUSTER_ROLE.ClusterRoleMSMQ;
pub const ClusterRoleNFS = CLUSTER_ROLE.ClusterRoleNFS;
pub const ClusterRolePrintServer = CLUSTER_ROLE.ClusterRolePrintServer;
pub const ClusterRoleStandAloneNamespaceServer = CLUSTER_ROLE.ClusterRoleStandAloneNamespaceServer;
pub const ClusterRoleVolumeShadowCopyServiceTask = CLUSTER_ROLE.ClusterRoleVolumeShadowCopyServiceTask;
pub const ClusterRoleWINS = CLUSTER_ROLE.ClusterRoleWINS;
pub const ClusterRoleTaskScheduler = CLUSTER_ROLE.ClusterRoleTaskScheduler;
pub const ClusterRoleNetworkFileSystem = CLUSTER_ROLE.ClusterRoleNetworkFileSystem;
pub const ClusterRoleDFSReplicatedFolder = CLUSTER_ROLE.ClusterRoleDFSReplicatedFolder;
pub const ClusterRoleDistributedFileSystem = CLUSTER_ROLE.ClusterRoleDistributedFileSystem;
pub const ClusterRoleDistributedNetworkName = CLUSTER_ROLE.ClusterRoleDistributedNetworkName;
pub const ClusterRoleFileShare = CLUSTER_ROLE.ClusterRoleFileShare;
pub const ClusterRoleFileShareWitness = CLUSTER_ROLE.ClusterRoleFileShareWitness;
pub const ClusterRoleHardDisk = CLUSTER_ROLE.ClusterRoleHardDisk;
pub const ClusterRoleIPAddress = CLUSTER_ROLE.ClusterRoleIPAddress;
pub const ClusterRoleIPV6Address = CLUSTER_ROLE.ClusterRoleIPV6Address;
pub const ClusterRoleIPV6TunnelAddress = CLUSTER_ROLE.ClusterRoleIPV6TunnelAddress;
pub const ClusterRoleISCSITargetServer = CLUSTER_ROLE.ClusterRoleISCSITargetServer;
pub const ClusterRoleNetworkName = CLUSTER_ROLE.ClusterRoleNetworkName;
pub const ClusterRolePhysicalDisk = CLUSTER_ROLE.ClusterRolePhysicalDisk;
pub const ClusterRoleSODAFileServer = CLUSTER_ROLE.ClusterRoleSODAFileServer;
pub const ClusterRoleStoragePool = CLUSTER_ROLE.ClusterRoleStoragePool;
pub const ClusterRoleVirtualMachine = CLUSTER_ROLE.ClusterRoleVirtualMachine;
pub const ClusterRoleVirtualMachineConfiguration = CLUSTER_ROLE.ClusterRoleVirtualMachineConfiguration;
pub const ClusterRoleVirtualMachineReplicaBroker = CLUSTER_ROLE.ClusterRoleVirtualMachineReplicaBroker;

pub const CLUSTER_ROLE_STATE = extern enum(i32) {
    ClusterRoleUnknown = -1,
    ClusterRoleClustered = 0,
    ClusterRoleUnclustered = 1,
};
pub const ClusterRoleUnknown = CLUSTER_ROLE_STATE.ClusterRoleUnknown;
pub const ClusterRoleClustered = CLUSTER_ROLE_STATE.ClusterRoleClustered;
pub const ClusterRoleUnclustered = CLUSTER_ROLE_STATE.ClusterRoleUnclustered;

pub const PCLUSTER_IS_PATH_ON_SHARED_VOLUME = fn(
    lpszPathName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSTER_GET_VOLUME_PATH_NAME = fn(
    lpszFileName: [*:0]const u16,
    lpszVolumePathName: PWSTR,
    cchBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSTER_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT = fn(
    lpszVolumeMountPoint: [*:0]const u16,
    lpszVolumeName: PWSTR,
    cchBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PCLUSTER_PREPARE_SHARED_VOLUME_FOR_BACKUP = fn(
    lpszFileName: [*:0]const u16,
    lpszVolumePathName: PWSTR,
    lpcchVolumePathName: *u32,
    lpszVolumeName: PWSTR,
    lpcchVolumeName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSTER_CLEAR_BACKUP_STATE_FOR_SHARED_VOLUME = fn(
    lpszVolumePathName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS_EX = fn(
    pszServiceName: [*:0]const u16,
    schSCMHandle: *SC_HANDLE__,
    phService: **SC_HANDLE__,
    dwDesiredAccess: u32,
    pfnLogEvent: PLOG_EVENT_ROUTINE,
    hResourceHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_ENUM_RESOURCES_EX2 = fn(
    hCluster: *_HCLUSTER,
    hSelf: *_HRESOURCE,
    lpszResTypeName: [*:0]const u16,
    pResCallBack: LPRESOURCE_CALLBACK_EX,
    pParameter: *c_void,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESUTIL_GET_RESOURCE_DEPENDENCY_EX = fn(
    hSelf: HANDLE,
    lpszResourceType: [*:0]const u16,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub const PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME_EX = fn(
    hCluster: *_HCLUSTER,
    hSelf: HANDLE,
    lpszResourceType: [*:0]const u16,
    bRecurse: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub const PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS_EX = fn(
    hCluster: *_HCLUSTER,
    hSelf: HANDLE,
    prci: *CLUS_RESOURCE_CLASS_INFO,
    bRecurse: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub const PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY_EX = fn(
    lpszResourceName: [*:0]const u16,
    lpszResourceType: [*:0]const u16,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub const PRESUTIL_GET_CORE_CLUSTER_RESOURCES_EX = fn(
    hClusterIn: *_HCLUSTER,
    phClusterNameResourceOut: **_HRESOURCE,
    phClusterIPAddressResourceOut: **_HRESOURCE,
    phClusterQuorumResourceOut: **_HRESOURCE,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const _HCLUSCRYPTPROVIDER = extern struct { comment: [*]const u8 = "TODO: why is this struct empty?" };

pub const POPEN_CLUSTER_CRYPT_PROVIDER = fn(
    lpszResource: [*:0]const u16,
    lpszProvider: *i8,
    dwType: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSCRYPTPROVIDER;

pub const POPEN_CLUSTER_CRYPT_PROVIDEREX = fn(
    lpszResource: [*:0]const u16,
    lpszKeyname: [*:0]const u16,
    lpszProvider: *i8,
    dwType: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSCRYPTPROVIDER;

pub const PCLOSE_CLUSTER_CRYPT_PROVIDER = fn(
    hClusCryptProvider: *_HCLUSCRYPTPROVIDER,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSTER_ENCRYPT = fn(
    hClusCryptProvider: *_HCLUSCRYPTPROVIDER,
    pData: [*:0]u8,
    cbData: u32,
    ppData: **u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PCLUSTER_DECRYPT = fn(
    hClusCryptProvider: *_HCLUSCRYPTPROVIDER,
    pCryptInput: *u8,
    cbCryptInput: u32,
    ppCryptOutput: **u8,
    pcbCryptOutput: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PFREE_CLUSTER_CRYPT = fn(
    pCryptInfo: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PaxosTagCStruct = extern struct {
    __padding__PaxosTagVtable: u64,
    __padding__NextEpochVtable: u64,
    __padding__NextEpoch_DateTimeVtable: u64,
    NextEpoch_DateTime_ticks: u64,
    NextEpoch_Value: i32,
    __padding__BoundryNextEpoch: u32,
    __padding__EpochVtable: u64,
    __padding__Epoch_DateTimeVtable: u64,
    Epoch_DateTime_ticks: u64,
    Epoch_Value: i32,
    __padding__BoundryEpoch: u32,
    Sequence: i32,
    __padding__BoundrySequence: u32,
};

pub const WitnessTagUpdateHelper = extern struct {
    Version: i32,
    paxosToSet: PaxosTagCStruct,
    paxosToValidate: PaxosTagCStruct,
};

pub const WitnessTagHelper = extern struct {
    Version: i32,
    paxosToValidate: PaxosTagCStruct,
};

pub const PREGISTER_APPINSTANCE = fn(
    ProcessHandle: HANDLE,
    AppInstanceId: *Guid,
    ChildrenInheritAppInstance: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PREGISTER_APPINSTANCE_VERSION = fn(
    AppInstanceId: *Guid,
    InstanceVersionHigh: u64,
    InstanceVersionLow: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PQUERY_APPINSTANCE_VERSION = fn(
    AppInstanceId: *Guid,
    InstanceVersionHigh: *u64,
    InstanceVersionLow: *u64,
    VersionStatus: *NTSTATUS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PRESET_ALL_APPINSTANCE_VERSIONS = fn(
) callconv(@import("std").os.windows.WINAPI) u32;

pub const SET_APP_INSTANCE_CSV_FLAGS = fn(
    ProcessHandle: HANDLE,
    Mask: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CLUADMEX_OBJECT_TYPE = extern enum(i32) {
    CLUADMEX_OT_NONE = 0,
    CLUADMEX_OT_CLUSTER = 1,
    CLUADMEX_OT_NODE = 2,
    CLUADMEX_OT_GROUP = 3,
    CLUADMEX_OT_RESOURCE = 4,
    CLUADMEX_OT_RESOURCETYPE = 5,
    CLUADMEX_OT_NETWORK = 6,
    CLUADMEX_OT_NETINTERFACE = 7,
};
pub const CLUADMEX_OT_NONE = CLUADMEX_OBJECT_TYPE.CLUADMEX_OT_NONE;
pub const CLUADMEX_OT_CLUSTER = CLUADMEX_OBJECT_TYPE.CLUADMEX_OT_CLUSTER;
pub const CLUADMEX_OT_NODE = CLUADMEX_OBJECT_TYPE.CLUADMEX_OT_NODE;
pub const CLUADMEX_OT_GROUP = CLUADMEX_OBJECT_TYPE.CLUADMEX_OT_GROUP;
pub const CLUADMEX_OT_RESOURCE = CLUADMEX_OBJECT_TYPE.CLUADMEX_OT_RESOURCE;
pub const CLUADMEX_OT_RESOURCETYPE = CLUADMEX_OBJECT_TYPE.CLUADMEX_OT_RESOURCETYPE;
pub const CLUADMEX_OT_NETWORK = CLUADMEX_OBJECT_TYPE.CLUADMEX_OT_NETWORK;
pub const CLUADMEX_OT_NETINTERFACE = CLUADMEX_OBJECT_TYPE.CLUADMEX_OT_NETINTERFACE;

const IID_IGetClusterUIInfo_Value = @import("../zig.zig").Guid.initString("97DEDE50-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IGetClusterUIInfo = &IID_IGetClusterUIInfo_Value;
pub const IGetClusterUIInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClusterName: fn(
            self: *const IGetClusterUIInfo,
            lpszName: BSTR,
            pcchName: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocale: fn(
            self: *const IGetClusterUIInfo,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFont: fn(
            self: *const IGetClusterUIInfo,
        ) callconv(@import("std").os.windows.WINAPI) HFONT,
        GetIcon: fn(
            self: *const IGetClusterUIInfo,
        ) callconv(@import("std").os.windows.WINAPI) HICON,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterUIInfo_GetClusterName(self: *const T, lpszName: BSTR, pcchName: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetClusterUIInfo.VTable, self.vtable).GetClusterName(@ptrCast(*const IGetClusterUIInfo, self), lpszName, pcchName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterUIInfo_GetLocale(self: *const T) callconv(.Inline) u32 {
            return @ptrCast(*const IGetClusterUIInfo.VTable, self.vtable).GetLocale(@ptrCast(*const IGetClusterUIInfo, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterUIInfo_GetFont(self: *const T) callconv(.Inline) HFONT {
            return @ptrCast(*const IGetClusterUIInfo.VTable, self.vtable).GetFont(@ptrCast(*const IGetClusterUIInfo, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterUIInfo_GetIcon(self: *const T) callconv(.Inline) HICON {
            return @ptrCast(*const IGetClusterUIInfo.VTable, self.vtable).GetIcon(@ptrCast(*const IGetClusterUIInfo, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetClusterDataInfo_Value = @import("../zig.zig").Guid.initString("97DEDE51-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IGetClusterDataInfo = &IID_IGetClusterDataInfo_Value;
pub const IGetClusterDataInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClusterName: fn(
            self: *const IGetClusterDataInfo,
            lpszName: BSTR,
            pcchName: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClusterHandle: fn(
            self: *const IGetClusterDataInfo,
        ) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER,
        GetObjectCount: fn(
            self: *const IGetClusterDataInfo,
        ) callconv(@import("std").os.windows.WINAPI) i32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterDataInfo_GetClusterName(self: *const T, lpszName: BSTR, pcchName: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetClusterDataInfo.VTable, self.vtable).GetClusterName(@ptrCast(*const IGetClusterDataInfo, self), lpszName, pcchName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterDataInfo_GetClusterHandle(self: *const T) callconv(.Inline) *_HCLUSTER {
            return @ptrCast(*const IGetClusterDataInfo.VTable, self.vtable).GetClusterHandle(@ptrCast(*const IGetClusterDataInfo, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterDataInfo_GetObjectCount(self: *const T) callconv(.Inline) i32 {
            return @ptrCast(*const IGetClusterDataInfo.VTable, self.vtable).GetObjectCount(@ptrCast(*const IGetClusterDataInfo, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetClusterObjectInfo_Value = @import("../zig.zig").Guid.initString("97DEDE52-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IGetClusterObjectInfo = &IID_IGetClusterObjectInfo_Value;
pub const IGetClusterObjectInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetObjectName: fn(
            self: *const IGetClusterObjectInfo,
            lObjIndex: i32,
            lpszName: BSTR,
            pcchName: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectType: fn(
            self: *const IGetClusterObjectInfo,
            lObjIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) CLUADMEX_OBJECT_TYPE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterObjectInfo_GetObjectName(self: *const T, lObjIndex: i32, lpszName: BSTR, pcchName: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetClusterObjectInfo.VTable, self.vtable).GetObjectName(@ptrCast(*const IGetClusterObjectInfo, self), lObjIndex, lpszName, pcchName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterObjectInfo_GetObjectType(self: *const T, lObjIndex: i32) callconv(.Inline) CLUADMEX_OBJECT_TYPE {
            return @ptrCast(*const IGetClusterObjectInfo.VTable, self.vtable).GetObjectType(@ptrCast(*const IGetClusterObjectInfo, self), lObjIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetClusterNodeInfo_Value = @import("../zig.zig").Guid.initString("97DEDE53-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IGetClusterNodeInfo = &IID_IGetClusterNodeInfo_Value;
pub const IGetClusterNodeInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNodeHandle: fn(
            self: *const IGetClusterNodeInfo,
            lObjIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) *_HNODE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterNodeInfo_GetNodeHandle(self: *const T, lObjIndex: i32) callconv(.Inline) *_HNODE {
            return @ptrCast(*const IGetClusterNodeInfo.VTable, self.vtable).GetNodeHandle(@ptrCast(*const IGetClusterNodeInfo, self), lObjIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetClusterGroupInfo_Value = @import("../zig.zig").Guid.initString("97DEDE54-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IGetClusterGroupInfo = &IID_IGetClusterGroupInfo_Value;
pub const IGetClusterGroupInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetGroupHandle: fn(
            self: *const IGetClusterGroupInfo,
            lObjIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) *_HGROUP,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterGroupInfo_GetGroupHandle(self: *const T, lObjIndex: i32) callconv(.Inline) *_HGROUP {
            return @ptrCast(*const IGetClusterGroupInfo.VTable, self.vtable).GetGroupHandle(@ptrCast(*const IGetClusterGroupInfo, self), lObjIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetClusterResourceInfo_Value = @import("../zig.zig").Guid.initString("97DEDE55-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IGetClusterResourceInfo = &IID_IGetClusterResourceInfo_Value;
pub const IGetClusterResourceInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetResourceHandle: fn(
            self: *const IGetClusterResourceInfo,
            lObjIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE,
        GetResourceTypeName: fn(
            self: *const IGetClusterResourceInfo,
            lObjIndex: i32,
            lpszResTypeName: BSTR,
            pcchResTypeName: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResourceNetworkName: fn(
            self: *const IGetClusterResourceInfo,
            lObjIndex: i32,
            lpszNetName: BSTR,
            pcchNetName: *u32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterResourceInfo_GetResourceHandle(self: *const T, lObjIndex: i32) callconv(.Inline) *_HRESOURCE {
            return @ptrCast(*const IGetClusterResourceInfo.VTable, self.vtable).GetResourceHandle(@ptrCast(*const IGetClusterResourceInfo, self), lObjIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterResourceInfo_GetResourceTypeName(self: *const T, lObjIndex: i32, lpszResTypeName: BSTR, pcchResTypeName: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IGetClusterResourceInfo.VTable, self.vtable).GetResourceTypeName(@ptrCast(*const IGetClusterResourceInfo, self), lObjIndex, lpszResTypeName, pcchResTypeName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterResourceInfo_GetResourceNetworkName(self: *const T, lObjIndex: i32, lpszNetName: BSTR, pcchNetName: *u32) callconv(.Inline) BOOL {
            return @ptrCast(*const IGetClusterResourceInfo.VTable, self.vtable).GetResourceNetworkName(@ptrCast(*const IGetClusterResourceInfo, self), lObjIndex, lpszNetName, pcchNetName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetClusterNetworkInfo_Value = @import("../zig.zig").Guid.initString("97DEDE56-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IGetClusterNetworkInfo = &IID_IGetClusterNetworkInfo_Value;
pub const IGetClusterNetworkInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNetworkHandle: fn(
            self: *const IGetClusterNetworkInfo,
            lObjIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) *_HNETWORK,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterNetworkInfo_GetNetworkHandle(self: *const T, lObjIndex: i32) callconv(.Inline) *_HNETWORK {
            return @ptrCast(*const IGetClusterNetworkInfo.VTable, self.vtable).GetNetworkHandle(@ptrCast(*const IGetClusterNetworkInfo, self), lObjIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetClusterNetInterfaceInfo_Value = @import("../zig.zig").Guid.initString("97DEDE57-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IGetClusterNetInterfaceInfo = &IID_IGetClusterNetInterfaceInfo_Value;
pub const IGetClusterNetInterfaceInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNetInterfaceHandle: fn(
            self: *const IGetClusterNetInterfaceInfo,
            lObjIndex: i32,
        ) callconv(@import("std").os.windows.WINAPI) *_HNETINTERFACE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IGetClusterNetInterfaceInfo_GetNetInterfaceHandle(self: *const T, lObjIndex: i32) callconv(.Inline) *_HNETINTERFACE {
            return @ptrCast(*const IGetClusterNetInterfaceInfo.VTable, self.vtable).GetNetInterfaceHandle(@ptrCast(*const IGetClusterNetInterfaceInfo, self), lObjIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWCPropertySheetCallback_Value = @import("../zig.zig").Guid.initString("97DEDE60-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IWCPropertySheetCallback = &IID_IWCPropertySheetCallback_Value;
pub const IWCPropertySheetCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddPropertySheetPage: fn(
            self: *const IWCPropertySheetCallback,
            hpage: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCPropertySheetCallback_AddPropertySheetPage(self: *const T, hpage: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCPropertySheetCallback.VTable, self.vtable).AddPropertySheetPage(@ptrCast(*const IWCPropertySheetCallback, self), hpage);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWEExtendPropertySheet_Value = @import("../zig.zig").Guid.initString("97DEDE61-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IWEExtendPropertySheet = &IID_IWEExtendPropertySheet_Value;
pub const IWEExtendPropertySheet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreatePropertySheetPages: fn(
            self: *const IWEExtendPropertySheet,
            piData: *IUnknown,
            piCallback: *IWCPropertySheetCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWEExtendPropertySheet_CreatePropertySheetPages(self: *const T, piData: *IUnknown, piCallback: *IWCPropertySheetCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWEExtendPropertySheet.VTable, self.vtable).CreatePropertySheetPages(@ptrCast(*const IWEExtendPropertySheet, self), piData, piCallback);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWCWizardCallback_Value = @import("../zig.zig").Guid.initString("97DEDE62-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IWCWizardCallback = &IID_IWCWizardCallback_Value;
pub const IWCWizardCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddWizardPage: fn(
            self: *const IWCWizardCallback,
            hpage: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableNext: fn(
            self: *const IWCWizardCallback,
            hpage: *i32,
            bEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCWizardCallback_AddWizardPage(self: *const T, hpage: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCWizardCallback.VTable, self.vtable).AddWizardPage(@ptrCast(*const IWCWizardCallback, self), hpage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCWizardCallback_EnableNext(self: *const T, hpage: *i32, bEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCWizardCallback.VTable, self.vtable).EnableNext(@ptrCast(*const IWCWizardCallback, self), hpage, bEnable);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWEExtendWizard_Value = @import("../zig.zig").Guid.initString("97DEDE63-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IWEExtendWizard = &IID_IWEExtendWizard_Value;
pub const IWEExtendWizard = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateWizardPages: fn(
            self: *const IWEExtendWizard,
            piData: *IUnknown,
            piCallback: *IWCWizardCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWEExtendWizard_CreateWizardPages(self: *const T, piData: *IUnknown, piCallback: *IWCWizardCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWEExtendWizard.VTable, self.vtable).CreateWizardPages(@ptrCast(*const IWEExtendWizard, self), piData, piCallback);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWCContextMenuCallback_Value = @import("../zig.zig").Guid.initString("97DEDE64-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IWCContextMenuCallback = &IID_IWCContextMenuCallback_Value;
pub const IWCContextMenuCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddExtensionMenuItem: fn(
            self: *const IWCContextMenuCallback,
            lpszName: BSTR,
            lpszStatusBarText: BSTR,
            nCommandID: u32,
            nSubmenuCommandID: u32,
            uFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCContextMenuCallback_AddExtensionMenuItem(self: *const T, lpszName: BSTR, lpszStatusBarText: BSTR, nCommandID: u32, nSubmenuCommandID: u32, uFlags: u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCContextMenuCallback.VTable, self.vtable).AddExtensionMenuItem(@ptrCast(*const IWCContextMenuCallback, self), lpszName, lpszStatusBarText, nCommandID, nSubmenuCommandID, uFlags);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWEExtendContextMenu_Value = @import("../zig.zig").Guid.initString("97DEDE65-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IWEExtendContextMenu = &IID_IWEExtendContextMenu_Value;
pub const IWEExtendContextMenu = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddContextMenuItems: fn(
            self: *const IWEExtendContextMenu,
            piData: *IUnknown,
            piCallback: *IWCContextMenuCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWEExtendContextMenu_AddContextMenuItems(self: *const T, piData: *IUnknown, piCallback: *IWCContextMenuCallback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWEExtendContextMenu.VTable, self.vtable).AddContextMenuItems(@ptrCast(*const IWEExtendContextMenu, self), piData, piCallback);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWEInvokeCommand_Value = @import("../zig.zig").Guid.initString("97DEDE66-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IWEInvokeCommand = &IID_IWEInvokeCommand_Value;
pub const IWEInvokeCommand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InvokeCommand: fn(
            self: *const IWEInvokeCommand,
            nCommandID: u32,
            piData: *IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWEInvokeCommand_InvokeCommand(self: *const T, nCommandID: u32, piData: *IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWEInvokeCommand.VTable, self.vtable).InvokeCommand(@ptrCast(*const IWEInvokeCommand, self), nCommandID, piData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWCWizard97Callback_Value = @import("../zig.zig").Guid.initString("97DEDE67-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IWCWizard97Callback = &IID_IWCWizard97Callback_Value;
pub const IWCWizard97Callback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddWizard97Page: fn(
            self: *const IWCWizard97Callback,
            hpage: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableNext: fn(
            self: *const IWCWizard97Callback,
            hpage: *i32,
            bEnable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCWizard97Callback_AddWizard97Page(self: *const T, hpage: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCWizard97Callback.VTable, self.vtable).AddWizard97Page(@ptrCast(*const IWCWizard97Callback, self), hpage);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWCWizard97Callback_EnableNext(self: *const T, hpage: *i32, bEnable: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWCWizard97Callback.VTable, self.vtable).EnableNext(@ptrCast(*const IWCWizard97Callback, self), hpage, bEnable);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_IWEExtendWizard97_Value = @import("../zig.zig").Guid.initString("97DEDE68-FC6B-11CF-B5F5-00A0C90AB505");
pub const IID_IWEExtendWizard97 = &IID_IWEExtendWizard97_Value;
pub const IWEExtendWizard97 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateWizard97Pages: fn(
            self: *const IWEExtendWizard97,
            piData: *IUnknown,
            piCallback: *IWCWizard97Callback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IWEExtendWizard97_CreateWizard97Pages(self: *const T, piData: *IUnknown, piCallback: *IWCWizard97Callback) callconv(.Inline) HRESULT {
            return @ptrCast(*const IWEExtendWizard97.VTable, self.vtable).CreateWizard97Pages(@ptrCast(*const IWEExtendWizard97, self), piData, piCallback);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const CLSID_ClusApplication_Value = @import("../zig.zig").Guid.initString("F2E606E5-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusApplication = &CLSID_ClusApplication_Value;

const CLSID_Cluster_Value = @import("../zig.zig").Guid.initString("F2E606E3-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_Cluster = &CLSID_Cluster_Value;

const CLSID_ClusVersion_Value = @import("../zig.zig").Guid.initString("F2E60715-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusVersion = &CLSID_ClusVersion_Value;

const CLSID_ClusResType_Value = @import("../zig.zig").Guid.initString("F2E6070F-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResType = &CLSID_ClusResType_Value;

const CLSID_ClusProperty_Value = @import("../zig.zig").Guid.initString("F2E606FD-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusProperty = &CLSID_ClusProperty_Value;

const CLSID_ClusProperties_Value = @import("../zig.zig").Guid.initString("F2E606FF-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusProperties = &CLSID_ClusProperties_Value;

const CLSID_DomainNames_Value = @import("../zig.zig").Guid.initString("F2E606E1-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_DomainNames = &CLSID_DomainNames_Value;

const CLSID_ClusNetwork_Value = @import("../zig.zig").Guid.initString("F2E606F1-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusNetwork = &CLSID_ClusNetwork_Value;

const CLSID_ClusNetInterface_Value = @import("../zig.zig").Guid.initString("F2E606ED-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusNetInterface = &CLSID_ClusNetInterface_Value;

const CLSID_ClusNetInterfaces_Value = @import("../zig.zig").Guid.initString("F2E606EF-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusNetInterfaces = &CLSID_ClusNetInterfaces_Value;

const CLSID_ClusResDependencies_Value = @import("../zig.zig").Guid.initString("F2E60703-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResDependencies = &CLSID_ClusResDependencies_Value;

const CLSID_ClusResGroupResources_Value = @import("../zig.zig").Guid.initString("F2E606E9-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResGroupResources = &CLSID_ClusResGroupResources_Value;

const CLSID_ClusResTypeResources_Value = @import("../zig.zig").Guid.initString("F2E60713-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResTypeResources = &CLSID_ClusResTypeResources_Value;

const CLSID_ClusResGroupPreferredOwnerNodes_Value = @import("../zig.zig").Guid.initString("F2E606E7-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResGroupPreferredOwnerNodes = &CLSID_ClusResGroupPreferredOwnerNodes_Value;

const CLSID_ClusResPossibleOwnerNodes_Value = @import("../zig.zig").Guid.initString("F2E6070D-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResPossibleOwnerNodes = &CLSID_ClusResPossibleOwnerNodes_Value;

const CLSID_ClusNetworks_Value = @import("../zig.zig").Guid.initString("F2E606F3-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusNetworks = &CLSID_ClusNetworks_Value;

const CLSID_ClusNetworkNetInterfaces_Value = @import("../zig.zig").Guid.initString("F2E606F5-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusNetworkNetInterfaces = &CLSID_ClusNetworkNetInterfaces_Value;

const CLSID_ClusNodeNetInterfaces_Value = @import("../zig.zig").Guid.initString("F2E606FB-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusNodeNetInterfaces = &CLSID_ClusNodeNetInterfaces_Value;

const CLSID_ClusRefObject_Value = @import("../zig.zig").Guid.initString("F2E60701-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusRefObject = &CLSID_ClusRefObject_Value;

const CLSID_ClusterNames_Value = @import("../zig.zig").Guid.initString("F2E606EB-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusterNames = &CLSID_ClusterNames_Value;

const CLSID_ClusNode_Value = @import("../zig.zig").Guid.initString("F2E606F7-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusNode = &CLSID_ClusNode_Value;

const CLSID_ClusNodes_Value = @import("../zig.zig").Guid.initString("F2E606F9-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusNodes = &CLSID_ClusNodes_Value;

const CLSID_ClusResGroup_Value = @import("../zig.zig").Guid.initString("F2E60705-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResGroup = &CLSID_ClusResGroup_Value;

const CLSID_ClusResGroups_Value = @import("../zig.zig").Guid.initString("F2E60707-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResGroups = &CLSID_ClusResGroups_Value;

const CLSID_ClusResource_Value = @import("../zig.zig").Guid.initString("F2E60709-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResource = &CLSID_ClusResource_Value;

const CLSID_ClusResources_Value = @import("../zig.zig").Guid.initString("F2E6070B-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResources = &CLSID_ClusResources_Value;

const CLSID_ClusResTypes_Value = @import("../zig.zig").Guid.initString("F2E60711-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResTypes = &CLSID_ClusResTypes_Value;

const CLSID_ClusResTypePossibleOwnerNodes_Value = @import("../zig.zig").Guid.initString("F2E60717-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResTypePossibleOwnerNodes = &CLSID_ClusResTypePossibleOwnerNodes_Value;

const CLSID_ClusPropertyValue_Value = @import("../zig.zig").Guid.initString("F2E60719-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusPropertyValue = &CLSID_ClusPropertyValue_Value;

const CLSID_ClusPropertyValues_Value = @import("../zig.zig").Guid.initString("F2E6071B-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusPropertyValues = &CLSID_ClusPropertyValues_Value;

const CLSID_ClusPropertyValueData_Value = @import("../zig.zig").Guid.initString("F2E6071D-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusPropertyValueData = &CLSID_ClusPropertyValueData_Value;

const CLSID_ClusPartition_Value = @import("../zig.zig").Guid.initString("F2E6071F-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusPartition = &CLSID_ClusPartition_Value;

const CLSID_ClusPartitionEx_Value = @import("../zig.zig").Guid.initString("53D51D26-B51B-4A79-B2C3-5048D93A98FC");
pub const CLSID_ClusPartitionEx = &CLSID_ClusPartitionEx_Value;

const CLSID_ClusPartitions_Value = @import("../zig.zig").Guid.initString("F2E60721-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusPartitions = &CLSID_ClusPartitions_Value;

const CLSID_ClusDisk_Value = @import("../zig.zig").Guid.initString("F2E60723-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusDisk = &CLSID_ClusDisk_Value;

const CLSID_ClusDisks_Value = @import("../zig.zig").Guid.initString("F2E60725-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusDisks = &CLSID_ClusDisks_Value;

const CLSID_ClusScsiAddress_Value = @import("../zig.zig").Guid.initString("F2E60727-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusScsiAddress = &CLSID_ClusScsiAddress_Value;

const CLSID_ClusRegistryKeys_Value = @import("../zig.zig").Guid.initString("F2E60729-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusRegistryKeys = &CLSID_ClusRegistryKeys_Value;

const CLSID_ClusCryptoKeys_Value = @import("../zig.zig").Guid.initString("F2E6072B-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusCryptoKeys = &CLSID_ClusCryptoKeys_Value;

const CLSID_ClusResDependents_Value = @import("../zig.zig").Guid.initString("F2E6072D-2631-11D1-89F1-00A0C90D061E");
pub const CLSID_ClusResDependents = &CLSID_ClusResDependents_Value;

const IID_ISClusApplication_Value = @import("../zig.zig").Guid.initString("F2E606E6-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusApplication = &IID_ISClusApplication_Value;
pub const ISClusApplication = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_DomainNames: fn(
            self: *const ISClusApplication,
            ppDomains: **ISDomainNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ClusterNames: fn(
            self: *const ISClusApplication,
            bstrDomainName: BSTR,
            ppClusters: **ISClusterNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenCluster: fn(
            self: *const ISClusApplication,
            bstrClusterName: BSTR,
            pCluster: **ISCluster,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusApplication_get_DomainNames(self: *const T, ppDomains: **ISDomainNames) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusApplication.VTable, self.vtable).get_DomainNames(@ptrCast(*const ISClusApplication, self), ppDomains);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusApplication_get_ClusterNames(self: *const T, bstrDomainName: BSTR, ppClusters: **ISClusterNames) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusApplication.VTable, self.vtable).get_ClusterNames(@ptrCast(*const ISClusApplication, self), bstrDomainName, ppClusters);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusApplication_OpenCluster(self: *const T, bstrClusterName: BSTR, pCluster: **ISCluster) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusApplication.VTable, self.vtable).OpenCluster(@ptrCast(*const ISClusApplication, self), bstrClusterName, pCluster);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISDomainNames_Value = @import("../zig.zig").Guid.initString("F2E606E2-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISDomainNames = &IID_ISDomainNames_Value;
pub const ISDomainNames = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISDomainNames,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISDomainNames,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISDomainNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISDomainNames,
            varIndex: VARIANT,
            pbstrDomainName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISDomainNames_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISDomainNames.VTable, self.vtable).get_Count(@ptrCast(*const ISDomainNames, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISDomainNames_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISDomainNames.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISDomainNames, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISDomainNames_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISDomainNames.VTable, self.vtable).Refresh(@ptrCast(*const ISDomainNames, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISDomainNames_get_Item(self: *const T, varIndex: VARIANT, pbstrDomainName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISDomainNames.VTable, self.vtable).get_Item(@ptrCast(*const ISDomainNames, self), varIndex, pbstrDomainName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusterNames_Value = @import("../zig.zig").Guid.initString("F2E606EC-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusterNames = &IID_ISClusterNames_Value;
pub const ISClusterNames = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusterNames,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusterNames,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusterNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusterNames,
            varIndex: VARIANT,
            pbstrClusterName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DomainName: fn(
            self: *const ISClusterNames,
            pbstrDomainName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusterNames_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusterNames.VTable, self.vtable).get_Count(@ptrCast(*const ISClusterNames, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusterNames_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusterNames.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusterNames, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusterNames_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusterNames.VTable, self.vtable).Refresh(@ptrCast(*const ISClusterNames, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusterNames_get_Item(self: *const T, varIndex: VARIANT, pbstrClusterName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusterNames.VTable, self.vtable).get_Item(@ptrCast(*const ISClusterNames, self), varIndex, pbstrClusterName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusterNames_get_DomainName(self: *const T, pbstrDomainName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusterNames.VTable, self.vtable).get_DomainName(@ptrCast(*const ISClusterNames, self), pbstrDomainName);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusRefObject_Value = @import("../zig.zig").Guid.initString("F2E60702-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusRefObject = &IID_ISClusRefObject_Value;
pub const ISClusRefObject = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Handle: fn(
            self: *const ISClusRefObject,
            phandle: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusRefObject_get_Handle(self: *const T, phandle: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusRefObject.VTable, self.vtable).get_Handle(@ptrCast(*const ISClusRefObject, self), phandle);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusVersion_Value = @import("../zig.zig").Guid.initString("F2E60716-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusVersion = &IID_ISClusVersion_Value;
pub const ISClusVersion = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const ISClusVersion,
            pbstrClusterName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MajorVersion: fn(
            self: *const ISClusVersion,
            pnMajorVersion: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MinorVersion: fn(
            self: *const ISClusVersion,
            pnMinorVersion: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_BuildNumber: fn(
            self: *const ISClusVersion,
            pnBuildNumber: *i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_VendorId: fn(
            self: *const ISClusVersion,
            pbstrVendorId: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CSDVersion: fn(
            self: *const ISClusVersion,
            pbstrCSDVersion: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ClusterHighestVersion: fn(
            self: *const ISClusVersion,
            pnClusterHighestVersion: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ClusterLowestVersion: fn(
            self: *const ISClusVersion,
            pnClusterLowestVersion: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Flags: fn(
            self: *const ISClusVersion,
            pnFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MixedVersion: fn(
            self: *const ISClusVersion,
            pvarMixedVersion: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusVersion_get_Name(self: *const T, pbstrClusterName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusVersion.VTable, self.vtable).get_Name(@ptrCast(*const ISClusVersion, self), pbstrClusterName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusVersion_get_MajorVersion(self: *const T, pnMajorVersion: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusVersion.VTable, self.vtable).get_MajorVersion(@ptrCast(*const ISClusVersion, self), pnMajorVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusVersion_get_MinorVersion(self: *const T, pnMinorVersion: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusVersion.VTable, self.vtable).get_MinorVersion(@ptrCast(*const ISClusVersion, self), pnMinorVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusVersion_get_BuildNumber(self: *const T, pnBuildNumber: *i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusVersion.VTable, self.vtable).get_BuildNumber(@ptrCast(*const ISClusVersion, self), pnBuildNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusVersion_get_VendorId(self: *const T, pbstrVendorId: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusVersion.VTable, self.vtable).get_VendorId(@ptrCast(*const ISClusVersion, self), pbstrVendorId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusVersion_get_CSDVersion(self: *const T, pbstrCSDVersion: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusVersion.VTable, self.vtable).get_CSDVersion(@ptrCast(*const ISClusVersion, self), pbstrCSDVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusVersion_get_ClusterHighestVersion(self: *const T, pnClusterHighestVersion: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusVersion.VTable, self.vtable).get_ClusterHighestVersion(@ptrCast(*const ISClusVersion, self), pnClusterHighestVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusVersion_get_ClusterLowestVersion(self: *const T, pnClusterLowestVersion: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusVersion.VTable, self.vtable).get_ClusterLowestVersion(@ptrCast(*const ISClusVersion, self), pnClusterLowestVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusVersion_get_Flags(self: *const T, pnFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusVersion.VTable, self.vtable).get_Flags(@ptrCast(*const ISClusVersion, self), pnFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusVersion_get_MixedVersion(self: *const T, pvarMixedVersion: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusVersion.VTable, self.vtable).get_MixedVersion(@ptrCast(*const ISClusVersion, self), pvarMixedVersion);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISCluster_Value = @import("../zig.zig").Guid.initString("F2E606E4-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISCluster = &IID_ISCluster_Value;
pub const ISCluster = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_CommonProperties: fn(
            self: *const ISCluster,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateProperties: fn(
            self: *const ISCluster,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CommonROProperties: fn(
            self: *const ISCluster,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateROProperties: fn(
            self: *const ISCluster,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Handle: fn(
            self: *const ISCluster,
            phandle: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: fn(
            self: *const ISCluster,
            bstrClusterName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ISCluster,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Name: fn(
            self: *const ISCluster,
            bstrClusterName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Version: fn(
            self: *const ISCluster,
            ppClusVersion: **ISClusVersion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_QuorumResource: fn(
            self: *const ISCluster,
            pClusterResource: *ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_QuorumResource: fn(
            self: *const ISCluster,
            pClusterResource: **ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_QuorumLogSize: fn(
            self: *const ISCluster,
            pnLogSize: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_QuorumLogSize: fn(
            self: *const ISCluster,
            nLogSize: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_QuorumPath: fn(
            self: *const ISCluster,
            ppPath: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_QuorumPath: fn(
            self: *const ISCluster,
            pPath: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Nodes: fn(
            self: *const ISCluster,
            ppNodes: **ISClusNodes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ResourceGroups: fn(
            self: *const ISCluster,
            ppClusterResourceGroups: **ISClusResGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Resources: fn(
            self: *const ISCluster,
            ppClusterResources: **ISClusResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ResourceTypes: fn(
            self: *const ISCluster,
            ppResourceTypes: **ISClusResTypes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Networks: fn(
            self: *const ISCluster,
            ppNetworks: **ISClusNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NetInterfaces: fn(
            self: *const ISCluster,
            ppNetInterfaces: **ISClusNetInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_CommonProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_CommonProperties(@ptrCast(*const ISCluster, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_PrivateProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_PrivateProperties(@ptrCast(*const ISCluster, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_CommonROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_CommonROProperties(@ptrCast(*const ISCluster, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_PrivateROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_PrivateROProperties(@ptrCast(*const ISCluster, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_Handle(self: *const T, phandle: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_Handle(@ptrCast(*const ISCluster, self), phandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_Open(self: *const T, bstrClusterName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).Open(@ptrCast(*const ISCluster, self), bstrClusterName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_Name(@ptrCast(*const ISCluster, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_put_Name(self: *const T, bstrClusterName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).put_Name(@ptrCast(*const ISCluster, self), bstrClusterName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_Version(self: *const T, ppClusVersion: **ISClusVersion) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_Version(@ptrCast(*const ISCluster, self), ppClusVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_put_QuorumResource(self: *const T, pClusterResource: *ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).put_QuorumResource(@ptrCast(*const ISCluster, self), pClusterResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_QuorumResource(self: *const T, pClusterResource: **ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_QuorumResource(@ptrCast(*const ISCluster, self), pClusterResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_QuorumLogSize(self: *const T, pnLogSize: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_QuorumLogSize(@ptrCast(*const ISCluster, self), pnLogSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_put_QuorumLogSize(self: *const T, nLogSize: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).put_QuorumLogSize(@ptrCast(*const ISCluster, self), nLogSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_QuorumPath(self: *const T, ppPath: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_QuorumPath(@ptrCast(*const ISCluster, self), ppPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_put_QuorumPath(self: *const T, pPath: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).put_QuorumPath(@ptrCast(*const ISCluster, self), pPath);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_Nodes(self: *const T, ppNodes: **ISClusNodes) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_Nodes(@ptrCast(*const ISCluster, self), ppNodes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_ResourceGroups(self: *const T, ppClusterResourceGroups: **ISClusResGroups) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_ResourceGroups(@ptrCast(*const ISCluster, self), ppClusterResourceGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_Resources(self: *const T, ppClusterResources: **ISClusResources) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_Resources(@ptrCast(*const ISCluster, self), ppClusterResources);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_ResourceTypes(self: *const T, ppResourceTypes: **ISClusResTypes) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_ResourceTypes(@ptrCast(*const ISCluster, self), ppResourceTypes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_Networks(self: *const T, ppNetworks: **ISClusNetworks) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_Networks(@ptrCast(*const ISCluster, self), ppNetworks);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISCluster_get_NetInterfaces(self: *const T, ppNetInterfaces: **ISClusNetInterfaces) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISCluster.VTable, self.vtable).get_NetInterfaces(@ptrCast(*const ISCluster, self), ppNetInterfaces);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusNode_Value = @import("../zig.zig").Guid.initString("F2E606F8-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusNode = &IID_ISClusNode_Value;
pub const ISClusNode = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_CommonProperties: fn(
            self: *const ISClusNode,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateProperties: fn(
            self: *const ISClusNode,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CommonROProperties: fn(
            self: *const ISClusNode,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateROProperties: fn(
            self: *const ISClusNode,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ISClusNode,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Handle: fn(
            self: *const ISClusNode,
            phandle: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NodeID: fn(
            self: *const ISClusNode,
            pbstrNodeID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_State: fn(
            self: *const ISClusNode,
            dwState: *CLUSTER_NODE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: fn(
            self: *const ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: fn(
            self: *const ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Evict: fn(
            self: *const ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ResourceGroups: fn(
            self: *const ISClusNode,
            ppResourceGroups: **ISClusResGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Cluster: fn(
            self: *const ISClusNode,
            ppCluster: **ISCluster,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NetInterfaces: fn(
            self: *const ISClusNode,
            ppClusNetInterfaces: **ISClusNodeNetInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_get_CommonProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).get_CommonProperties(@ptrCast(*const ISClusNode, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_get_PrivateProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).get_PrivateProperties(@ptrCast(*const ISClusNode, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_get_CommonROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).get_CommonROProperties(@ptrCast(*const ISClusNode, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_get_PrivateROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).get_PrivateROProperties(@ptrCast(*const ISClusNode, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).get_Name(@ptrCast(*const ISClusNode, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_get_Handle(self: *const T, phandle: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).get_Handle(@ptrCast(*const ISClusNode, self), phandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_get_NodeID(self: *const T, pbstrNodeID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).get_NodeID(@ptrCast(*const ISClusNode, self), pbstrNodeID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_get_State(self: *const T, dwState: *CLUSTER_NODE_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).get_State(@ptrCast(*const ISClusNode, self), dwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_Pause(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).Pause(@ptrCast(*const ISClusNode, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_Resume(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).Resume(@ptrCast(*const ISClusNode, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_Evict(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).Evict(@ptrCast(*const ISClusNode, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_get_ResourceGroups(self: *const T, ppResourceGroups: **ISClusResGroups) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).get_ResourceGroups(@ptrCast(*const ISClusNode, self), ppResourceGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_get_Cluster(self: *const T, ppCluster: **ISCluster) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).get_Cluster(@ptrCast(*const ISClusNode, self), ppCluster);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNode_get_NetInterfaces(self: *const T, ppClusNetInterfaces: **ISClusNodeNetInterfaces) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNode.VTable, self.vtable).get_NetInterfaces(@ptrCast(*const ISClusNode, self), ppClusNetInterfaces);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusNodes_Value = @import("../zig.zig").Guid.initString("F2E606FA-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusNodes = &IID_ISClusNodes_Value;
pub const ISClusNodes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusNodes,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusNodes,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusNodes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusNodes,
            varIndex: VARIANT,
            ppNode: **ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNodes_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNodes.VTable, self.vtable).get_Count(@ptrCast(*const ISClusNodes, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNodes_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNodes.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusNodes, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNodes_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNodes.VTable, self.vtable).Refresh(@ptrCast(*const ISClusNodes, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNodes_get_Item(self: *const T, varIndex: VARIANT, ppNode: **ISClusNode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNodes.VTable, self.vtable).get_Item(@ptrCast(*const ISClusNodes, self), varIndex, ppNode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusNetwork_Value = @import("../zig.zig").Guid.initString("F2E606F2-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusNetwork = &IID_ISClusNetwork_Value;
pub const ISClusNetwork = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_CommonProperties: fn(
            self: *const ISClusNetwork,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateProperties: fn(
            self: *const ISClusNetwork,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CommonROProperties: fn(
            self: *const ISClusNetwork,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateROProperties: fn(
            self: *const ISClusNetwork,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Handle: fn(
            self: *const ISClusNetwork,
            phandle: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ISClusNetwork,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Name: fn(
            self: *const ISClusNetwork,
            bstrNetworkName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NetworkID: fn(
            self: *const ISClusNetwork,
            pbstrNetworkID: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_State: fn(
            self: *const ISClusNetwork,
            dwState: *CLUSTER_NETWORK_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_NetInterfaces: fn(
            self: *const ISClusNetwork,
            ppClusNetInterfaces: **ISClusNetworkNetInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Cluster: fn(
            self: *const ISClusNetwork,
            ppCluster: **ISCluster,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetwork_get_CommonProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetwork.VTable, self.vtable).get_CommonProperties(@ptrCast(*const ISClusNetwork, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetwork_get_PrivateProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetwork.VTable, self.vtable).get_PrivateProperties(@ptrCast(*const ISClusNetwork, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetwork_get_CommonROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetwork.VTable, self.vtable).get_CommonROProperties(@ptrCast(*const ISClusNetwork, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetwork_get_PrivateROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetwork.VTable, self.vtable).get_PrivateROProperties(@ptrCast(*const ISClusNetwork, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetwork_get_Handle(self: *const T, phandle: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetwork.VTable, self.vtable).get_Handle(@ptrCast(*const ISClusNetwork, self), phandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetwork_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetwork.VTable, self.vtable).get_Name(@ptrCast(*const ISClusNetwork, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetwork_put_Name(self: *const T, bstrNetworkName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetwork.VTable, self.vtable).put_Name(@ptrCast(*const ISClusNetwork, self), bstrNetworkName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetwork_get_NetworkID(self: *const T, pbstrNetworkID: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetwork.VTable, self.vtable).get_NetworkID(@ptrCast(*const ISClusNetwork, self), pbstrNetworkID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetwork_get_State(self: *const T, dwState: *CLUSTER_NETWORK_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetwork.VTable, self.vtable).get_State(@ptrCast(*const ISClusNetwork, self), dwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetwork_get_NetInterfaces(self: *const T, ppClusNetInterfaces: **ISClusNetworkNetInterfaces) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetwork.VTable, self.vtable).get_NetInterfaces(@ptrCast(*const ISClusNetwork, self), ppClusNetInterfaces);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetwork_get_Cluster(self: *const T, ppCluster: **ISCluster) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetwork.VTable, self.vtable).get_Cluster(@ptrCast(*const ISClusNetwork, self), ppCluster);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusNetworks_Value = @import("../zig.zig").Guid.initString("F2E606F4-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusNetworks = &IID_ISClusNetworks_Value;
pub const ISClusNetworks = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusNetworks,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusNetworks,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusNetworks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusNetworks,
            varIndex: VARIANT,
            ppClusNetwork: **ISClusNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetworks_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetworks.VTable, self.vtable).get_Count(@ptrCast(*const ISClusNetworks, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetworks_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetworks.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusNetworks, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetworks_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetworks.VTable, self.vtable).Refresh(@ptrCast(*const ISClusNetworks, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetworks_get_Item(self: *const T, varIndex: VARIANT, ppClusNetwork: **ISClusNetwork) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetworks.VTable, self.vtable).get_Item(@ptrCast(*const ISClusNetworks, self), varIndex, ppClusNetwork);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusNetInterface_Value = @import("../zig.zig").Guid.initString("F2E606EE-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusNetInterface = &IID_ISClusNetInterface_Value;
pub const ISClusNetInterface = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_CommonProperties: fn(
            self: *const ISClusNetInterface,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateProperties: fn(
            self: *const ISClusNetInterface,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CommonROProperties: fn(
            self: *const ISClusNetInterface,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateROProperties: fn(
            self: *const ISClusNetInterface,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ISClusNetInterface,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Handle: fn(
            self: *const ISClusNetInterface,
            phandle: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_State: fn(
            self: *const ISClusNetInterface,
            dwState: *CLUSTER_NETINTERFACE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Cluster: fn(
            self: *const ISClusNetInterface,
            ppCluster: **ISCluster,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetInterface_get_CommonProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetInterface.VTable, self.vtable).get_CommonProperties(@ptrCast(*const ISClusNetInterface, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetInterface_get_PrivateProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetInterface.VTable, self.vtable).get_PrivateProperties(@ptrCast(*const ISClusNetInterface, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetInterface_get_CommonROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetInterface.VTable, self.vtable).get_CommonROProperties(@ptrCast(*const ISClusNetInterface, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetInterface_get_PrivateROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetInterface.VTable, self.vtable).get_PrivateROProperties(@ptrCast(*const ISClusNetInterface, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetInterface_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetInterface.VTable, self.vtable).get_Name(@ptrCast(*const ISClusNetInterface, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetInterface_get_Handle(self: *const T, phandle: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetInterface.VTable, self.vtable).get_Handle(@ptrCast(*const ISClusNetInterface, self), phandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetInterface_get_State(self: *const T, dwState: *CLUSTER_NETINTERFACE_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetInterface.VTable, self.vtable).get_State(@ptrCast(*const ISClusNetInterface, self), dwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetInterface_get_Cluster(self: *const T, ppCluster: **ISCluster) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetInterface.VTable, self.vtable).get_Cluster(@ptrCast(*const ISClusNetInterface, self), ppCluster);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusNetInterfaces_Value = @import("../zig.zig").Guid.initString("F2E606F0-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusNetInterfaces = &IID_ISClusNetInterfaces_Value;
pub const ISClusNetInterfaces = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusNetInterfaces,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusNetInterfaces,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusNetInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusNetInterfaces,
            varIndex: VARIANT,
            ppClusNetInterface: **ISClusNetInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetInterfaces_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetInterfaces.VTable, self.vtable).get_Count(@ptrCast(*const ISClusNetInterfaces, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetInterfaces_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetInterfaces.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusNetInterfaces, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetInterfaces_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetInterfaces.VTable, self.vtable).Refresh(@ptrCast(*const ISClusNetInterfaces, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetInterfaces_get_Item(self: *const T, varIndex: VARIANT, ppClusNetInterface: **ISClusNetInterface) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetInterfaces.VTable, self.vtable).get_Item(@ptrCast(*const ISClusNetInterfaces, self), varIndex, ppClusNetInterface);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusNodeNetInterfaces_Value = @import("../zig.zig").Guid.initString("F2E606FC-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusNodeNetInterfaces = &IID_ISClusNodeNetInterfaces_Value;
pub const ISClusNodeNetInterfaces = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusNodeNetInterfaces,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusNodeNetInterfaces,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusNodeNetInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusNodeNetInterfaces,
            varIndex: VARIANT,
            ppClusNetInterface: **ISClusNetInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNodeNetInterfaces_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNodeNetInterfaces.VTable, self.vtable).get_Count(@ptrCast(*const ISClusNodeNetInterfaces, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNodeNetInterfaces_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNodeNetInterfaces.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusNodeNetInterfaces, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNodeNetInterfaces_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNodeNetInterfaces.VTable, self.vtable).Refresh(@ptrCast(*const ISClusNodeNetInterfaces, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNodeNetInterfaces_get_Item(self: *const T, varIndex: VARIANT, ppClusNetInterface: **ISClusNetInterface) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNodeNetInterfaces.VTable, self.vtable).get_Item(@ptrCast(*const ISClusNodeNetInterfaces, self), varIndex, ppClusNetInterface);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusNetworkNetInterfaces_Value = @import("../zig.zig").Guid.initString("F2E606F6-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusNetworkNetInterfaces = &IID_ISClusNetworkNetInterfaces_Value;
pub const ISClusNetworkNetInterfaces = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusNetworkNetInterfaces,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusNetworkNetInterfaces,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusNetworkNetInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusNetworkNetInterfaces,
            varIndex: VARIANT,
            ppClusNetInterface: **ISClusNetInterface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetworkNetInterfaces_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetworkNetInterfaces.VTable, self.vtable).get_Count(@ptrCast(*const ISClusNetworkNetInterfaces, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetworkNetInterfaces_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetworkNetInterfaces.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusNetworkNetInterfaces, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetworkNetInterfaces_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetworkNetInterfaces.VTable, self.vtable).Refresh(@ptrCast(*const ISClusNetworkNetInterfaces, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusNetworkNetInterfaces_get_Item(self: *const T, varIndex: VARIANT, ppClusNetInterface: **ISClusNetInterface) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusNetworkNetInterfaces.VTable, self.vtable).get_Item(@ptrCast(*const ISClusNetworkNetInterfaces, self), varIndex, ppClusNetInterface);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResGroup_Value = @import("../zig.zig").Guid.initString("F2E60706-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResGroup = &IID_ISClusResGroup_Value;
pub const ISClusResGroup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_CommonProperties: fn(
            self: *const ISClusResGroup,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateProperties: fn(
            self: *const ISClusResGroup,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CommonROProperties: fn(
            self: *const ISClusResGroup,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateROProperties: fn(
            self: *const ISClusResGroup,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Handle: fn(
            self: *const ISClusResGroup,
            phandle: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ISClusResGroup,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Name: fn(
            self: *const ISClusResGroup,
            bstrGroupName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_State: fn(
            self: *const ISClusResGroup,
            dwState: *CLUSTER_GROUP_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OwnerNode: fn(
            self: *const ISClusResGroup,
            ppOwnerNode: **ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Resources: fn(
            self: *const ISClusResGroup,
            ppClusterGroupResources: **ISClusResGroupResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PreferredOwnerNodes: fn(
            self: *const ISClusResGroup,
            ppOwnerNodes: **ISClusResGroupPreferredOwnerNodes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const ISClusResGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Online: fn(
            self: *const ISClusResGroup,
            varTimeout: VARIANT,
            varNode: VARIANT,
            pvarPending: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: fn(
            self: *const ISClusResGroup,
            varTimeout: VARIANT,
            varNode: VARIANT,
            pvarPending: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Offline: fn(
            self: *const ISClusResGroup,
            varTimeout: VARIANT,
            pvarPending: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Cluster: fn(
            self: *const ISClusResGroup,
            ppCluster: **ISCluster,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_get_CommonProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).get_CommonProperties(@ptrCast(*const ISClusResGroup, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_get_PrivateProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).get_PrivateProperties(@ptrCast(*const ISClusResGroup, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_get_CommonROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).get_CommonROProperties(@ptrCast(*const ISClusResGroup, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_get_PrivateROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).get_PrivateROProperties(@ptrCast(*const ISClusResGroup, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_get_Handle(self: *const T, phandle: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).get_Handle(@ptrCast(*const ISClusResGroup, self), phandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).get_Name(@ptrCast(*const ISClusResGroup, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_put_Name(self: *const T, bstrGroupName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).put_Name(@ptrCast(*const ISClusResGroup, self), bstrGroupName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_get_State(self: *const T, dwState: *CLUSTER_GROUP_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).get_State(@ptrCast(*const ISClusResGroup, self), dwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_get_OwnerNode(self: *const T, ppOwnerNode: **ISClusNode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).get_OwnerNode(@ptrCast(*const ISClusResGroup, self), ppOwnerNode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_get_Resources(self: *const T, ppClusterGroupResources: **ISClusResGroupResources) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).get_Resources(@ptrCast(*const ISClusResGroup, self), ppClusterGroupResources);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_get_PreferredOwnerNodes(self: *const T, ppOwnerNodes: **ISClusResGroupPreferredOwnerNodes) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).get_PreferredOwnerNodes(@ptrCast(*const ISClusResGroup, self), ppOwnerNodes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).Delete(@ptrCast(*const ISClusResGroup, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_Online(self: *const T, varTimeout: VARIANT, varNode: VARIANT, pvarPending: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).Online(@ptrCast(*const ISClusResGroup, self), varTimeout, varNode, pvarPending);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_Move(self: *const T, varTimeout: VARIANT, varNode: VARIANT, pvarPending: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).Move(@ptrCast(*const ISClusResGroup, self), varTimeout, varNode, pvarPending);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_Offline(self: *const T, varTimeout: VARIANT, pvarPending: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).Offline(@ptrCast(*const ISClusResGroup, self), varTimeout, pvarPending);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroup_get_Cluster(self: *const T, ppCluster: **ISCluster) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroup.VTable, self.vtable).get_Cluster(@ptrCast(*const ISClusResGroup, self), ppCluster);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResGroups_Value = @import("../zig.zig").Guid.initString("F2E60708-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResGroups = &IID_ISClusResGroups_Value;
pub const ISClusResGroups = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusResGroups,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusResGroups,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusResGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusResGroups,
            varIndex: VARIANT,
            ppClusResGroup: **ISClusResGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: fn(
            self: *const ISClusResGroups,
            bstrResourceGroupName: BSTR,
            ppResourceGroup: **ISClusResGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: fn(
            self: *const ISClusResGroups,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroups_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroups.VTable, self.vtable).get_Count(@ptrCast(*const ISClusResGroups, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroups_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroups.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusResGroups, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroups_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroups.VTable, self.vtable).Refresh(@ptrCast(*const ISClusResGroups, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroups_get_Item(self: *const T, varIndex: VARIANT, ppClusResGroup: **ISClusResGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroups.VTable, self.vtable).get_Item(@ptrCast(*const ISClusResGroups, self), varIndex, ppClusResGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroups_CreateItem(self: *const T, bstrResourceGroupName: BSTR, ppResourceGroup: **ISClusResGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroups.VTable, self.vtable).CreateItem(@ptrCast(*const ISClusResGroups, self), bstrResourceGroupName, ppResourceGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroups_DeleteItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroups.VTable, self.vtable).DeleteItem(@ptrCast(*const ISClusResGroups, self), varIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResource_Value = @import("../zig.zig").Guid.initString("F2E6070A-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResource = &IID_ISClusResource_Value;
pub const ISClusResource = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_CommonProperties: fn(
            self: *const ISClusResource,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateProperties: fn(
            self: *const ISClusResource,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CommonROProperties: fn(
            self: *const ISClusResource,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateROProperties: fn(
            self: *const ISClusResource,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Handle: fn(
            self: *const ISClusResource,
            phandle: *?*c_void,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ISClusResource,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Name: fn(
            self: *const ISClusResource,
            bstrResourceName: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_State: fn(
            self: *const ISClusResource,
            dwState: *CLUSTER_RESOURCE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CoreFlag: fn(
            self: *const ISClusResource,
            dwCoreFlag: *CLUS_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BecomeQuorumResource: fn(
            self: *const ISClusResource,
            bstrDevicePath: BSTR,
            lMaxLogSize: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Fail: fn(
            self: *const ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Online: fn(
            self: *const ISClusResource,
            nTimeout: i32,
            pvarPending: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Offline: fn(
            self: *const ISClusResource,
            nTimeout: i32,
            pvarPending: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangeResourceGroup: fn(
            self: *const ISClusResource,
            pResourceGroup: *ISClusResGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddResourceNode: fn(
            self: *const ISClusResource,
            pNode: *ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveResourceNode: fn(
            self: *const ISClusResource,
            pNode: *ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanResourceBeDependent: fn(
            self: *const ISClusResource,
            pResource: *ISClusResource,
            pvarDependent: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PossibleOwnerNodes: fn(
            self: *const ISClusResource,
            ppOwnerNodes: **ISClusResPossibleOwnerNodes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Dependencies: fn(
            self: *const ISClusResource,
            ppResDependencies: **ISClusResDependencies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Dependents: fn(
            self: *const ISClusResource,
            ppResDependents: **ISClusResDependents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Group: fn(
            self: *const ISClusResource,
            ppResGroup: **ISClusResGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_OwnerNode: fn(
            self: *const ISClusResource,
            ppOwnerNode: **ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Cluster: fn(
            self: *const ISClusResource,
            ppCluster: **ISCluster,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ClassInfo: fn(
            self: *const ISClusResource,
            prcClassInfo: *CLUSTER_RESOURCE_CLASS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Disk: fn(
            self: *const ISClusResource,
            ppDisk: **ISClusDisk,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_RegistryKeys: fn(
            self: *const ISClusResource,
            ppRegistryKeys: **ISClusRegistryKeys,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CryptoKeys: fn(
            self: *const ISClusResource,
            ppCryptoKeys: **ISClusCryptoKeys,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TypeName: fn(
            self: *const ISClusResource,
            pbstrTypeName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Type: fn(
            self: *const ISClusResource,
            ppResourceType: **ISClusResType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MaintenanceMode: fn(
            self: *const ISClusResource,
            pbMaintenanceMode: *BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_MaintenanceMode: fn(
            self: *const ISClusResource,
            bMaintenanceMode: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_CommonProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_CommonProperties(@ptrCast(*const ISClusResource, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_PrivateProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_PrivateProperties(@ptrCast(*const ISClusResource, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_CommonROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_CommonROProperties(@ptrCast(*const ISClusResource, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_PrivateROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_PrivateROProperties(@ptrCast(*const ISClusResource, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_Handle(self: *const T, phandle: *?*c_void) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_Handle(@ptrCast(*const ISClusResource, self), phandle);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_Name(@ptrCast(*const ISClusResource, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_put_Name(self: *const T, bstrResourceName: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).put_Name(@ptrCast(*const ISClusResource, self), bstrResourceName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_State(self: *const T, dwState: *CLUSTER_RESOURCE_STATE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_State(@ptrCast(*const ISClusResource, self), dwState);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_CoreFlag(self: *const T, dwCoreFlag: *CLUS_FLAGS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_CoreFlag(@ptrCast(*const ISClusResource, self), dwCoreFlag);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_BecomeQuorumResource(self: *const T, bstrDevicePath: BSTR, lMaxLogSize: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).BecomeQuorumResource(@ptrCast(*const ISClusResource, self), bstrDevicePath, lMaxLogSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).Delete(@ptrCast(*const ISClusResource, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_Fail(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).Fail(@ptrCast(*const ISClusResource, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_Online(self: *const T, nTimeout: i32, pvarPending: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).Online(@ptrCast(*const ISClusResource, self), nTimeout, pvarPending);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_Offline(self: *const T, nTimeout: i32, pvarPending: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).Offline(@ptrCast(*const ISClusResource, self), nTimeout, pvarPending);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_ChangeResourceGroup(self: *const T, pResourceGroup: *ISClusResGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).ChangeResourceGroup(@ptrCast(*const ISClusResource, self), pResourceGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_AddResourceNode(self: *const T, pNode: *ISClusNode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).AddResourceNode(@ptrCast(*const ISClusResource, self), pNode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_RemoveResourceNode(self: *const T, pNode: *ISClusNode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).RemoveResourceNode(@ptrCast(*const ISClusResource, self), pNode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_CanResourceBeDependent(self: *const T, pResource: *ISClusResource, pvarDependent: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).CanResourceBeDependent(@ptrCast(*const ISClusResource, self), pResource, pvarDependent);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_PossibleOwnerNodes(self: *const T, ppOwnerNodes: **ISClusResPossibleOwnerNodes) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_PossibleOwnerNodes(@ptrCast(*const ISClusResource, self), ppOwnerNodes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_Dependencies(self: *const T, ppResDependencies: **ISClusResDependencies) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_Dependencies(@ptrCast(*const ISClusResource, self), ppResDependencies);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_Dependents(self: *const T, ppResDependents: **ISClusResDependents) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_Dependents(@ptrCast(*const ISClusResource, self), ppResDependents);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_Group(self: *const T, ppResGroup: **ISClusResGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_Group(@ptrCast(*const ISClusResource, self), ppResGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_OwnerNode(self: *const T, ppOwnerNode: **ISClusNode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_OwnerNode(@ptrCast(*const ISClusResource, self), ppOwnerNode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_Cluster(self: *const T, ppCluster: **ISCluster) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_Cluster(@ptrCast(*const ISClusResource, self), ppCluster);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_ClassInfo(self: *const T, prcClassInfo: *CLUSTER_RESOURCE_CLASS) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_ClassInfo(@ptrCast(*const ISClusResource, self), prcClassInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_Disk(self: *const T, ppDisk: **ISClusDisk) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_Disk(@ptrCast(*const ISClusResource, self), ppDisk);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_RegistryKeys(self: *const T, ppRegistryKeys: **ISClusRegistryKeys) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_RegistryKeys(@ptrCast(*const ISClusResource, self), ppRegistryKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_CryptoKeys(self: *const T, ppCryptoKeys: **ISClusCryptoKeys) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_CryptoKeys(@ptrCast(*const ISClusResource, self), ppCryptoKeys);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_TypeName(self: *const T, pbstrTypeName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_TypeName(@ptrCast(*const ISClusResource, self), pbstrTypeName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_Type(self: *const T, ppResourceType: **ISClusResType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_Type(@ptrCast(*const ISClusResource, self), ppResourceType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_get_MaintenanceMode(self: *const T, pbMaintenanceMode: *BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).get_MaintenanceMode(@ptrCast(*const ISClusResource, self), pbMaintenanceMode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResource_put_MaintenanceMode(self: *const T, bMaintenanceMode: BOOL) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResource.VTable, self.vtable).put_MaintenanceMode(@ptrCast(*const ISClusResource, self), bMaintenanceMode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResDependencies_Value = @import("../zig.zig").Guid.initString("F2E60704-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResDependencies = &IID_ISClusResDependencies_Value;
pub const ISClusResDependencies = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusResDependencies,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusResDependencies,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusResDependencies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusResDependencies,
            varIndex: VARIANT,
            ppClusResource: **ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: fn(
            self: *const ISClusResDependencies,
            bstrResourceName: BSTR,
            bstrResourceType: BSTR,
            dwFlags: CLUSTER_RESOURCE_CREATE_FLAGS,
            ppClusterResource: **ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: fn(
            self: *const ISClusResDependencies,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddItem: fn(
            self: *const ISClusResDependencies,
            pResource: *ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: fn(
            self: *const ISClusResDependencies,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependencies_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependencies.VTable, self.vtable).get_Count(@ptrCast(*const ISClusResDependencies, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependencies_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependencies.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusResDependencies, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependencies_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependencies.VTable, self.vtable).Refresh(@ptrCast(*const ISClusResDependencies, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependencies_get_Item(self: *const T, varIndex: VARIANT, ppClusResource: **ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependencies.VTable, self.vtable).get_Item(@ptrCast(*const ISClusResDependencies, self), varIndex, ppClusResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependencies_CreateItem(self: *const T, bstrResourceName: BSTR, bstrResourceType: BSTR, dwFlags: CLUSTER_RESOURCE_CREATE_FLAGS, ppClusterResource: **ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependencies.VTable, self.vtable).CreateItem(@ptrCast(*const ISClusResDependencies, self), bstrResourceName, bstrResourceType, dwFlags, ppClusterResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependencies_DeleteItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependencies.VTable, self.vtable).DeleteItem(@ptrCast(*const ISClusResDependencies, self), varIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependencies_AddItem(self: *const T, pResource: *ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependencies.VTable, self.vtable).AddItem(@ptrCast(*const ISClusResDependencies, self), pResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependencies_RemoveItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependencies.VTable, self.vtable).RemoveItem(@ptrCast(*const ISClusResDependencies, self), varIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResGroupResources_Value = @import("../zig.zig").Guid.initString("F2E606EA-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResGroupResources = &IID_ISClusResGroupResources_Value;
pub const ISClusResGroupResources = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusResGroupResources,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusResGroupResources,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusResGroupResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusResGroupResources,
            varIndex: VARIANT,
            ppClusResource: **ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: fn(
            self: *const ISClusResGroupResources,
            bstrResourceName: BSTR,
            bstrResourceType: BSTR,
            dwFlags: CLUSTER_RESOURCE_CREATE_FLAGS,
            ppClusterResource: **ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: fn(
            self: *const ISClusResGroupResources,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupResources_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupResources.VTable, self.vtable).get_Count(@ptrCast(*const ISClusResGroupResources, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupResources_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupResources.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusResGroupResources, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupResources_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupResources.VTable, self.vtable).Refresh(@ptrCast(*const ISClusResGroupResources, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupResources_get_Item(self: *const T, varIndex: VARIANT, ppClusResource: **ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupResources.VTable, self.vtable).get_Item(@ptrCast(*const ISClusResGroupResources, self), varIndex, ppClusResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupResources_CreateItem(self: *const T, bstrResourceName: BSTR, bstrResourceType: BSTR, dwFlags: CLUSTER_RESOURCE_CREATE_FLAGS, ppClusterResource: **ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupResources.VTable, self.vtable).CreateItem(@ptrCast(*const ISClusResGroupResources, self), bstrResourceName, bstrResourceType, dwFlags, ppClusterResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupResources_DeleteItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupResources.VTable, self.vtable).DeleteItem(@ptrCast(*const ISClusResGroupResources, self), varIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResTypeResources_Value = @import("../zig.zig").Guid.initString("F2E60714-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResTypeResources = &IID_ISClusResTypeResources_Value;
pub const ISClusResTypeResources = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusResTypeResources,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusResTypeResources,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusResTypeResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusResTypeResources,
            varIndex: VARIANT,
            ppClusResource: **ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: fn(
            self: *const ISClusResTypeResources,
            bstrResourceName: BSTR,
            bstrGroupName: BSTR,
            dwFlags: CLUSTER_RESOURCE_CREATE_FLAGS,
            ppClusterResource: **ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: fn(
            self: *const ISClusResTypeResources,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypeResources_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypeResources.VTable, self.vtable).get_Count(@ptrCast(*const ISClusResTypeResources, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypeResources_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypeResources.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusResTypeResources, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypeResources_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypeResources.VTable, self.vtable).Refresh(@ptrCast(*const ISClusResTypeResources, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypeResources_get_Item(self: *const T, varIndex: VARIANT, ppClusResource: **ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypeResources.VTable, self.vtable).get_Item(@ptrCast(*const ISClusResTypeResources, self), varIndex, ppClusResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypeResources_CreateItem(self: *const T, bstrResourceName: BSTR, bstrGroupName: BSTR, dwFlags: CLUSTER_RESOURCE_CREATE_FLAGS, ppClusterResource: **ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypeResources.VTable, self.vtable).CreateItem(@ptrCast(*const ISClusResTypeResources, self), bstrResourceName, bstrGroupName, dwFlags, ppClusterResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypeResources_DeleteItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypeResources.VTable, self.vtable).DeleteItem(@ptrCast(*const ISClusResTypeResources, self), varIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResources_Value = @import("../zig.zig").Guid.initString("F2E6070C-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResources = &IID_ISClusResources_Value;
pub const ISClusResources = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusResources,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusResources,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusResources,
            varIndex: VARIANT,
            ppClusResource: **ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: fn(
            self: *const ISClusResources,
            bstrResourceName: BSTR,
            bstrResourceType: BSTR,
            bstrGroupName: BSTR,
            dwFlags: CLUSTER_RESOURCE_CREATE_FLAGS,
            ppClusterResource: **ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: fn(
            self: *const ISClusResources,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResources_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResources.VTable, self.vtable).get_Count(@ptrCast(*const ISClusResources, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResources_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResources.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusResources, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResources_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResources.VTable, self.vtable).Refresh(@ptrCast(*const ISClusResources, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResources_get_Item(self: *const T, varIndex: VARIANT, ppClusResource: **ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResources.VTable, self.vtable).get_Item(@ptrCast(*const ISClusResources, self), varIndex, ppClusResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResources_CreateItem(self: *const T, bstrResourceName: BSTR, bstrResourceType: BSTR, bstrGroupName: BSTR, dwFlags: CLUSTER_RESOURCE_CREATE_FLAGS, ppClusterResource: **ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResources.VTable, self.vtable).CreateItem(@ptrCast(*const ISClusResources, self), bstrResourceName, bstrResourceType, bstrGroupName, dwFlags, ppClusterResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResources_DeleteItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResources.VTable, self.vtable).DeleteItem(@ptrCast(*const ISClusResources, self), varIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResGroupPreferredOwnerNodes_Value = @import("../zig.zig").Guid.initString("F2E606E8-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResGroupPreferredOwnerNodes = &IID_ISClusResGroupPreferredOwnerNodes_Value;
pub const ISClusResGroupPreferredOwnerNodes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusResGroupPreferredOwnerNodes,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusResGroupPreferredOwnerNodes,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusResGroupPreferredOwnerNodes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusResGroupPreferredOwnerNodes,
            varIndex: VARIANT,
            ppNode: **ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertItem: fn(
            self: *const ISClusResGroupPreferredOwnerNodes,
            pNode: *ISClusNode,
            nPosition: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: fn(
            self: *const ISClusResGroupPreferredOwnerNodes,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Modified: fn(
            self: *const ISClusResGroupPreferredOwnerNodes,
            pvarModified: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveChanges: fn(
            self: *const ISClusResGroupPreferredOwnerNodes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddItem: fn(
            self: *const ISClusResGroupPreferredOwnerNodes,
            pNode: *ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupPreferredOwnerNodes_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupPreferredOwnerNodes.VTable, self.vtable).get_Count(@ptrCast(*const ISClusResGroupPreferredOwnerNodes, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupPreferredOwnerNodes_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupPreferredOwnerNodes.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusResGroupPreferredOwnerNodes, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupPreferredOwnerNodes_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupPreferredOwnerNodes.VTable, self.vtable).Refresh(@ptrCast(*const ISClusResGroupPreferredOwnerNodes, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupPreferredOwnerNodes_get_Item(self: *const T, varIndex: VARIANT, ppNode: **ISClusNode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupPreferredOwnerNodes.VTable, self.vtable).get_Item(@ptrCast(*const ISClusResGroupPreferredOwnerNodes, self), varIndex, ppNode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupPreferredOwnerNodes_InsertItem(self: *const T, pNode: *ISClusNode, nPosition: i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupPreferredOwnerNodes.VTable, self.vtable).InsertItem(@ptrCast(*const ISClusResGroupPreferredOwnerNodes, self), pNode, nPosition);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupPreferredOwnerNodes_RemoveItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupPreferredOwnerNodes.VTable, self.vtable).RemoveItem(@ptrCast(*const ISClusResGroupPreferredOwnerNodes, self), varIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupPreferredOwnerNodes_get_Modified(self: *const T, pvarModified: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupPreferredOwnerNodes.VTable, self.vtable).get_Modified(@ptrCast(*const ISClusResGroupPreferredOwnerNodes, self), pvarModified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupPreferredOwnerNodes_SaveChanges(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupPreferredOwnerNodes.VTable, self.vtable).SaveChanges(@ptrCast(*const ISClusResGroupPreferredOwnerNodes, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResGroupPreferredOwnerNodes_AddItem(self: *const T, pNode: *ISClusNode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResGroupPreferredOwnerNodes.VTable, self.vtable).AddItem(@ptrCast(*const ISClusResGroupPreferredOwnerNodes, self), pNode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResPossibleOwnerNodes_Value = @import("../zig.zig").Guid.initString("F2E6070E-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResPossibleOwnerNodes = &IID_ISClusResPossibleOwnerNodes_Value;
pub const ISClusResPossibleOwnerNodes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusResPossibleOwnerNodes,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusResPossibleOwnerNodes,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusResPossibleOwnerNodes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusResPossibleOwnerNodes,
            varIndex: VARIANT,
            ppNode: **ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddItem: fn(
            self: *const ISClusResPossibleOwnerNodes,
            pNode: *ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: fn(
            self: *const ISClusResPossibleOwnerNodes,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Modified: fn(
            self: *const ISClusResPossibleOwnerNodes,
            pvarModified: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResPossibleOwnerNodes_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResPossibleOwnerNodes.VTable, self.vtable).get_Count(@ptrCast(*const ISClusResPossibleOwnerNodes, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResPossibleOwnerNodes_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResPossibleOwnerNodes.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusResPossibleOwnerNodes, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResPossibleOwnerNodes_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResPossibleOwnerNodes.VTable, self.vtable).Refresh(@ptrCast(*const ISClusResPossibleOwnerNodes, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResPossibleOwnerNodes_get_Item(self: *const T, varIndex: VARIANT, ppNode: **ISClusNode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResPossibleOwnerNodes.VTable, self.vtable).get_Item(@ptrCast(*const ISClusResPossibleOwnerNodes, self), varIndex, ppNode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResPossibleOwnerNodes_AddItem(self: *const T, pNode: *ISClusNode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResPossibleOwnerNodes.VTable, self.vtable).AddItem(@ptrCast(*const ISClusResPossibleOwnerNodes, self), pNode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResPossibleOwnerNodes_RemoveItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResPossibleOwnerNodes.VTable, self.vtable).RemoveItem(@ptrCast(*const ISClusResPossibleOwnerNodes, self), varIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResPossibleOwnerNodes_get_Modified(self: *const T, pvarModified: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResPossibleOwnerNodes.VTable, self.vtable).get_Modified(@ptrCast(*const ISClusResPossibleOwnerNodes, self), pvarModified);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResTypePossibleOwnerNodes_Value = @import("../zig.zig").Guid.initString("F2E60718-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResTypePossibleOwnerNodes = &IID_ISClusResTypePossibleOwnerNodes_Value;
pub const ISClusResTypePossibleOwnerNodes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusResTypePossibleOwnerNodes,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusResTypePossibleOwnerNodes,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusResTypePossibleOwnerNodes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusResTypePossibleOwnerNodes,
            varIndex: VARIANT,
            ppNode: **ISClusNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypePossibleOwnerNodes_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypePossibleOwnerNodes.VTable, self.vtable).get_Count(@ptrCast(*const ISClusResTypePossibleOwnerNodes, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypePossibleOwnerNodes_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypePossibleOwnerNodes.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusResTypePossibleOwnerNodes, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypePossibleOwnerNodes_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypePossibleOwnerNodes.VTable, self.vtable).Refresh(@ptrCast(*const ISClusResTypePossibleOwnerNodes, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypePossibleOwnerNodes_get_Item(self: *const T, varIndex: VARIANT, ppNode: **ISClusNode) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypePossibleOwnerNodes.VTable, self.vtable).get_Item(@ptrCast(*const ISClusResTypePossibleOwnerNodes, self), varIndex, ppNode);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResType_Value = @import("../zig.zig").Guid.initString("F2E60710-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResType = &IID_ISClusResType_Value;
pub const ISClusResType = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_CommonProperties: fn(
            self: *const ISClusResType,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateProperties: fn(
            self: *const ISClusResType,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_CommonROProperties: fn(
            self: *const ISClusResType,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PrivateROProperties: fn(
            self: *const ISClusResType,
            ppProperties: **ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Name: fn(
            self: *const ISClusResType,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: fn(
            self: *const ISClusResType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Cluster: fn(
            self: *const ISClusResType,
            ppCluster: **ISCluster,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Resources: fn(
            self: *const ISClusResType,
            ppClusterResTypeResources: **ISClusResTypeResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PossibleOwnerNodes: fn(
            self: *const ISClusResType,
            ppOwnerNodes: **ISClusResTypePossibleOwnerNodes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AvailableDisks: fn(
            self: *const ISClusResType,
            ppAvailableDisks: **ISClusDisks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResType_get_CommonProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResType.VTable, self.vtable).get_CommonProperties(@ptrCast(*const ISClusResType, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResType_get_PrivateProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResType.VTable, self.vtable).get_PrivateProperties(@ptrCast(*const ISClusResType, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResType_get_CommonROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResType.VTable, self.vtable).get_CommonROProperties(@ptrCast(*const ISClusResType, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResType_get_PrivateROProperties(self: *const T, ppProperties: **ISClusProperties) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResType.VTable, self.vtable).get_PrivateROProperties(@ptrCast(*const ISClusResType, self), ppProperties);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResType_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResType.VTable, self.vtable).get_Name(@ptrCast(*const ISClusResType, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResType_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResType.VTable, self.vtable).Delete(@ptrCast(*const ISClusResType, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResType_get_Cluster(self: *const T, ppCluster: **ISCluster) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResType.VTable, self.vtable).get_Cluster(@ptrCast(*const ISClusResType, self), ppCluster);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResType_get_Resources(self: *const T, ppClusterResTypeResources: **ISClusResTypeResources) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResType.VTable, self.vtable).get_Resources(@ptrCast(*const ISClusResType, self), ppClusterResTypeResources);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResType_get_PossibleOwnerNodes(self: *const T, ppOwnerNodes: **ISClusResTypePossibleOwnerNodes) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResType.VTable, self.vtable).get_PossibleOwnerNodes(@ptrCast(*const ISClusResType, self), ppOwnerNodes);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResType_get_AvailableDisks(self: *const T, ppAvailableDisks: **ISClusDisks) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResType.VTable, self.vtable).get_AvailableDisks(@ptrCast(*const ISClusResType, self), ppAvailableDisks);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResTypes_Value = @import("../zig.zig").Guid.initString("F2E60712-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResTypes = &IID_ISClusResTypes_Value;
pub const ISClusResTypes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusResTypes,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusResTypes,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusResTypes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusResTypes,
            varIndex: VARIANT,
            ppClusResType: **ISClusResType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: fn(
            self: *const ISClusResTypes,
            bstrResourceTypeName: BSTR,
            bstrDisplayName: BSTR,
            bstrResourceTypeDll: BSTR,
            dwLooksAlivePollInterval: i32,
            dwIsAlivePollInterval: i32,
            ppResourceType: **ISClusResType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: fn(
            self: *const ISClusResTypes,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypes_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypes.VTable, self.vtable).get_Count(@ptrCast(*const ISClusResTypes, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypes_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypes.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusResTypes, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypes_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypes.VTable, self.vtable).Refresh(@ptrCast(*const ISClusResTypes, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypes_get_Item(self: *const T, varIndex: VARIANT, ppClusResType: **ISClusResType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypes.VTable, self.vtable).get_Item(@ptrCast(*const ISClusResTypes, self), varIndex, ppClusResType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypes_CreateItem(self: *const T, bstrResourceTypeName: BSTR, bstrDisplayName: BSTR, bstrResourceTypeDll: BSTR, dwLooksAlivePollInterval: i32, dwIsAlivePollInterval: i32, ppResourceType: **ISClusResType) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypes.VTable, self.vtable).CreateItem(@ptrCast(*const ISClusResTypes, self), bstrResourceTypeName, bstrDisplayName, bstrResourceTypeDll, dwLooksAlivePollInterval, dwIsAlivePollInterval, ppResourceType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResTypes_DeleteItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResTypes.VTable, self.vtable).DeleteItem(@ptrCast(*const ISClusResTypes, self), varIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusProperty_Value = @import("../zig.zig").Guid.initString("F2E606FE-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusProperty = &IID_ISClusProperty_Value;
pub const ISClusProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Name: fn(
            self: *const ISClusProperty,
            pbstrName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Length: fn(
            self: *const ISClusProperty,
            pLength: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ValueCount: fn(
            self: *const ISClusProperty,
            pCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Values: fn(
            self: *const ISClusProperty,
            ppClusterPropertyValues: **ISClusPropertyValues,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Value: fn(
            self: *const ISClusProperty,
            pvarValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Value: fn(
            self: *const ISClusProperty,
            varValue: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Type: fn(
            self: *const ISClusProperty,
            pType: *CLUSTER_PROPERTY_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Type: fn(
            self: *const ISClusProperty,
            Type: CLUSTER_PROPERTY_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Format: fn(
            self: *const ISClusProperty,
            pFormat: *CLUSTER_PROPERTY_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Format: fn(
            self: *const ISClusProperty,
            Format: CLUSTER_PROPERTY_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ReadOnly: fn(
            self: *const ISClusProperty,
            pvarReadOnly: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Private: fn(
            self: *const ISClusProperty,
            pvarPrivate: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Common: fn(
            self: *const ISClusProperty,
            pvarCommon: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Modified: fn(
            self: *const ISClusProperty,
            pvarModified: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UseDefaultValue: fn(
            self: *const ISClusProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_get_Name(self: *const T, pbstrName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).get_Name(@ptrCast(*const ISClusProperty, self), pbstrName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_get_Length(self: *const T, pLength: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).get_Length(@ptrCast(*const ISClusProperty, self), pLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_get_ValueCount(self: *const T, pCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).get_ValueCount(@ptrCast(*const ISClusProperty, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_get_Values(self: *const T, ppClusterPropertyValues: **ISClusPropertyValues) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).get_Values(@ptrCast(*const ISClusProperty, self), ppClusterPropertyValues);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_get_Value(self: *const T, pvarValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).get_Value(@ptrCast(*const ISClusProperty, self), pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_put_Value(self: *const T, varValue: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).put_Value(@ptrCast(*const ISClusProperty, self), varValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_get_Type(self: *const T, pType: *CLUSTER_PROPERTY_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).get_Type(@ptrCast(*const ISClusProperty, self), pType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_put_Type(self: *const T, Type: CLUSTER_PROPERTY_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).put_Type(@ptrCast(*const ISClusProperty, self), Type);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_get_Format(self: *const T, pFormat: *CLUSTER_PROPERTY_FORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).get_Format(@ptrCast(*const ISClusProperty, self), pFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_put_Format(self: *const T, Format: CLUSTER_PROPERTY_FORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).put_Format(@ptrCast(*const ISClusProperty, self), Format);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_get_ReadOnly(self: *const T, pvarReadOnly: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).get_ReadOnly(@ptrCast(*const ISClusProperty, self), pvarReadOnly);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_get_Private(self: *const T, pvarPrivate: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).get_Private(@ptrCast(*const ISClusProperty, self), pvarPrivate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_get_Common(self: *const T, pvarCommon: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).get_Common(@ptrCast(*const ISClusProperty, self), pvarCommon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_get_Modified(self: *const T, pvarModified: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).get_Modified(@ptrCast(*const ISClusProperty, self), pvarModified);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperty_UseDefaultValue(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperty.VTable, self.vtable).UseDefaultValue(@ptrCast(*const ISClusProperty, self));
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusPropertyValue_Value = @import("../zig.zig").Guid.initString("F2E6071A-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusPropertyValue = &IID_ISClusPropertyValue_Value;
pub const ISClusPropertyValue = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Value: fn(
            self: *const ISClusPropertyValue,
            pvarValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Value: fn(
            self: *const ISClusPropertyValue,
            varValue: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Type: fn(
            self: *const ISClusPropertyValue,
            pType: *CLUSTER_PROPERTY_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Type: fn(
            self: *const ISClusPropertyValue,
            Type: CLUSTER_PROPERTY_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Format: fn(
            self: *const ISClusPropertyValue,
            pFormat: *CLUSTER_PROPERTY_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        put_Format: fn(
            self: *const ISClusPropertyValue,
            Format: CLUSTER_PROPERTY_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Length: fn(
            self: *const ISClusPropertyValue,
            pLength: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DataCount: fn(
            self: *const ISClusPropertyValue,
            pCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Data: fn(
            self: *const ISClusPropertyValue,
            ppClusterPropertyValueData: **ISClusPropertyValueData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValue_get_Value(self: *const T, pvarValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValue.VTable, self.vtable).get_Value(@ptrCast(*const ISClusPropertyValue, self), pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValue_put_Value(self: *const T, varValue: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValue.VTable, self.vtable).put_Value(@ptrCast(*const ISClusPropertyValue, self), varValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValue_get_Type(self: *const T, pType: *CLUSTER_PROPERTY_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValue.VTable, self.vtable).get_Type(@ptrCast(*const ISClusPropertyValue, self), pType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValue_put_Type(self: *const T, Type: CLUSTER_PROPERTY_TYPE) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValue.VTable, self.vtable).put_Type(@ptrCast(*const ISClusPropertyValue, self), Type);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValue_get_Format(self: *const T, pFormat: *CLUSTER_PROPERTY_FORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValue.VTable, self.vtable).get_Format(@ptrCast(*const ISClusPropertyValue, self), pFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValue_put_Format(self: *const T, Format: CLUSTER_PROPERTY_FORMAT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValue.VTable, self.vtable).put_Format(@ptrCast(*const ISClusPropertyValue, self), Format);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValue_get_Length(self: *const T, pLength: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValue.VTable, self.vtable).get_Length(@ptrCast(*const ISClusPropertyValue, self), pLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValue_get_DataCount(self: *const T, pCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValue.VTable, self.vtable).get_DataCount(@ptrCast(*const ISClusPropertyValue, self), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValue_get_Data(self: *const T, ppClusterPropertyValueData: **ISClusPropertyValueData) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValue.VTable, self.vtable).get_Data(@ptrCast(*const ISClusPropertyValue, self), ppClusterPropertyValueData);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusPropertyValues_Value = @import("../zig.zig").Guid.initString("F2E6071C-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusPropertyValues = &IID_ISClusPropertyValues_Value;
pub const ISClusPropertyValues = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusPropertyValues,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusPropertyValues,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusPropertyValues,
            varIndex: VARIANT,
            ppPropertyValue: **ISClusPropertyValue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: fn(
            self: *const ISClusPropertyValues,
            bstrName: BSTR,
            varValue: VARIANT,
            ppPropertyValue: **ISClusPropertyValue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: fn(
            self: *const ISClusPropertyValues,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValues_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValues.VTable, self.vtable).get_Count(@ptrCast(*const ISClusPropertyValues, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValues_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValues.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusPropertyValues, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValues_get_Item(self: *const T, varIndex: VARIANT, ppPropertyValue: **ISClusPropertyValue) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValues.VTable, self.vtable).get_Item(@ptrCast(*const ISClusPropertyValues, self), varIndex, ppPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValues_CreateItem(self: *const T, bstrName: BSTR, varValue: VARIANT, ppPropertyValue: **ISClusPropertyValue) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValues.VTable, self.vtable).CreateItem(@ptrCast(*const ISClusPropertyValues, self), bstrName, varValue, ppPropertyValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValues_RemoveItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValues.VTable, self.vtable).RemoveItem(@ptrCast(*const ISClusPropertyValues, self), varIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusProperties_Value = @import("../zig.zig").Guid.initString("F2E60700-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusProperties = &IID_ISClusProperties_Value;
pub const ISClusProperties = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusProperties,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusProperties,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusProperties,
            varIndex: VARIANT,
            ppClusProperty: **ISClusProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: fn(
            self: *const ISClusProperties,
            bstrName: BSTR,
            varValue: VARIANT,
            pProperty: **ISClusProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UseDefaultValue: fn(
            self: *const ISClusProperties,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveChanges: fn(
            self: *const ISClusProperties,
            pvarStatusCode: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ReadOnly: fn(
            self: *const ISClusProperties,
            pvarReadOnly: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Private: fn(
            self: *const ISClusProperties,
            pvarPrivate: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Common: fn(
            self: *const ISClusProperties,
            pvarCommon: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Modified: fn(
            self: *const ISClusProperties,
            pvarModified: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperties_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperties.VTable, self.vtable).get_Count(@ptrCast(*const ISClusProperties, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperties_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperties.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusProperties, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperties_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperties.VTable, self.vtable).Refresh(@ptrCast(*const ISClusProperties, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperties_get_Item(self: *const T, varIndex: VARIANT, ppClusProperty: **ISClusProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperties.VTable, self.vtable).get_Item(@ptrCast(*const ISClusProperties, self), varIndex, ppClusProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperties_CreateItem(self: *const T, bstrName: BSTR, varValue: VARIANT, pProperty: **ISClusProperty) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperties.VTable, self.vtable).CreateItem(@ptrCast(*const ISClusProperties, self), bstrName, varValue, pProperty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperties_UseDefaultValue(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperties.VTable, self.vtable).UseDefaultValue(@ptrCast(*const ISClusProperties, self), varIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperties_SaveChanges(self: *const T, pvarStatusCode: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperties.VTable, self.vtable).SaveChanges(@ptrCast(*const ISClusProperties, self), pvarStatusCode);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperties_get_ReadOnly(self: *const T, pvarReadOnly: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperties.VTable, self.vtable).get_ReadOnly(@ptrCast(*const ISClusProperties, self), pvarReadOnly);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperties_get_Private(self: *const T, pvarPrivate: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperties.VTable, self.vtable).get_Private(@ptrCast(*const ISClusProperties, self), pvarPrivate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperties_get_Common(self: *const T, pvarCommon: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperties.VTable, self.vtable).get_Common(@ptrCast(*const ISClusProperties, self), pvarCommon);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusProperties_get_Modified(self: *const T, pvarModified: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusProperties.VTable, self.vtable).get_Modified(@ptrCast(*const ISClusProperties, self), pvarModified);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusPropertyValueData_Value = @import("../zig.zig").Guid.initString("F2E6071E-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusPropertyValueData = &IID_ISClusPropertyValueData_Value;
pub const ISClusPropertyValueData = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusPropertyValueData,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusPropertyValueData,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusPropertyValueData,
            varIndex: VARIANT,
            pvarValue: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: fn(
            self: *const ISClusPropertyValueData,
            varValue: VARIANT,
            pvarData: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: fn(
            self: *const ISClusPropertyValueData,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValueData_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValueData.VTable, self.vtable).get_Count(@ptrCast(*const ISClusPropertyValueData, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValueData_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValueData.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusPropertyValueData, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValueData_get_Item(self: *const T, varIndex: VARIANT, pvarValue: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValueData.VTable, self.vtable).get_Item(@ptrCast(*const ISClusPropertyValueData, self), varIndex, pvarValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValueData_CreateItem(self: *const T, varValue: VARIANT, pvarData: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValueData.VTable, self.vtable).CreateItem(@ptrCast(*const ISClusPropertyValueData, self), varValue, pvarData);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPropertyValueData_RemoveItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPropertyValueData.VTable, self.vtable).RemoveItem(@ptrCast(*const ISClusPropertyValueData, self), varIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusPartition_Value = @import("../zig.zig").Guid.initString("F2E60720-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusPartition = &IID_ISClusPartition_Value;
pub const ISClusPartition = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Flags: fn(
            self: *const ISClusPartition,
            plFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DeviceName: fn(
            self: *const ISClusPartition,
            pbstrDeviceName: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_VolumeLabel: fn(
            self: *const ISClusPartition,
            pbstrVolumeLabel: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_SerialNumber: fn(
            self: *const ISClusPartition,
            plSerialNumber: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_MaximumComponentLength: fn(
            self: *const ISClusPartition,
            plMaximumComponentLength: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FileSystemFlags: fn(
            self: *const ISClusPartition,
            plFileSystemFlags: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FileSystem: fn(
            self: *const ISClusPartition,
            pbstrFileSystem: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartition_get_Flags(self: *const T, plFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartition.VTable, self.vtable).get_Flags(@ptrCast(*const ISClusPartition, self), plFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartition_get_DeviceName(self: *const T, pbstrDeviceName: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartition.VTable, self.vtable).get_DeviceName(@ptrCast(*const ISClusPartition, self), pbstrDeviceName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartition_get_VolumeLabel(self: *const T, pbstrVolumeLabel: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartition.VTable, self.vtable).get_VolumeLabel(@ptrCast(*const ISClusPartition, self), pbstrVolumeLabel);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartition_get_SerialNumber(self: *const T, plSerialNumber: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartition.VTable, self.vtable).get_SerialNumber(@ptrCast(*const ISClusPartition, self), plSerialNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartition_get_MaximumComponentLength(self: *const T, plMaximumComponentLength: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartition.VTable, self.vtable).get_MaximumComponentLength(@ptrCast(*const ISClusPartition, self), plMaximumComponentLength);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartition_get_FileSystemFlags(self: *const T, plFileSystemFlags: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartition.VTable, self.vtable).get_FileSystemFlags(@ptrCast(*const ISClusPartition, self), plFileSystemFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartition_get_FileSystem(self: *const T, pbstrFileSystem: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartition.VTable, self.vtable).get_FileSystem(@ptrCast(*const ISClusPartition, self), pbstrFileSystem);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusPartitionEx_Value = @import("../zig.zig").Guid.initString("8802D4FE-B32E-4AD1-9DBD-64F18E1166CE");
pub const IID_ISClusPartitionEx = &IID_ISClusPartitionEx_Value;
pub const ISClusPartitionEx = extern struct {
    pub const VTable = extern struct {
        base: ISClusPartition.VTable,
        get_TotalSize: fn(
            self: *const ISClusPartitionEx,
            plTotalSize: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_FreeSpace: fn(
            self: *const ISClusPartitionEx,
            plFreeSpace: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DeviceNumber: fn(
            self: *const ISClusPartitionEx,
            plDeviceNumber: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PartitionNumber: fn(
            self: *const ISClusPartitionEx,
            plPartitionNumber: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_VolumeGuid: fn(
            self: *const ISClusPartitionEx,
            pbstrVolumeGuid: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace ISClusPartition.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartitionEx_get_TotalSize(self: *const T, plTotalSize: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartitionEx.VTable, self.vtable).get_TotalSize(@ptrCast(*const ISClusPartitionEx, self), plTotalSize);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartitionEx_get_FreeSpace(self: *const T, plFreeSpace: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartitionEx.VTable, self.vtable).get_FreeSpace(@ptrCast(*const ISClusPartitionEx, self), plFreeSpace);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartitionEx_get_DeviceNumber(self: *const T, plDeviceNumber: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartitionEx.VTable, self.vtable).get_DeviceNumber(@ptrCast(*const ISClusPartitionEx, self), plDeviceNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartitionEx_get_PartitionNumber(self: *const T, plPartitionNumber: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartitionEx.VTable, self.vtable).get_PartitionNumber(@ptrCast(*const ISClusPartitionEx, self), plPartitionNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartitionEx_get_VolumeGuid(self: *const T, pbstrVolumeGuid: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartitionEx.VTable, self.vtable).get_VolumeGuid(@ptrCast(*const ISClusPartitionEx, self), pbstrVolumeGuid);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusPartitions_Value = @import("../zig.zig").Guid.initString("F2E60722-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusPartitions = &IID_ISClusPartitions_Value;
pub const ISClusPartitions = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusPartitions,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusPartitions,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusPartitions,
            varIndex: VARIANT,
            ppPartition: **ISClusPartition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartitions_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartitions.VTable, self.vtable).get_Count(@ptrCast(*const ISClusPartitions, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartitions_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartitions.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusPartitions, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusPartitions_get_Item(self: *const T, varIndex: VARIANT, ppPartition: **ISClusPartition) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusPartitions.VTable, self.vtable).get_Item(@ptrCast(*const ISClusPartitions, self), varIndex, ppPartition);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusDisk_Value = @import("../zig.zig").Guid.initString("F2E60724-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusDisk = &IID_ISClusDisk_Value;
pub const ISClusDisk = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Signature: fn(
            self: *const ISClusDisk,
            plSignature: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ScsiAddress: fn(
            self: *const ISClusDisk,
            ppScsiAddress: **ISClusScsiAddress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_DiskNumber: fn(
            self: *const ISClusDisk,
            plDiskNumber: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Partitions: fn(
            self: *const ISClusDisk,
            ppPartitions: **ISClusPartitions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusDisk_get_Signature(self: *const T, plSignature: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusDisk.VTable, self.vtable).get_Signature(@ptrCast(*const ISClusDisk, self), plSignature);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusDisk_get_ScsiAddress(self: *const T, ppScsiAddress: **ISClusScsiAddress) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusDisk.VTable, self.vtable).get_ScsiAddress(@ptrCast(*const ISClusDisk, self), ppScsiAddress);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusDisk_get_DiskNumber(self: *const T, plDiskNumber: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusDisk.VTable, self.vtable).get_DiskNumber(@ptrCast(*const ISClusDisk, self), plDiskNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusDisk_get_Partitions(self: *const T, ppPartitions: **ISClusPartitions) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusDisk.VTable, self.vtable).get_Partitions(@ptrCast(*const ISClusDisk, self), ppPartitions);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusDisks_Value = @import("../zig.zig").Guid.initString("F2E60726-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusDisks = &IID_ISClusDisks_Value;
pub const ISClusDisks = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusDisks,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusDisks,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusDisks,
            varIndex: VARIANT,
            ppDisk: **ISClusDisk,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusDisks_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusDisks.VTable, self.vtable).get_Count(@ptrCast(*const ISClusDisks, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusDisks_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusDisks.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusDisks, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusDisks_get_Item(self: *const T, varIndex: VARIANT, ppDisk: **ISClusDisk) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusDisks.VTable, self.vtable).get_Item(@ptrCast(*const ISClusDisks, self), varIndex, ppDisk);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusScsiAddress_Value = @import("../zig.zig").Guid.initString("F2E60728-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusScsiAddress = &IID_ISClusScsiAddress_Value;
pub const ISClusScsiAddress = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_PortNumber: fn(
            self: *const ISClusScsiAddress,
            pvarPortNumber: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_PathId: fn(
            self: *const ISClusScsiAddress,
            pvarPathId: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_TargetId: fn(
            self: *const ISClusScsiAddress,
            pvarTargetId: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Lun: fn(
            self: *const ISClusScsiAddress,
            pvarLun: *VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusScsiAddress_get_PortNumber(self: *const T, pvarPortNumber: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusScsiAddress.VTable, self.vtable).get_PortNumber(@ptrCast(*const ISClusScsiAddress, self), pvarPortNumber);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusScsiAddress_get_PathId(self: *const T, pvarPathId: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusScsiAddress.VTable, self.vtable).get_PathId(@ptrCast(*const ISClusScsiAddress, self), pvarPathId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusScsiAddress_get_TargetId(self: *const T, pvarTargetId: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusScsiAddress.VTable, self.vtable).get_TargetId(@ptrCast(*const ISClusScsiAddress, self), pvarTargetId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusScsiAddress_get_Lun(self: *const T, pvarLun: *VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusScsiAddress.VTable, self.vtable).get_Lun(@ptrCast(*const ISClusScsiAddress, self), pvarLun);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusRegistryKeys_Value = @import("../zig.zig").Guid.initString("F2E6072A-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusRegistryKeys = &IID_ISClusRegistryKeys_Value;
pub const ISClusRegistryKeys = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusRegistryKeys,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusRegistryKeys,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusRegistryKeys,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusRegistryKeys,
            varIndex: VARIANT,
            pbstrRegistryKey: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddItem: fn(
            self: *const ISClusRegistryKeys,
            bstrRegistryKey: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: fn(
            self: *const ISClusRegistryKeys,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusRegistryKeys_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusRegistryKeys.VTable, self.vtable).get_Count(@ptrCast(*const ISClusRegistryKeys, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusRegistryKeys_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusRegistryKeys.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusRegistryKeys, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusRegistryKeys_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusRegistryKeys.VTable, self.vtable).Refresh(@ptrCast(*const ISClusRegistryKeys, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusRegistryKeys_get_Item(self: *const T, varIndex: VARIANT, pbstrRegistryKey: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusRegistryKeys.VTable, self.vtable).get_Item(@ptrCast(*const ISClusRegistryKeys, self), varIndex, pbstrRegistryKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusRegistryKeys_AddItem(self: *const T, bstrRegistryKey: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusRegistryKeys.VTable, self.vtable).AddItem(@ptrCast(*const ISClusRegistryKeys, self), bstrRegistryKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusRegistryKeys_RemoveItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusRegistryKeys.VTable, self.vtable).RemoveItem(@ptrCast(*const ISClusRegistryKeys, self), varIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusCryptoKeys_Value = @import("../zig.zig").Guid.initString("F2E6072C-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusCryptoKeys = &IID_ISClusCryptoKeys_Value;
pub const ISClusCryptoKeys = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusCryptoKeys,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusCryptoKeys,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusCryptoKeys,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusCryptoKeys,
            varIndex: VARIANT,
            pbstrCyrptoKey: *BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddItem: fn(
            self: *const ISClusCryptoKeys,
            bstrCryptoKey: BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: fn(
            self: *const ISClusCryptoKeys,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusCryptoKeys_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusCryptoKeys.VTable, self.vtable).get_Count(@ptrCast(*const ISClusCryptoKeys, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusCryptoKeys_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusCryptoKeys.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusCryptoKeys, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusCryptoKeys_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusCryptoKeys.VTable, self.vtable).Refresh(@ptrCast(*const ISClusCryptoKeys, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusCryptoKeys_get_Item(self: *const T, varIndex: VARIANT, pbstrCyrptoKey: *BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusCryptoKeys.VTable, self.vtable).get_Item(@ptrCast(*const ISClusCryptoKeys, self), varIndex, pbstrCyrptoKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusCryptoKeys_AddItem(self: *const T, bstrCryptoKey: BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusCryptoKeys.VTable, self.vtable).AddItem(@ptrCast(*const ISClusCryptoKeys, self), bstrCryptoKey);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusCryptoKeys_RemoveItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusCryptoKeys.VTable, self.vtable).RemoveItem(@ptrCast(*const ISClusCryptoKeys, self), varIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

const IID_ISClusResDependents_Value = @import("../zig.zig").Guid.initString("F2E6072E-2631-11D1-89F1-00A0C90D061E");
pub const IID_ISClusResDependents = &IID_ISClusResDependents_Value;
pub const ISClusResDependents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        get_Count: fn(
            self: *const ISClusResDependents,
            plCount: *i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get__NewEnum: fn(
            self: *const ISClusResDependents,
            retval: **IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: fn(
            self: *const ISClusResDependents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Item: fn(
            self: *const ISClusResDependents,
            varIndex: VARIANT,
            ppClusResource: **ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: fn(
            self: *const ISClusResDependents,
            bstrResourceName: BSTR,
            bstrResourceType: BSTR,
            dwFlags: CLUSTER_RESOURCE_CREATE_FLAGS,
            ppClusterResource: **ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: fn(
            self: *const ISClusResDependents,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddItem: fn(
            self: *const ISClusResDependents,
            pResource: *ISClusResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: fn(
            self: *const ISClusResDependents,
            varIndex: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IDispatch.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependents_get_Count(self: *const T, plCount: *i32) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependents.VTable, self.vtable).get_Count(@ptrCast(*const ISClusResDependents, self), plCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependents_get__NewEnum(self: *const T, retval: **IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependents.VTable, self.vtable).get__NewEnum(@ptrCast(*const ISClusResDependents, self), retval);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependents_Refresh(self: *const T) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependents.VTable, self.vtable).Refresh(@ptrCast(*const ISClusResDependents, self));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependents_get_Item(self: *const T, varIndex: VARIANT, ppClusResource: **ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependents.VTable, self.vtable).get_Item(@ptrCast(*const ISClusResDependents, self), varIndex, ppClusResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependents_CreateItem(self: *const T, bstrResourceName: BSTR, bstrResourceType: BSTR, dwFlags: CLUSTER_RESOURCE_CREATE_FLAGS, ppClusterResource: **ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependents.VTable, self.vtable).CreateItem(@ptrCast(*const ISClusResDependents, self), bstrResourceName, bstrResourceType, dwFlags, ppClusterResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependents_DeleteItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependents.VTable, self.vtable).DeleteItem(@ptrCast(*const ISClusResDependents, self), varIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependents_AddItem(self: *const T, pResource: *ISClusResource) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependents.VTable, self.vtable).AddItem(@ptrCast(*const ISClusResDependents, self), pResource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn ISClusResDependents_RemoveItem(self: *const T, varIndex: VARIANT) callconv(.Inline) HRESULT {
            return @ptrCast(*const ISClusResDependents.VTable, self.vtable).RemoveItem(@ptrCast(*const ISClusResDependents, self), varIndex);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (349)
//--------------------------------------------------------------------------------
pub extern "CLUSAPI" fn GetNodeClusterState(
    lpszNodeName: ?[*:0]const u16,
    pdwClusterState: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn OpenCluster(
    lpszClusterName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub extern "CLUSAPI" fn OpenClusterEx(
    lpszClusterName: ?[*:0]const u16,
    DesiredAccess: u32,
    GrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub extern "CLUSAPI" fn CloseCluster(
    hCluster: *_HCLUSTER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CLUSAPI" fn SetClusterName(
    hCluster: *_HCLUSTER,
    lpszNewClusterName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetClusterInformation(
    hCluster: *_HCLUSTER,
    lpszClusterName: [*:0]u16,
    lpcchClusterName: *u32,
    lpClusterInfo: ?*CLUSTERVERSIONINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetClusterQuorumResource(
    hCluster: *_HCLUSTER,
    lpszResourceName: [*:0]u16,
    lpcchResourceName: *u32,
    lpszDeviceName: [*:0]u16,
    lpcchDeviceName: *u32,
    lpdwMaxQuorumLogSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn SetClusterQuorumResource(
    hResource: *_HRESOURCE,
    lpszDeviceName: ?[*:0]const u16,
    dwMaxQuoLogSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn BackupClusterDatabase(
    hCluster: *_HCLUSTER,
    lpszPathName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn RestoreClusterDatabase(
    lpszPathName: [*:0]const u16,
    bForce: BOOL,
    lpszQuorumDriveLetter: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn SetClusterNetworkPriorityOrder(
    hCluster: *_HCLUSTER,
    NetworkCount: u32,
    NetworkList: [*]*_HNETWORK,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn SetClusterServiceAccountPassword(
    lpszClusterName: [*:0]const u16,
    lpszNewPassword: [*:0]const u16,
    dwFlags: u32,
    lpReturnStatusBuffer: ?[*]CLUSTER_SET_PASSWORD_STATUS,
    lpcbReturnStatusBufferSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterControl(
    hCluster: *_HCLUSTER,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterUpgradeFunctionalLevel(
    hCluster: *_HCLUSTER,
    perform: BOOL,
    pfnProgressCallback: ?PCLUSTER_UPGRADE_PROGRESS_CALLBACK,
    pvCallbackArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CreateClusterNotifyPortV2(
    hChange: *_HCHANGE,
    hCluster: *_HCLUSTER,
    Filters: *NOTIFY_FILTER_AND_TYPE,
    dwFilterCount: u32,
    dwNotifyKey: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HCHANGE;

pub extern "CLUSAPI" fn RegisterClusterNotifyV2(
    hChange: *_HCHANGE,
    Filter: NOTIFY_FILTER_AND_TYPE,
    hObject: HANDLE,
    dwNotifyKey: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetNotifyEventHandle(
    hChange: *_HCHANGE,
    lphTargetEvent: *HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetClusterNotifyV2(
    hChange: *_HCHANGE,
    lpdwNotifyKey: *?*c_void,
    pFilterAndType: ?*NOTIFY_FILTER_AND_TYPE,
    buffer: ?[*:0]u8,
    lpbBufferSize: ?*u32,
    lpszObjectId: ?[*:0]u16,
    lpcchObjectId: ?*u32,
    lpszParentId: ?[*:0]u16,
    lpcchParentId: ?*u32,
    lpszName: ?[*:0]u16,
    lpcchName: ?*u32,
    lpszType: ?[*:0]u16,
    lpcchType: ?*u32,
    dwMilliseconds: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CreateClusterNotifyPort(
    hChange: *_HCHANGE,
    hCluster: *_HCLUSTER,
    dwFilter: u32,
    dwNotifyKey: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HCHANGE;

pub extern "CLUSAPI" fn RegisterClusterNotify(
    hChange: *_HCHANGE,
    dwFilterType: u32,
    hObject: HANDLE,
    dwNotifyKey: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetClusterNotify(
    hChange: *_HCHANGE,
    lpdwNotifyKey: *?*c_void,
    lpdwFilterType: *u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
    dwMilliseconds: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CloseClusterNotifyPort(
    hChange: *_HCHANGE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CLUSAPI" fn ClusterOpenEnum(
    hCluster: *_HCLUSTER,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSENUM;

pub extern "CLUSAPI" fn ClusterGetEnumCount(
    hEnum: *_HCLUSENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterEnum(
    hEnum: *_HCLUSENUM,
    dwIndex: u32,
    lpdwType: *u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterCloseEnum(
    hEnum: *_HCLUSENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterOpenEnumEx(
    hCluster: *_HCLUSTER,
    dwType: u32,
    pOptions: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSENUMEX;

pub extern "CLUSAPI" fn ClusterGetEnumCountEx(
    hClusterEnum: *_HCLUSENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterEnumEx(
    hClusterEnum: *_HCLUSENUMEX,
    dwIndex: u32,
    pItem: *CLUSTER_ENUM_ITEM,
    cbItem: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterCloseEnumEx(
    hClusterEnum: *_HCLUSENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CreateClusterGroupSet(
    hCluster: *_HCLUSTER,
    groupSetName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HGROUPSET;

pub extern "CLUSAPI" fn OpenClusterGroupSet(
    hCluster: *_HCLUSTER,
    lpszGroupSetName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HGROUPSET;

pub extern "CLUSAPI" fn CloseClusterGroupSet(
    hGroupSet: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CLUSAPI" fn DeleteClusterGroupSet(
    hGroupSet: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterAddGroupToGroupSet(
    hGroupSet: *_HGROUPSET,
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterAddGroupToGroupSetWithDomains(
    hGroupSet: *_HGROUPSET,
    hGroup: *_HGROUP,
    faultDomain: u32,
    updateDomain: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterRemoveGroupFromGroupSet(
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterGroupSetControl(
    hGroupSet: *_HGROUPSET,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    cbInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    cbOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn AddClusterGroupDependency(
    hDependentGroup: *_HGROUP,
    hProviderGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn SetGroupDependencyExpression(
    hGroup: *_HGROUP,
    lpszDependencyExpression: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn RemoveClusterGroupDependency(
    hGroup: *_HGROUP,
    hDependsOn: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn AddClusterGroupSetDependency(
    hDependentGroupSet: *_HGROUPSET,
    hProviderGroupSet: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn SetClusterGroupSetDependencyExpression(
    hGroupSet: *_HGROUPSET,
    lpszDependencyExprssion: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn RemoveClusterGroupSetDependency(
    hGroupSet: *_HGROUPSET,
    hDependsOn: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn AddClusterGroupToGroupSetDependency(
    hDependentGroup: *_HGROUP,
    hProviderGroupSet: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn RemoveClusterGroupToGroupSetDependency(
    hGroup: *_HGROUP,
    hDependsOn: *_HGROUPSET,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterGroupSetOpenEnum(
    hCluster: *_HCLUSTER,
) callconv(@import("std").os.windows.WINAPI) *_HGROUPSETENUM;

pub extern "CLUSAPI" fn ClusterGroupSetGetEnumCount(
    hGroupSetEnum: *_HGROUPSETENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterGroupSetEnum(
    hGroupSetEnum: *_HGROUPSETENUM,
    dwIndex: u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterGroupSetCloseEnum(
    hGroupSetEnum: *_HGROUPSETENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn AddCrossClusterGroupSetDependency(
    hDependentGroupSet: *_HGROUPSET,
    lpRemoteClusterName: [*:0]const u16,
    lpRemoteGroupSetName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn RemoveCrossClusterGroupSetDependency(
    hDependentGroupSet: *_HGROUPSET,
    lpRemoteClusterName: [*:0]const u16,
    lpRemoteGroupSetName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CreateClusterAvailabilitySet(
    hCluster: *_HCLUSTER,
    lpAvailabilitySetName: [*:0]const u16,
    pAvailabilitySetConfig: *CLUSTER_AVAILABILITY_SET_CONFIG,
) callconv(@import("std").os.windows.WINAPI) *_HGROUPSET;

pub extern "CLUSAPI" fn ClusterNodeReplacement(
    hCluster: *_HCLUSTER,
    lpszNodeNameCurrent: [*:0]const u16,
    lpszNodeNameNew: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterCreateAffinityRule(
    hCluster: *_HCLUSTER,
    ruleName: [*:0]const u16,
    ruleType: CLUS_AFFINITY_RULE_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterRemoveAffinityRule(
    hCluster: *_HCLUSTER,
    ruleName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterAddGroupToAffinityRule(
    hCluster: *_HCLUSTER,
    ruleName: [*:0]const u16,
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterRemoveGroupFromAffinityRule(
    hCluster: *_HCLUSTER,
    ruleName: [*:0]const u16,
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterAffinityRuleControl(
    hCluster: *_HCLUSTER,
    affinityRuleName: [*:0]const u16,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    cbInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    cbOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn OpenClusterNode(
    hCluster: *_HCLUSTER,
    lpszNodeName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HNODE;

pub extern "CLUSAPI" fn OpenClusterNodeEx(
    hCluster: *_HCLUSTER,
    lpszNodeName: ?[*:0]const u16,
    dwDesiredAccess: u32,
    lpdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *_HNODE;

pub extern "CLUSAPI" fn OpenClusterNodeById(
    hCluster: *_HCLUSTER,
    nodeId: u32,
) callconv(@import("std").os.windows.WINAPI) *_HNODE;

pub extern "CLUSAPI" fn CloseClusterNode(
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CLUSAPI" fn GetClusterNodeState(
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) CLUSTER_NODE_STATE;

pub extern "CLUSAPI" fn GetClusterNodeId(
    hNode: ?*_HNODE,
    lpszNodeId: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetClusterFromNode(
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub extern "CLUSAPI" fn PauseClusterNode(
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ResumeClusterNode(
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn EvictClusterNode(
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterNetInterfaceOpenEnum(
    hCluster: *_HCLUSTER,
    lpszNodeName: ?[*:0]const u16,
    lpszNetworkName: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HNETINTERFACEENUM;

pub extern "CLUSAPI" fn ClusterNetInterfaceEnum(
    hNetInterfaceEnum: *_HNETINTERFACEENUM,
    dwIndex: u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterNetInterfaceCloseEnum(
    hNetInterfaceEnum: *_HNETINTERFACEENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterNodeOpenEnum(
    hNode: *_HNODE,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) *_HNODEENUM;

pub extern "CLUSAPI" fn ClusterNodeOpenEnumEx(
    hNode: *_HNODE,
    dwType: u32,
    pOptions: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HNODEENUMEX;

pub extern "CLUSAPI" fn ClusterNodeGetEnumCountEx(
    hNodeEnum: *_HNODEENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterNodeEnumEx(
    hNodeEnum: *_HNODEENUMEX,
    dwIndex: u32,
    pItem: *CLUSTER_ENUM_ITEM,
    cbItem: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterNodeCloseEnumEx(
    hNodeEnum: *_HNODEENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterNodeGetEnumCount(
    hNodeEnum: *_HNODEENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterNodeCloseEnum(
    hNodeEnum: *_HNODEENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterNodeEnum(
    hNodeEnum: *_HNODEENUM,
    dwIndex: u32,
    lpdwType: *u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn EvictClusterNodeEx(
    hNode: *_HNODE,
    dwTimeOut: u32,
    phrCleanupStatus: *HRESULT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetClusterResourceTypeKey(
    hCluster: *_HCLUSTER,
    lpszTypeName: [*:0]const u16,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub extern "CLUSAPI" fn CreateClusterGroup(
    hCluster: *_HCLUSTER,
    lpszGroupName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HGROUP;

pub extern "CLUSAPI" fn OpenClusterGroup(
    hCluster: *_HCLUSTER,
    lpszGroupName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HGROUP;

pub extern "CLUSAPI" fn OpenClusterGroupEx(
    hCluster: *_HCLUSTER,
    lpszGroupName: ?[*:0]const u16,
    dwDesiredAccess: u32,
    lpdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *_HGROUP;

pub extern "CLUSAPI" fn PauseClusterNodeEx(
    hNode: *_HNODE,
    bDrainNode: BOOL,
    dwPauseFlags: u32,
    hNodeDrainTarget: ?*_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ResumeClusterNodeEx(
    hNode: *_HNODE,
    eResumeFailbackType: CLUSTER_NODE_RESUME_FAILBACK_TYPE,
    dwResumeFlagsReserved: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CreateClusterGroupEx(
    hCluster: *_HCLUSTER,
    lpszGroupName: [*:0]const u16,
    pGroupInfo: ?*CLUSTER_CREATE_GROUP_INFO,
) callconv(@import("std").os.windows.WINAPI) *_HGROUP;

pub extern "CLUSAPI" fn ClusterGroupOpenEnumEx(
    hCluster: *_HCLUSTER,
    lpszProperties: ?[*:0]const u16,
    cbProperties: u32,
    lpszRoProperties: ?[*:0]const u16,
    cbRoProperties: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *_HGROUPENUMEX;

pub extern "CLUSAPI" fn ClusterGroupGetEnumCountEx(
    hGroupEnumEx: *_HGROUPENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterGroupEnumEx(
    hGroupEnumEx: *_HGROUPENUMEX,
    dwIndex: u32,
    pItem: *CLUSTER_GROUP_ENUM_ITEM,
    cbItem: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterGroupCloseEnumEx(
    hGroupEnumEx: *_HGROUPENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterResourceOpenEnumEx(
    hCluster: *_HCLUSTER,
    lpszProperties: ?[*:0]const u16,
    cbProperties: u32,
    lpszRoProperties: ?[*:0]const u16,
    cbRoProperties: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESENUMEX;

pub extern "CLUSAPI" fn ClusterResourceGetEnumCountEx(
    hResourceEnumEx: *_HRESENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterResourceEnumEx(
    hResourceEnumEx: *_HRESENUMEX,
    dwIndex: u32,
    pItem: *CLUSTER_RESOURCE_ENUM_ITEM,
    cbItem: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterResourceCloseEnumEx(
    hResourceEnumEx: *_HRESENUMEX,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn OnlineClusterGroupEx(
    hGroup: *_HGROUP,
    hDestinationNode: ?*_HNODE,
    dwOnlineFlags: u32,
    lpInBuffer: ?[*:0]u8,
    cbInBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn OfflineClusterGroupEx(
    hGroup: *_HGROUP,
    dwOfflineFlags: u32,
    lpInBuffer: ?[*:0]u8,
    cbInBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn OnlineClusterResourceEx(
    hResource: *_HRESOURCE,
    dwOnlineFlags: u32,
    lpInBuffer: ?[*:0]u8,
    cbInBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn OfflineClusterResourceEx(
    hResource: *_HRESOURCE,
    dwOfflineFlags: u32,
    lpInBuffer: ?[*:0]u8,
    cbInBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn MoveClusterGroupEx(
    hGroup: *_HGROUP,
    hDestinationNode: ?*_HNODE,
    dwMoveFlags: u32,
    lpInBuffer: ?[*:0]u8,
    cbInBufferSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CancelClusterGroupOperation(
    hGroup: *_HGROUP,
    dwCancelFlags_RESERVED: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn RestartClusterResource(
    hResource: *_HRESOURCE,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CloseClusterGroup(
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CLUSAPI" fn GetClusterFromGroup(
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub extern "CLUSAPI" fn GetClusterGroupState(
    hGroup: *_HGROUP,
    lpszNodeName: ?[*:0]u16,
    lpcchNodeName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) CLUSTER_GROUP_STATE;

pub extern "CLUSAPI" fn SetClusterGroupName(
    hGroup: *_HGROUP,
    lpszGroupName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn SetClusterGroupNodeList(
    hGroup: *_HGROUP,
    NodeCount: u32,
    NodeList: ?[*]?*_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn OnlineClusterGroup(
    hGroup: *_HGROUP,
    hDestinationNode: ?*_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn MoveClusterGroup(
    hGroup: *_HGROUP,
    hDestinationNode: ?*_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn OfflineClusterGroup(
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn DeleteClusterGroup(
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn DestroyClusterGroup(
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterGroupOpenEnum(
    hGroup: *_HGROUP,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) *_HGROUPENUM;

pub extern "CLUSAPI" fn ClusterGroupGetEnumCount(
    hGroupEnum: *_HGROUPENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterGroupEnum(
    hGroupEnum: *_HGROUPENUM,
    dwIndex: u32,
    lpdwType: *u32,
    lpszResourceName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterGroupCloseEnum(
    hGroupEnum: *_HGROUPENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CreateClusterResource(
    hGroup: *_HGROUP,
    lpszResourceName: [*:0]const u16,
    lpszResourceType: [*:0]const u16,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub extern "CLUSAPI" fn OpenClusterResource(
    hCluster: *_HCLUSTER,
    lpszResourceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub extern "CLUSAPI" fn OpenClusterResourceEx(
    hCluster: *_HCLUSTER,
    lpszResourceName: ?[*:0]const u16,
    dwDesiredAccess: u32,
    lpdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub extern "CLUSAPI" fn CloseClusterResource(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CLUSAPI" fn GetClusterFromResource(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub extern "CLUSAPI" fn DeleteClusterResource(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetClusterResourceState(
    hResource: *_HRESOURCE,
    lpszNodeName: ?[*:0]u16,
    lpcchNodeName: ?*u32,
    lpszGroupName: ?[*:0]u16,
    lpcchGroupName: ?*u32,
) callconv(@import("std").os.windows.WINAPI) CLUSTER_RESOURCE_STATE;

pub extern "CLUSAPI" fn SetClusterResourceName(
    hResource: *_HRESOURCE,
    lpszResourceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn FailClusterResource(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn OnlineClusterResource(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn OfflineClusterResource(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ChangeClusterResourceGroup(
    hResource: *_HRESOURCE,
    hGroup: *_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ChangeClusterResourceGroupEx(
    hResource: *_HRESOURCE,
    hGroup: *_HGROUP,
    Flags: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn AddClusterResourceNode(
    hResource: *_HRESOURCE,
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn RemoveClusterResourceNode(
    hResource: *_HRESOURCE,
    hNode: *_HNODE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn AddClusterResourceDependency(
    hResource: *_HRESOURCE,
    hDependsOn: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn RemoveClusterResourceDependency(
    hResource: *_HRESOURCE,
    hDependsOn: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn SetClusterResourceDependencyExpression(
    hResource: *_HRESOURCE,
    lpszDependencyExpression: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetClusterResourceDependencyExpression(
    hResource: *_HRESOURCE,
    lpszDependencyExpression: ?[*:0]u16,
    lpcchDependencyExpression: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn AddResourceToClusterSharedVolumes(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn RemoveResourceFromClusterSharedVolumes(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn IsFileOnClusterSharedVolume(
    lpszPathName: [*:0]const u16,
    pbFileIsOnSharedVolume: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterSharedVolumeSetSnapshotState(
    guidSnapshotSet: Guid,
    lpszVolumeName: [*:0]const u16,
    state: CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CanResourceBeDependent(
    hResource: *_HRESOURCE,
    hResourceDependent: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CLUSAPI" fn ClusterResourceControl(
    hResource: *_HRESOURCE,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    cbInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    cbOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterResourceControlAsUser(
    hResource: *_HRESOURCE,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    cbInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    cbOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterResourceTypeControl(
    hCluster: *_HCLUSTER,
    lpszResourceTypeName: [*:0]const u16,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterResourceTypeControlAsUser(
    hCluster: *_HCLUSTER,
    lpszResourceTypeName: [*:0]const u16,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterGroupControl(
    hGroup: *_HGROUP,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterNodeControl(
    hNode: *_HNODE,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetClusterResourceNetworkName(
    hResource: *_HRESOURCE,
    lpBuffer: [*:0]u16,
    nSize: *u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CLUSAPI" fn ClusterResourceOpenEnum(
    hResource: *_HRESOURCE,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESENUM;

pub extern "CLUSAPI" fn ClusterResourceGetEnumCount(
    hResEnum: *_HRESENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterResourceEnum(
    hResEnum: *_HRESENUM,
    dwIndex: u32,
    lpdwType: *u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterResourceCloseEnum(
    hResEnum: *_HRESENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CreateClusterResourceType(
    hCluster: *_HCLUSTER,
    lpszResourceTypeName: [*:0]const u16,
    lpszDisplayName: [*:0]const u16,
    lpszResourceTypeDll: [*:0]const u16,
    dwLooksAlivePollInterval: u32,
    dwIsAlivePollInterval: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn DeleteClusterResourceType(
    hCluster: *_HCLUSTER,
    lpszResourceTypeName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterResourceTypeOpenEnum(
    hCluster: *_HCLUSTER,
    lpszResourceTypeName: [*:0]const u16,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESTYPEENUM;

pub extern "CLUSAPI" fn ClusterResourceTypeGetEnumCount(
    hResTypeEnum: *_HRESTYPEENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterResourceTypeEnum(
    hResTypeEnum: *_HRESTYPEENUM,
    dwIndex: u32,
    lpdwType: *u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterResourceTypeCloseEnum(
    hResTypeEnum: *_HRESTYPEENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn OpenClusterNetwork(
    hCluster: *_HCLUSTER,
    lpszNetworkName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HNETWORK;

pub extern "CLUSAPI" fn OpenClusterNetworkEx(
    hCluster: *_HCLUSTER,
    lpszNetworkName: ?[*:0]const u16,
    dwDesiredAccess: u32,
    lpdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *_HNETWORK;

pub extern "CLUSAPI" fn CloseClusterNetwork(
    hNetwork: *_HNETWORK,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CLUSAPI" fn GetClusterFromNetwork(
    hNetwork: *_HNETWORK,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub extern "CLUSAPI" fn ClusterNetworkOpenEnum(
    hNetwork: *_HNETWORK,
    dwType: u32,
) callconv(@import("std").os.windows.WINAPI) *_HNETWORKENUM;

pub extern "CLUSAPI" fn ClusterNetworkGetEnumCount(
    hNetworkEnum: *_HNETWORKENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterNetworkEnum(
    hNetworkEnum: *_HNETWORKENUM,
    dwIndex: u32,
    lpdwType: *u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterNetworkCloseEnum(
    hNetworkEnum: *_HNETWORKENUM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetClusterNetworkState(
    hNetwork: *_HNETWORK,
) callconv(@import("std").os.windows.WINAPI) CLUSTER_NETWORK_STATE;

pub extern "CLUSAPI" fn SetClusterNetworkName(
    hNetwork: *_HNETWORK,
    lpszName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetClusterNetworkId(
    hNetwork: *_HNETWORK,
    lpszNetworkId: [*:0]u16,
    lpcchName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterNetworkControl(
    hNetwork: *_HNETWORK,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn OpenClusterNetInterface(
    hCluster: *_HCLUSTER,
    lpszInterfaceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HNETINTERFACE;

pub extern "CLUSAPI" fn OpenClusterNetInterfaceEx(
    hCluster: *_HCLUSTER,
    lpszInterfaceName: ?[*:0]const u16,
    dwDesiredAccess: u32,
    lpdwGrantedAccess: ?*u32,
) callconv(@import("std").os.windows.WINAPI) *_HNETINTERFACE;

pub extern "CLUSAPI" fn GetClusterNetInterface(
    hCluster: *_HCLUSTER,
    lpszNodeName: [*:0]const u16,
    lpszNetworkName: [*:0]const u16,
    lpszInterfaceName: [*:0]u16,
    lpcchInterfaceName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CloseClusterNetInterface(
    hNetInterface: *_HNETINTERFACE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "CLUSAPI" fn GetClusterFromNetInterface(
    hNetInterface: *_HNETINTERFACE,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub extern "CLUSAPI" fn GetClusterNetInterfaceState(
    hNetInterface: *_HNETINTERFACE,
) callconv(@import("std").os.windows.WINAPI) CLUSTER_NETINTERFACE_STATE;

pub extern "CLUSAPI" fn ClusterNetInterfaceControl(
    hNetInterface: *_HNETINTERFACE,
    hHostNode: ?*_HNODE,
    dwControlCode: u32,
    lpInBuffer: ?[*]u8,
    nInBufferSize: u32,
    lpOutBuffer: ?[*]u8,
    nOutBufferSize: u32,
    lpBytesReturned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetClusterKey(
    hCluster: *_HCLUSTER,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub extern "CLUSAPI" fn GetClusterGroupKey(
    hGroup: *_HGROUP,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub extern "CLUSAPI" fn GetClusterResourceKey(
    hResource: *_HRESOURCE,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub extern "CLUSAPI" fn GetClusterNodeKey(
    hNode: *_HNODE,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub extern "CLUSAPI" fn GetClusterNetworkKey(
    hNetwork: *_HNETWORK,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub extern "CLUSAPI" fn GetClusterNetInterfaceKey(
    hNetInterface: *_HNETINTERFACE,
    samDesired: u32,
) callconv(@import("std").os.windows.WINAPI) HKEY;

pub extern "CLUSAPI" fn ClusterRegCreateKey(
    hKey: HKEY,
    lpszSubKey: [*:0]const u16,
    dwOptions: u32,
    samDesired: u32,
    lpSecurityAttributes: ?*SECURITY_ATTRIBUTES,
    phkResult: *HKEY,
    lpdwDisposition: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegOpenKey(
    hKey: HKEY,
    lpszSubKey: [*:0]const u16,
    samDesired: u32,
    phkResult: *HKEY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegDeleteKey(
    hKey: HKEY,
    lpszSubKey: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegCloseKey(
    hKey: HKEY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegEnumKey(
    hKey: HKEY,
    dwIndex: u32,
    lpszName: [*:0]u16,
    lpcchName: *u32,
    lpftLastWriteTime: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegSetValue(
    hKey: HKEY,
    lpszValueName: [*:0]const u16,
    dwType: u32,
    lpData: *const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterRegDeleteValue(
    hKey: HKEY,
    lpszValueName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterRegQueryValue(
    hKey: HKEY,
    lpszValueName: [*:0]const u16,
    lpdwValueType: ?*u32,
    lpData: ?[*:0]u8,
    lpcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegEnumValue(
    hKey: HKEY,
    dwIndex: u32,
    lpszValueName: [*:0]u16,
    lpcchValueName: *u32,
    lpdwType: ?*u32,
    lpData: ?[*:0]u8,
    lpcbData: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn ClusterRegQueryInfoKey(
    hKey: HKEY,
    lpcSubKeys: *u32,
    lpcchMaxSubKeyLen: *u32,
    lpcValues: *u32,
    lpcchMaxValueNameLen: *u32,
    lpcbMaxValueLen: *u32,
    lpcbSecurityDescriptor: *u32,
    lpftLastWriteTime: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegGetKeySecurity(
    hKey: HKEY,
    RequestedInformation: u32,
    pSecurityDescriptor: [*]u8,
    lpcbSecurityDescriptor: *u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegSetKeySecurity(
    hKey: HKEY,
    SecurityInformation: u32,
    pSecurityDescriptor: *c_void,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegSyncDatabase(
    hCluster: *_HCLUSTER,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegCreateBatch(
    hKey: HKEY,
    pHREGBATCH: **_HREGBATCH,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegBatchAddCommand(
    hRegBatch: *_HREGBATCH,
    dwCommand: CLUSTER_REG_COMMAND,
    wzName: ?[*:0]const u16,
    dwOptions: u32,
    lpData: ?[*]const u8,
    cbData: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegCloseBatch(
    hRegBatch: *_HREGBATCH,
    bCommit: BOOL,
    failedCommandNumber: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegCloseBatchEx(
    hRegBatch: *_HREGBATCH,
    flags: u32,
    failedCommandNumber: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegBatchReadCommand(
    hBatchNotification: *_HREGBATCHNOTIFICATION,
    pBatchCommand: *CLUSTER_BATCH_COMMAND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegBatchCloseNotification(
    hBatchNotification: *_HREGBATCHNOTIFICATION,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegCreateBatchNotifyPort(
    hKey: HKEY,
    phBatchNotifyPort: **_HREGBATCHPORT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegCloseBatchNotifyPort(
    hBatchNotifyPort: *_HREGBATCHPORT,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegGetBatchNotification(
    hBatchNotify: *_HREGBATCHPORT,
    phBatchNotification: **_HREGBATCHNOTIFICATION,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegCreateReadBatch(
    hKey: HKEY,
    phRegReadBatch: **_HREGREADBATCH,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegReadBatchAddCommand(
    hRegReadBatch: *_HREGREADBATCH,
    wzSubkeyName: [*:0]const u16,
    wzValueName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegCloseReadBatch(
    hRegReadBatch: *_HREGREADBATCH,
    phRegReadBatchReply: **_HREGREADBATCHREPLY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegCloseReadBatchEx(
    hRegReadBatch: *_HREGREADBATCH,
    flags: u32,
    phRegReadBatchReply: **_HREGREADBATCHREPLY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegReadBatchReplyNextCommand(
    hRegReadBatchReply: *_HREGREADBATCHREPLY,
    pBatchCommand: *CLUSTER_READ_BATCH_COMMAND,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterRegCloseReadBatchReply(
    hRegReadBatchReply: *_HREGREADBATCHREPLY,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "CLUSAPI" fn ClusterSetAccountAccess(
    hCluster: *_HCLUSTER,
    szAccountSID: [*:0]const u16,
    dwAccess: u32,
    dwControlType: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn CreateCluster(
    pConfig: *CREATE_CLUSTER_CONFIG,
    pfnProgressCallback: ?PCLUSTER_SETUP_PROGRESS_CALLBACK,
    pvCallbackArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSTER;

pub extern "CLUSAPI" fn CreateClusterNameAccount(
    hCluster: *_HCLUSTER,
    pConfig: *CREATE_CLUSTER_NAME_ACCOUNT,
    pfnProgressCallback: ?PCLUSTER_SETUP_PROGRESS_CALLBACK,
    pvCallbackArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn RemoveClusterNameAccount(
    hCluster: *_HCLUSTER,
    bDeleteComputerObjects: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn DetermineCNOResTypeFromNodelist(
    cNodes: u32,
    ppszNodeNames: *PWSTR,
    pCNOResType: *CLUSTER_MGMT_POINT_RESTYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn DetermineCNOResTypeFromCluster(
    hCluster: *_HCLUSTER,
    pCNOResType: *CLUSTER_MGMT_POINT_RESTYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn DetermineClusterCloudTypeFromNodelist(
    cNodes: u32,
    ppszNodeNames: *PWSTR,
    pCloudType: *CLUSTER_CLOUD_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn DetermineClusterCloudTypeFromCluster(
    hCluster: *_HCLUSTER,
    pCloudType: *CLUSTER_CLOUD_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn GetNodeCloudTypeDW(
    ppszNodeName: [*:0]const u16,
    NodeCloudType: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn RegisterClusterResourceTypeNotifyV2(
    hChange: *_HCHANGE,
    hCluster: *_HCLUSTER,
    Flags: i64,
    resTypeName: [*:0]const u16,
    dwNotifyKey: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn AddClusterNode(
    hCluster: *_HCLUSTER,
    lpszNodeName: [*:0]const u16,
    pfnProgressCallback: ?PCLUSTER_SETUP_PROGRESS_CALLBACK,
    pvCallbackArg: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) *_HNODE;

pub extern "CLUSAPI" fn AddClusterStorageNode(
    hCluster: *_HCLUSTER,
    lpszNodeName: [*:0]const u16,
    pfnProgressCallback: ?PCLUSTER_SETUP_PROGRESS_CALLBACK,
    pvCallbackArg: ?*c_void,
    lpszClusterStorageNodeDescription: ?[*:0]const u16,
    lpszClusterStorageNodeLocation: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn RemoveClusterStorageNode(
    hCluster: *_HCLUSTER,
    lpszClusterStorageEnclosureName: [*:0]const u16,
    dwTimeout: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "CLUSAPI" fn DestroyCluster(
    hCluster: *_HCLUSTER,
    pfnProgressCallback: ?PCLUSTER_SETUP_PROGRESS_CALLBACK,
    pvCallbackArg: ?*c_void,
    fdeleteVirtualComputerObjects: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn InitializeClusterHealthFault(
    clusterHealthFault: *CLUSTER_HEALTH_FAULT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn InitializeClusterHealthFaultArray(
    clusterHealthFaultArray: *CLUSTER_HEALTH_FAULT_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn FreeClusterHealthFault(
    clusterHealthFault: *CLUSTER_HEALTH_FAULT,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn FreeClusterHealthFaultArray(
    clusterHealthFaultArray: *CLUSTER_HEALTH_FAULT_ARRAY,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ClusGetClusterHealthFaults(
    hCluster: *_HCLUSTER,
    objects: *CLUSTER_HEALTH_FAULT_ARRAY,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ClusRemoveClusterHealthFault(
    hCluster: *_HCLUSTER,
    id: [*:0]const u16,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ClusAddClusterHealthFault(
    hCluster: *_HCLUSTER,
    failure: *CLUSTER_HEALTH_FAULT,
    param2: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilStartResourceService(
    pszServiceName: [*:0]const u16,
    phServiceHandle: **SC_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilVerifyResourceService(
    pszServiceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilStopResourceService(
    pszServiceName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilVerifyService(
    hServiceHandle: *SC_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilStopService(
    hServiceHandle: *SC_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilCreateDirectoryTree(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilIsPathValid(
    pszPath: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RESUTILS" fn ResUtilEnumProperties(
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pszOutProperties: [*:0]u16,
    cbOutPropertiesSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilEnumPrivateProperties(
    hkeyClusterKey: HKEY,
    pszOutProperties: [*:0]u16,
    cbOutPropertiesSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetProperties(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pOutPropertyList: [*]u8,
    cbOutPropertyListSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetAllProperties(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pOutPropertyList: [*]u8,
    cbOutPropertyListSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetPrivateProperties(
    hkeyClusterKey: HKEY,
    pOutPropertyList: [*]u8,
    cbOutPropertyListSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetPropertySize(
    hkeyClusterKey: HKEY,
    pPropertyTableItem: *const RESUTIL_PROPERTY_ITEM,
    pcbOutPropertyListSize: *u32,
    pnPropertyCount: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetProperty(
    hkeyClusterKey: HKEY,
    pPropertyTableItem: *const RESUTIL_PROPERTY_ITEM,
    pOutPropertyItem: [*]*c_void,
    pcbOutPropertyItemSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilVerifyPropertyTable(
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    Reserved: *c_void,
    bAllowUnknownProperties: BOOL,
    pInPropertyList: [*]const u8,
    cbInPropertyListSize: u32,
    pOutParams: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetPropertyTable(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    Reserved: *c_void,
    bAllowUnknownProperties: BOOL,
    pInPropertyList: [*]const u8,
    cbInPropertyListSize: u32,
    pOutParams: ?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetPropertyTableEx(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    Reserved: *c_void,
    bAllowUnknownProperties: BOOL,
    pInPropertyList: *const c_void,
    cbInPropertyListSize: u32,
    bForceWrite: BOOL,
    pOutParams: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetPropertyParameterBlock(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    Reserved: *c_void,
    pInParams: *const u8,
    pInPropertyList: *const c_void,
    cbInPropertyListSize: u32,
    pOutParams: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetPropertyParameterBlockEx(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    Reserved: *c_void,
    pInParams: *const u8,
    pInPropertyList: *const c_void,
    cbInPropertyListSize: u32,
    bForceWrite: BOOL,
    pOutParams: *u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetUnknownProperties(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pInPropertyList: [*]const u8,
    cbInPropertyListSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetPropertiesToParameterBlock(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pOutParams: *u8,
    bCheckForRequiredProperties: BOOL,
    pszNameOfPropInError: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilPropertyListFromParameterBlock(
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pOutPropertyList: ?[*]u8,
    pcbOutPropertyListSize: *u32,
    pInParams: *const u8,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilDupParameterBlock(
    pOutParams: *u8,
    pInParams: *const u8,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilFreeParameterBlock(
    pOutParams: *u8,
    pInParams: *const u8,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RESUTILS" fn ResUtilAddUnknownProperties(
    hkeyClusterKey: HKEY,
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pOutPropertyList: *c_void,
    pcbOutPropertyListSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetPrivatePropertyList(
    hkeyClusterKey: HKEY,
    pInPropertyList: [*]const u8,
    cbInPropertyListSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilVerifyPrivatePropertyList(
    pInPropertyList: [*]const u8,
    cbInPropertyListSize: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilDupString(
    pszInString: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "RESUTILS" fn ResUtilGetBinaryValue(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    ppbOutValue: ?[*]?*u8,
    pcbOutValueSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetSzValue(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "RESUTILS" fn ResUtilGetDwordValue(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    pdwOutValue: *u32,
    dwDefaultValue: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetQwordValue(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    pqwOutValue: *u64,
    qwDefaultValue: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetBinaryValue(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    pbNewValue: [*:0]const u8,
    cbNewValueSize: u32,
    ppbOutValue: ?[*]?*u8,
    pcbOutValueSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetSzValue(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    pszNewValue: [*:0]const u16,
    ppszOutString: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetExpandSzValue(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    pszNewValue: [*:0]const u16,
    ppszOutString: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetMultiSzValue(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    pszNewValue: [*:0]const u16,
    cbNewValueSize: u32,
    ppszOutValue: ?[*]?PWSTR,
    pcbOutValueSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetDwordValue(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    dwNewValue: u32,
    pdwOutValue: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetQwordValue(
    hkeyClusterKey: HKEY,
    pszValueName: [*:0]const u16,
    qwNewValue: u64,
    pqwOutValue: ?*u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetValueEx(
    hkeyClusterKey: HKEY,
    valueName: [*:0]const u16,
    valueType: u32,
    valueData: [*:0]const u8,
    valueSize: u32,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetBinaryProperty(
    ppbOutValue: **u8,
    pcbOutValueSize: *u32,
    pValueStruct: *const CLUSPROP_BINARY,
    pbOldValue: ?[*:0]const u8,
    cbOldValueSize: u32,
    ppPropertyList: [*]*u8,
    pcbPropertyListSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetSzProperty(
    ppszOutValue: *PWSTR,
    pValueStruct: *const CLUSPROP_SZ,
    pszOldValue: ?[*:0]const u16,
    ppPropertyList: [*]*u8,
    pcbPropertyListSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetMultiSzProperty(
    ppszOutValue: *PWSTR,
    pcbOutValueSize: *u32,
    pValueStruct: *const CLUSPROP_SZ,
    pszOldValue: ?[*:0]const u16,
    cbOldValueSize: u32,
    ppPropertyList: [*]*u8,
    pcbPropertyListSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetDwordProperty(
    pdwOutValue: *u32,
    pValueStruct: *const CLUSPROP_DWORD,
    dwOldValue: u32,
    dwMinimum: u32,
    dwMaximum: u32,
    ppPropertyList: **u8,
    pcbPropertyListSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetLongProperty(
    plOutValue: *i32,
    pValueStruct: *const CLUSPROP_LONG,
    lOldValue: i32,
    lMinimum: i32,
    lMaximum: i32,
    ppPropertyList: **u8,
    pcbPropertyListSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetFileTimeProperty(
    pftOutValue: *FILETIME,
    pValueStruct: *const CLUSPROP_FILETIME,
    ftOldValue: FILETIME,
    ftMinimum: FILETIME,
    ftMaximum: FILETIME,
    ppPropertyList: **u8,
    pcbPropertyListSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetEnvironmentWithNetName(
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) *c_void;

pub extern "RESUTILS" fn ResUtilFreeEnvironment(
    lpEnvironment: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilExpandEnvironmentStrings(
    pszSrc: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) PWSTR;

pub extern "RESUTILS" fn ResUtilSetResourceServiceEnvironment(
    pszServiceName: [*:0]const u16,
    hResource: *_HRESOURCE,
    pfnLogEvent: PLOG_EVENT_ROUTINE,
    hResourceHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilRemoveResourceServiceEnvironment(
    pszServiceName: [*:0]const u16,
    pfnLogEvent: PLOG_EVENT_ROUTINE,
    hResourceHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetResourceServiceStartParameters(
    pszServiceName: [*:0]const u16,
    schSCMHandle: *SC_HANDLE__,
    phService: **SC_HANDLE__,
    pfnLogEvent: PLOG_EVENT_ROUTINE,
    hResourceHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilFindSzProperty(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pszPropertyValue: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilFindExpandSzProperty(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pszPropertyValue: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilFindExpandedSzProperty(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pszPropertyValue: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilFindDwordProperty(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pdwPropertyValue: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilFindBinaryProperty(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pbPropertyValue: ?[*]?*u8,
    pcbPropertyValueSize: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilFindMultiSzProperty(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pszPropertyValue: [*]PWSTR,
    pcbPropertyValueSize: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilFindLongProperty(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    plPropertyValue: *i32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilFindULargeIntegerProperty(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    plPropertyValue: *u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilFindFileTimeProperty(
    pPropertyList: [*]const u8,
    cbPropertyListSize: u32,
    pszPropertyName: [*:0]const u16,
    pftPropertyValue: *FILETIME,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ClusWorkerCreate(
    lpWorker: *CLUS_WORKER,
    lpStartAddress: PWORKER_START_ROUTINE,
    lpParameter: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ClusWorkerCheckTerminate(
    lpWorker: *CLUS_WORKER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RESUTILS" fn ClusWorkerTerminate(
    lpWorker: *CLUS_WORKER,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "RESUTILS" fn ClusWorkerTerminateEx(
    ClusWorker: *CLUS_WORKER,
    TimeoutInMilliseconds: u32,
    WaitOnly: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ClusWorkersTerminate(
    ClusWorkers: [*]*CLUS_WORKER,
    ClusWorkersCount: ?*c_void,
    TimeoutInMilliseconds: u32,
    WaitOnly: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilResourcesEqual(
    hSelf: *_HRESOURCE,
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RESUTILS" fn ResUtilResourceTypesEqual(
    lpszResourceTypeName: [*:0]const u16,
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RESUTILS" fn ResUtilIsResourceClassEqual(
    prci: *CLUS_RESOURCE_CLASS_INFO,
    hResource: *_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RESUTILS" fn ResUtilEnumResources(
    hSelf: *_HRESOURCE,
    lpszResTypeName: [*:0]const u16,
    pResCallBack: LPRESOURCE_CALLBACK,
    pParameter: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilEnumResourcesEx(
    hCluster: *_HCLUSTER,
    hSelf: *_HRESOURCE,
    lpszResTypeName: [*:0]const u16,
    pResCallBack: LPRESOURCE_CALLBACK_EX,
    pParameter: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetResourceDependency(
    hSelf: HANDLE,
    lpszResourceType: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub extern "RESUTILS" fn ResUtilGetResourceDependencyByName(
    hCluster: *_HCLUSTER,
    hSelf: HANDLE,
    lpszResourceType: [*:0]const u16,
    bRecurse: BOOL,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub extern "RESUTILS" fn ResUtilGetResourceDependencyByClass(
    hCluster: *_HCLUSTER,
    hSelf: HANDLE,
    prci: *CLUS_RESOURCE_CLASS_INFO,
    bRecurse: BOOL,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub extern "RESUTILS" fn ResUtilGetResourceNameDependency(
    lpszResourceName: [*:0]const u16,
    lpszResourceType: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub extern "RESUTILS" fn ResUtilGetResourceDependentIPAddressProps(
    hResource: *_HRESOURCE,
    pszAddress: [*:0]u16,
    pcchAddress: *u32,
    pszSubnetMask: [*:0]u16,
    pcchSubnetMask: *u32,
    pszNetwork: [*:0]u16,
    pcchNetwork: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilFindDependentDiskResourceDriveLetter(
    hCluster: *_HCLUSTER,
    hResource: *_HRESOURCE,
    pszDriveLetter: [*:0]u16,
    pcchDriveLetter: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilTerminateServiceProcessFromResDll(
    dwServicePid: u32,
    bOffline: BOOL,
    pdwResourceState: *u32,
    pfnLogEvent: PLOG_EVENT_ROUTINE,
    hResourceHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetPropertyFormats(
    pPropertyTable: *const RESUTIL_PROPERTY_ITEM,
    pOutPropertyFormatList: [*]u8,
    cbPropertyFormatListSize: u32,
    pcbBytesReturned: *u32,
    pcbRequired: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetCoreClusterResources(
    hCluster: *_HCLUSTER,
    phClusterNameResource: **_HRESOURCE,
    phClusterIPAddressResource: **_HRESOURCE,
    phClusterQuorumResource: **_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetResourceName(
    hResource: *_HRESOURCE,
    pszResourceName: [*:0]u16,
    pcchResourceNameInOut: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetClusterRoleState(
    hCluster: *_HCLUSTER,
    eClusterRole: CLUSTER_ROLE,
) callconv(@import("std").os.windows.WINAPI) CLUSTER_ROLE_STATE;

pub extern "RESUTILS" fn ClusterIsPathOnSharedVolume(
    lpszPathName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RESUTILS" fn ClusterGetVolumePathName(
    lpszFileName: [*:0]const u16,
    lpszVolumePathName: PWSTR,
    cchBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RESUTILS" fn ClusterGetVolumeNameForVolumeMountPoint(
    lpszVolumeMountPoint: [*:0]const u16,
    lpszVolumeName: PWSTR,
    cchBufferLength: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RESUTILS" fn ClusterPrepareSharedVolumeForBackup(
    lpszFileName: [*:0]const u16,
    lpszVolumePathName: PWSTR,
    lpcchVolumePathName: *u32,
    lpszVolumeName: PWSTR,
    lpcchVolumeName: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ClusterClearBackupStateForSharedVolume(
    lpszVolumePathName: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilSetResourceServiceStartParametersEx(
    pszServiceName: [*:0]const u16,
    schSCMHandle: *SC_HANDLE__,
    phService: **SC_HANDLE__,
    dwDesiredAccess: u32,
    pfnLogEvent: PLOG_EVENT_ROUTINE,
    hResourceHandle: ?*c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilEnumResourcesEx2(
    hCluster: *_HCLUSTER,
    hSelf: *_HRESOURCE,
    lpszResTypeName: [*:0]const u16,
    pResCallBack: LPRESOURCE_CALLBACK_EX,
    pParameter: *c_void,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetResourceDependencyEx(
    hSelf: HANDLE,
    lpszResourceType: [*:0]const u16,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub extern "RESUTILS" fn ResUtilGetResourceDependencyByNameEx(
    hCluster: *_HCLUSTER,
    hSelf: HANDLE,
    lpszResourceType: [*:0]const u16,
    bRecurse: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub extern "RESUTILS" fn ResUtilGetResourceDependencyByClassEx(
    hCluster: *_HCLUSTER,
    hSelf: HANDLE,
    prci: *CLUS_RESOURCE_CLASS_INFO,
    bRecurse: BOOL,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub extern "RESUTILS" fn ResUtilGetResourceNameDependencyEx(
    lpszResourceName: [*:0]const u16,
    lpszResourceType: [*:0]const u16,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) *_HRESOURCE;

pub extern "RESUTILS" fn ResUtilGetCoreClusterResourcesEx(
    hClusterIn: *_HCLUSTER,
    phClusterNameResourceOut: ?*?*_HRESOURCE,
    phClusterQuorumResourceOut: ?*?*_HRESOURCE,
    dwDesiredAccess: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn OpenClusterCryptProvider(
    lpszResource: [*:0]const u16,
    lpszProvider: *i8,
    dwType: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSCRYPTPROVIDER;

pub extern "RESUTILS" fn OpenClusterCryptProviderEx(
    lpszResource: [*:0]const u16,
    lpszKeyname: [*:0]const u16,
    lpszProvider: *i8,
    dwType: u32,
    dwFlags: u32,
) callconv(@import("std").os.windows.WINAPI) *_HCLUSCRYPTPROVIDER;

pub extern "RESUTILS" fn CloseClusterCryptProvider(
    hClusCryptProvider: *_HCLUSCRYPTPROVIDER,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ClusterEncrypt(
    hClusCryptProvider: *_HCLUSCRYPTPROVIDER,
    pData: [*:0]u8,
    cbData: u32,
    ppData: **u8,
    pcbData: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ClusterDecrypt(
    hClusCryptProvider: *_HCLUSCRYPTPROVIDER,
    pCryptInput: *u8,
    cbCryptInput: u32,
    ppCryptOutput: **u8,
    pcbCryptOutput: *u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn FreeClusterCrypt(
    pCryptInfo: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilPaxosComparer(
    left: *const PaxosTagCStruct,
    right: *const PaxosTagCStruct,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RESUTILS" fn ResUtilLeftPaxosIsLessThanRight(
    left: *const PaxosTagCStruct,
    right: *const PaxosTagCStruct,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "RESUTILS" fn ResUtilsDeleteKeyTree(
    key: HKEY,
    keyName: [*:0]const u16,
    treatNoKeyAsError: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGroupsEqual(
    hSelf: *_HGROUP,
    hGroup: *_HGROUP,
    pEqual: *BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilEnumGroups(
    hCluster: *_HCLUSTER,
    hSelf: *_HGROUP,
    pResCallBack: LPGROUP_CALLBACK_EX,
    pParameter: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilEnumGroupsEx(
    hCluster: *_HCLUSTER,
    hSelf: *_HGROUP,
    groupType: CLUSGROUP_TYPE,
    pResCallBack: LPGROUP_CALLBACK_EX,
    pParameter: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilDupGroup(
    group: *_HGROUP,
    copy: **_HGROUP,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetClusterGroupType(
    hGroup: *_HGROUP,
    groupType: *CLUSGROUP_TYPE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetCoreGroup(
    hCluster: *_HCLUSTER,
) callconv(@import("std").os.windows.WINAPI) *_HGROUP;

pub extern "RESUTILS" fn ResUtilResourceDepEnum(
    hSelf: *_HRESOURCE,
    enumType: u32,
    pResCallBack: LPRESOURCE_CALLBACK_EX,
    pParameter: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilDupResource(
    group: *_HRESOURCE,
    copy: **_HRESOURCE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilGetClusterId(
    hCluster: *_HCLUSTER,
    guid: *Guid,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "RESUTILS" fn ResUtilNodeEnum(
    hCluster: *_HCLUSTER,
    pNodeCallBack: LPNODE_CALLBACK,
    pParameter: *c_void,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NTLANMAN" fn RegisterAppInstance(
    ProcessHandle: HANDLE,
    AppInstanceId: *Guid,
    ChildrenInheritAppInstance: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NTLANMAN" fn RegisterAppInstanceVersion(
    AppInstanceId: *Guid,
    InstanceVersionHigh: u64,
    InstanceVersionLow: u64,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NTLANMAN" fn QueryAppInstanceVersion(
    AppInstanceId: *Guid,
    InstanceVersionHigh: *u64,
    InstanceVersionLow: *u64,
    VersionStatus: *NTSTATUS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NTLANMAN" fn ResetAllAppInstanceVersions(
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "NTLANMAN" fn SetAppInstanceCsvFlags(
    ProcessHandle: HANDLE,
    Mask: u32,
    Flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;


//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (19)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const HKEY = @import("windows_programming.zig").HKEY;
const ULARGE_INTEGER = @import("system_services.zig").ULARGE_INTEGER;
const PWSTR = @import("system_services.zig").PWSTR;
const FILETIME = @import("windows_programming.zig").FILETIME;
const IDispatch = @import("automation.zig").IDispatch;
const IUnknown = @import("com.zig").IUnknown;
const HRESULT = @import("com.zig").HRESULT;
const SECURITY_ATTRIBUTES = @import("system_services.zig").SECURITY_ATTRIBUTES;
const BSTR = @import("automation.zig").BSTR;
const HFONT = @import("gdi.zig").HFONT;
const BOOL = @import("system_services.zig").BOOL;
const LARGE_INTEGER = @import("system_services.zig").LARGE_INTEGER;
const VARIANT = @import("automation.zig").VARIANT;
const SYSTEMTIME = @import("windows_programming.zig").SYSTEMTIME;
const HANDLE = @import("system_services.zig").HANDLE;
const SC_HANDLE__ = @import("security.zig").SC_HANDLE__;
const HICON = @import("menus_and_resources.zig").HICON;
const NTSTATUS = @import("system_services.zig").NTSTATUS;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    _ = PCLUSAPI_GET_NODE_CLUSTER_STATE;
    _ = PCLUSAPI_OPEN_CLUSTER;
    _ = PCLUSAPI_OPEN_CLUSTER_EX;
    _ = PCLUSAPI_CLOSE_CLUSTER;
    _ = PCLUSAPI_SetClusterName;
    _ = PCLUSAPI_GET_CLUSTER_INFORMATION;
    _ = PCLUSAPI_GET_CLUSTER_QUORUM_RESOURCE;
    _ = PCLUSAPI_SET_CLUSTER_QUORUM_RESOURCE;
    _ = PCLUSAPI_BACKUP_CLUSTER_DATABASE;
    _ = PCLUSAPI_RESTORE_CLUSTER_DATABASE;
    _ = PCLUSAPI_SET_CLUSTER_NETWORK_PRIORITY_ORDER;
    _ = PCLUSAPI_SET_CLUSTER_SERVICE_ACCOUNT_PASSWORD;
    _ = PCLUSAPI_CLUSTER_CONTROL;
    _ = PCLUSTER_UPGRADE_PROGRESS_CALLBACK;
    _ = PCLUSAPI_CLUSTER_UPGRADE;
    _ = PCLUSAPI_CREATE_CLUSTER_NOTIFY_PORT_V2;
    _ = PCLUSAPI_REGISTER_CLUSTER_NOTIFY_V2;
    _ = PCLUSAPI_GET_NOTIFY_EVENT_HANDLE_V2;
    _ = PCLUSAPI_GET_CLUSTER_NOTIFY_V2;
    _ = PCLUSAPI_CREATE_CLUSTER_NOTIFY_PORT;
    _ = PCLUSAPI_REGISTER_CLUSTER_NOTIFY;
    _ = PCLUSAPI_GET_CLUSTER_NOTIFY;
    _ = PCLUSAPI_CLOSE_CLUSTER_NOTIFY_PORT;
    _ = PCLUSAPI_CLUSTER_OPEN_ENUM;
    _ = PCLUSAPI_CLUSTER_GET_ENUM_COUNT;
    _ = PCLUSAPI_CLUSTER_ENUM;
    _ = PCLUSAPI_CLUSTER_CLOSE_ENUM;
    _ = PCLUSAPI_CLUSTER_OPEN_ENUM_EX;
    _ = PCLUSAPI_CLUSTER_GET_ENUM_COUNT_EX;
    _ = PCLUSAPI_CLUSTER_ENUM_EX;
    _ = PCLUSAPI_CLUSTER_CLOSE_ENUM_EX;
    _ = PCLUSAPI_CREATE_CLUSTER_GROUP_GROUPSET;
    _ = PCLUSAPI_OPEN_CLUSTER_GROUP_GROUPSET;
    _ = PCLUSAPI_CLOSE_CLUSTER_GROUP_GROUPSET;
    _ = PCLUSAPI_DELETE_CLUSTER_GROUP_GROUPSET;
    _ = PCLUSAPI_CLUSTER_ADD_GROUP_TO_GROUP_GROUPSET;
    _ = PCLUSAPI_CLUSTER_REMOVE_GROUP_FROM_GROUP_GROUPSET;
    _ = PCLUSAPI_CLUSTER_GROUP_GROUPSET_CONTROL;
    _ = PCLUSAPI_ADD_CLUSTER_GROUP_DEPENDENCY;
    _ = PCLUSAPI_SET_GROUP_DEPENDENCY_EXPRESSION;
    _ = PCLUSAPI_REMOVE_CLUSTER_GROUP_DEPENDENCY;
    _ = PCLUSAPI_ADD_CLUSTER_GROUP_GROUPSET_DEPENDENCY;
    _ = PCLUSAPI_SET_CLUSTER_GROUP_GROUPSET_DEPENDENCY_EXPRESSION;
    _ = PCLUSAPI_REMOVE_CLUSTER_GROUP_GROUPSET_DEPENDENCY;
    _ = PCLUSAPI_ADD_CLUSTER_GROUP_TO_GROUP_GROUPSET_DEPENDENCY;
    _ = PCLUSAPI_REMOVE_CLUSTER_GROUP_TO_GROUP_GROUPSET_DEPENDENCY;
    _ = PCLUSAPI_GET_CLUSTER_FROM_GROUP_GROUPSET;
    _ = PCLUSAPI_ADD_CROSS_CLUSTER_GROUPSET_DEPENDENCY;
    _ = PCLUSAPI_REMOVE_CROSS_CLUSTER_GROUPSET_DEPENDENCY;
    _ = PCLUSAPI_CREATE_CLUSTER_AVAILABILITY_SET;
    _ = PCLUSAPI_CLUSTER_CREATE_AFFINITY_RULE;
    _ = PCLUSAPI_CLUSTER_REMOVE_AFFINITY_RULE;
    _ = PCLUSAPI_CLUSTER_ADD_GROUP_TO_AFFINITY_RULE;
    _ = PCLUSAPI_CLUSTER_REMOVE_GROUP_FROM_AFFINITY_RULE;
    _ = PCLUSAPI_CLUSTER_AFFINITY_RULE_CONTROL;
    _ = PCLUSAPI_OPEN_CLUSTER_NODE;
    _ = PCLUSAPI_OPEN_CLUSTER_NODE_EX;
    _ = PCLUSAPI_OPEN_NODE_BY_ID;
    _ = PCLUSAPI_CLOSE_CLUSTER_NODE;
    _ = PCLUSAPI_GET_CLUSTER_NODE_STATE;
    _ = PCLUSAPI_GET_CLUSTER_NODE_ID;
    _ = PCLUSAPI_GET_CLUSTER_FROM_NODE;
    _ = PCLUSAPI_PAUSE_CLUSTER_NODE;
    _ = PCLUSAPI_RESUME_CLUSTER_NODE;
    _ = PCLUSAPI_EVICT_CLUSTER_NODE;
    _ = PCLUSAPI_CLUSTER_NODE_OPEN_ENUM;
    _ = PCLUSAPI_CLUSTER_NODE_OPEN_ENUM_EX;
    _ = PCLUSAPI_CLUSTER_NODE_GET_ENUM_COUNT_EX;
    _ = PCLUSAPI_CLUSTER_NODE_ENUM_EX;
    _ = PCLUSAPI_CLUSTER_NODE_CLOSE_ENUM_EX;
    _ = PCLUSAPI_CLUSTER_NODE_GET_ENUM_COUNT;
    _ = PCLUSAPI_CLUSTER_NODE_CLOSE_ENUM;
    _ = PCLUSAPI_CLUSTER_NODE_ENUM;
    _ = PCLUSAPI_EVICT_CLUSTER_NODE_EX;
    _ = PCLUSAPI_GET_CLUSTER_RESOURCE_TYPE_KEY;
    _ = PCLUSAPI_CREATE_CLUSTER_GROUP;
    _ = PCLUSAPI_OPEN_CLUSTER_GROUP;
    _ = PCLUSAPI_OPEN_CLUSTER_GROUP_EX;
    _ = PCLUSAPI_PAUSE_CLUSTER_NODE_EX;
    _ = PCLUSAPI_RESUME_CLUSTER_NODE_EX;
    _ = PCLUSAPI_CREATE_CLUSTER_GROUPEX;
    _ = PCLUSAPI_CLUSTER_GROUP_OPEN_ENUM_EX;
    _ = PCLUSAPI_CLUSTER_GROUP_GET_ENUM_COUNT_EX;
    _ = PCLUSAPI_CLUSTER_GROUP_ENUM_EX;
    _ = PCLUSAPI_CLUSTER_GROUP_CLOSE_ENUM_EX;
    _ = PCLUSAPI_CLUSTER_RESOURCE_OPEN_ENUM_EX;
    _ = PCLUSAPI_CLUSTER_RESOURCE_GET_ENUM_COUNT_EX;
    _ = PCLUSAPI_CLUSTER_RESOURCE_ENUM_EX;
    _ = PCLUSAPI_CLUSTER_RESOURCE_CLOSE_ENUM_EX;
    _ = PCLUSAPI_RESTART_CLUSTER_RESOURCE;
    _ = PCLUSAPI_CLOSE_CLUSTER_GROUP;
    _ = PCLUSAPI_GET_CLUSTER_FROM_GROUP;
    _ = PCLUSAPI_GET_CLUSTER_GROUP_STATE;
    _ = PCLUSAPI_SET_CLUSTER_GROUP_NAME;
    _ = PCLUSAPI_SET_CLUSTER_GROUP_NODE_LIST;
    _ = PCLUSAPI_ONLINE_CLUSTER_GROUP;
    _ = PCLUSAPI_MOVE_CLUSTER_GROUP;
    _ = PCLUSAPI_OFFLINE_CLUSTER_GROUP;
    _ = PCLUSAPI_DELETE_CLUSTER_GROUP;
    _ = PCLUSAPI_DESTROY_CLUSTER_GROUP;
    _ = PCLUSAPI_CLUSTER_GROUP_OPEN_ENUM;
    _ = PCLUSAPI_CLUSTER_GROUP_GET_ENUM_COUNT;
    _ = PCLUSAPI_CLUSTER_GROUP_ENUM;
    _ = PCLUSAPI_CLUSTER_GROUP_CLOSE_ENUM;
    _ = PCLUSAPI_CREATE_CLUSTER_RESOURCE;
    _ = PCLUSAPI_OPEN_CLUSTER_RESOURCE;
    _ = PCLUSAPI_OPEN_CLUSTER_RESOURCE_EX;
    _ = PCLUSAPI_CLOSE_CLUSTER_RESOURCE;
    _ = PCLUSAPI_GET_CLUSTER_FROM_RESOURCE;
    _ = PCLUSAPI_DELETE_CLUSTER_RESOURCE;
    _ = PCLUSAPI_GET_CLUSTER_RESOURCE_STATE;
    _ = PCLUSAPI_SET_CLUSTER_RESOURCE_NAME;
    _ = PCLUSAPI_FAIL_CLUSTER_RESOURCE;
    _ = PCLUSAPI_ONLINE_CLUSTER_RESOURCE;
    _ = PCLUSAPI_OFFLINE_CLUSTER_RESOURCE;
    _ = PCLUSAPI_CHANGE_CLUSTER_RESOURCE_GROUP;
    _ = PCLUSAPI_CHANGE_CLUSTER_RESOURCE_GROUP_EX;
    _ = PCLUSAPI_ADD_CLUSTER_RESOURCE_NODE;
    _ = PCLUSAPI_REMOVE_CLUSTER_RESOURCE_NODE;
    _ = PCLUSAPI_ADD_CLUSTER_RESOURCE_DEPENDENCY;
    _ = PCLUSAPI_REMOVE_CLUSTER_RESOURCE_DEPENDENCY;
    _ = PCLUSAPI_SET_CLUSTER_RESOURCE_DEPENDENCY_EXPRESSION;
    _ = PCLUSAPI_GET_CLUSTER_RESOURCE_DEPENDENCY_EXPRESSION;
    _ = PCLUSAPI_ADD_RESOURCE_TO_CLUSTER_SHARED_VOLUMES;
    _ = PCLUSAPI_REMOVE_RESOURCE_FROM_CLUSTER_SHARED_VOLUMES;
    _ = PCLUSAPI_IS_FILE_ON_CLUSTER_SHARED_VOLUME;
    _ = PCLUSAPI_SHARED_VOLUME_SET_SNAPSHOT_STATE;
    _ = PCLUSAPI_CAN_RESOURCE_BE_DEPENDENT;
    _ = PCLUSAPI_CLUSTER_RESOURCE_CONTROL;
    _ = PCLUSAPI_CLUSTER_RESOURCE_TYPE_CONTROL;
    _ = PCLUSAPI_CLUSTER_GROUP_CONTROL;
    _ = PCLUSAPI_CLUSTER_NODE_CONTROL;
    _ = PCLUSAPI_GET_CLUSTER_RESOURCE_NETWORK_NAME;
    _ = PCLUSAPI_CLUSTER_RESOURCE_OPEN_ENUM;
    _ = PCLUSAPI_CLUSTER_RESOURCE_GET_ENUM_COUNT;
    _ = PCLUSAPI_CLUSTER_RESOURCE_ENUM;
    _ = PCLUSAPI_CLUSTER_RESOURCE_CLOSE_ENUM;
    _ = PCLUSAPI_CREATE_CLUSTER_RESOURCE_TYPE;
    _ = PCLUSAPI_DELETE_CLUSTER_RESOURCE_TYPE;
    _ = PCLUSAPI_CLUSTER_RESOURCE_TYPE_OPEN_ENUM;
    _ = PCLUSAPI_CLUSTER_RESOURCE_TYPE_GET_ENUM_COUNT;
    _ = PCLUSAPI_CLUSTER_RESOURCE_TYPE_ENUM;
    _ = PCLUSAPI_CLUSTER_RESOURCE_TYPE_CLOSE_ENUM;
    _ = PCLUSAPI_OPEN_CLUSTER_NETWORK;
    _ = PCLUSAPI_OPEN_CLUSTER_NETWORK_EX;
    _ = PCLUSAPI_CLOSE_CLUSTER_NETWORK;
    _ = PCLUSAPI_GET_CLUSTER_FROM_NETWORK;
    _ = PCLUSAPI_CLUSTER_NETWORK_OPEN_ENUM;
    _ = PCLUSAPI_CLUSTER_NETWORK_GET_ENUM_COUNT;
    _ = PCLUSAPI_CLUSTER_NETWORK_ENUM;
    _ = PCLUSAPI_CLUSTER_NETWORK_CLOSE_ENUM;
    _ = PCLUSAPI_GET_CLUSTER_NETWORK_STATE;
    _ = PCLUSAPI_SET_CLUSTER_NETWORK_NAME;
    _ = PCLUSAPI_GET_CLUSTER_NETWORK_ID;
    _ = PCLUSAPI_CLUSTER_NETWORK_CONTROL;
    _ = PCLUSAPI_OPEN_CLUSTER_NET_INTERFACE;
    _ = PCLUSAPI_OPEN_CLUSTER_NETINTERFACE_EX;
    _ = PCLUSAPI_GET_CLUSTER_NET_INTERFACE;
    _ = PCLUSAPI_CLOSE_CLUSTER_NET_INTERFACE;
    _ = PCLUSAPI_GET_CLUSTER_FROM_NET_INTERFACE;
    _ = PCLUSAPI_GET_CLUSTER_NET_INTERFACE_STATE;
    _ = PCLUSAPI_CLUSTER_NET_INTERFACE_CONTROL;
    _ = PCLUSAPI_GET_CLUSTER_KEY;
    _ = PCLUSAPI_GET_CLUSTER_GROUP_KEY;
    _ = PCLUSAPI_GET_CLUSTER_RESOURCE_KEY;
    _ = PCLUSAPI_GET_CLUSTER_NODE_KEY;
    _ = PCLUSAPI_GET_CLUSTER_NETWORK_KEY;
    _ = PCLUSAPI_GET_CLUSTER_NET_INTERFACE_KEY;
    _ = PCLUSAPI_CLUSTER_REG_CREATE_KEY;
    _ = PCLUSAPI_CLUSTER_REG_OPEN_KEY;
    _ = PCLUSAPI_CLUSTER_REG_DELETE_KEY;
    _ = PCLUSAPI_CLUSTER_REG_CLOSE_KEY;
    _ = PCLUSAPI_CLUSTER_REG_ENUM_KEY;
    _ = PCLUSAPI_CLUSTER_REG_SET_VALUE;
    _ = PCLUSAPI_CLUSTER_REG_DELETE_VALUE;
    _ = PCLUSAPI_CLUSTER_REG_QUERY_VALUE;
    _ = PCLUSAPI_CLUSTER_REG_ENUM_VALUE;
    _ = PCLUSAPI_CLUSTER_REG_QUERY_INFO_KEY;
    _ = PCLUSAPI_CLUSTER_REG_GET_KEY_SECURITY;
    _ = PCLUSAPI_CLUSTER_REG_SET_KEY_SECURITY;
    _ = PCLUSAPI_CLUSTER_REG_SYNC_DATABASE;
    _ = PCLUSAPI_CLUSTER_REG_CREATE_BATCH;
    _ = PCLUSTER_REG_BATCH_ADD_COMMAND;
    _ = PCLUSTER_REG_CLOSE_BATCH;
    _ = PCLUSTER_REG_BATCH_READ_COMMAND;
    _ = PCLUSTER_REG_BATCH_CLOSE_NOTIFICATION;
    _ = PCLUSTER_REG_CREATE_BATCH_NOTIFY_PORT;
    _ = PCLUSTER_REG_CLOSE_BATCH_NOTIFY_PORT;
    _ = PCLUSTER_REG_GET_BATCH_NOTIFICATION;
    _ = PCLUSTER_REG_CREATE_READ_BATCH;
    _ = PCLUSTER_REG_READ_BATCH_ADD_COMMAND;
    _ = PCLUSTER_REG_CLOSE_READ_BATCH;
    _ = PCLUSTER_REG_CLOSE_READ_BATCH_EX;
    _ = PCLUSTER_REG_READ_BATCH_REPLY_NEXT_COMMAND;
    _ = PCLUSTER_REG_CLOSE_READ_BATCH_REPLY;
    _ = PCLUSTER_SET_ACCOUNT_ACCESS;
    _ = PCLUSTER_SETUP_PROGRESS_CALLBACK;
    _ = PCLUSAPI_CREATE_CLUSTER;
    _ = PCLUSAPI_CREATE_CLUSTER_CNOLESS;
    _ = PCLUSAPI_CREATE_CLUSTER_NAME_ACCOUNT;
    _ = PCLUSAPI_REMOVE_CLUSTER_NAME_ACCOUNT;
    _ = PCLUSAPI_ADD_CLUSTER_NODE;
    _ = PCLUSAPI_DESTROY_CLUSTER;
    _ = PSET_RESOURCE_STATUS_ROUTINE_EX;
    _ = PSET_RESOURCE_STATUS_ROUTINE;
    _ = PQUORUM_RESOURCE_LOST;
    _ = PLOG_EVENT_ROUTINE;
    _ = POPEN_ROUTINE;
    _ = PCLOSE_ROUTINE;
    _ = PONLINE_ROUTINE;
    _ = POFFLINE_ROUTINE;
    _ = PTERMINATE_ROUTINE;
    _ = PIS_ALIVE_ROUTINE;
    _ = PLOOKS_ALIVE_ROUTINE;
    _ = PARBITRATE_ROUTINE;
    _ = PRELEASE_ROUTINE;
    _ = PRESOURCE_CONTROL_ROUTINE;
    _ = PRESOURCE_TYPE_CONTROL_ROUTINE;
    _ = POPEN_V2_ROUTINE;
    _ = PONLINE_V2_ROUTINE;
    _ = POFFLINE_V2_ROUTINE;
    _ = PCANCEL_ROUTINE;
    _ = PBEGIN_RESCALL_ROUTINE;
    _ = PBEGIN_RESTYPECALL_ROUTINE;
    _ = PBEGIN_RESCALL_AS_USER_ROUTINE;
    _ = PBEGIN_RESTYPECALL_AS_USER_ROUTINE;
    _ = PSTARTUP_ROUTINE;
    _ = PSET_RESOURCE_LOCKED_MODE_ROUTINE;
    _ = PSIGNAL_FAILURE_ROUTINE;
    _ = PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE;
    _ = PEND_CONTROL_CALL;
    _ = PEND_TYPE_CONTROL_CALL;
    _ = PEXTEND_RES_CONTROL_CALL;
    _ = PEXTEND_RES_TYPE_CONTROL_CALL;
    _ = PRAISE_RES_TYPE_NOTIFICATION;
    _ = PCHANGE_RESOURCE_PROCESS_FOR_DUMPS;
    _ = PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS;
    _ = PSET_INTERNAL_STATE;
    _ = PSET_RESOURCE_LOCKED_MODE_EX_ROUTINE;
    _ = PSTARTUP_EX_ROUTINE;
    _ = PRESUTIL_START_RESOURCE_SERVICE;
    _ = PRESUTIL_VERIFY_RESOURCE_SERVICE;
    _ = PRESUTIL_STOP_RESOURCE_SERVICE;
    _ = PRESUTIL_VERIFY_SERVICE;
    _ = PRESUTIL_STOP_SERVICE;
    _ = PRESUTIL_CREATE_DIRECTORY_TREE;
    _ = PRESUTIL_IS_PATH_VALID;
    _ = PRESUTIL_ENUM_PROPERTIES;
    _ = PRESUTIL_ENUM_PRIVATE_PROPERTIES;
    _ = PRESUTIL_GET_PROPERTIES;
    _ = PRESUTIL_GET_ALL_PROPERTIES;
    _ = PRESUTIL_GET_PRIVATE_PROPERTIES;
    _ = PRESUTIL_GET_PROPERTY_SIZE;
    _ = PRESUTIL_GET_PROPERTY;
    _ = PRESUTIL_VERIFY_PROPERTY_TABLE;
    _ = PRESUTIL_SET_PROPERTY_TABLE;
    _ = PRESUTIL_SET_PROPERTY_TABLE_EX;
    _ = PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK;
    _ = PRESUTIL_SET_PROPERTY_PARAMETER_BLOCK_EX;
    _ = PRESUTIL_SET_UNKNOWN_PROPERTIES;
    _ = PRESUTIL_GET_PROPERTIES_TO_PARAMETER_BLOCK;
    _ = PRESUTIL_PROPERTY_LIST_FROM_PARAMETER_BLOCK;
    _ = PRESUTIL_DUP_PARAMETER_BLOCK;
    _ = PRESUTIL_FREE_PARAMETER_BLOCK;
    _ = PRESUTIL_ADD_UNKNOWN_PROPERTIES;
    _ = PRESUTIL_SET_PRIVATE_PROPERTY_LIST;
    _ = PRESUTIL_VERIFY_PRIVATE_PROPERTY_LIST;
    _ = PRESUTIL_DUP_STRING;
    _ = PRESUTIL_GET_BINARY_VALUE;
    _ = PRESUTIL_GET_SZ_VALUE;
    _ = PRESUTIL_GET_EXPAND_SZ_VALUE;
    _ = PRESUTIL_GET_DWORD_VALUE;
    _ = PRESUTIL_GET_QWORD_VALUE;
    _ = PRESUTIL_SET_BINARY_VALUE;
    _ = PRESUTIL_SET_SZ_VALUE;
    _ = PRESUTIL_SET_EXPAND_SZ_VALUE;
    _ = PRESUTIL_SET_MULTI_SZ_VALUE;
    _ = PRESUTIL_SET_DWORD_VALUE;
    _ = PRESUTIL_SET_QWORD_VALUE;
    _ = PRESUTIL_GET_BINARY_PROPERTY;
    _ = PRESUTIL_GET_SZ_PROPERTY;
    _ = PRESUTIL_GET_MULTI_SZ_PROPERTY;
    _ = PRESUTIL_GET_DWORD_PROPERTY;
    _ = PRESUTIL_GET_LONG_PROPERTY;
    _ = PRESUTIL_GET_FILETIME_PROPERTY;
    _ = PRESUTIL_GET_ENVIRONMENT_WITH_NET_NAME;
    _ = PRESUTIL_FREE_ENVIRONMENT;
    _ = PRESUTIL_EXPAND_ENVIRONMENT_STRINGS;
    _ = PRESUTIL_SET_RESOURCE_SERVICE_ENVIRONMENT;
    _ = PRESUTIL_REMOVE_RESOURCE_SERVICE_ENVIRONMENT;
    _ = PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS;
    _ = PRESUTIL_FIND_SZ_PROPERTY;
    _ = PRESUTIL_FIND_EXPAND_SZ_PROPERTY;
    _ = PRESUTIL_FIND_EXPANDED_SZ_PROPERTY;
    _ = PRESUTIL_FIND_DWORD_PROPERTY;
    _ = PRESUTIL_FIND_BINARY_PROPERTY;
    _ = PRESUTIL_FIND_MULTI_SZ_PROPERTY;
    _ = PRESUTIL_FIND_LONG_PROPERTY;
    _ = PRESUTIL_FIND_ULARGEINTEGER_PROPERTY;
    _ = PRESUTIL_FIND_FILETIME_PROPERTY;
    _ = PWORKER_START_ROUTINE;
    _ = PCLUSAPI_CLUS_WORKER_CREATE;
    _ = PCLUSAPIClusWorkerCheckTerminate;
    _ = PCLUSAPI_CLUS_WORKER_TERMINATE;
    _ = LPRESOURCE_CALLBACK;
    _ = LPRESOURCE_CALLBACK_EX;
    _ = LPGROUP_CALLBACK_EX;
    _ = LPNODE_CALLBACK;
    _ = PRESUTIL_RESOURCES_EQUAL;
    _ = PRESUTIL_RESOURCE_TYPES_EQUAL;
    _ = PRESUTIL_IS_RESOURCE_CLASS_EQUAL;
    _ = PRESUTIL_ENUM_RESOURCES;
    _ = PRESUTIL_ENUM_RESOURCES_EX;
    _ = PRESUTIL_GET_RESOURCE_DEPENDENCY;
    _ = PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME;
    _ = PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS;
    _ = PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY;
    _ = PRESUTIL_GET_RESOURCE_DEPENDENTIP_ADDRESS_PROPS;
    _ = PRESUTIL_FIND_DEPENDENT_DISK_RESOURCE_DRIVE_LETTER;
    _ = PRESUTIL_TERMINATE_SERVICE_PROCESS_FROM_RES_DLL;
    _ = PRESUTIL_GET_PROPERTY_FORMATS;
    _ = PRESUTIL_GET_CORE_CLUSTER_RESOURCES;
    _ = PRESUTIL_GET_RESOURCE_NAME;
    _ = PCLUSTER_IS_PATH_ON_SHARED_VOLUME;
    _ = PCLUSTER_GET_VOLUME_PATH_NAME;
    _ = PCLUSTER_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT;
    _ = PCLUSTER_PREPARE_SHARED_VOLUME_FOR_BACKUP;
    _ = PCLUSTER_CLEAR_BACKUP_STATE_FOR_SHARED_VOLUME;
    _ = PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS_EX;
    _ = PRESUTIL_ENUM_RESOURCES_EX2;
    _ = PRESUTIL_GET_RESOURCE_DEPENDENCY_EX;
    _ = PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME_EX;
    _ = PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS_EX;
    _ = PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY_EX;
    _ = PRESUTIL_GET_CORE_CLUSTER_RESOURCES_EX;
    _ = POPEN_CLUSTER_CRYPT_PROVIDER;
    _ = POPEN_CLUSTER_CRYPT_PROVIDEREX;
    _ = PCLOSE_CLUSTER_CRYPT_PROVIDER;
    _ = PCLUSTER_ENCRYPT;
    _ = PCLUSTER_DECRYPT;
    _ = PFREE_CLUSTER_CRYPT;
    _ = PREGISTER_APPINSTANCE;
    _ = PREGISTER_APPINSTANCE_VERSION;
    _ = PQUERY_APPINSTANCE_VERSION;
    _ = PRESET_ALL_APPINSTANCE_VERSIONS;
    _ = SET_APP_INSTANCE_CSV_FLAGS;

    const constant_export_count = 0;
    const type_export_count = 644;
    const enum_value_export_count = 1123;
    const com_iface_id_export_count = 57;
    const com_class_id_export_count = 40;
    const func_export_count = 349;
    const unicode_alias_count = 0;
    const import_count = 19;
    @setEvalBranchQuota(
        constant_export_count +
        type_export_count +
        enum_value_export_count +
        com_iface_id_export_count * 2 + // * 2 for value and ptr
        com_class_id_export_count * 2 + // * 2 for value and ptr
        func_export_count +
        unicode_alias_count +
        import_count +
        2 // TODO: why do I need these extra 2?
    );
    @import("std").testing.refAllDecls(@This());
}
